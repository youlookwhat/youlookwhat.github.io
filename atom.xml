<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JingBin&#39;s Home</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jingbin.me/"/>
  <updated>2019-04-10T14:52:05.429Z</updated>
  <id>http://jingbin.me/</id>
  
  <author>
    <name>JingBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为 GitHub 项目生成独立主页</title>
    <link href="http://jingbin.me/2019/04/09/github-pages-readme/"/>
    <id>http://jingbin.me/2019/04/09/github-pages-readme/</id>
    <published>2019-04-09T10:00:00.000Z</published>
    <updated>2019-04-10T14:52:05.429Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1354448-b66068bcf588c88a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<h4 id="生成主页"><a href="#生成主页" class="headerlink" title="生成主页"></a>生成主页</h4><p>步骤：</p>
<ol>
<li><p>进入项目的设置页 <code>Settings</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-acb452ee6cf3f1a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Settings.png"></p>
</li>
<li><p>选择 <code>GitHub Pages</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-5941f6d80b024d10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub Pages.png"></p>
</li>
</ol>
<ol>
<li><p>选择主题 <code>Change theme</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-d378ddf6260eaea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Change theme.png"></p>
</li>
<li><p>确定选择<br><img src="https://upload-images.jianshu.io/upload_images/1354448-efbcee3c18c2c798.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Select.png"></p>
</li>
</ol>
<p>效果页面：<a href="https://jingbin.me/CloudReader">https://jingbin.me/CloudReader</a></p>
<h4 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h4><ol>
<li>图片显示不出来？<br>使用<code>&lt;img /&gt;</code>标签失效，必须使用正规的引入图片的方式：<code>![]()</code><br>图片尺寸太大？ - 图片处理网站：<a href="https://www.fotor.com/create/design" target="_blank" rel="external">https://www.fotor.com/create/design</a></li>
</ol>
<ol>
<li>图片链接失效？<br>注意使用正确的图片链接，之前使用的是：<br><code>https://github.com/youlookwhat/CloudReader/blob/master/file/images.png</code><br>发现这个链接是有问题的，点击<code>download</code>进去，正确的链接应该是：<br><code>https://raw.githubusercontent.com/youlookwhat/CloudReader/master/file/images.png</code></li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://www.jianshu.com/p/1b37016d8db6" target="_blank" rel="external">https://www.jianshu.com/p/1b37016d8db6</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-b66068bcf588c88a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开源项目" scheme="http://jingbin.me/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="开源项目" scheme="http://jingbin.me/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="github" scheme="http://jingbin.me/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 框架实战</title>
    <link href="http://jingbin.me/2019/04/03/mybatis-practice/"/>
    <id>http://jingbin.me/2019/04/03/mybatis-practice/</id>
    <published>2019-04-03T10:39:00.000Z</published>
    <updated>2019-04-10T14:49:09.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们容易忽视慢变量，但慢变量才是牵引历史进程的火车头。 - 何帆/变量</p>
</blockquote>
<a id="more"></a>
<ul>
<li>Mybatis 持久层：简化工作量、灵活</li>
<li>Spring 粘合剂：整合框架 AOP IOC DI</li>
<li>SpringMvc 表现层：方便前后端数据的传输</li>
</ul>
<p>Mybatis:</p>
<ul>
<li>1.是对jdbc的封装，</li>
<li>2.将sql语句放在映射文件中(xml)，</li>
<li>3.自动将输入参数映射到sql语句的动态参数上，</li>
<li>4.自动将sql语句执行的结果映射成java对象</li>
</ul>
<p>入门示例：</p>
<h3 id="1-创建项目mubatis-01"><a href="#1-创建项目mubatis-01" class="headerlink" title="1.创建项目mubatis-01"></a>1.创建项目mubatis-01</h3><h3 id="2-导入jar"><a href="#2-导入jar" class="headerlink" title="2.导入jar:"></a>2.导入jar:</h3><ul>
<li>mybatis-3.2.8</li>
<li>mysql-connect</li>
<li>log4j-1.2.17</li>
</ul>
<h3 id="3-加入配置文件"><a href="#3-加入配置文件" class="headerlink" title="3.加入配置文件"></a>3.加入配置文件</h3><p>(1)db.properties</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</div><div class="line">jdbc.url = jdbc:mysql:<span class="comment">//localhost:3306/mysql_0219</span></div><div class="line">jdbc.username = root</div><div class="line">jdbc.password = <span class="number">123456</span></div></pre></td></tr></table></figure>
<p>(2)log4j.properties<br><a href="https://blog.csdn.net/sinat_30185177/article/details/73550377" target="_blank" rel="external">https://blog.csdn.net/sinat_30185177/article/details/73550377</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=DEBUG,A1</div><div class="line">log4j.logger.org.mybatis=DEBUG</div><div class="line">...</div></pre></td></tr></table></figure>
<p>(3) mybatis核心配置文件：mybatis-config.xml</p>
<p>(4) BlogMapper.xml</p>
<p>包:com.jingbin.mybatis.mapper</p>
<h3 id="4-编写接口：BlogMapper"><a href="#4-编写接口：BlogMapper" class="headerlink" title="4.编写接口：BlogMapper"></a>4.编写接口：BlogMapper</h3><h3 id="5-创建pojo：Blog"><a href="#5-创建pojo：Blog" class="headerlink" title="5.创建pojo：Blog"></a>5.创建pojo：Blog</h3><h3 id="6-创建工具类：MyBatisUtil"><a href="#6-创建工具类：MyBatisUtil" class="headerlink" title="6.创建工具类：MyBatisUtil"></a>6.创建工具类：MyBatisUtil</h3><h3 id="7-编写测试类："><a href="#7-编写测试类：" class="headerlink" title="7.编写测试类："></a>7.编写测试类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">testSelectBlog</div><div class="line">发现要连接数据库，学习mysql内容</div><div class="line">学习配置好了后：运行报错：Invalid bound statement (not found): mapper.BlogMapper.selectBlog</div><div class="line">解决：https://www.cnblogs.com/cailijuan/p/9505244.html</div><div class="line">1)使用创建接口的方式</div><div class="line">2)不是用接口的方式</div></pre></td></tr></table></figure>
<h3 id="8-列名和属性名不一致的情况"><a href="#8-列名和属性名不一致的情况" class="headerlink" title="8.列名和属性名不一致的情况"></a>8.列名和属性名不一致的情况</h3><p>数据库里的列名为author_id,属性名为authorId。在BlogMapper.xml里：</p>
<p>1.使用别名</p>
<p><code>select author_id as authorId from Blog where id=#{id}</code></p>
<p>2.使用 resultMap</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Blog" id="blogResultMap"&gt;</div><div class="line">		&lt;id column="id" property="id" jdbcType="INTEGER"/&gt;</div><div class="line">      &lt;result column="author_id" property="authorId" jdbcType="INTEGER"/&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line">&lt;select id="selectBlog" parameterType="Integer" resultMap="blogResultMap"&gt;</div><div class="line">       select * from blog where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h3 id="9-模糊查询之-和-的区别"><a href="#9-模糊查询之-和-的区别" class="headerlink" title="9.模糊查询之#和$的区别"></a>9.模糊查询之<code>#</code>和<code>$</code>的区别</h3><p>模糊查询：根据博客名字查询博客列表</p>
<p>1)使用<code>#</code>传参<br>2)使用<code>$</code>传参</p>
<p><code>#</code>是占位符？，<code>$</code>是字符串拼接。</p>
<p>mybatis定义：</p>
<ul>
<li>使用<code>$</code>。如果参数是单指类型(简单类型)，并且只有一个参数，则花括号里只能写value占位。</li>
<li>使用<code>$</code>可以直接将<code>%</code>写里面，可能有sql注入的风险，建议最好使用<code>#</code>。参数是字符串要使用 ‘’</li>
<li>当参数表示表名或列名的时候，只能使用<code>$</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 使用 $ 不区分大小写的查询 lower--&gt;</div><div class="line">    &lt;select id=<span class="string">"selectBlogByTitle2"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"Blog"</span>&gt;</div><div class="line">            select * <span class="function">from blog where <span class="title">lower</span><span class="params">(title)</span> like <span class="title">lower</span><span class="params">(<span class="string">'%$&#123;value&#125;%'</span>)</span></span></div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<h3 id="10-查询排序"><a href="#10-查询排序" class="headerlink" title="10.查询排序"></a>10.查询排序</h3><p>需求：按照某一列排序</p>
<p>select * from blog order by CONVERT(${value} USING gbk)</p>
<p>gbk:输入中文时排序成功，否则会失败。且使用gbk规避魅族(gb2313)不排序问题。</p>
<h3 id="11-分页-多参数传递"><a href="#11-分页-多参数传递" class="headerlink" title="11.分页-多参数传递"></a>11.分页-多参数传递</h3><p>需求：查询分页数据</p>
<ul>
<li>1）使用索引</li>
</ul>
<p>按照参数的顺序，从0开始</p>
<p>select * from blog limit #{0}, #{1}</p>
<ul>
<li>2）使用注解</li>
</ul>
<p>注解的value值要和mapper的占位参数一致。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select * from blog limit #&#123;offset&#125;, #&#123;pageSize&#125;</div><div class="line">List&lt;Blog&gt; selectBlogByPage2(@Param(value = "offset") int offset, @Param(value = "pageSize") int pageSize);</div></pre></td></tr></table></figure>
<ul>
<li>3）使用map(常用)</li>
</ul>
<p>注意：mapper中的参数占位符要和测试中的map的key一一对应</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">select * from blog limit #&#123;offset&#125;, #&#123;pageSize&#125;</div><div class="line">// 测试</div><div class="line">SqlSession session = MyBatisUtil.getSqlSession();</div><div class="line">BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class="line">Map&lt;String, Object&gt; objectMap = new HashMap&lt;&gt;();</div><div class="line">objectMap.put("offset", 0);</div><div class="line">objectMap.put("pageSize", 2);</div><div class="line">List&lt;Blog&gt; blogList = blogMapper.selectBlogByPage3(objectMap);</div></pre></td></tr></table></figure>
<h3 id="12-插入功能和获取刚刚插入的id"><a href="#12-插入功能和获取刚刚插入的id" class="headerlink" title="12.插入功能和获取刚刚插入的id"></a>12.插入功能和获取刚刚插入的id</h3><ul>
<li>1)插入记录</li>
</ul>
<p>需求：新增一个博客记录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;insert id="insertBlog" parameterType="Blog"&gt;</div><div class="line">        insert into `blog`(</div><div class="line">          `name`,</div><div class="line">          `age`,</div><div class="line">          `title`,</div><div class="line">          `author_id`,</div><div class="line">          `featured`</div><div class="line">        ) values (</div><div class="line">          #&#123;name&#125;,</div><div class="line">          #&#123;age&#125;,</div><div class="line">          #&#123;title&#125;,</div><div class="line">          #&#123;author_id&#125;,</div><div class="line">          #&#123;featured&#125;</div><div class="line">        )</div><div class="line">    &lt;/insert&gt;</div><div class="line">    </div><div class="line">// 提交</div><div class="line">session.commit();</div></pre></td></tr></table></figure>
<ul>
<li>2）获取自增id<br>方式1：在mapper中配置<code>insert</code>节点的属性 <code>useGeneratedKeys</code>和<code>keyProperty</code>节点<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;insert id=<span class="string">"insertBlog"</span> parameterType=<span class="string">"Blog"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"id"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>方式2：在全局配置文件中配置setting<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--定义数据库链接配置--&gt;</div><div class="line">    &lt;properties resource="db.properties"/&gt;</div><div class="line">    </div><div class="line">&lt;!--具体的insert也得配置 keyProperty节点--&gt;</div><div class="line">    &lt;settings&gt;</div><div class="line">        &lt;setting name="useGeneratedKeys" value="true"/&gt;</div><div class="line">    &lt;/settings&gt;</div></pre></td></tr></table></figure></p>
<p>方式3：适用于没有自增主键的数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;insert id="insertBlogOracle" parameterType="Blog"&gt;</div><div class="line">        &lt;selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="id"&gt;</div><div class="line">            select seq.nextval as id from dual</div><div class="line">        &lt;/selectKey&gt;</div><div class="line">        insert into `blog`(</div><div class="line">          `name`,</div><div class="line">          `age`,</div><div class="line">          `title`,</div><div class="line">          `author_id`,</div><div class="line">          `featured`</div><div class="line">        ) values (</div><div class="line">          #&#123;name&#125;,</div><div class="line">          #&#123;age&#125;,</div><div class="line">          #&#123;title&#125;,</div><div class="line">          #&#123;author_id&#125;,</div><div class="line">          #&#123;featured&#125;</div><div class="line">        )</div><div class="line">    &lt;/insert&gt;</div><div class="line"></div><div class="line">    &lt;insert id="insertBlogMysql" parameterType="Blog"&gt;</div><div class="line">        &lt;selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id"&gt;</div><div class="line">            SELECT LAST_INSERT_ID()</div><div class="line">        &lt;/selectKey&gt;</div><div class="line"></div><div class="line">        insert into `blog`(</div><div class="line">        `name`,</div><div class="line">        `age`,</div><div class="line">        `title`,</div><div class="line">        `author_id`,</div><div class="line">        `featured`</div><div class="line">        ) values (</div><div class="line">        #&#123;name&#125;,</div><div class="line">        #&#123;age&#125;,</div><div class="line">        #&#123;title&#125;,</div><div class="line">        #&#123;author_id&#125;,</div><div class="line">        #&#123;featured&#125;</div><div class="line">        )</div><div class="line">    &lt;/insert&gt;</div></pre></td></tr></table></figure>
<h3 id="13-修改功能和修改部分字段注意的问题"><a href="#13-修改功能和修改部分字段注意的问题" class="headerlink" title="13.修改功能和修改部分字段注意的问题"></a>13.修改功能和修改部分字段注意的问题</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;update id="updateBlog" parameterType="Blog"&gt;</div><div class="line">        update `blog`</div><div class="line">        set</div><div class="line">        `name` = #&#123;name&#125;,</div><div class="line">        `age` = #&#123;age&#125;,</div><div class="line">        `title` = #&#123;title&#125;,</div><div class="line">        `author_id` = #&#123;author_id&#125;,</div><div class="line">        `featured` = #&#123;featured&#125;</div><div class="line">        where</div><div class="line">        `id` = #&#123;id&#125;</div><div class="line">    &lt;/update&gt;</div></pre></td></tr></table></figure>
<p>注意：如果没有为对象设置所有的要修改的属性，那么未设置的属性会用成员变量的默认值填充。<br>解决：<br>方式1：数据库查一遍，再返回的数据修改。缺点：又执行了一遍数据库操作<br>方式2：查询语句里增加if else。</p>
<h3 id="14-删除记录"><a href="#14-删除记录" class="headerlink" title="14.删除记录"></a>14.删除记录</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;delete id="deleteBlogById"&gt;</div><div class="line">  delete from blog where id=#&#123;id&#125;</div><div class="line">&lt;/delete&gt;</div></pre></td></tr></table></figure>
<p>动态sql<br>批量删除：使用动态sql实现<br>if、[choose、when、otherwise]、where、set、trim、foreach、sql片段</p>
<h3 id="15-if"><a href="#15-if" class="headerlink" title="15.if"></a>15.if</h3><p>需求：</p>
<ul>
<li>1.查询已激活的并且博客的名字是包含某个查询字符串的记录</li>
<li>2.如果用户没有输入任何查询字符串，那么就显示所有已激活的记录</li>
</ul>
<p>// 如果用户输入了查询字符串<br>select * from blog<br>where state = ‘ACTIVE’<br>and title like  ‘%o%’</p>
<p>// 用户没有输入查询字符串<br>select * from blog<br>where state = ‘ACTIVE’</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select * from blog</div><div class="line">where state = 'ACTIVE' </div><div class="line">&lt;if test="value != null and value!=''"&gt;</div><div class="line">   and title like value[%%] 具体见代码</div><div class="line">&lt;/if&gt;</div></pre></td></tr></table></figure>
<h3 id="16-choose、when、otherwise"><a href="#16-choose、when、otherwise" class="headerlink" title="16.choose、when、otherwise"></a>16.choose、when、otherwise</h3><p>需求：</p>
<ul>
<li>1、查询已激活的</li>
<li>2、如果用户输入了标题的查询关键字，则根据关键字查询</li>
<li>3、否则根据blog风格样式查询</li>
<li>4、如果什么都没有输入，则显示推荐的博客</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;select id="selectActiveBlogByTitleOrStyle" parameterType="Blog" resultType="Blog"&gt;</div><div class="line">    select * from blog</div><div class="line">    where state = 'ACTIVE'</div><div class="line">    &lt;choose&gt;</div><div class="line">        &lt;when test="title != null and title!=''"&gt;and lower(title) like lower(#&#123;title&#125;)&lt;/when&gt;</div><div class="line">        &lt;when test="style != null and style!=''"&gt;and style = #&#123;style&#125;&lt;/when&gt;</div><div class="line">        &lt;otherwise&gt; and featured = true&lt;/otherwise&gt;</div><div class="line">    &lt;/choose&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h3 id="17-where"><a href="#17-where" class="headerlink" title="17.where"></a>17.where</h3><p>需求：多条件查询，根据状态，标题，是否被推荐<br>自动修补查询条件，查询语句中的where关键字使用<where>标签替代，不能省略 and or 关键字</where></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;select id="selectBlogByCondition" parameterType="Blog" resultType="Blog"&gt;</div><div class="line">    select * from blog</div><div class="line">    &lt;where&gt;</div><div class="line">        &lt;if test="state != null and state!=''"&gt;</div><div class="line">            state = #&#123;state&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test="title != null and title!=''"&gt;</div><div class="line">            and lower(title) like lower(#&#123;title&#125;)</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test="featured != null"&gt;</div><div class="line">            and featured = #&#123;featured&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">    &lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h3 id="18-set"><a href="#18-set" class="headerlink" title="18.set"></a>18.set</h3><p>需求：按需修改，修改执行的列，未指定的不修改<br>set 会自动去掉if语句后面的逗号</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;update id="updateBlogByCondition" parameterType="Blog"&gt;</div><div class="line">    update `blog`</div><div class="line">    &lt;set&gt;</div><div class="line">        &lt;if test="name != null"&gt;`name` = #&#123;name&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="age != null"&gt;`age` = #&#123;age&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="title != null"&gt;`title` = #&#123;title&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="author_id != null"&gt;`author_id` = #&#123;author_id&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="featured != null"&gt;`featured` = #&#123;featured&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="state != null"&gt;`state` = #&#123;state&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="style != null"&gt;`style` = #&#123;state&#125;,&lt;/if&gt;</div><div class="line">    &lt;/set&gt;</div><div class="line">    where `id` = #&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure>
<h3 id="19-trim"><a href="#19-trim" class="headerlink" title="19.trim"></a>19.trim</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;select id="selectBlogByConditionTrim" parameterType="Blog" resultType="Blog"&gt;</div><div class="line">    select * from blog</div><div class="line">    -- prefixOverrides 去掉前面的 and 或 or</div><div class="line">    &lt;trim prefix="where" prefixOverrides="and | or"&gt;</div><div class="line">        &lt;if test="state != null and state!=''"&gt;</div><div class="line">            state = #&#123;state&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test="title != null and title!=''"&gt;</div><div class="line">            and lower(title) like lower(#&#123;title&#125;)</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test="featured != null"&gt;</div><div class="line">            and featured = #&#123;featured&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">    &lt;/trim&gt;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">&lt;update id="updateBlogByConditionTrim" parameterType="Blog"&gt;</div><div class="line">    update `blog`</div><div class="line">    -- suffixOverrides 去掉后面的 ,</div><div class="line">    &lt;trim prefix="set" suffixOverrides=","&gt;</div><div class="line">        &lt;if test="name != null"&gt;`name` = #&#123;name&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="age != null"&gt;`age` = #&#123;age&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="title != null"&gt;`title` = #&#123;title&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="author_id != null"&gt;`author_id` = #&#123;author_id&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="featured != null"&gt;`featured` = #&#123;featured&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="state != null"&gt;`state` = #&#123;state&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="style != null"&gt;`style` = #&#123;state&#125;,&lt;/if&gt;</div><div class="line">    &lt;/trim&gt;</div><div class="line">    where `id` = #&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure>
<h3 id="20-foreach"><a href="#20-foreach" class="headerlink" title="20.foreach"></a>20.foreach</h3><p>需求：批量删除</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> &lt;!-- parameterType 与 collection 一致--&gt;</div><div class="line">&lt;delete id="deleteBlogList" parameterType="list"&gt;</div><div class="line">    delete from blog where id in</div><div class="line">    &lt;foreach collection="list" item="item" open="(" close=")" separator=","&gt;</div><div class="line">        #&#123;item&#125;</div><div class="line">    &lt;/foreach&gt;</div><div class="line">&lt;/delete&gt;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testDeleteBlogList() &#123;</div><div class="line">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class="line">    List&lt;Integer&gt; asList = Arrays.asList(1, 2);</div><div class="line">    int count = blogMapper.deleteBlogList(asList);</div><div class="line">    // 提交</div><div class="line">    session.commit();</div><div class="line">    session.close();</div><div class="line">    System.out.println("更新了" + count + "条记录");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="21-sql片段"><a href="#21-sql片段" class="headerlink" title="21.sql片段"></a>21.sql片段</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!--sql片段--&gt;</div><div class="line">&lt;sql id="columnBase"&gt;</div><div class="line">      `id`,</div><div class="line">      `name`,</div><div class="line">      `age`,</div><div class="line">      `title`,</div><div class="line">      `author_id`,</div><div class="line">      `featured`,</div><div class="line">      `state`,</div><div class="line">      `style`</div><div class="line">&lt;/sql&gt;</div><div class="line"></div><div class="line">&lt;!--通过id查询博客--&gt;</div><div class="line">&lt;select id="selectBlog" parameterType="Integer" resultType="Blog"&gt;</div><div class="line">    select</div><div class="line">    &lt;include refid="columnBase"/&gt;</div><div class="line">    from blog where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h3 id="22-23-逆向功工程-代码的生成"><a href="#22-23-逆向功工程-代码的生成" class="headerlink" title="22 23.逆向功工程-代码的生成"></a>22 23.逆向功工程-代码的生成</h3><p>使用 Mybatis 官方工具直接生成对应的mapper文件<br>全部生成 - 无实际意义，具体项目中不适用</p>
<h3 id="24-缓存-mybatis的一级缓存"><a href="#24-缓存-mybatis的一级缓存" class="headerlink" title="24.缓存 - mybatis的一级缓存"></a>24.缓存 - mybatis的一级缓存</h3><p>一级缓存：<br>是session级别的缓存，一级缓存默认存在。<br>当在同一个session范围内执行查询的时候，如果执行相同的查询，那么第二次查询会从缓存中获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的一级缓存</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheOne1</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class="line"></div><div class="line">    Blog blog1 = blogMapper.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    Blog blog2 = blogMapper.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询：从缓存中获取数据"</span> + blog2);</div><div class="line"></div><div class="line">    session.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="25-缓存-一级缓存被刷新的情况"><a href="#25-缓存-一级缓存被刷新的情况" class="headerlink" title="25.缓存 - 一级缓存被刷新的情况"></a>25.缓存 - 一级缓存被刷新的情况</h3><p>如果两次查询中间有增删改操作，sql session缓存区会被自动清空，说明下一次查询会重新执行sql语句。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的一级缓存,中间有增删改会刷新</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheOne2</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class="line"></div><div class="line">    Blog blog1 = blogMapper.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    blog1.setFeatured(<span class="keyword">true</span>);</div><div class="line">    blogMapper.updateBlog(blog1);</div><div class="line"></div><div class="line">    Blog blog2 = blogMapper.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询：从新执行查询"</span> + blog2);</div><div class="line"></div><div class="line">    session.commit();</div><div class="line">    session.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="26-缓存-开启二级缓存"><a href="#26-缓存-开启二级缓存" class="headerlink" title="26.缓存 - 开启二级缓存"></a>26.缓存 - 开启二级缓存</h3><p><strong>默认不开启</strong>。如果在不同的session范围内执行相同的数据查询，那么每次查询将会执行独立的数据库检索过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的二级缓存</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheLevelTwo1</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog1 = blogMapper1.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class="line">    Blog blog2 = blogMapper2.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询：从缓存中获取数据"</span> + blog2);</div><div class="line">    session2.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>开启二级缓存<br>1.在mapper文件中设置  <cache><br>2.在实体类中实现序列化接口</cache></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的二级缓存</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheLevelTwo1</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog1 = blogMapper1.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    <span class="comment">// Cache Hit Ratio [mapper.BlogMapper]: 0.5</span></div><div class="line">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class="line">    Blog blog2 = blogMapper2.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询：从缓存中获取数据"</span> + blog2);</div><div class="line">    session2.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="27-缓存-二级缓存被刷新的情况"><a href="#27-缓存-二级缓存被刷新的情况" class="headerlink" title="27.缓存 - 二级缓存被刷新的情况"></a>27.缓存 - 二级缓存被刷新的情况</h3><p>和一级缓存相同，中间有增删改则二级缓存会被清空</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的二级缓存 缓存被刷新</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheLevelTwo2</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog1 = blogMapper1.selectBlog(<span class="number">3</span>);</div><div class="line">    blog1.setFeatured(<span class="keyword">true</span>);</div><div class="line">    blogMapper1.updateBlog(blog1);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class="line">    Blog blog2 = blogMapper2.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"缓存被刷新，重新查询"</span> + blog2);</div><div class="line">    session2.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="28-嵌套查询-一对一和多对一"><a href="#28-嵌套查询-一对一和多对一" class="headerlink" title="28.嵌套查询 - 一对一和多对一"></a>28.嵌套查询 - 一对一和多对一</h3><p>高级结果映射<br>一、关联映射(适用于一对一和多对一的情况)</p>
<p>1).创建pojo<br>(1)在Blog中创建Author对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Author author;</div></pre></td></tr></table></figure>
<p>(2)创建Author的pojo</p>
<p>2).配置mapper</p>
<p>BlogMapper.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Blog" id="blogResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"&gt;&lt;/id&gt;</div><div class="line">    &lt;association property="author" column="author_id" javaType="Author"</div><div class="line">                 select="me.jing.mapper.AuthorMapper.selectAuthorById"&gt;</div><div class="line">    &lt;/association&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line">&lt;select id="selectBlogById" parameterType="int" resultMap="blogResultMap"&gt;</div><div class="line">    select * from blog where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>AuthorMapper.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Author" id="authorResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"/&gt;</div><div class="line">    &lt;result column="favourite_section" property="favouriteSection" jdbcType="VARCHAR"/&gt;</div><div class="line"></div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line">&lt;select id="selectAuthorById" parameterType="int" resultMap="authorResultMap"&gt;</div><div class="line">  select * from author where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>3) 接口</p>
<p>(1) Blog</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Blog <span class="title">selectBlogById</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<p>(2) Author</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Author <span class="title">selectAuthorById</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<p>4) 测试</p>
<p>查询Blog列表时，执行的sql语句是 1+n，但是如果blog关联的author有重复的数据，那么从一级缓存中查询。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 通过id查具体的博客，查询时 再拿到作者id 去作者表查具体的作者信息</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogById</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line"></div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="29-嵌套查询-显示信息列表"><a href="#29-嵌套查询-显示信息列表" class="headerlink" title="29.嵌套查询 - 显示信息列表"></a>29.嵌套查询 - 显示信息列表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;select id="selectBlogList" resultMap="blogResultMap"&gt;</div><div class="line">    select * from blog</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">List&lt;Blog&gt; selectBlogList();</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testSelectBlogList() &#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    List&lt;Blog&gt; blogs = blogMapper1.selectBlogList();</div><div class="line"></div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println("结果已查询" + blogs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="30-嵌套查询-一对多的配置-31-嵌套查询-一对多的查询配置"><a href="#30-嵌套查询-一对多的配置-31-嵌套查询-一对多的查询配置" class="headerlink" title="30.嵌套查询-一对多的配置 31.嵌套查询-一对多的查询配置"></a>30.嵌套查询-一对多的配置 31.嵌套查询-一对多的查询配置</h3><p>执行流程：1.先执行单表查询，2.再利用单表查询的结果继续执行其他单表查询，3.最后组装结果映射。</p>
<p>通过post的id 查询post表的内容，同时通过此id查询评论表 comment 里的数据列表,即这篇文章的评论列表</p>
<p>sql:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">create table <span class="title">post</span><span class="params">(id <span class="keyword">int</span>,blog_id <span class="keyword">int</span>,author_id <span class="keyword">int</span>,</span></span></div><div class="line">section varchar(<span class="number">20</span>),subject <span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span>,draft <span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span>);</div><div class="line"></div><div class="line"><span class="function">insert into <span class="title">post</span><span class="params">(id,blog_id,author_id,section,subject,draft)</span> </span></div><div class="line"><span class="title">values</span><span class="params">(<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'15'</span>,<span class="string">'section'</span>,<span class="string">'subject'</span>,<span class="string">'draft'</span>)</span>;</div><div class="line"></div><div class="line"><span class="function">create table <span class="title">comment</span><span class="params">(id <span class="keyword">int</span>,</span></span></div><div class="line">name varchar(<span class="number">20</span>),comment <span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span>);</div><div class="line"></div><div class="line"><span class="function">insert into <span class="title">comment</span><span class="params">(id,name,comment,post_id)</span> </span></div><div class="line"><span class="title">values</span><span class="params">(<span class="string">'1'</span>,<span class="string">'评论name'</span>,<span class="string">'我觉得很棒 评论'</span>,<span class="string">'1'</span>)</span>;</div></pre></td></tr></table></figure>
<p>PostMapper.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Post" id="postResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"&gt;&lt;/id&gt;</div><div class="line">    &lt;collection property="commentList" column="id" javaType="ArrayList" ofType="Comment"</div><div class="line">                select="me.jing.mapper.CommentMapper.selectCommentListByPostId"&gt;&lt;/collection&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;select id="selectPostById" parameterType="int" resultMap="postResultMap"&gt;</div><div class="line">    select * from post where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>CommentMapper.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Comment" id="commentResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"&gt;&lt;/id&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line">&lt;!--通过post_id查询评论列表--&gt;</div><div class="line">&lt;select id="selectCommentListByPostId"  parameterType="int" resultMap="commentResultMap"&gt;</div><div class="line">    select * from comment where post_id = #&#123;postId&#125;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">&lt;select id="selectCommentById" parameterType="int" resultMap="commentResultMap"&gt;</div><div class="line">    select * from comment where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 通过post的id 查询post表的内容，</div><div class="line"> * 同时通过此id查询评论表 comment 里的数据列表,即这篇文章的评论列表</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectPostById</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    PostMapper mapper = session1.getMapper(PostMapper.class);</div><div class="line">    Post post = mapper.selectPostById(<span class="number">1</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + post);</div><div class="line">    session1.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="32-高级结果映射-嵌套结果"><a href="#32-高级结果映射-嵌套结果" class="headerlink" title="32.高级结果映射-嵌套结果"></a>32.高级结果映射-嵌套结果</h3><p>1).先执行关联查询，一次性将所有数据都查询出来<br>2).再将所有查询出来的列组织成嵌套的结果对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM</div><div class="line">blog b</div><div class="line">LEFT JOIN author a</div><div class="line">ON b.author_id = a.id;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SELECT</div><div class="line"> b.id as blog_id,</div><div class="line"> b.title as blog_title,</div><div class="line"> b.author_id as blog_author_id,</div><div class="line"> b.state as blog_state,</div><div class="line"> b.featured as blog_featured,</div><div class="line"> b.style as blog_style,</div><div class="line"> </div><div class="line"> a.id as author_id,</div><div class="line"> a.username as author_username,</div><div class="line"> a.password as author_password,</div><div class="line"> a.email as author_email</div><div class="line"> </div><div class="line">FROM blog b</div><div class="line">LEFT JOIN author a</div><div class="line">ON b.author_id = a.id;</div></pre></td></tr></table></figure>
<p>BlogMapper.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap id="blogResultMapNested" type="Blog"&gt;</div><div class="line">    &lt;id column="blog_id" property="id"/&gt;</div><div class="line">    &lt;result column="blog_title" property="title"/&gt;</div><div class="line">    &lt;result column="blog_state" property="state"/&gt;</div><div class="line">    &lt;result column="blog_featured" property="featured"/&gt;</div><div class="line">    &lt;result column="blog_style" property="style"/&gt;</div><div class="line">    &lt;!--&lt;result column="blog_author_id" property="author_id"/&gt;--&gt;</div><div class="line">    &lt;association property="author" column="blog_author_id" javaType="Author"&gt;</div><div class="line">        &lt;id column="author_id" property="id"/&gt;</div><div class="line">        &lt;result column="author_username" property="username"/&gt;</div><div class="line">        &lt;result column="author_password" property="password"/&gt;</div><div class="line">        &lt;result column="author_email" property="email"/&gt;</div><div class="line">    &lt;/association&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line">&lt;!--32.高级结果映射-嵌套结果--&gt;</div><div class="line">&lt;select id="selectBlogListNested" resultMap="blogResultMapNested"&gt;</div><div class="line">    SELECT</div><div class="line">     b.id as blog_id,</div><div class="line">     b.title as blog_title,</div><div class="line">     b.author_id as blog_author_id,</div><div class="line">     b.state as blog_state,</div><div class="line">     b.featured as blog_featured,</div><div class="line">     b.style as blog_style,</div><div class="line"></div><div class="line">     a.id as author_id,</div><div class="line">     a.username as author_username,</div><div class="line">     a.password as author_password</div><div class="line"></div><div class="line">    FROM blog b</div><div class="line">    LEFT JOIN author a</div><div class="line">    ON b.author_id = a.id;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 嵌套查询</div><div class="line"> */</div><div class="line">List&lt;Blog&gt; selectBlogListNested();</div><div class="line"></div><div class="line">/**</div><div class="line"> * 嵌套查询</div><div class="line"> */</div><div class="line">@Test</div><div class="line">public void testSelectBlogListNested() &#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    List&lt;Blog&gt; blogs = blogMapper1.selectBlogListNested();</div><div class="line">    session1.close();</div><div class="line">    System.out.println("结果已查询2:" + blogs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="33-为什么要做扩展结果集-34-扩展结果的实现"><a href="#33-为什么要做扩展结果集-34-扩展结果的实现" class="headerlink" title="33.为什么要做扩展结果集|34.扩展结果的实现"></a>33.为什么要做扩展结果集|34.扩展结果的实现</h3><p>1).mapper</p>
<p>BlogCustomMapper.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;sql id="baseColumn"&gt;</div><div class="line">    b.id,</div><div class="line">    b.`title`,</div><div class="line">    b.`author_id`,</div><div class="line">    b.`state`,</div><div class="line">    b.`featured`,</div><div class="line">    b.`style`,</div><div class="line">    a.username as authorUsername</div><div class="line">&lt;/sql&gt;</div><div class="line"></div><div class="line">&lt;select id="selectBlogById" parameterType="int" resultType="BlogCustom"&gt;</div><div class="line">    select</div><div class="line">    &lt;include refid="baseColumn"/&gt;</div><div class="line">    from blog b</div><div class="line">    left join author a</div><div class="line">    on b.author_id = a.id</div><div class="line">    where b.id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>BlogCustomMapper.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogCustomMapper</span> </span>&#123;</div><div class="line">    <span class="function">BlogCustom <span class="title">selectBlogById</span><span class="params">(Integer id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2)vo.BlogCustom.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 扩展Blog</div><div class="line"> */</div><div class="line">public class BlogCustom extends Blog &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line">    private String authorUsername;</div><div class="line"></div><div class="line">    public String getAuthorUsername() &#123;</div><div class="line">        return authorUsername;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAuthorUsername(String authorUsername) &#123;</div><div class="line">        this.authorUsername = authorUsername;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return "BlogCustom&#123;" +</div><div class="line">                "authorUsername='" + authorUsername + '\'' +</div><div class="line">                '&#125;';</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;!--定义别名--&gt;</div><div class="line">&lt;typeAliases&gt;</div><div class="line">    &lt;!--&lt;typeAlias type="pojo.Blog" alias="Blog"/&gt;--&gt;</div><div class="line">    &lt;package name="me.jing.pojo"/&gt;</div><div class="line">    &lt;package name="me.jing.pojo.vo"/&gt;</div><div class="line">&lt;/typeAliases&gt;</div></pre></td></tr></table></figure>
<p>3)测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过id查具体的博客，查询时 再拿到作者id 去作者表查具体的作者 username</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogById</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogCustomMapper mapper = session1.getMapper(BlogCustomMapper.class);</div><div class="line">    BlogCustom blog = mapper.selectBlogById(<span class="number">3</span>);</div><div class="line"></div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="35-高级结果映射-构造方式映射"><a href="#35-高级结果映射-构造方式映射" class="headerlink" title="35.高级结果映射 - 构造方式映射"></a>35.高级结果映射 - 构造方式映射</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Bolg.xml</div><div class="line"></div><div class="line">public Blog(Integer id, String title) &#123;</div><div class="line">    this.id = id;</div><div class="line">    this.title = title;</div><div class="line">    System.out.println("构造函数调用-----");</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;!--构造方法映射--&gt;</div><div class="line">&lt;resultMap id="blogResultMapConstructor" type="Blog"&gt;</div><div class="line">    &lt;constructor&gt;</div><div class="line">        &lt;idArg column="id" javaType="int"/&gt;</div><div class="line">        &lt;arg column="title" javaType="string"/&gt;</div><div class="line">    &lt;/constructor&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line">&lt;select id="selectBlogByIdConstructor" parameterType="int" resultMap="blogResultMapConstructor"&gt;</div><div class="line">  select * from blog where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line"> /**</div><div class="line"> * 构造方式映射</div><div class="line"> */</div><div class="line">Blog selectBlogByIdConstructor(Integer id);</div><div class="line"></div><div class="line"> /**</div><div class="line"> * 构造方式映射</div><div class="line"> */</div><div class="line">@Test</div><div class="line">public void testSelectBlogByIdConstructor() &#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog = blogMapper1.selectBlogByIdConstructor(3);</div><div class="line">    session1.close();</div><div class="line">    System.out.println("结果已查询:" + blog);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="36-鉴别器"><a href="#36-鉴别器" class="headerlink" title="36.鉴别器"></a>36.鉴别器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `vehicle`(</div><div class="line">	`id` INT(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</div><div class="line">	`vin` VARCHAR(<span class="number">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class="line">	`year` YEAR(<span class="number">4</span>) DEFAULT NULL,</div><div class="line">	`make` VARCHAR(<span class="number">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class="line">	`model` VARCHAR(<span class="number">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class="line">	`color` VARCHAR(<span class="number">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class="line">	`vehicle_type` INT(<span class="number">11</span>) DEFAULT NULL,</div><div class="line">	`door_count` INT(<span class="number">11</span>) DEFAULT NULL,</div><div class="line">	`all_wheel_drive` TINYINT(<span class="number">1</span>) DEFAULT NULL,</div><div class="line">	<span class="function">PRIMARY <span class="title">KEY</span><span class="params">(`id`)</span></span></div><div class="line"> ) ENGINE=INNODB AUTO_INCREMENT=<span class="number">5</span> DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">VehicleMapper.xml</div><div class="line"></div><div class="line">&lt;resultMap type="Vehicle" id="vehicleResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"/&gt;</div><div class="line">    &lt;discriminator javaType="int" column="vehicle_type"&gt;</div><div class="line">        &lt;case value="1" resultType="Car"&gt;</div><div class="line">            &lt;result column="door_count" property="doorCount"/&gt;</div><div class="line">        &lt;/case&gt;</div><div class="line">        &lt;case value="2" resultType="Suv"&gt;</div><div class="line">            &lt;result column="all_wheel_drive" property="allWheelDrive"/&gt;</div><div class="line">        &lt;/case&gt;</div><div class="line">    &lt;/discriminator&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;select id="selectVehicleById" parameterType="int" resultMap="vehicleResultMap"&gt;</div><div class="line">    select * from vehicle where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">Vehicle selectVehicleById(Integer id);</div></pre></td></tr></table></figure>
<p>pojo</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> Integer vehicle_type;</div><div class="line">    <span class="keyword">private</span> String vin;</div><div class="line">    <span class="keyword">private</span> String make;</div><div class="line">    <span class="keyword">private</span> String model;</div><div class="line">    <span class="keyword">private</span> String color;</div><div class="line">    <span class="keyword">private</span> Boolean all_wheel_drive;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Suv</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 全轮驱动 awd</span></div><div class="line">    <span class="keyword">private</span> Boolean allWheelDrive;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Suv</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getAllWheelDrive</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> allWheelDrive;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllWheelDrive</span><span class="params">(Boolean allWheelDrive)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.allWheelDrive = allWheelDrive;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Suv&#123;"</span> +</div><div class="line">                <span class="string">"allWheelDrive="</span> + allWheelDrive +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 门的数量</span></div><div class="line">    <span class="keyword">private</span> Integer doorCount;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDoorCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> doorCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDoorCount</span><span class="params">(Integer doorCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.doorCount = doorCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Car&#123;"</span> +</div><div class="line">                <span class="string">"doorCount="</span> + doorCount +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 鉴别器</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectVehicleById</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    VehicleMapper mapper = session1.getMapper(VehicleMapper.class);</div><div class="line">    Vehicle vehicle = mapper.selectVehicleById(<span class="number">1</span>);</div><div class="line">    Vehicle vehicle2 = mapper.selectVehicleById(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Car) &#123;</div><div class="line">        Car car = (Car) vehicle;</div><div class="line">        Suv suv = (Suv) vehicle2;</div><div class="line">        System.out.println(<span class="string">"car:"</span> + car);</div><div class="line">        System.out.println(<span class="string">"suv:"</span> + suv);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Car car = (Car) vehicle2;</div><div class="line">        Suv suv = (Suv) vehicle;</div><div class="line">        System.out.println(<span class="string">"car:"</span> + car);</div><div class="line">        System.out.println(<span class="string">"suv:"</span> + suv);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"vehicle:"</span> + vehicle);</div><div class="line">    System.out.println(<span class="string">"vehicle2:"</span> + vehicle2);</div><div class="line">    session1.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="37-延迟加载-不配置延迟加载的情况"><a href="#37-延迟加载-不配置延迟加载的情况" class="headerlink" title="37.延迟加载 - 不配置延迟加载的情况"></a>37.延迟加载 - 不配置延迟加载的情况</h3><p>测试一：<br>没有配置任何选项，执行两遍查询，性能比较低</p>
<p>无论是否查询blog的任意属性，都会执行author的任何查询，就是说 始终会执行两次查询。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">查询blog----</div><div class="line">Opening JDBC Connection</div><div class="line">Created connection <span class="number">504858437</span>.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">1e178745</span>]</div><div class="line">==&gt;  Preparing: select * from blog where id = ? </div><div class="line">==&gt; Parameters: <span class="number">3</span>(Integer)</div><div class="line">====&gt;  Preparing: select * from author where id = ? </div><div class="line">====&gt; Parameters: <span class="number">15</span>(Integer)</div><div class="line">&lt;====      Total: <span class="number">1</span></div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">1e178745</span>]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">1e178745</span>]</div><div class="line">Returned connection <span class="number">504858437</span> to pool.</div><div class="line">查询blog的title属性----</div><div class="line">Android开发艺术探索</div><div class="line">查询blog的author属性----</div><div class="line">景彬</div><div class="line">结果已查询</div></pre></td></tr></table></figure>
<h3 id="38-延迟加载-配置lazyloadingenabled"><a href="#38-延迟加载-配置lazyloadingenabled" class="headerlink" title="38.延迟加载 - 配置lazyloadingenabled"></a>38.延迟加载 - 配置lazyloadingenabled</h3><p>测试二：<br>如果不查询blog的任意属性，那么不会执行author的查询</p>
<p>配置了全局属性：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;settings&gt;</div><div class="line">    &lt;!--&lt;setting name="useGeneratedKeys" value="true"/&gt;--&gt;</div><div class="line">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class="line">    &lt;setting name="lazyLoadingEnabled" value="true"/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试延迟加载</div><div class="line"> * 没有配置 lazyLoadingEnabled 时，会始终执行两次查询</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByIdLazyLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    System.out.println(<span class="string">"查询blog----"</span>);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line"><span class="comment">//        System.out.println("查询blog的title属性----");</span></div><div class="line"><span class="comment">//        System.out.println(blog.getTitle());</span></div><div class="line"><span class="comment">//        System.out.println("查询blog的author属性----");</span></div><div class="line"><span class="comment">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>日志打印：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">查询blog----</div><div class="line">Opening JDBC Connection</div><div class="line">Created connection <span class="number">210156003</span>.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">==&gt;  Preparing: select * from blog where id = ? </div><div class="line">==&gt; Parameters: <span class="number">3</span>(Integer)</div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Returned connection <span class="number">210156003</span> to pool.</div><div class="line">结果已查询</div></pre></td></tr></table></figure>
<h3 id="39-延迟加载-测试用例1和2的比较"><a href="#39-延迟加载-测试用例1和2的比较" class="headerlink" title="39.延迟加载 - 测试用例1和2的比较"></a>39.延迟加载 - 测试用例1和2的比较</h3><h3 id="40-延迟加载-积极的延迟加载"><a href="#40-延迟加载-积极的延迟加载" class="headerlink" title="40.延迟加载 - 积极的延迟加载"></a>40.延迟加载 - 积极的延迟加载</h3><p>延迟加载：用属性就加载，不用就不加载。<br>积极的延迟加载：只要用属性，就把所有要查询的属性sql全部执行一遍。</p>
<p>测试三：<br>只要查询bolg的任意属性，都会执行author数据的查询</p>
<p>配置了全局属性(同测试2的配置)：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;settings&gt;</div><div class="line">    &lt;!--&lt;setting name="useGeneratedKeys" value="true"/&gt;--&gt;</div><div class="line">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class="line">    &lt;setting name="lazyLoadingEnabled" value="true"/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试延迟加载</div><div class="line"> * 没有配置 lazyLoadingEnabled 时，会始终执行两次查询</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByIdLazyLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    System.out.println(<span class="string">"查询blog----"</span>);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"查询blog的title属性----"</span>);</div><div class="line">    System.out.println(blog.getTitle());</div><div class="line"><span class="comment">//        System.out.println("查询blog的author属性----");</span></div><div class="line"><span class="comment">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="41-延迟加载-非积极延迟加载"><a href="#41-延迟加载-非积极延迟加载" class="headerlink" title="41.延迟加载 - 非积极延迟加载"></a>41.延迟加载 - 非积极延迟加载</h3><p>测试四：<br>延迟加载，并且是非积极的。如果需要访问blog的非author属性，则不执行关联的author查询。</p>
<p>配置了全局属性：</p>
<blockquote>
<p>配置后，没有调用 blog.getAuthor() 属性，就只会执行一次，调用 blog.getAuthor() 属性才回再执行查询author表一次。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--具体的insert也得配置 keyProperty--&gt;</div><div class="line">&lt;settings&gt;</div><div class="line">    &lt;setting name="useGeneratedKeys" value="true"/&gt;</div><div class="line">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class="line">    &lt;setting name="lazyLoadingEnabled" value="true"/&gt;</div><div class="line">    &lt;!--非积极的延迟加载--&gt;</div><div class="line">    &lt;setting name="aggressiveLazyLoading" value="false"/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 测试延迟加载</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByIdLazyLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    System.out.println(<span class="string">"查询blog----"</span>);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"查询blog的title属性----"</span>);</div><div class="line">    System.out.println(blog.getTitle());</div><div class="line"><span class="comment">//        System.out.println("查询blog的author属性----");</span></div><div class="line"><span class="comment">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">查询blog----</div><div class="line">Opening JDBC Connection</div><div class="line">Created connection <span class="number">210156003</span>.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">==&gt;  Preparing: select * from blog where id = ? </div><div class="line">==&gt; Parameters: <span class="number">3</span>(Integer)</div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Returned connection <span class="number">210156003</span> to pool.</div><div class="line">查询blog的title属性----</div><div class="line">Android开发艺术探索</div><div class="line">结果已查询</div></pre></td></tr></table></figure>
<p>测试五：</p>
<p>配置了全局属性 同配置四</p>
<p>延迟加载，并且是不积极的。如果访问了blog的author属性，则执行关联的author查询</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试延迟加载</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByIdLazyLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    System.out.println(<span class="string">"查询blog----"</span>);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"查询blog的title属性----"</span>);</div><div class="line">    System.out.println(blog.getTitle());</div><div class="line">    System.out.println(<span class="string">"查询blog的author属性----"</span>);</div><div class="line">    System.out.println(blog.getAuthor().getUsername());</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">查询blog----</div><div class="line">Opening JDBC Connection</div><div class="line">Created connection <span class="number">210156003</span>.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">==&gt;  Preparing: select * from blog where id = ? </div><div class="line">==&gt; Parameters: <span class="number">3</span>(Integer)</div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Returned connection <span class="number">210156003</span> to pool.</div><div class="line">查询blog的title属性----</div><div class="line">Android开发艺术探索</div><div class="line">查询blog的author属性----</div><div class="line">Opening JDBC Connection</div><div class="line">Checked out connection <span class="number">210156003</span> from pool.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">==&gt;  Preparing: select * from author where id = ? </div><div class="line">==&gt; Parameters: <span class="number">15</span>(Integer)</div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Returned connection <span class="number">210156003</span> to pool.</div><div class="line">景彬</div><div class="line">结果已查询</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们容易忽视慢变量，但慢变量才是牵引历史进程的火车头。 - 何帆/变量&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java后端" scheme="http://jingbin.me/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="MySql" scheme="http://jingbin.me/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 使用规范(内部培训笔记)</title>
    <link href="http://jingbin.me/2019/03/31/mysql-tip/"/>
    <id>http://jingbin.me/2019/03/31/mysql-tip/</id>
    <published>2019-03-31T14:14:00.000Z</published>
    <updated>2019-04-10T14:42:18.170Z</updated>
    
    <content type="html"><![CDATA[<p>袋鼠云数据库使用基本规范。</p>
<a id="more"></a>
<h3 id="一般操作"><a href="#一般操作" class="headerlink" title="一般操作"></a>一般操作</h3><ul>
<li>高峰期不进行DDL操作，不进行大表全表扫描；</li>
<li>进行更新或删除时，一万以下条数据最好使用 分批更新(计数 如 i 累加到500)（存储方式）</li>
</ul>
<h3 id="设计库"><a href="#设计库" class="headerlink" title="设计库"></a>设计库</h3><ul>
<li>原则：不同业务按库划分</li>
<li>使用：innodb 存储引擎</li>
</ul>
<h3 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h3><ul>
<li>一定要有主键</li>
<li>强烈建议字段为 NOT NULL，并设置默认值</li>
<li>禁止储存图片、文件、视频等</li>
<li>使用 tingint 代替 ENUM</li>
<li>禁止使用外键</li>
<li>少用拆分 BLOB、TEXT字段</li>
<li>控制 字段数量/尽可能小的字段/命名规范</li>
</ul>
<h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><ul>
<li>Tinyint[UNSIGNED] - 无负整数 （从 0 到 255 的整型数据。存储大小为 1 字节。）</li>
<li>DECIIMAL - 精确数值，不是Float/Double</li>
<li>int(3) - 后面的数字无意义</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><blockquote>
<p>index<em>表名</em>字段</p>
</blockquote>
<ul>
<li>联合索引字段建议不超过5个</li>
<li>单表索引数量5个以内</li>
<li>使用自增id作为主键</li>
</ul>
<h3 id="编写sql"><a href="#编写sql" class="headerlink" title="编写sql"></a>编写sql</h3><ul>
<li>update/delete 不使用limit，必须添加where</li>
<li>使用prepared、statement，提成性能，避免SQL注入</li>
<li>禁止使用 % 模糊查询(全表)</li>
<li>表中记录数 <code>count(*)</code></li>
<li>用 join 链接替代 嵌套查询</li>
<li>尽量不使用 hints</li>
<li><p>查询拒绝 select * ，避免对索引字段使用 函数或计算操作</p>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">where new_id = <span class="string">"123456"</span> (<span class="function">where <span class="title">upper</span><span class="params">(id)</span>)</span></div></pre></td></tr></table></figure>
<ul>
<li>如果 new_id 是 varchar 则使用 <code>new_id = &quot;123456&quot;</code> 比使用 <code>new_id = 123456</code> 的效率高很多倍</li>
<li>使用 where upper(id) 的效率很低</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;袋鼠云数据库使用基本规范。&lt;/p&gt;
    
    </summary>
    
      <category term="Java后端" scheme="http://jingbin.me/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="MySql" scheme="http://jingbin.me/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础</title>
    <link href="http://jingbin.me/2019/03/30/mysql-basics/"/>
    <id>http://jingbin.me/2019/03/30/mysql-basics/</id>
    <published>2019-03-30T11:00:00.000Z</published>
    <updated>2019-04-10T14:38:16.714Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我坚信在行动之前，必须先有足够的观察和知识。 - 奇异博士</p>
</blockquote>
<a id="more"></a>
<ul>
<li>持久化操作：保存到数据库</li>
<li>主键：用户表里的id，唯一标识</li>
<li>外键：另一个表里引用的用户id，外键</li>
</ul>
<p><a href="https://www.cnblogs.com/xiaomaotao/p/9211152.html" target="_blank" rel="external">下载mysql 配置环境</a> 更改密码：a12345678</p>
<p><a href="https://www.jianshu.com/p/f3ef78deadaa" target="_blank" rel="external">Navicat Premium for Mac的破解教程</a> 注意时间戳是今天的时间-2019-02-20 12:00:00</p>
<p>命令行操作(一般来说关键字都用大写)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias mysql=/usr/local/mysql/bin/mysql</div><div class="line">alias mysqladmin=/usr/local/mysql/bin/mysqladmin</div></pre></td></tr></table></figure>
<pre><code>启动mysql
mysql
// 更换密码：
mysqladmin -u root -p password
登录：
mysql -u root -p
</code></pre><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><blockquote>
<p>;是结束符</p>
</blockquote>
<ul>
<li><p>1.创建数据库<br><code>create database mysql_0219;</code></p>
</li>
<li><p>2.查看所有数据库<br><code>show databases;</code></p>
</li>
<li><p>3.使用数据库<br><code>use mysql_0219;</code></p>
</li>
<li><p>4.删除数据库<br><code>drop database mysql_0219;</code></p>
</li>
<li><p>5.查看数据库状态<br><code>status (注意编码：utf-8)</code></p>
</li>
</ul>
<h3 id="表的创建与管理"><a href="#表的创建与管理" class="headerlink" title="表的创建与管理:"></a>表的创建与管理:</h3><ul>
<li><p>1.创建表<br><code>create table t_user1(id int,name varchar(20),age int,birthday date);</code></p>
</li>
<li><p>2.修改表<br><code>alter table t_user1 rename t_user2;</code></p>
</li>
<li><p>3.查看具体表<br><code>desc t_user2;</code></p>
</li>
<li><p>4.查看所有表<br><code>show tables;</code></p>
</li>
<li><p>5.删除<br><code>drop table t_user2;</code></p>
</li>
<li><p>6.表中添加字段</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table 表名称 add 字段名称 字段类型</div><div class="line">alter table t_user1 add sex varchar(3);</div></pre></td></tr></table></figure>
<ul>
<li>7.修改表中的字段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table t_user1 change name user_name varchar(3);</div><div class="line">// 更改表的类型名称 布尔为 tinyint(1)</div><div class="line">alter table t_user1 modify user_name varchar(2);</div></pre></td></tr></table></figure>
<ul>
<li>8.删除表重的字段<br><code>alter table t_user1 drop birthday;</code></li>
</ul>
<h3 id="表数据更新："><a href="#表数据更新：" class="headerlink" title="表数据更新："></a>表数据更新：</h3><ul>
<li><p>1.数据插入<br><code>insert into t_user1(id,user_name,age,sex) values(&#39;1&#39;,&#39;ad&#39;,&#39;22&#39;,&#39;男&#39;);</code></p>
</li>
<li><p>2.查看数据<br><code>select * from t_user1;</code></p>
</li>
<li><p>3.数据更新</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">单条</div><div class="line">update t_user1 set user_name=&apos;admin&apos; where id=1;</div><div class="line">多条</div><div class="line">update t_user1 set age=33,sex=&apos;女&apos; where id=1;</div></pre></td></tr></table></figure>
<ul>
<li>4.删除数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">delete from t_user1 where id =2;</div><div class="line">delete from t_user1;(清空表)</div></pre></td></tr></table></figure>
<h3 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h3><p>非空约束 唯一约束 主键约束 主外键约束</p>
<p>图形化连接:</p>
<p>使用 Navicat for MySQL 输入密码：a123456789 新建查询创建</p>
<h4 id="非空约束："><a href="#非空约束：" class="headerlink" title="非空约束："></a>非空约束：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">CREATE TABLE <span class="title">t_user2</span><span class="params">(</span></span></div><div class="line">id <span class="keyword">int</span>,</div><div class="line">name VARCHAR(<span class="number">2</span>) not <span class="keyword">null</span></div><div class="line">);</div><div class="line"></div><div class="line">show TABLES;</div><div class="line"></div><div class="line"><span class="function">INSERT INTO <span class="title">t_user2</span><span class="params">(id,name)</span> <span class="title">VALUES</span><span class="params">(<span class="number">1</span>,<span class="number">23</span>)</span></span>;</div><div class="line">-- <span class="function">INSERT INTO <span class="title">t_user2</span><span class="params">(id,name)</span> <span class="title">VALUES</span><span class="params">(<span class="number">1</span>,<span class="keyword">null</span>)</span></span>;</div><div class="line"></div><div class="line">SELECT * FROM t_user2;</div></pre></td></tr></table></figure>
<h4 id="唯一约束："><a href="#唯一约束：" class="headerlink" title="唯一约束："></a>唯一约束：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">CREATE TABLE <span class="title">t_user3</span><span class="params">(</span></span></div><div class="line">id <span class="keyword">int</span>,</div><div class="line">name VARCHAR(<span class="number">30</span>) not <span class="keyword">null</span>,</div><div class="line">email <span class="title">VARCHAR</span><span class="params">(<span class="number">20</span>)</span> UNIQUE -- 唯一约束，邮箱不允许重复</div><div class="line">);</div><div class="line"></div><div class="line"><span class="function">INSERT INTO <span class="title">t_user3</span><span class="params">(id,name,email)</span> <span class="title">VALUES</span><span class="params">(<span class="number">1</span>,<span class="number">23</span>,<span class="string">'110@email.com'</span>)</span></span>;</div><div class="line"><span class="function">INSERT INTO <span class="title">t_user3</span><span class="params">(id,name,email)</span> <span class="title">VALUES</span><span class="params">(<span class="number">2</span>,<span class="number">333</span>,<span class="string">'111@email.com'</span>)</span></span>;</div><div class="line"></div><div class="line">SELECT * FROM t_user3;</div></pre></td></tr></table></figure>
<h4 id="主键约束："><a href="#主键约束：" class="headerlink" title="主键约束："></a>主键约束：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DROP TABLE t_user3;</div><div class="line"></div><div class="line"><span class="function">CREATE TABLE <span class="title">t_user3</span><span class="params">(</span></span></div><div class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键唯一不能为<span class="keyword">null</span>，自增</div><div class="line">name VARCHAR(<span class="number">30</span>) not <span class="keyword">null</span>,</div><div class="line">email <span class="title">VARCHAR</span><span class="params">(<span class="number">20</span>)</span> UNIQUE -- 唯一约束，邮箱不允许重复</div><div class="line">);</div><div class="line"></div><div class="line"><span class="function">INSERT INTO <span class="title">t_user3</span><span class="params">(name,email)</span> <span class="title">VALUES</span><span class="params">(<span class="number">23</span>,<span class="string">'110@email.com'</span>)</span></span>;</div><div class="line"><span class="function">INSERT INTO <span class="title">t_user3</span><span class="params">(name,email)</span> <span class="title">VALUES</span><span class="params">(<span class="number">2223</span>,<span class="string">'112220@email.com'</span>)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="主外键约束："><a href="#主外键约束：" class="headerlink" title="主外键约束："></a>主外键约束：</h4><p>一般不会建，不能单独删除这个约束表。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">CREATE TABLE <span class="title">t_user</span><span class="params">(</span></span></div><div class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键不能为 <span class="keyword">null</span>，且不能重复，自增</div><div class="line">name VARCHAR(<span class="number">30</span>) not <span class="keyword">null</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="function">CREATE TABLE <span class="title">t_order</span><span class="params">(</span></span></div><div class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键不能为 <span class="keyword">null</span>，且不能重复，自增</div><div class="line">order_name VARCHAR(<span class="number">30</span>),</div><div class="line">user_id <span class="keyword">int</span>,</div><div class="line">CONSTRAINT user_id_fk FOREIGN <span class="title">key</span> <span class="params">(user_id)</span> REFERENCES <span class="title">t_user</span><span class="params">(id)</span> -- 添加外键</div><div class="line">);</div><div class="line"></div><div class="line"><span class="function">INSERT INTO <span class="title">t_user</span><span class="params">(name)</span> <span class="title">VALUES</span><span class="params">(<span class="string">'amdin'</span>)</span></span>;</div><div class="line">SELECT * FROM t_user;</div><div class="line"><span class="function">INSERT INTO <span class="title">t_order</span><span class="params">(order_name,user_id)</span> <span class="title">VALUES</span><span class="params">(<span class="string">'订单1'</span>,<span class="number">1</span>)</span></span>;</div><div class="line"><span class="function">INSERT INTO <span class="title">t_order</span><span class="params">(order_name,user_id)</span> <span class="title">VALUES</span><span class="params">(<span class="string">'订单2'</span>,<span class="number">2</span>)</span></span>;<span class="comment">// 报错</span></div><div class="line">SELECT * FROM t_order;</div></pre></td></tr></table></figure></p>
<h3 id="Mysql的备份与恢复"><a href="#Mysql的备份与恢复" class="headerlink" title="Mysql的备份与恢复"></a>Mysql的备份与恢复</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>导出数据库：</p>
<p>mysqldump -u root -p mysql_0219&gt;/Users/jingbin/Documents/LearningFile/S-Mybatis/mysql_0219.sql;</p>
<p>一、<a href="https://www.cnblogs.com/malcolmfeng/p/6560772.html" target="_blank" rel="external">Mac os导出Mysql数据库</a></p>
<p>1.打开终端，</p>
<p>2.执行： cd 要导出到的目录  （如：cd /Users/jingbin/Documents/LearningFile/mysql）</p>
<p>3.执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　alias mysqldump=/usr/local/mysql/bin/mysqldump</div><div class="line">　　mysqldump -u root -p 要导出的数据库名&gt;名字随意.sql </div><div class="line">　　（如：mysqldump -u root -p mysql_0219&gt;mysql_0219.sql;） 输入数据密码</div><div class="line">此时，会在/Users/jingbin/Documents/LearningFile/mysql中发现已经导出的.sql文件：mysql_0219.sql。</div></pre></td></tr></table></figure>
<p>导出数据库里对应的表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u root -p mysql_0219 t_user&gt;mysql_0219_user.sql;</div></pre></td></tr></table></figure>
<h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">create database mysql_back;</div><div class="line">use mysql_back;</div><div class="line">show tables;</div><div class="line">source /Users/jingbin/Documents/LearningFile/mysql/mysql_0219_user.sql</div><div class="line">show tables;</div><div class="line">select * from t_user;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我坚信在行动之前，必须先有足够的观察和知识。 - 奇异博士&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java后端" scheme="http://jingbin.me/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="MySql" scheme="http://jingbin.me/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Maven基础</title>
    <link href="http://jingbin.me/2019/03/29/maven-basics/"/>
    <id>http://jingbin.me/2019/03/29/maven-basics/</id>
    <published>2019-03-29T10:25:00.000Z</published>
    <updated>2019-04-10T14:32:30.774Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>真正的价值并不在人生的舞台上，而在我们扮演的角色中。 - 席勒/画家</p>
</blockquote>
<a id="more"></a>
<h2 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h2><ul>
<li><a href="https://www.cnblogs.com/xulisheng/p/4049740.html" target="_blank" rel="external">Mac中host设置方法</a></li>
<li><a href="https://www.jianshu.com/p/3c87487e7121" target="_blank" rel="external">IntelliJ IDEA 2018 破解过程</a></li>
</ul>
<p>jdk1.8</p>
<p>File Encodings 全部utf-8</p>
<p>企业做法 - Maven</p>
<ul>
<li>新建 maven</li>
<li><strong>普通项目 quickstart</strong></li>
<li><strong>web项目 webapp</strong></li>
</ul>
<p>GAV坐标：GroupId 组织 ArtifactId 项目 Version 版本</p>
<ul>
<li>新建的时候，setting.xml第一次需要新建，并配置本地仓库地址</li>
<li>配置自动导入，maven - inporting</li>
</ul>
<p>Maven install 打包部署</p>
<hr>
<p>建web项目：</p>
<ul>
<li>Maven - webapp</li>
<li>默认建立没有java目录 - 手动创建Java目录</li>
</ul>
<p>web项目打包格式：<packaging>war</packaging> 不适合给三方团队使用。</p>
<p>关联web容器：</p>
<ul>
<li>顶部导航栏 - Add Configuration - 加号 - Tomcat Server local</li>
</ul>
<p>下载tomcat : <a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="external">http://tomcat.apache.org/download-80.cgi</a></p>
<p>部署：</p>
<ul>
<li>顶部导航栏 - Add Configuration - 加号 - Tomcat Server local - Deployment - 加号 “/web_war”？“/” 不用改</li>
<li>maven - install - 开始键部署</li>
</ul>
<hr>
<p>多模块开发：</p>
<ul>
<li>父子项目 - 选择站点模式 - site-simple</li>
<li>目的：让父项目来管理所有子项目的jar包</li>
<li>server引用dao的代码：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--导入dao--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;me.jing&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jd-dao&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>直接右键 - Run</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;真正的价值并不在人生的舞台上，而在我们扮演的角色中。 - 席勒/画家&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java后端" scheme="http://jingbin.me/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Maven" scheme="http://jingbin.me/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度</title>
    <link href="http://jingbin.me/2019/03/27/complexity-analysis-next/"/>
    <id>http://jingbin.me/2019/03/27/complexity-analysis-next/</id>
    <published>2019-03-27T14:56:00.000Z</published>
    <updated>2019-04-10T14:26:49.420Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>最好情况时间复杂度（best case time complexity）、</li>
<li>最坏情况时间复杂度（worst case time complexity）、</li>
<li>平均情况时间复杂度（average case time complexity）、</li>
<li>均摊时间复杂度（amortized time complexity）</li>
</ul>
<h3 id="最好、最坏情况时间复杂度"><a href="#最好、最坏情况时间复杂度" class="headerlink" title="最好、最坏情况时间复杂度"></a>最好、最坏情况时间复杂度</h3><p>首先看这段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n 表示数组 array 的长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</div><div class="line">    <span class="keyword">if</span> (array[i] == x) pos = i;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> pos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比较明显：这段代码的复杂度是 O(n)，其中，n 代表数组的长度。</p>
<p>优化一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n 表示数组 array 的长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</div><div class="line">    <span class="keyword">if</span> (array[i] == x) &#123;</div><div class="line">       pos = i;</div><div class="line">       <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> pos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>要查找的变量 x 可能出现在数组的任意位置</strong></p>
<ul>
<li>如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。</li>
<li>但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。</li>
</ul>
<p>所以，不同的情况下，这段代码的时间复杂度是不一样的。</p>
<p>为了表示代码在不同情况下的不同时间复杂度，我们需要引入三个概念：<strong>最好情况时间复杂度</strong>、<strong>最坏情况时间复杂度</strong>和<strong>平均情况时间复杂度</strong>。</p>
<p><strong>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。</strong>就像我们刚刚讲到的，在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这个时候对应的时间复杂度就是最好情况时间复杂度。</p>
<p>同理，<strong>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。</strong>就像刚举的那个例子，如果数组中没有要查找的变量 x，我们需要把整个数组都遍历一遍才行，所以这种最糟糕情况下对应的时间复杂度就是最坏情况时间复杂度。</p>
<h3 id="平均情况时间复杂度"><a href="#平均情况时间复杂度" class="headerlink" title="平均情况时间复杂度"></a>平均情况时间复杂度</h3><p>借助刚才查找变量 x 的例子来给你解释:</p>
<p>要查找的变量 x 在数组中的位置，有 n+1 种情况：<strong>在数组的 0～n-1 位置中和不在数组中</strong>。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：</p>
<p>(1+2+3+…+n+n)/(n+1) = n(n+3)/2(n+1)</p>
<p>我们知道，时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以，咱们把刚刚这个公式简化之后，得到的平均时间复杂度就是 O(n)。</p>
<p>但是计算过程稍微有点儿问题。究竟是什么问题呢？我们刚讲的这 n+1 种情况，出现的概率并不是一样的。我带你具体分析一下。</p>
<p>我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。</p>
<p>因此，前面的推导过程中存在的最大问题就是，没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-d44427c8032e4dc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>这个值就是概率论中的<strong>加权平均值</strong>，也叫作<strong>期望值</strong>，所以平均时间复杂度的全称应该叫<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p>
<p>引入概率之后，前面那段代码的加权平均值为 (3n+1)/4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。</p>
<p>实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p>
<h3 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h3><p>大部分情况下，我们并不需要区分最好、最坏、平均三种复杂度。平均复杂度只在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// array 表示一个长度为 n 的数组</span></div><div class="line"><span class="comment">// 代码中的 array.length 就等于 n</span></div><div class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (count == array.length) &#123;</div><div class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</div><div class="line">         sum = sum + array[i];</div><div class="line">      &#125;</div><div class="line">      array[<span class="number">0</span>] = sum;</div><div class="line">      count = <span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   array[count] = val;</div><div class="line">   ++count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我先来解释一下这段代码。这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p>
<ul>
<li>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。</li>
<li>最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</li>
<li>那平均时间复杂度是多少呢？答案是 O(1)。我们还是可以通过前面讲的概率论的方法来分析。</li>
</ul>
<p>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-7f74e561d22382dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>至此为止，前面的最好、最坏、平均时间复杂度的计算，理解起来应该都没有问题。但是这个例子里的平均复杂度分析其实并不需要这么复杂，不需要引入概率论的知识。这是为什么呢？我们先来对比一下这个 insert() 的例子和前面那个 find() 的例子，你就会发现这两者有很大差别。</p>
<p>首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()第一个区别于 find() 的地方。</p>
<p>我们再来看第二个不同的地方。对于 insert() 函数来说，O(1) 时间复杂度的插入和 O(n) 时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。</p>
<p>所以，针对这样一种特殊场景的复杂度分析，我们并不需要像之前讲平均复杂度分析方法那样，找出所有的输入情况及相应的发生概率，然后再计算加权平均值。</p>
<p>针对这种特殊的场景，我们引入了一种更加简单的分析方法：摊还分析法，通过摊还分析得到的时间复杂度我们起了一个名字，叫均摊时间复杂度。</p>
<p>那究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p>
<p>我们还是继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。你都理解了吗？</p>
<p>均摊时间复杂度和摊还分析应用场景比较特殊，所以我们并不会经常用到。为了方便你理解、记忆，我这里简单总结一下它们的应用场景。如果你遇到了，知道是怎么回事儿就行了。</p>
<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p>
<p>尽管很多数据结构和算法书籍都花了很大力气来区分平均时间复杂度和均摊时间复杂度，但其实我个人认为，均摊时间复杂度就是一种特殊的平均时间复杂度，我们没必要花太多精力去区分它们。你最应该掌握的是它的分析方法，摊还分析。至于分析出来的结果是叫平均还是叫均摊，这只是个说法，并不重要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jingbin.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jingbin.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？</title>
    <link href="http://jingbin.me/2019/03/26/complexity-analysis/"/>
    <id>http://jingbin.me/2019/03/26/complexity-analysis/</id>
    <published>2019-03-26T13:38:00.000Z</published>
    <updated>2019-04-10T14:25:03.499Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>T(n) = O(f(n))</p>
</blockquote>
<a id="more"></a>
<h3 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</div><div class="line">    sum = sum + i;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总的执行时间就是T(n) = (2n+2)*unit_time。<br>记为：T(n) = O(n)； </p>
<p>所有代码的执行时间 T(n) 与每行代码的执行次数成正比。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</div><div class="line">    j = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</div><div class="line">      sum = sum +  i * j;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行时间 T(n) = (2n2+2n+3)* unit_time。<br>记为：T(n) = O(n2)</p>
<p><strong>大 O 复杂度表示法：</strong></p>
<p><center>T(n) = O(f(n))</center></p>
<p>T(n): 表示代码执行的时间；<br>n: 表示数据规模的大小；<br>f(n): 表示每行代码执行的次数总和；<br>O: 表示代码的执行时间T(n)与f(n)表达式成正比。</p>
<p>大 O 复杂度表示法时间上并不具体表示代码真正的执行时间，而是表示代码<strong>执行时间随数据规模增长的变化趋势</strong>，所以，也叫作渐进时间复杂度，简称<strong>时间复杂度</strong>。</p>
<h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><ul>
<li>1.只关注循环执行次数最多的一段代码</li>
<li>2.加法法则：总复杂度等于量级最大的那段代码的复杂度</li>
<li>3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>
</ul>
<h3 id="几种常见时间复杂度实例分析"><a href="#几种常见时间复杂度实例分析" class="headerlink" title="几种常见时间复杂度实例分析"></a>几种常见时间复杂度实例分析</h3><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了你今后可以接触的所有代码的复杂度量级。</p>
<p>复杂度量级(按数量级递增)</p>
<ul>
<li>多项式量级<ul>
<li>常量阶 O(1) </li>
<li>对数阶 O(log n)</li>
<li>线性阶 O(n)</li>
<li>线性代数阶 O(nlogn)</li>
<li>平方阶 O(n²)、立方阶O(n³)…k次方阶O(n^{k})</li>
</ul>
</li>
<li>非多项式量级<ul>
<li>指数阶 O(2^n)</li>
<li>阶乘积 O(n!)</li>
</ul>
</li>
</ul>
<h4 id="1-O-1"><a href="#1-O-1" class="headerlink" title="1.O(1)"></a>1.O(1)</h4><p>首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">8</span>;</div><div class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</div><div class="line"><span class="keyword">int</span> sum = i + j;</div></pre></td></tr></table></figure>
<p>我稍微总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。</strong></p>
<h4 id="2-O-logn-、O-nlogn"><a href="#2-O-logn-、O-nlogn" class="headerlink" title="2.O(logn)、O(nlogn)"></a>2.O(logn)、O(nlogn)</h4><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。我通过一个例子来说明一下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i=<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</div><div class="line">  i = i * <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。</p>
<p>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：</p>
<p><code>2^0 * 2^1 * 2^2 ... 2^k ... 2^n = m 3 n</code></p>
<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2x=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log2n，所以，这段代码的时间复杂度就是 O(log2n)。</p>
<p>现在，我把代码稍微改下，你再看看，这段代码的时间复杂度是多少？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i=<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</div><div class="line">  i = i * <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据我刚刚讲的思路，很简单就能看出来，这段代码的时间复杂度为 O(log3n)。</p>
<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>
<p>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 <em> log2n，所以 O(log3n) = O(C </em> log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p>
<p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>
<h4 id="3-O-m-n-、O-m-n"><a href="#3-O-m-n-、O-m-n" class="headerlink" title="3.O(m+n)、O(m*n)"></a>3.O(m+n)、O(m*n)</h4><p>我们再来讲一种跟前面都不一样的时间复杂度，代码的复杂度由两个数据的规模来决定。老规矩，先看代码！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt; m; ++i) &#123;</div><div class="line">    sum_1 = sum_1 + i;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; j &lt; n; ++j) &#123;</div><div class="line">    sum_2 = sum_2 + j;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> sum_1 + sum_2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p>
<p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)<em>T2(n) = O(f(m) </em> f(n))。</p>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系。</strong></p>
<p>举个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">  <span class="keyword">for</span> (i; i &lt;n; ++i) &#123;</div><div class="line">    a[i] = i * i;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">    print out a[i]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>
<p>我们常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p>
<h3 id="内容小节"><a href="#内容小节" class="headerlink" title="内容小节"></a>内容小节</h3><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。等你学完整个专栏之后，你就会发现几乎所有的数据结构和算法的复杂度都跑不出这几个。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-d2f12e37539d8733.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;T(n) = O(f(n))&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jingbin.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jingbin.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>推荐几款常用的Chrome插件</title>
    <link href="http://jingbin.me/2019/03/25/chrome-plugin/"/>
    <id>http://jingbin.me/2019/03/25/chrome-plugin/</id>
    <published>2019-03-25T12:02:00.000Z</published>
    <updated>2019-04-10T14:19:32.778Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>天空既在我们的头上又在我们的脚下。 - 梭罗/作家</p>
</blockquote>
<a id="more"></a>
<h3 id="1-广告终结者"><a href="#1-广告终结者" class="headerlink" title="1.广告终结者"></a>1.广告终结者</h3><p>用来清除网页上乱七八糟的广告，比如网站的竞价广告的显示，使自己想要的结果显示在前面。<br><img src="https://upload-images.jianshu.io/upload_images/1354448-3cb16077659f99e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="广告终结者.png"></p>
<h3 id="2-The-Great-Suspender"><a href="#2-The-Great-Suspender" class="headerlink" title="2.The Great Suspender"></a>2.The Great Suspender</h3><p>开很多页面时，用来释放很久没有浏览过的标签页，点击后再加载网页。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-b84479b4fc2cb42e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The Great Suspender.png"></p>
<h3 id="3-JSONView"><a href="#3-JSONView" class="headerlink" title="3.JSONView"></a>3.JSONView</h3><p>格式化json，如果是get请求，返回的json数据会结构清晰的显示在网页上。<br><img src="https://upload-images.jianshu.io/upload_images/1354448-b654cec6f132ba42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JSONView.png"></p>
<h3 id="4-Octotree"><a href="#4-Octotree" class="headerlink" title="4.Octotree"></a>4.Octotree</h3><p>看GitHub时，用来查看项目的目录结构，这个插件普及有段时间了。<br><img src="https://upload-images.jianshu.io/upload_images/1354448-123659e654301e01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Octotree.png"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-f73faeb37738e67d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图.png"></p>
<h3 id="5-Imagus"><a href="#5-Imagus" class="headerlink" title="5.Imagus"></a>5.Imagus</h3><p>添加后，将鼠标移到有图片链接的地方，就会显示图片大图。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-84419d8188b06fb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Imagus.png"></p>
<h3 id="6-捕捉网页截图-FireShot的"><a href="#6-捕捉网页截图-FireShot的" class="headerlink" title="6.捕捉网页截图 - FireShot的"></a>6.捕捉网页截图 - FireShot的</h3><p>可以自动滚动截图，保存GitHub每日趋势图和自己仓库图等很有作用。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-8a33c8934b1ad1ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FireShot.png"></p>
<h3 id="7-Dark-Reader"><a href="#7-Dark-Reader" class="headerlink" title="7.Dark Reader"></a>7.Dark Reader</h3><p>网页的黑夜模式。将网页的白底变成黑底，适合长时间看博客文章，找很久了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-8f7db07c6794b139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dark Reader.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;天空既在我们的头上又在我们的脚下。 - 梭罗/作家&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="http://jingbin.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://jingbin.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin | 2.Kotlin基础</title>
    <link href="http://jingbin.me/2019/03/24/kotlin-basics/"/>
    <id>http://jingbin.me/2019/03/24/kotlin-basics/</id>
    <published>2019-03-24T05:21:00.000Z</published>
    <updated>2019-04-10T14:08:44.769Z</updated>
    
    <content type="html"><![CDATA[<p>上篇：<a href="https://jingbin.me/2019/03/22/kotlin-define/">《Kotlin | 1.定义和目的》</a></p>
<a id="more"></a>
<blockquote>
<ul>
<li>声明函数、变量、类、枚举以及类型</li>
<li>Kotlin中的控制结构</li>
<li>智能转换</li>
<li>抛出和处理异常</li>
</ul>
</blockquote>
<p><a href="https://github.com/youlookwhat/kotlin-learning/blob/master/kotlin/app/src/main/java/com/kotlin/jingbin/kotlinapp/MainActivity.kt" target="_blank" rel="external">函数学习</a></p>
<h3 id="函数和变量"><a href="#函数和变量" class="headerlink" title="函数和变量"></a>函数和变量</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    *  求最大值</div><div class="line">    * if是表达式而不是语句，表达式有值，语句没有。</div><div class="line">    * java中所有的控制结构都是语句</div><div class="line">    * kotlin中除了循环以外大多数控制结构都是表达式</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 如果函数体写在花括号中，我们说这个函数有代码块体。</div><div class="line">    * 如果直接返回了一个表达式体，他就有表达式体。</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">max2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</div></pre></td></tr></table></figure>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="可变变量和不可变变量"><a href="#可变变量和不可变变量" class="headerlink" title="可变变量和不可变变量"></a>可变变量和不可变变量</h5><ul>
<li>val - 不可变引用。 相当于Java的final变量。</li>
<li>var - 可变引用。   普通的Java变量。</li>
</ul>
<p>在定义了val变量的代码块执行期间，val变量只能进行唯一一次初始化。但是，如果编译器能确保只有唯一一条初始化语句被执行，可以根据条件使用不同的值来初始化它：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> message:String</div><div class="line"><span class="keyword">if</span> (CanPerformOperation())&#123;</div><div class="line">   message = <span class="string">"Success"</span></div><div class="line">   <span class="comment">// ...</span></div><div class="line">&#125; <span class="keyword">else</span>&#123;</div><div class="line">   message = <span class="string">"Failed"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：尽管val引用自身是不可变的，但是它指向的对象可能是可变的。例如：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> languages = arrayListOf(<span class="string">"Java"</span>)  <span class="comment">// 声明不可变引用</span></div><div class="line">languages.add(<span class="string">"Kotlin"</span>)              <span class="comment">// 改变引用指向的对象</span></div></pre></td></tr></table></figure>
<p>错误：类型不匹配</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> answer = <span class="number">42</span></div><div class="line">answer = <span class="string">"no answer"</span></div></pre></td></tr></table></figure>
<h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a1 = <span class="number">1</span></div><div class="line"><span class="keyword">val</span> s1 = <span class="string">"a is <span class="subst">$a1</span>"</span></div><div class="line">a1 = <span class="number">3</span></div><div class="line"><span class="comment">// 模板中的任意表达式</span></div><div class="line"><span class="keyword">val</span> s2 = <span class="string">"<span class="subst">$&#123;s1.replace("is", "was")&#125;</span>,but no is <span class="subst">$a1</span>"</span></div><div class="line"><span class="comment">// a was 1, but now is 3</span></div><div class="line">Log.e(<span class="string">"s2"</span>, s2)</div></pre></td></tr></table></figure>
<p>和许多脚本语言一样，只需要在变量名称前加上 $ ，就可以在字符串字面值中引用局部变量。<br>引用”$”需要转义<code>“\$”</code></p>
<h3 id="类和属性"><a href="#类和属性" class="headerlink" title="类和属性"></a>类和属性</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>在Kotlin中，public是默认的可见性，所以你能省略它。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>—&gt;</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class Person(private val name: String)</div></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonProperty</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 只读属性：生成一个字段和一个简单的getter</span></div><div class="line">    val name: String = <span class="string">"kotlin_hahaha"</span></div><div class="line"></div><div class="line">    <span class="comment">// 可写属性：一个字段、一个getter和一个setter</span></div><div class="line">    var isMarried: Boolean = <span class="function"><span class="keyword">false</span></span></div><div class="line"></div><div class="line">    fun <span class="title">set</span><span class="params">()</span> &#123;</div><div class="line">        isMarried = <span class="keyword">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自定义访问器"><a href="#自定义访问器" class="headerlink" title="自定义访问器"></a>自定义访问器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jingbin on 2018/11/18.</div><div class="line"> * 自定义访问器</div><div class="line"> * 也可以使用函数返回，实现和性能没有差别，唯一的差别是可读性</div><div class="line"> * 通常来说：</div><div class="line"> * 如果描述的是类的特征(属性)，应该把它声明成属性。</div><div class="line"> */</div><div class="line">class Rectangle(val height: Int, val width: Int) &#123;</div><div class="line"></div><div class="line">    // 函数表达式 可以赋值</div><div class="line">    val isSquare: Boolean</div><div class="line">    // 声明属性的getter</div><div class="line">        get() &#123;</div><div class="line">            return height == width</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Kotlin源码布局：目录和包"><a href="#Kotlin源码布局：目录和包" class="headerlink" title="Kotlin源码布局：目录和包"></a>Kotlin源码布局：目录和包</h4><blockquote>
<p>1.把类和函数的声明放在包中，可以同级</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span>(<span class="keyword">val</span> height: <span class="built_in">Int</span>, <span class="keyword">val</span> width: <span class="built_in">Int</span>) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 函数表达式 可以赋值</span></div><div class="line">    <span class="keyword">val</span> isSquare: <span class="built_in">Boolean</span></div><div class="line">    <span class="comment">// 声明属性的getter</span></div><div class="line">        <span class="keyword">get</span>() &#123;</div><div class="line">            <span class="keyword">return</span> height == width</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createRandomRectangle</span><span class="params">()</span></span>: Rectangle &#123;</div><div class="line">    <span class="keyword">val</span> random = Random()</div><div class="line">    <span class="keyword">return</span> Rectangle(random.nextInt(), random.nextInt())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Kotlin不区分导入的是类还是函数，而且，它允许使用import关键字导入任何种类的声明。可以直接导入顶层函数的名称。</p>
<blockquote>
<p>2.导入其他包中的函数</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入函数的名称</span></div><div class="line"><span class="keyword">import</span> com.kotlin.jingbin.kotlinapp.classproperty.createRandomRectangle</div><div class="line"><span class="comment">// 导入其他包中的函数</span></div><div class="line">LogUtil.e(createRandomRectangle().isSquare)</div></pre></td></tr></table></figure>
<p>包层级和java类似。</p>
<h3 id="表示和处理选择-枚举和”when”"><a href="#表示和处理选择-枚举和”when”" class="headerlink" title="表示和处理选择: 枚举和”when”"></a>表示和处理选择: 枚举和”when”</h3><p>when结构，java中switch结构的替代品，但是更强大。智能转换。</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><h5 id="1-声明简单的枚举类"><a href="#1-声明简单的枚举类" class="headerlink" title="1.声明简单的枚举类"></a>1.声明简单的枚举类</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleColor</span> </span>&#123;</div><div class="line">    RED, ORANGE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-声明一个带属性的枚举类"><a href="#2-声明一个带属性的枚举类" class="headerlink" title="2.声明一个带属性的枚举类"></a>2.声明一个带属性的枚举类</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span></span>(</div><div class="line">        <span class="comment">// 声明枚举常量的属性</span></div><div class="line">        <span class="keyword">val</span> r: <span class="built_in">Int</span>, <span class="keyword">val</span> g: <span class="built_in">Int</span>, <span class="keyword">val</span> b: <span class="built_in">Int</span>) &#123;</div><div class="line">    <span class="comment">// 在每一个常量创建的时候指定属性值</span></div><div class="line">    RED(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),</div><div class="line">    ORANGE(<span class="number">255</span>, <span class="number">165</span>, <span class="number">0</span>),</div><div class="line">    WELLOW(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>),</div><div class="line">    GREEN(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),</div><div class="line">    BULE(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</div><div class="line">    INDIGO(<span class="number">75</span>, <span class="number">0</span>, <span class="number">130</span>),</div><div class="line">    VIILET(<span class="number">238</span>, <span class="number">130</span>, <span class="number">238</span>);<span class="comment">// 分号</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">rgb</span><span class="params">()</span></span> = (r * <span class="number">256</span> + g) * <span class="number">256</span> + b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-使用“when”处理枚举类"><a href="#3-使用“when”处理枚举类" class="headerlink" title="3.使用“when”处理枚举类"></a>3.使用“when”处理枚举类</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 使用when处理枚举类:</div><div class="line">    * 直接返回一个“when"表达式</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getMnemonic</span><span class="params">(color: <span class="type">Color</span>)</span></span> = &#123;</div><div class="line">       <span class="keyword">when</span> (color) &#123;</div><div class="line">           RED -&gt; <span class="string">"Richard"</span></div><div class="line">           ORANGE -&gt; <span class="string">"Of"</span></div><div class="line">           WELLOW -&gt; <span class="string">"Haha"</span></div><div class="line">           <span class="comment">// 合并多个选项</span></div><div class="line">           BULE, GREEN -&gt; <span class="string">"望穿"</span></div><div class="line">           VIILET, INDIGO -&gt; <span class="string">"秋水"</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="when"><a href="#when" class="headerlink" title="when"></a>when</h4><h5 id="1、在-when-结构中使用任意对象"><a href="#1、在-when-结构中使用任意对象" class="headerlink" title="1、在 when 结构中使用任意对象"></a>1、在 when 结构中使用任意对象</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mix</span><span class="params">(c1: <span class="type">Color</span>, c2: <span class="type">Color</span>)</span></span> = &#123;</div><div class="line">        <span class="comment">// when 表达式的实参可以是任何对象，它被检查是否与分支条件对等</span></div><div class="line">        <span class="keyword">when</span> (setOf(c1, c2)) &#123;</div><div class="line">            setOf(Color.RED, Color.YELLOW) -&gt; Color.ORANGE</div><div class="line">            setOf(Color.BLUE, Color.YELLOW) -&gt; Color.GREEN</div><div class="line">            setOf(Color.BLUE, Color.VIOLET) -&gt; Color.INDIGO</div><div class="line">        <span class="comment">// 如果没有任何其他分支匹配这里就会执行</span></div><div class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> Exception(<span class="string">"Dirty color"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="2、不带参数的-when"><a href="#2、不带参数的-when" class="headerlink" title="2、不带参数的 when"></a>2、不带参数的 when</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">minOptimized</span><span class="params">(c1: <span class="type">Color</span>, c2: <span class="type">Color</span>)</span></span> = &#123;</div><div class="line">        <span class="comment">// 没有实参传给 when</span></div><div class="line">        <span class="keyword">when</span> &#123;</div><div class="line">            (c1 == Color.RED &amp;&amp; c2 == Color.YELLOW) || (c2 == Color.RED &amp;&amp; c1 == Color.YELLOW) -&gt; Color.ORANGE</div><div class="line">            (c1 == Color.BLUE &amp;&amp; c2 == Color.YELLOW) || (c2 == Color.BLUE &amp;&amp; c1 == Color.YELLOW) -&gt; Color.GREEN</div><div class="line">            (c1 == Color.BLUE &amp;&amp; c2 == Color.VIOLET) || (c2 == Color.BLUE &amp;&amp; c1 == Color.VIOLET) -&gt; Color.INDIGO</div><div class="line"></div><div class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> Exception(<span class="string">"Dirty color"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="3、智能转换：合并类型检查和转换"><a href="#3、智能转换：合并类型检查和转换" class="headerlink" title="3、智能转换：合并类型检查和转换"></a>3、智能转换：合并类型检查和转换</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 3.1表达式层次结构</span></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Expr</span></span></div><div class="line"></div><div class="line">    <span class="comment">// 简单的值对象类，只有一个属性value，实现了Expr接口</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Num</span></span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Expr</div><div class="line"></div><div class="line">    <span class="comment">// sum运算的实参可以是任何Expr: Num或者另一个Sum</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Sum</span></span>(<span class="keyword">val</span> left: Expr, <span class="keyword">val</span> right: Expr) : Expr</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 3.2 使用 if 层叠对表达式求值</div><div class="line">     * 在 Kotlin 中，如果你检查过一个变量是某种类型，后面就不再需要转换它，可以就把它当作你检查过的类型使用。</div><div class="line">     * 事实上编译器为你执行了类型转换，我们把这种行为称为智能转换。</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="comment">// is - instanceOf</span></div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> Num) &#123;</div><div class="line">            <span class="comment">// 显示的转换成类型 Num是多余的</span></div><div class="line">            <span class="keyword">val</span> num = e <span class="keyword">as</span> Num</div><div class="line">            <span class="keyword">return</span> num.value</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> Sum) &#123;</div><div class="line">            <span class="comment">// 变量 e 被智能转换了类型</span></div><div class="line">            <span class="keyword">return</span> eval(e.left) + eval(e.right)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> IllegalAccessException(<span class="string">"Unknown expression"</span>)</div></pre></td></tr></table></figure>
<h5 id="4、重构：用“when”代替“if”"><a href="#4、重构：用“when”代替“if”" class="headerlink" title="4、重构：用“when”代替“if”"></a>4、重构：用“when”代替“if”</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Kotlin 中没有三元运算符，因为if有返回值</div><div class="line">     * 意味着: 可以用表达式语法重写eval函数，去掉return语句和花括号，使用if表达式作为函数体</div><div class="line">     */</div><div class="line">    <span class="comment">// 4.1 使用用返回值的 if 表达式</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eval2</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> =</div><div class="line">            <span class="keyword">if</span> (e <span class="keyword">is</span> Num) &#123;</div><div class="line">                e.value</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">is</span> Sum) &#123;</div><div class="line">                eval2(e.right) + eval2(e.left)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> IllegalAccessException(<span class="string">"Unknown expression"</span>)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 4.2 使用 when 代替 if 层叠</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eval3</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> =</div><div class="line">            <span class="keyword">when</span> (e) &#123;</div><div class="line">                <span class="keyword">is</span> Num -&gt; e.value</div><div class="line">                <span class="keyword">is</span> Sum -&gt; eval3(e.right) + eval3(e.left)</div><div class="line">                <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalAccessException(<span class="string">"Unknown expression"</span>)</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h5 id="5、代码块作为-“if”-和-“when”-的分支"><a href="#5、代码块作为-“if”-和-“when”-的分支" class="headerlink" title="5、代码块作为 “if” 和 “when” 的分支"></a>5、代码块作为 “if” 和 “when” 的分支</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 一个函数要么具有不是代码块的表达式函数体，</div><div class="line">     * 要么具有包含显示return语句的代码块函数体</div><div class="line">     */</div><div class="line">    <span class="comment">// 在分支中含有混合操作的 when</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">evalWithLogging</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> =</div><div class="line">            <span class="keyword">when</span> (e) &#123;</div><div class="line">                <span class="keyword">is</span> Num -&gt; &#123;</div><div class="line">                    LogUtil.e(<span class="string">"num: <span class="subst">$&#123;e.value&#125;</span>"</span>)</div><div class="line">                    e.value</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">is</span> Sum -&gt; &#123;</div><div class="line">                    <span class="keyword">val</span> left = <span class="keyword">this</span>.evalWithLogging(e.left)</div><div class="line">                    <span class="keyword">val</span> right = <span class="keyword">this</span>.evalWithLogging(e.right)</div><div class="line">                    LogUtil.e(<span class="string">"Sum: <span class="subst">$left</span> + <span class="subst">$right</span>"</span>)</div><div class="line">                    <span class="comment">// 代码块中最后的表达式就是结果</span></div><div class="line">                    left + right</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalAccessException(<span class="string">"Unknown expression"</span>)</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h3 id="迭代事物-“when”循环和“for”循环"><a href="#迭代事物-“when”循环和“for”循环" class="headerlink" title="迭代事物: “when”循环和“for”循环"></a>迭代事物: “when”循环和“for”循环</h3><h4 id="1、“while”-循环"><a href="#1、“while”-循环" class="headerlink" title="1、“while” 循环"></a>1、“while” 循环</h4><p>Kotlin 有 while 循环和 do-while 循环，他们的语法和Java中相应的循环没有什么区别</p>
<h4 id="2、迭代数字：区间和数列"><a href="#2、迭代数字：区间和数列" class="headerlink" title="2、迭代数字：区间和数列"></a>2、迭代数字：区间和数列</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">     * 区间：区间本质上就是两个值之间的间隔，这两个值通常是数字：一个起始值，一个结束值。</div><div class="line">     * 使用 .. 运算符来表示区间</div><div class="line">     * 数列：你能用整数区间做的最基本的事情就是循环迭代其中所有的值。</div><div class="line">     * 如果你能迭代区间中所有的值，这样的区间被称作数列。</div><div class="line">     * */</div><div class="line"></div><div class="line">    <span class="keyword">val</span> oneToTen = <span class="number">1.</span><span class="number">.10</span></div><div class="line"></div><div class="line">    <span class="comment">// 使用 when 实现 Fizz-Buzz 游戏</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fizzBuzz</span><span class="params">(i: <span class="type">Int</span>)</span></span> = <span class="keyword">when</span> &#123;</div><div class="line">        i % <span class="number">15</span> == <span class="number">0</span> -&gt; <span class="string">"FizzBuzz"</span></div><div class="line">        i % <span class="number">3</span> == <span class="number">0</span> -&gt; <span class="string">"Fizz"</span></div><div class="line">        i % <span class="number">5</span> == <span class="number">0</span> -&gt; <span class="string">"Buzz"</span></div><div class="line">        <span class="keyword">else</span> -&gt; <span class="string">"<span class="subst">$i</span>"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;</div><div class="line"><span class="comment">//            LogUtil.e(fizzBuzz(i))</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 倒序 只计偶数 [使用 until 函数可以标识：不包含指定结束值的半闭合区间]</span></div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">100</span> downTo <span class="number">0</span> step <span class="number">2</span>) &#123;</div><div class="line">            LogUtil.e(fizzBuzz(i))</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h4 id="3、迭代map"><a href="#3、迭代map" class="headerlink" title="3、迭代map"></a>3、迭代map</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 TreeMap 让键排序</span></div><div class="line"> <span class="keyword">val</span> binaryReps = TreeMap&lt;<span class="built_in">Char</span>, String&gt;()</div><div class="line"> <span class="comment">// 创建字符区间 包括 F</span></div><div class="line"> <span class="keyword">for</span> (c <span class="keyword">in</span> <span class="string">'A'</span>..<span class="string">'F'</span>) &#123;</div><div class="line">     <span class="comment">// 把 ASCII 码转换成二进制</span></div><div class="line">     <span class="keyword">val</span> binaryString = Integer.toBinaryString(c.toInt())</div><div class="line">     binaryReps[c] = binaryString</div><div class="line"> &#125;</div><div class="line"> <span class="comment">// 迭代 map ，把键和值赋值给两个变量</span></div><div class="line"> <span class="keyword">for</span> ((letter, binary) <span class="keyword">in</span> binaryReps) &#123;</div><div class="line">     LogUtil.e(<span class="string">"<span class="subst">$letter</span> = <span class="subst">$binary</span>"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 迭代集合时 使用下标</span></div><div class="line"> <span class="keyword">val</span> list = arrayListOf(<span class="string">"10"</span>, <span class="string">"11"</span>, <span class="string">"1001"</span>)</div><div class="line"> <span class="keyword">for</span> ((index, element) <span class="keyword">in</span> list.withIndex()) &#123;</div><div class="line">     LogUtil.e(<span class="string">"<span class="subst">$index</span> = <span class="subst">$element</span>"</span>)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="4、使用-“in”-检查集合和区间的成员"><a href="#4、使用-“in”-检查集合和区间的成员" class="headerlink" title="4、使用 “in” 检查集合和区间的成员"></a>4、使用 “in” 检查集合和区间的成员</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// 1.使用 in 检查区间的成员</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isLetter</span><span class="params">(c: <span class="type">Char</span>)</span></span> = c <span class="keyword">in</span> <span class="string">'a'</span>..<span class="string">'z'</span> || c <span class="keyword">in</span> <span class="string">'A'</span>..<span class="string">'Z'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isNoDigitic</span><span class="params">(c: <span class="type">Char</span>)</span></span> = c !<span class="keyword">in</span> <span class="string">'0'</span>..<span class="string">'9'</span></div><div class="line"></div><div class="line">    <span class="comment">// 2.用 in 检查作为when分支</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">recognize</span><span class="params">(c: <span class="type">Char</span>)</span></span> = <span class="keyword">when</span> (c) &#123;</div><div class="line">        <span class="keyword">in</span> <span class="string">'0'</span>..<span class="string">'9'</span> -&gt; <span class="string">"In's a digit!"</span></div><div class="line">        <span class="keyword">in</span> <span class="string">'a'</span>..<span class="string">'z'</span>, <span class="keyword">in</span> <span class="string">'A'</span>..<span class="string">'Z'</span> -&gt; <span class="string">"In's a letter!"</span></div><div class="line">        <span class="keyword">else</span> -&gt; <span class="string">"I don't know.."</span></div><div class="line">    &#125;</div><div class="line">``` </div><div class="line"></div><div class="line">### Kotlin中的异常</div><div class="line">```kotlin</div><div class="line"><span class="comment">// val 不能再赋值，相当于 final</span></div><div class="line">        <span class="keyword">val</span> percentage = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (percentage !<span class="keyword">in</span> <span class="number">0.</span><span class="number">.100</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> IllegalAccessException(<span class="string">"A percentage value must be between 0 and 100: <span class="subst">$percentage</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 和所有其他类一样，不必使用 new 关键字来创建异常实例。</div><div class="line">         * 和java不同的是，Kotlin中throw结构是一个表达式，能作为另一个表达式的一部分使用：</div><div class="line">         */</div><div class="line"></div><div class="line">        <span class="keyword">val</span> number = <span class="number">8</span></div><div class="line">        <span class="keyword">val</span> percentage2 =</div><div class="line">                <span class="keyword">if</span> (number <span class="keyword">in</span> <span class="number">0.</span><span class="number">.100</span>) &#123;</div><div class="line">                    number</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// throw 是一个表达式</span></div><div class="line">                    <span class="keyword">throw</span> IllegalAccessException(<span class="string">"A percentage value must be between 0 and 100: <span class="subst">$percentage</span>"</span>)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> bufferedReader = BufferedReader(StringReader(<span class="string">"239"</span>))</div></pre></td></tr></table></figure>
<h4 id="1、try-catch-和-finally"><a href="#1、try-catch-和-finally" class="headerlink" title="1、try catch 和 finally"></a>1、try catch 和 finally</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不必显式地知道这个函数可能抛出的异常</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readNumber</span><span class="params">(reader: <span class="type">BufferedReader</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">val</span> line = reader.readLine()</div><div class="line">            <span class="keyword">return</span> Integer.parseInt(line)</div><div class="line"></div><div class="line">            <span class="comment">// 异常类型在右边</span></div><div class="line">        &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            reader.close()</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="2、try-作为表达式"><a href="#2、try-作为表达式" class="headerlink" title="2、try 作为表达式"></a>2、try 作为表达式</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readNumber2</span><span class="params">(reader: <span class="type">BufferedReader</span>)</span></span> &#123;</div><div class="line">        <span class="keyword">val</span> number = <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 没有任何异常发生时 使用这个值</span></div><div class="line">            Integer.parseInt(reader.readLine())</div><div class="line">        &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</div><div class="line"><span class="comment">//            return</span></div><div class="line">            <span class="comment">// 发生异常时的情况下使用 null</span></div><div class="line">            <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>fun 关键字用来声明函数。Val关键字和var关键字分别用来声明只读变量和可变变量。</li>
<li>字符串模板帮组你避免繁琐的字符串拼接。在变量名称前加上 $ 前缀或者用 ${} 包围一个表达式，来把值注入到字符串中。</li>
<li>值对象类在Kotlin中以简洁的方式表示。</li>
<li>熟悉的if现在是带返回值的表达式。</li>
<li>when表达式类似于Java中的switch但功能更强大。</li>
<li>在检查过变量具有某种类型之后不必显示地转换它的类型:编译器使用智能转换字段帮你完成。</li>
<li>for、while、和 do-while 循环与java类似，但是for循环现在更加方便，特别是当你需要迭代map的时候，又或是迭代集合需要下标的时候。</li>
<li>简洁的语法 1..5 会创建一个区间。区间和数列允许Kotlin在for循环中使用统一的语法和同一套抽象机制，并且还可以使用in运算符和!in运算符来检查值是否属于某个区间。</li>
<li>Kotlin中的异常处理和java非常相似，除了Kotlin不要求你声明函数可以抛出异常。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇：&lt;a href=&quot;https://jingbin.me/2019/03/22/kotlin-define/&quot;&gt;《Kotlin | 1.定义和目的》&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://jingbin.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://jingbin.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin | 1.定义和目的</title>
    <link href="http://jingbin.me/2019/03/22/kotlin-define/"/>
    <id>http://jingbin.me/2019/03/22/kotlin-define/</id>
    <published>2019-03-22T09:24:00.000Z</published>
    <updated>2019-03-22T15:39:05.490Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>书籍：<a href="https://book.douban.com/subject/27093660/" target="_blank" rel="external">《Kotlin实战》</a></li>
</ul>
<a id="more"></a>
<p>本章内容包括：</p>
<blockquote>
<ul>
<li>Kotlin 的基本示范</li>
<li>Kotlin 语言的主要特征</li>
<li>Android 和服务端开发的可能性</li>
<li>Kotlin 与其他语言的区别</li>
<li>用 Kotlin 编写并运行代码</li>
</ul>
</blockquote>
<ul>
<li>Kotlin和Java一样是一种静态类型的编程语言。编译时即可检查代码正确性。动态语言：Groovy,JRuby。</li>
<li>根据上下问判断变量类型： val x=1</li>
<li>性能、可靠性、可维护性、工具支持。</li>
</ul>
<hr>
<p>支持函数式编程风格，不强制使用：</p>
<ul>
<li>函数类型，允许函数接受其他函数作为参数，或者返回其他函数。</li>
<li>lambda表达式</li>
<li>数据类，提供了创建不可变值对象的简明语法</li>
<li>标准库中包含了丰富的API集合，让你用函数式编程风格操作对象和集合。</li>
</ul>
<hr>
<p>自动检查空指针：</p>
<ul>
<li>val s: String? = null  可以为null，也会检查，禁止可能导致的空指针</li>
<li>val s2: String = “”    不能为null</li>
</ul>
<p>避免类型转换异常：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(value <span class="keyword">is</span> String)               检查类型</div><div class="line">  println(value.toUpperCase())    调用该类型的方法</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>源代码文件存放在后缀名为.kt的文件中，编辑器生成.class文件。</li>
<li>AndriodSdudio中使用：<strong>“Setting(设置) - Plugins(插件) - Install JetBrains Plugin - Kotlin”</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;书籍：&lt;a href=&quot;https://book.douban.com/subject/27093660/&quot;&gt;《Kotlin实战》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://jingbin.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://jingbin.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android Span在项目中的几种使用方式</title>
    <link href="http://jingbin.me/2019/03/21/android-span/"/>
    <id>http://jingbin.me/2019/03/21/android-span/</id>
    <published>2019-03-21T08:33:00.000Z</published>
    <updated>2019-03-22T15:34:19.577Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>1.改变文字颜色</li>
<li>2.改变文字大小</li>
<li>3.改变文字颜色 并 添加点击事件</li>
<li>4.增加边框和改变颜色及字体大小</li>
</ul>
<a id="more"></a>
<h3 id="1-改变文字颜色"><a href="#1-改变文字颜色" class="headerlink" title="1.改变文字颜色"></a>1.改变文字颜色</h3><blockquote>
<p>ForegroundColorSpan</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义颜色</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> content 全部文本</div><div class="line"> * <span class="doctag">@param</span> keyWord 需要变色的关键字</div><div class="line"> * <span class="doctag">@param</span> color   颜色</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpannableStringBuilder <span class="title">getSpan</span><span class="params">(String content, String keyWord, <span class="keyword">int</span> color)</span> </span>&#123;</div><div class="line">    SpannableStringBuilder span = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (content == <span class="keyword">null</span>) &#123;</div><div class="line">        span = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">""</span>);</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> startIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (keyWord != <span class="keyword">null</span>) &#123;</div><div class="line">            startIndex = content.indexOf(keyWord);</div><div class="line">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class="line">            span = <span class="keyword">new</span> SpannableStringBuilder(content);</div><div class="line">            <span class="keyword">if</span> (startIndex != -<span class="number">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class="line">                span.setSpan(<span class="keyword">new</span> ForegroundColorSpan(getResoure().getColor(color)), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-改变文字大小"><a href="#2-改变文字大小" class="headerlink" title="2.改变文字大小"></a>2.改变文字大小</h3><blockquote>
<p>AbsoluteSizeSpan</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置单个字符串的文字大小</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> content 全部文字</div><div class="line"> * <span class="doctag">@param</span> keyWord 需要改变的文本</div><div class="line"> * <span class="doctag">@param</span> spValue 需要设置的文本大小</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpannableStringBuilder <span class="title">getSizeSpan</span><span class="params">(String content, String keyWord, <span class="keyword">float</span> spValue)</span> </span>&#123;</div><div class="line">    SpannableStringBuilder span = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(content)) &#123;</div><div class="line">        span = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">""</span>);</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> startIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (keyWord != <span class="keyword">null</span>) &#123;</div><div class="line">            startIndex = content.indexOf(keyWord);</div><div class="line">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class="line">            span = <span class="keyword">new</span> SpannableStringBuilder(content);</div><div class="line">            <span class="keyword">if</span> (startIndex != -<span class="number">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class="line">                <span class="keyword">float</span> px = DensityAppUtil.sp2px(spValue);</div><div class="line">                span.setSpan(<span class="keyword">new</span> AbsoluteSizeSpan((<span class="keyword">int</span>) px), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-改变文字颜色-并-添加点击事件"><a href="#3-改变文字颜色-并-添加点击事件" class="headerlink" title="3.改变文字颜色 并 添加点击事件"></a>3.改变文字颜色 并 添加点击事件</h3><blockquote>
<p>ClickableSpan</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButtonSpan</span> <span class="keyword">extends</span> <span class="title">ClickableSpan</span> </span>&#123;</div><div class="line"></div><div class="line">    View.OnClickListener onClickListener;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> colorId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ButtonSpan</span><span class="params">(Context context, View.OnClickListener onClickListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, onClickListener, R.color.color_theme);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ButtonSpan</span><span class="params">(Context context, View.OnClickListener onClickListener, <span class="keyword">int</span> colorId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onClickListener = onClickListener;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.colorId = colorId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</div><div class="line">        ds.setColor(context.getResources().getColor(colorId));</div><div class="line">        ds.setUnderlineText(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (onClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">            onClickListener.onClick(widget);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content为全部的字符串，keyWord为需要改变的字符串</span></div><div class="line">SpannableString spannableString = <span class="keyword">new</span> SpannableString(content);</div><div class="line">ButtonSpan span = <span class="keyword">new</span> ButtonSpan(v.getContext(), <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something..</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, R.color.color_theme);</div><div class="line">spannableString.setSpan(span, content.indexOf(keyWord), content.indexOf(keyWord + keyWord.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line"><span class="comment">//不设置 没有点击事件</span></div><div class="line">titleTop.setMovementMethod(LinkMovementMethod.getInstance());</div><div class="line"><span class="comment">//设置点击后的颜色为透明</span></div><div class="line">titleTop.setHighlightColor(Color.TRANSPARENT);</div><div class="line">titleTop.setText(spannableString);</div></pre></td></tr></table></figure></p>
<h3 id="4-增加边框和改变颜色及字体大小"><a href="#4-增加边框和改变颜色及字体大小" class="headerlink" title="4.增加边框和改变颜色及字体大小"></a>4.增加边框和改变颜色及字体大小</h3><blockquote>
<p>ReplacementSpan</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagSpan</span> <span class="keyword">extends</span> <span class="title">ReplacementSpan</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// span width</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSize;</div><div class="line">    <span class="comment">// text and background wireframe color</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor;</div><div class="line">    <span class="comment">// tag text size</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextSizePx;</div><div class="line">    <span class="comment">// background radius</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRadiusPx;</div><div class="line">    <span class="comment">// background wireframe right margin</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRightMarginPx;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagSpan</span><span class="params">(<span class="keyword">int</span> color, <span class="keyword">int</span> textSizePx, <span class="keyword">int</span> radiusPx, <span class="keyword">int</span> rightMarginPx)</span> </span>&#123;</div><div class="line">        mColor = color;</div><div class="line">        mTextSizePx = textSizePx;</div><div class="line">        mRadiusPx = radiusPx;</div><div class="line">        mRightMarginPx = rightMarginPx;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(@NonNull Paint paint, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, Paint.FontMetricsInt fm)</span> </span>&#123;</div><div class="line">        mSize = (<span class="keyword">int</span>) paint.measureText(text, start, end) + mRightMarginPx;</div><div class="line">        <span class="keyword">return</span> mSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(@NonNull Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, Paint paint)</span> </span>&#123;</div><div class="line">        drawTagRect(canvas, x, y, paint);</div><div class="line">        drawTagText(canvas, text, start, end, y, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTagRect</span><span class="params">(Canvas canvas, <span class="keyword">float</span> x, <span class="keyword">int</span> y, Paint paint)</span> </span>&#123;</div><div class="line">        paint.setColor(mColor);</div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        Paint.FontMetricsInt fontMetrics = paint.getFontMetricsInt();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span> strokeWidth = paint.getStrokeWidth();</div><div class="line">        RectF oval = <span class="keyword">new</span> RectF(x + strokeWidth + <span class="number">0.5f</span>, y + fontMetrics.ascent, x + mSize + strokeWidth + <span class="number">0.5f</span> - mRightMarginPx, y + fontMetrics.descent);</div><div class="line">        paint.setStyle(Paint.Style.STROKE);</div><div class="line">        canvas.drawRoundRect(oval, mRadiusPx, mRadiusPx, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTagText</span><span class="params">(Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> y, Paint paint)</span> </span>&#123;</div><div class="line">        paint.setTextSize(mTextSizePx);</div><div class="line">        paint.setColor(mColor);</div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        paint.setTextAlign(Paint.Align.CENTER);</div><div class="line"></div><div class="line">        Paint.FontMetrics fontMetrics = paint.getFontMetrics();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> textCenterX = (mSize - mRightMarginPx / <span class="number">2</span>) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> textBaselineY = (<span class="keyword">int</span>) (y - fontMetrics.descent / <span class="number">2</span>);</div><div class="line">        <span class="keyword">final</span> String tag = text.subSequence(start, end).toString();</div><div class="line">        canvas.drawText(tag, textCenterX, textBaselineY, paint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用静态方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 增加边框和改变颜色及字体大小</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> content 内容</div><div class="line"> * <span class="doctag">@param</span> keyWord 关键字</div><div class="line"> * <span class="doctag">@param</span> color   颜色</div><div class="line"> * <span class="doctag">@param</span> sp      字体sp，需转换为对应的px</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpannableStringBuilder <span class="title">getSpan</span><span class="params">(String content, String keyWord, <span class="keyword">int</span> color, <span class="keyword">int</span> sp)</span> </span>&#123;</div><div class="line">    SpannableStringBuilder span = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (content == <span class="keyword">null</span>) &#123;</div><div class="line">        span = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">""</span>);</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> startIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(keyWord)) &#123;</div><div class="line">            startIndex = content.indexOf(keyWord);</div><div class="line">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class="line">            span = <span class="keyword">new</span> SpannableStringBuilder(content);</div><div class="line">            <span class="keyword">if</span> (startIndex != -<span class="number">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class="line">                <span class="comment">// 圆角 右边距</span></div><div class="line">                span.setSpan(<span class="keyword">new</span> TagSpan(color, (<span class="keyword">int</span>) sp, <span class="number">4</span>, <span class="number">8</span>), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1.改变文字颜色&lt;/li&gt;
&lt;li&gt;2.改变文字大小&lt;/li&gt;
&lt;li&gt;3.改变文字颜色 并 添加点击事件&lt;/li&gt;
&lt;li&gt;4.增加边框和改变颜色及字体大小&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="span" scheme="http://jingbin.me/tags/span/"/>
    
  </entry>
  
  <entry>
    <title>Git commit 规范</title>
    <link href="http://jingbin.me/2019/03/20/git-commit/"/>
    <id>http://jingbin.me/2019/03/20/git-commit/</id>
    <published>2019-03-20T07:49:00.000Z</published>
    <updated>2019-03-22T15:30:29.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与道人之短，勿说己之长；人骂之一笑，人誉之一笑。  - 齐白石/国画大师</p>
</blockquote>
<a id="more"></a>
<p>git提交估计也快上万次了，每次不知道怎么写好，今天在网上找到一套规范然后加上常用的一些，总结出来一套 Git commit 规范，没有强制的规定，主要是翻阅以前的日志会更清晰。</p>
<hr>
<p> <code>type: description</code></p>
<p><code>type</code> 是 commit 的类别，只允许如下几种标识：</p>
<ul>
<li>fix: 修复bug</li>
<li>add: 新功能</li>
<li>update: 更新</li>
<li>refactor : 某个已有功能重构</li>
<li>perf : 性能优化</li>
<li>style : 代码格式改变</li>
<li>test: 增加测试代码</li>
<li>docs : 文档改变</li>
<li>revert: 撤销上一次的commit</li>
<li>build: 构建工具或构建过程等的变动，如：关联包升级等</li>
</ul>
<p><code>description</code> 是对本次提交的简短描述：</p>
<ul>
<li>不超过50个字符。</li>
<li>推荐以动词开头，如： 设置、修改、增加、删减、撤销等</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与道人之短，勿说己之长；人骂之一笑，人誉之一笑。  - 齐白石/国画大师&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jingbin.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jingbin.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>TabLayout的几种用法</title>
    <link href="http://jingbin.me/2019/03/19/android-tablayout/"/>
    <id>http://jingbin.me/2019/03/19/android-tablayout/</id>
    <published>2019-03-19T12:13:00.000Z</published>
    <updated>2019-03-22T15:26:18.103Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>1.结合ViewPager使用</li>
<li>2.点击滑动选中，类似<code>RadioGroup</code>的效果</li>
<li>3.点击滑动到屏幕中央，并再次点击可取消</li>
</ul>
<a id="more"></a>
<h3 id="1-结合ViewPager使用"><a href="#1-结合ViewPager使用" class="headerlink" title="1.结合ViewPager使用"></a>1.结合ViewPager使用</h3><p>这是最常见的用法了，实现也比较简单。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-c52cde3a668e998a.gif?imageMogr2/auto-orient/strip" alt="tablayout01.gif"></p>
<p>布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tab_book"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"38dp"</span></div><div class="line">    <span class="attr">app:tabBackground</span>=<span class="string">"@drawable/ripple_tab_bg"</span></div><div class="line">    <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@color/colorTheme"</span></div><div class="line">    <span class="attr">app:tabSelectedTextColor</span>=<span class="string">"@color/colorTheme"</span></div><div class="line">    <span class="attr">app:tabTextColor</span>=<span class="string">"@color/colorTabText"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/vp_book"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>对应的Activity页面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WanFragment</span> <span class="keyword">extends</span> <span class="title">BaseFragment</span>&lt;<span class="title">NoViewModel</span>,<span class="title">FragmentBookBinding</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mTitleList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Fragment&gt; mFragments = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line"></div><div class="line">        showLoading();</div><div class="line">        initFragmentList();</div><div class="line">        MyFragmentPagerAdapter myAdapter = <span class="keyword">new</span> MyFragmentPagerAdapter(getChildFragmentManager(), mFragments, mTitleList);</div><div class="line">        bindingView.vpBook.setAdapter(myAdapter);</div><div class="line">        <span class="comment">// 左右预加载页面的个数</span></div><div class="line">        bindingView.vpBook.setOffscreenPageLimit(<span class="number">2</span>);</div><div class="line">        myAdapter.notifyDataSetChanged();</div><div class="line">        bindingView.tabBook.setTabMode(TabLayout.MODE_FIXED);</div><div class="line">        bindingView.tabBook.setupWithViewPager(bindingView.vpBook);</div><div class="line">        showContentView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">setContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.fragment_book;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFragmentList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTitleList.clear();</div><div class="line">        mTitleList.add(<span class="string">"玩安卓"</span>);</div><div class="line">        mTitleList.add(<span class="string">"知识体系"</span>);</div><div class="line">        mTitleList.add(<span class="string">"导航数据"</span>);</div><div class="line">        mFragments.add(BannerFragment.newInstance());</div><div class="line">        mFragments.add(TreeFragment.newInstance());</div><div class="line">        mFragments.add(NaviFragment.newInstance());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置后就可以达到切换滑动的效果。</p>
<h3 id="2-点击滑动选中，类似RadioGroup的效果"><a href="#2-点击滑动选中，类似RadioGroup的效果" class="headerlink" title="2.点击滑动选中，类似RadioGroup的效果"></a>2.点击滑动选中，类似<code>RadioGroup</code>的效果</h3><p><img src="https://upload-images.jianshu.io/upload_images/1354448-d1001a99c065fadc.gif?imageMogr2/auto-orient/strip" alt="tablayout02.gif"></p>
<p>不过它与<code>RadioGroup</code>不同在于它有下划线可以滑动，更<code>动感</code>…，如果产品经理要求这样实现，就可以派上用场了。</p>
<p>布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tl_search"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorTheme"</span></div><div class="line">            <span class="attr">app:tabGravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">            <span class="attr">app:tabMode</span>=<span class="string">"fixed"</span></div><div class="line">            <span class="attr">app:tabSelectedTextColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">            <span class="attr">app:tabTextAppearance</span>=<span class="string">"@style/MyTabLayoutTextAppearance"</span></div><div class="line">            <span class="attr">app:tabTextColor</span>=<span class="string">"@color/colorWhiteHalf"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"玩安卓"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"干货 | 安卓"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"干货 | 全部"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"网页"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然也可以在Activit动态添加，其中的一些颜色设置等就不细说了~：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String bean : list) &#123;</div><div class="line">     MyTabLayout.Tab tab = binding.tlSearch.newTab();</div><div class="line">     tab.setText(bean.getName());</div><div class="line">     binding.tlSearch.addTab(tab);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>然后再监听点击的时候做处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">binding.tlSearch.addOnTabSelectedListener(<span class="keyword">new</span> TabLayout.OnTabSelectedListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabSelected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">        <span class="comment">// 选中 逻辑操作 (再次点击不会触发)</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabUnselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabReselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="3-点击滑动到屏幕中央，并再次点击可取消"><a href="#3-点击滑动到屏幕中央，并再次点击可取消" class="headerlink" title="3.点击滑动到屏幕中央，并再次点击可取消"></a>3.点击滑动到屏幕中央，并再次点击可取消</h3><p><img src="https://upload-images.jianshu.io/upload_images/1354448-59d07d987b8a1104.gif?imageMogr2/auto-orient/strip" alt="tablayout03.gif"></p>
<p>这样的效果很实用，很多App都会有这样的效果，以前我都是用<code>HorizontalScrollView</code>来实现的，设置点击的item滑动到屏幕中央。</p>
<p>后来想想<code>TabLayout</code>继承自<code>HorizontalScrollView</code>，选中也会自动滚动并居中，于是就选用了它来实现，相对于直接使用<code>HorizontalScrollView</code>代码量更少。</p>
<p>布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tl_tag"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></div><div class="line">    <span class="attr">app:tabIndicatorHeight</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span></div><div class="line">    <span class="attr">app:tabSelectedTextColor</span>=<span class="string">"@color/color_theme"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>Activity里控制：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加自定义Tab</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</div><div class="line">    TabLayout.Tab tab = bindingView.tlTag.newTab();</div><div class="line">    bindingView.tlTag.addTab(tab.setCustomView(getTabView(result.get(i).getName())));</div><div class="line">&#125;</div><div class="line"><span class="comment">// 默认 手动设置 position=0的Tab不选中</span></div><div class="line"><span class="keyword">if</span> (bindingView.tlTag.getTabAt(<span class="number">0</span>) != <span class="keyword">null</span></div><div class="line">        &amp;&amp; bindingView.tlTag.getTabAt(<span class="number">0</span>).getCustomView() != <span class="keyword">null</span>) &#123;</div><div class="line">    bindingView.tlTag.getTabAt(<span class="number">0</span>).getCustomView().setSelected(<span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 添加监听</span></div><div class="line">addTagListener();</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">// 哪个tag被选择过</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> tagSelectPosition = <span class="number">0</span>;</div><div class="line"><span class="comment">// 是否被选中</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> tagSelect = <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// 主要处理取消选中的状态</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTagListener</span><span class="params">()</span> </span>&#123;</div><div class="line">    bindingView.tlTag.addOnTabSelectedListener(<span class="keyword">new</span> TabLayout.OnTabSelectedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabSelected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">            <span class="comment">// // 切换到此tab，则设置已选中position和选中的状态</span></div><div class="line">            tagSelectPosition = tab.getPosition();</div><div class="line">            tagSelect = <span class="keyword">true</span>;</div><div class="line">            <span class="comment">// do something..</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabUnselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabReselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">            <span class="comment">// // Tab再次被点击会走这里</span></div><div class="line">            <span class="comment">// 之前手动 [取消] 的tab角标 初始值为0</span></div><div class="line">            <span class="keyword">if</span> (tagSelectPosition == tab.getPosition()) &#123;</div><div class="line">                <span class="keyword">if</span> (tagSelect) &#123;</div><div class="line">                    <span class="comment">// tab之前被选中，则手动取消</span></div><div class="line">                    <span class="keyword">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class="keyword">null</span></div><div class="line">                            &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class="keyword">null</span>) &#123;</div><div class="line">                        tagSelectPosition = tab.getPosition();</div><div class="line">                        tagSelect = <span class="keyword">false</span>;</div><div class="line">                        bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView().setSelected(<span class="keyword">false</span>);</div><div class="line">                        <span class="comment">// do something..</span></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// tab之前被取消，则手动将其选中</span></div><div class="line">                    <span class="keyword">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class="keyword">null</span></div><div class="line">                            &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class="keyword">null</span>) &#123;</div><div class="line">                        tagSelectPosition = tab.getPosition();</div><div class="line">                        tagSelect = <span class="keyword">true</span>;</div><div class="line">                         <span class="comment">// do something..</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 一般不会触发，以防万一</span></div><div class="line">                <span class="keyword">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class="keyword">null</span></div><div class="line">                        &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class="keyword">null</span>) &#123;</div><div class="line">                    tagSelectPosition = tab.getPosition();</div><div class="line">                    tagSelect = <span class="keyword">true</span>;</div><div class="line">                     <span class="comment">// do something..</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><p>第一部分：<a href="https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/wan/WanFragment.java" target="_blank" rel="external">WanFragment.java</a><br>第二部分：<a href="https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/menu/SearchActivity.java" target="_blank" rel="external">SearchActivity.java</a></p>
<p>完整Demo项目：<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">https://github.com/youlookwhat/CloudReader</a></p>
<p>第三部分因为是公司项目，暂时只有上面的代码片段，已包含所有的相关代码，如果有问题请留言，我会重新整理在Demo里。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1.结合ViewPager使用&lt;/li&gt;
&lt;li&gt;2.点击滑动选中，类似&lt;code&gt;RadioGroup&lt;/code&gt;的效果&lt;/li&gt;
&lt;li&gt;3.点击滑动到屏幕中央，并再次点击可取消&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android MVC、MVP、MVVM、MVP-databinding 架构单元示例</title>
    <link href="http://jingbin.me/2019/03/18/android-mvc-mvp-mvvm/"/>
    <id>http://jingbin.me/2019/03/18/android-mvc-mvp-mvvm/</id>
    <published>2019-03-18T09:35:00.000Z</published>
    <updated>2019-03-22T15:20:36.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>生命不必每时每刻都要冲刺，低沉时就当是放一个悠长假期。 - 北川悦吏子/编剧</p>
</blockquote>
<a id="more"></a>
<p>GitHub地址：<a href="https://github.com/youlookwhat/ProjectPatternStudy" target="_blank" rel="external">ProjectPatternStudy</a></p>
<p>基本Android项目都采用MVC、MVP、MVVM架构，个人认为软件架构没有绝对的优劣之分，大家都各有利弊。</p>
<ul>
<li>如果页面比较单一，采用MVC也未尝不可；</li>
<li>如果需要稳定性高，解耦性强就可以选用MVP，使M层与V层分离，结构更清晰；</li>
<li>如果想尝鲜(其实已经有段时间了)，少写接口，高效，也可以使用MVVM；</li>
</ul>
<p>阮一峰《<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="external">MVC，MVP 和 MVVM 的图示</a>》总结的非常简练，这里相当于扩展了一下，对于不太懂的人可能会用处更大。</p>
<p>MVP-databinding：是使用MVP架构，但是布局使用databinding设置值，也是行之有效的一种，也可以满足你的需求。</p>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>Model-View-Controller，最常见的软件架构之一。</p>
<ul>
<li>视图（View）：用户界面。</li>
<li>控制器（Controller）：业务逻辑</li>
<li>模型（Model）：数据保存</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-bf0d44e0665daf6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来自MVC----MVC，MVP 和 MVVM 的图示"></p>
<p>如<code>Avtivity</code>里的一个点击事件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将业务逻辑封装在Model里, 但C(Activity)层可以和Model直接交互, 交互完后根据显示结果来调整V层(如 显示数据)</div><div class="line"> */</div><div class="line">EssayModel essayModel = <span class="keyword">new</span> EssayModel(LoadDataActivity.<span class="keyword">this</span>);</div><div class="line">essayModel.getEssay(<span class="number">3</span>, <span class="keyword">new</span> EssayModel.OnEssayListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;Essay&gt; list)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 直接使用list,得到List的逻辑都放在mode层</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.get(<span class="number">0</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">            tvViewUpdata.setText(<span class="string">"MVC 更新数据: "</span> + list.get(<span class="number">0</span>).getTitle());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果一个页面比较简单，只有简单的几个操作，也不会经常去改可以使用此方式；如果页面逻辑比较复杂，接口请求都有好几个，那么不建议使用MVC，因为代码会全部堆积在一个Activity里面，会显得非常之冗余。</p>
<h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。<br><img src="http://upload-images.jianshu.io/upload_images/1354448-11d6a8d1746fae11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来自MVP----MVC，MVP 和 MVVM 的图示"></p>
<p>通过P层将Model层与View层解耦，同时P与V、P与M可以相互通信。<br>下面举个登录的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">IUserLoginView</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.et_username)</div><div class="line">    EditText etUsername;</div><div class="line">    <span class="meta">@BindView</span>(R.id.et_password)</div><div class="line">    EditText etPassword;</div><div class="line">    <span class="meta">@BindView</span>(R.id.bt_login)</div><div class="line">    Button btLogin;</div><div class="line">    <span class="meta">@BindView</span>(R.id.bt_clear)</div><div class="line">    Button btClear;</div><div class="line">    <span class="meta">@BindView</span>(R.id.progress)</div><div class="line">    ProgressBar progress;</div><div class="line">    <span class="meta">@BindView</span>(R.id.activity_user_login)</div><div class="line">    RelativeLayout activityUserLogin;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> UserLoginPresenter userLoginPresenter = <span class="keyword">new</span> UserLoginPresenter(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_user_login);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        setTitle(<span class="string">"用户登录（MVP）"</span>);</div><div class="line"></div><div class="line">        initListener();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span> </span>&#123;</div><div class="line">        btLogin.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                userLoginPresenter.login();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        btClear.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                userLoginPresenter.clear();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> etUsername.getText().toString().trim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> etPassword.getText().toString().trim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        etUsername.setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        etPassword.setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        progress.setVisibility(View.VISIBLE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hindLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        progress.setVisibility(View.GONE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toMainActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"login success , to MainActivity!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFailedError</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"login failed!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jingbin on 2016/11/3.</div><div class="line"> * Presenter是用作Model和View之间交互的桥梁，那么应该有什么方法呢？</div><div class="line"> * 其实也是主要看该功能有什么操作，比如本例，两个操作:login和clear。</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLoginPresenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// view</span></div><div class="line">    <span class="keyword">private</span> IUserLoginView iUserLoginView;</div><div class="line">    <span class="comment">// model</span></div><div class="line">    <span class="keyword">private</span> UserBiz mUserBiz;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserLoginPresenter</span><span class="params">(IUserLoginView iUserLoginView)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.iUserLoginView = iUserLoginView;</div><div class="line">        <span class="keyword">this</span>.mUserBiz = <span class="keyword">new</span> UserBiz();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//view</span></div><div class="line">        iUserLoginView.showLoading();</div><div class="line">        <span class="comment">// model</span></div><div class="line">        mUserBiz.login(iUserLoginView.getUserName(), iUserLoginView.getPassword(), <span class="keyword">new</span> OnLoginListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">(User user)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="comment">// 需要在UI线程中执行</span></div><div class="line">                mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        iUserLoginView.toMainActivity();</div><div class="line">                        iUserLoginView.hindLoading();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginFailed</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// 需要在UI线程中执行</span></div><div class="line">                mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        iUserLoginView.hindLoading();</div><div class="line">                        iUserLoginView.showFailedError();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        iUserLoginView.clearUserName();</div><div class="line">        iUserLoginView.clearPassword();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public interface IUserLoginView &#123;</div><div class="line"></div><div class="line">    // login说明了要有用户名、密码，那么对应两个方法：</div><div class="line">    String getUserName();</div><div class="line"></div><div class="line">    String getPassword();</div><div class="line"></div><div class="line">    void clearUserName();</div><div class="line"></div><div class="line">    void clearPassword();</div><div class="line"></div><div class="line">    // 再者login是个耗时操作，我们需要给用户一个友好的提示，一般就是操作ProgressBar，所以再两个：</div><div class="line">    void showLoading();</div><div class="line"></div><div class="line">    void hindLoading();</div><div class="line"></div><div class="line"></div><div class="line">    // login当然存在登录成功与失败的处理，我们主要看成功我们是跳转Activity，而失败可能是去给个提醒：</div><div class="line">    void toMainActivity();</div><div class="line"></div><div class="line">    void showFailedError();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户点击登录，触发点击事件，然后通过P层<code>userLoginPresenter</code>，调用登录的方法<code>login()</code>，方法里面会通过Model层<code>mUserBiz.login()</code>去做一些数据请求操作的处理，然后得到相应的数据返回。这里看到Model层的数据处理操作放在P层里，是不与V层直接交互的。<br>然后M层得到数据后回调，P层根据相应的数据，显示不同的UI，如<code>toMainActivity</code>,<code>showFailedError</code>等，这样V层只会出现一些基本的显示逻辑的处理。</p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。<br><img src="http://upload-images.jianshu.io/upload_images/1354448-b43bea772693aaa8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来自MVVM----MVC，MVP 和 MVVM 的图示"></p>
<p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 简单的MVVM + data-binding案例:</div><div class="line"> * 以点击一下按钮然后年龄会+2 为例</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> jingbin</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeAgeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ChangeAgeViewModel viewModel;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        ActivityChangeAgeBinding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_change_age);</div><div class="line">        setTitle(<span class="string">"MVVM + data-binding"</span>);</div><div class="line"></div><div class="line">        viewModel = ViewModelProviders.of(<span class="keyword">this</span>).get(ChangeAgeViewModel.class);</div><div class="line">        binding.setViewModel(viewModel);</div><div class="line">        binding.setButtonname(<span class="string">"年龄+2"</span>);</div><div class="line"></div><div class="line">        <span class="comment">/**监听年龄的变化*/</span></div><div class="line">        viewModel.desc.observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable String desc)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"desc"</span>, desc);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        binding.btAge.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                viewModel.change();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> jingbin</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeAgeViewModel</span> <span class="keyword">extends</span> <span class="title">AndroidViewModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> MutableLiveData&lt;String&gt; desc = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; age = <span class="keyword">new</span> ObservableField&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChangeAgeViewModel</span><span class="params">(@NonNull Application application)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(application);</div><div class="line">        age.set(String.valueOf(<span class="number">23</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</div><div class="line">        String value = age.get();</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(value)) &#123;</div><div class="line">            Integer integer = Integer.valueOf(value);</div><div class="line">            <span class="comment">// 改变age的值 布局里的值直接改变</span></div><div class="line">            age.set(String.valueOf(integer + <span class="number">2</span>));</div><div class="line"></div><div class="line">            desc.setValue(<span class="string">"年龄改变:"</span> + age.get());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- View + ViewModel--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"viewModel"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.example.jingbin.projectstru.mvvm.ChangeAgeViewModel"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"buttonname"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"25dp"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_mvvm"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"年龄"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_age"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;viewModel.age&#125;"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_age"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;buttonname&#125;"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看出，MVVM比MVP少了对应View的接口文件，这样更简洁了，而且，改变ViewModel里的值，则<code>xml</code>文件对应的值也会对应改变。如果通过手动setText()，则<code>ViewModel</code>里的值也会得到改变。通过这一层关系，我们可以通过数据去操控<code>View</code>里的显示，所以才可以去除掉对应View的接口文件。</p>
<h3 id="MVP-databinding"><a href="#MVP-databinding" class="headerlink" title="MVP-databinding"></a>MVP-databinding</h3><p>基本实现了MVC，MVP，MVVM后，我发现它们各自有各自的优缺点。<br>MVC：简单，单一页面可以实现。但是不利于复杂页面。<br>MVP：解耦，结构清晰。但文件较多，每一个页面基本要新建P层和V层的文件，同时还会有findViewById操作。<br>MVVM：解耦，结构相对清晰，文件相对MVP较少。但如果页面显示比较复杂，需要通过多个值去控制页面的显示，或者页面一个值的显示 要通过多种逻辑去处理得到结果，个人感觉还是不太适用。(其中的ViewModel与对应宿主的生命周期相同，从而内存泄漏问题比MVP处理较好这里先不做讨论)</p>
<p><strong>MVP-databinding</strong>：<br>处理方式与MVP相同，只是使用了databinding的优势，databinding节省了类似findViewById和数据绑定的时间，从此代码里就没有findViewById和ButterKnife之类的代码了，而且也不会有<code>通过多个值去控制页面的显示</code>这样不好操作的情况了。当然文件还是会多一些。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * MVP + data-binding</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> jingbin</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvpDataBindingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ChangeAgeView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ActivityMvpDataBindingBinding binding;</div><div class="line">    <span class="keyword">private</span> ChangeAgePresenter presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_mvp_data_binding);</div><div class="line"></div><div class="line">        setTitle(<span class="string">"MVP + data-binding"</span>);</div><div class="line">        presenter = <span class="keyword">new</span> ChangeAgePresenter(<span class="keyword">this</span>);</div><div class="line">        binding.setButtonname(<span class="string">"年龄+2"</span>);</div><div class="line"></div><div class="line">        binding.btAge.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                presenter.changeAge(binding.getUser());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showContentView</span><span class="params">(UserBean user)</span> </span>&#123;</div><div class="line">        binding.setUser(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        presenter.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> jingbin</div><div class="line"> * <span class="doctag">@date</span> 2019/02/26</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeAgePresenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ChangeAgeView changeInterface;</div><div class="line">    <span class="keyword">private</span> UserModel userModel;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChangeAgePresenter</span><span class="params">(ChangeAgeView changeInterface)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.changeInterface = changeInterface;</div><div class="line">        <span class="comment">// 初始化</span></div><div class="line">        changeInterface.showContentView(<span class="keyword">new</span> UserBean(<span class="string">"小白"</span>, <span class="number">23</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 改变年龄</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeAge</span><span class="params">(UserBean myUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (userModel == <span class="keyword">null</span>) &#123;</div><div class="line">            userModel = <span class="keyword">new</span> UserModel();</div><div class="line">        &#125;</div><div class="line">        userModel.changeAge(myUser, <span class="number">2</span>, <span class="keyword">new</span> UserModel.ChangeInterface() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">(UserBean user)</span> </span>&#123;</div><div class="line">                changeInterface.showContentView(user);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        userModel = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>张鸿洋：<a href="http://blog.csdn.net/lmj623565791/article/details/46596109" target="_blank" rel="external">浅谈 MVP in Android</a></li>
<li>阮一峰: <a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="external">MVC，MVP 和 MVVM 的图示</a></li>
<li>Jensen: <a href="https://segmentfault.com/a/1190000004616513?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Android中的MVC和MVP(分析+实例)</a></li>
<li>CSDN: <a href="http://blog.csdn.net/jdsjlzx/article/details/51174396#t3" target="_blank" rel="external">认清Android框架 MVC，MVP和MVVM</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">projectstru</div><div class="line">├─ MainActivity.java</div><div class="line">├─ mvc</div><div class="line">│    ├─ LoadDataActivity.java</div><div class="line">│    ├─ bean</div><div class="line">│    │    └─ Essay.java</div><div class="line">│    └─ model</div><div class="line">│           ├─ EssayModel.java</div><div class="line">│           └─ MainModel.java</div><div class="line">├─ mvp</div><div class="line">│    ├─ UserLoginActivity.java</div><div class="line">│    ├─ bean</div><div class="line">│    │    └─ User.java</div><div class="line">│    ├─ model</div><div class="line">│    │    ├─ IUserBiz.java</div><div class="line">│    │    ├─ OnLoginListener.java</div><div class="line">│    │    └─ UserBiz.java</div><div class="line">│    ├─ presenter</div><div class="line">│    │    └─ UserLoginPresenter.java</div><div class="line">│    └─ view</div><div class="line">│           └─ IUserLoginView.java</div><div class="line">├─ mvpdatabindind</div><div class="line">│    ├─ MvpDataBindingActivity.java</div><div class="line">│    ├─ bean</div><div class="line">│    │    └─ UserBean.java</div><div class="line">│    ├─ model</div><div class="line">│    │    └─ UserModel.java</div><div class="line">│    ├─ presenter</div><div class="line">│    │    └─ ChangeAgePresenter.java</div><div class="line">│    └─ view</div><div class="line">│           └─ ChangeAgeView.java</div><div class="line">└─ mvvm</div><div class="line">       ├─ ChangeAgeActivity.java</div><div class="line">       └─ ChangeAgeViewModel.java</div></pre></td></tr></table></figure>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>对应项目：<strong><a href="https://github.com/youlookwhat/ProjectPatternStudy" target="_blank" rel="external">ProjectPatternStudy</a></strong> 😁<br>此文仅个人总结，如有不当之处，请留言告知。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;生命不必每时每刻都要冲刺，低沉时就当是放一个悠长假期。 - 北川悦吏子/编剧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="mvvm" scheme="http://jingbin.me/tags/mvvm/"/>
    
  </entry>
  
  <entry>
    <title>Android-WebView与JS交互实例</title>
    <link href="http://jingbin.me/2019/01/12/webview-js-interaction/"/>
    <id>http://jingbin.me/2019/01/12/webview-js-interaction/</id>
    <published>2019-01-12T15:14:00.000Z</published>
    <updated>2019-03-22T15:11:58.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>纸上觉来终觉浅，绝知此事要躬行。 - 陆游/诗人(宋)</p>
</blockquote>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-6825b9b6a213c33c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="与js交互示例.jpg"></p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>一切基于项目<strong><a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external">WebViewStudy</a></strong>来说明，都是最小单元案例，可作为参考研究，本文从几个方面来讲解：</p>
<ul>
<li>1、Java调用WebView里的js代码(传递参数)</li>
<li>2、WebView里的js代码调用Java本地方法(传递参数)</li>
<li>3、外部注入js代码</li>
<li>4、WebView长按事件</li>
</ul>
<h3 id="相关JS代码："><a href="#相关JS代码：" class="headerlink" title="相关JS代码："></a>相关JS代码：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js调用android原生代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=gb2312"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">id</span>=<span class="string">"viewport"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,minimal-ui"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line">        function javacalljs()&#123;</div><div class="line">             document.getElementById("content").innerHTML +=</div><div class="line">                 "<span class="tag">&lt;<span class="name">br\</span>&gt;</span>java调用了js函数，无参";</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--这里取到的是 android端传过来的数据--&gt;</span></div><div class="line">        function javacalljswithargs(data)&#123;</div><div class="line">             document.getElementById("content").innerHTML +=</div><div class="line">                 ("<span class="tag">&lt;<span class="name">br\</span>&gt;</span>"+data);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">onClick</span>=<span class="string">"window.injectedObject.startFunction()"</span>&gt;</span>点击调用java代码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--可以将android端传过来的数据，处理后,放在这里再传给android端--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">onClick</span>=<span class="string">"window.injectedObject.startFunction('我是网页传出来的数据')"</span>&gt;</span>点击调用java代码并传递参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>内容显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Java调用WebView里的js代码-传递参数"><a href="#Java调用WebView里的js代码-传递参数" class="headerlink" title="Java调用WebView里的js代码(传递参数)"></a>Java调用WebView里的js代码(传递参数)</h3><p>// 告诉WebView启用JavaScript执行。默认的是false。<br>ws.setJavaScriptEnabled(true);<br>1、如果点击调用就直接执行就好：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 无参数调用</span></div><div class="line">webView.loadUrl(<span class="string">"javascript:javacalljs()"</span>);</div><div class="line"><span class="comment">// 传递参数调用</span></div><div class="line">webView.loadUrl(<span class="string">"javascript:javacalljswithargs('"</span> + <span class="string">"android传入到网页里的数据，有参"</span> + <span class="string">"')"</span>);</div></pre></td></tr></table></figure></p>
<p>2、如果是显示后就调用，注意放在html显示完成之后<br><a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebViewClient.java" target="_blank" rel="external">MyWebViewClient.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="comment">// 无参数调用</span></div><div class="line">        webView.loadUrl(<span class="string">"javascript:javacalljs()"</span>);</div><div class="line">        <span class="comment">// 传递参数调用</span></div><div class="line">        webView.loadUrl(<span class="string">"javascript:javacalljswithargs('"</span> + <span class="string">"android传入到网页里的数据，有参"</span> + <span class="string">"')"</span>);</div><div class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 4.4以上可用 evaluateJavascript 效率高</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String jsCode)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">        evaluateJavascript(jsCode, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        loadUrl(jsCode);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="WebView里的js代码调用Java本地方法-传递参数"><a href="#WebView里的js代码调用Java本地方法-传递参数" class="headerlink" title="WebView里的js代码调用Java本地方法(传递参数)"></a>WebView里的js代码调用Java本地方法(传递参数)</h3><p>这里有一个js点击方法:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;&lt;a onClick="window.injectedObject.startFunction()"&gt;点击调用java代码&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a onClick="window.injectedObject.startFunction('我是网页传出来的数据')"&gt;点击调用java代码并传递参数&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>
<p>实现与js交互接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.addJavascriptInterface(<span class="keyword">new</span> MyJavascriptInterface(<span class="keyword">this</span>), <span class="string">"injectedObject"</span>);</div></pre></td></tr></table></figure></p>
<p>这里的”injectedObject”对应js里的”window.<strong>injectedObject</strong>.startFunction()”，其中<a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyJavascriptInterface.java" target="_blank" rel="external">MyJavascriptInterface.java</a>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jingbin on 2016/11/17.</div><div class="line"> * js通信接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJavascriptInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyJavascriptInterface</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 前端代码嵌入js：</div><div class="line">     * imageClick 名应和js函数方法名一致</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> src 图片的链接</div><div class="line">     */</div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imageClick</span><span class="params">(String src)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"imageClick"</span>, <span class="string">"----点击了图片"</span>);</div><div class="line">        Log.e(<span class="string">"src"</span>, src);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 前端代码嵌入js</div><div class="line">     * 遍历&lt;li&gt;节点</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> type    &lt;li&gt;节点下type属性的值</div><div class="line">     * <span class="doctag">@param</span> item_pk item_pk属性的值</div><div class="line">     */</div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textClick</span><span class="params">(String type, String item_pk)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(type) &amp;&amp; !TextUtils.isEmpty(item_pk)) &#123;</div><div class="line">            Log.e(<span class="string">"textClick"</span>, <span class="string">"----点击了文字"</span>);</div><div class="line">            Log.e(<span class="string">"type"</span>, type);</div><div class="line">            Log.e(<span class="string">"item_pk"</span>, item_pk);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 网页使用的js，方法无参数</div><div class="line">     */</div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startFunction</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"startFunction"</span>, <span class="string">"----无参"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 网页使用的js，方法有参数，且参数名为data</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> data 网页js里的参数名</div><div class="line">     */</div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startFunction</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"startFunction"</span>, <span class="string">"----有参"</span> + data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>且对标里面的两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 网页使用的js，方法无参数</div><div class="line"> */</div><div class="line"><span class="meta">@JavascriptInterface</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startFunction</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.e(<span class="string">"startFunction"</span>, <span class="string">"----无参"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 网页使用的js，方法有参数，且参数名为data</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> data 网页js里的参数名</div><div class="line"> */</div><div class="line"><span class="meta">@JavascriptInterface</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startFunction</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">    Log.e(<span class="string">"startFunction"</span>, <span class="string">"----有参"</span> + data);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="外部注入js代码"><a href="#外部注入js代码" class="headerlink" title="外部注入js代码"></a>外部注入js代码</h3><p>有时候我们得到一个网页，这个网页并不是我们订制的，里面没有我们调用的js代码，这时候我们可在前端直接注入js的。<br>比如 网页里面有图片，我们点击图片想要查看图片和保存图片到本地，这时候网页并没有实现这个js方法供我们调用，但是我们可以注入js代码，来实现这个需求。</p>
<p>在html加载完成之后，我们调用这段js:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这段js函数的功能就是，遍历所有的img节点，并添加onclick函数，函数的功能是在图片点击的时候调用本地java接口并传递url过去</span></div><div class="line">webView.loadUrl(<span class="string">"javascript:(function()&#123;"</span> +</div><div class="line">        <span class="string">"var objs = document.getElementsByTagName(\"img\");"</span> +</div><div class="line">        <span class="string">"for(var i=0;i&lt;objs.length;i++)"</span> +</div><div class="line">        <span class="string">"&#123;"</span> +</div><div class="line">        <span class="string">"objs[i].onclick=function()&#123;window.injectedObject.imageClick(this.getAttribute(\"src\"));&#125;"</span> +</div><div class="line">        <span class="string">"&#125;"</span> +</div><div class="line">        <span class="string">"&#125;)()"</span>);</div></pre></td></tr></table></figure></p>
<p>这时候再看<a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyJavascriptInterface.java" target="_blank" rel="external">MyJavascriptInterface.java</a>里的imageClick方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 前端代码嵌入js：</div><div class="line"> * imageClick 名应和js函数方法名一致</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> src 图片的链接</div><div class="line"> */</div><div class="line"><span class="meta">@JavascriptInterface</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imageClick</span><span class="params">(String src)</span> </span>&#123;</div><div class="line">    Log.e(<span class="string">"imageClick"</span>, <span class="string">"----点击了图片"</span>);</div><div class="line">    Log.e(<span class="string">"src"</span>, src);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>src即为图片链接，可以作为显示和下载用。</p>
<h3 id="WebView长按事件"><a href="#WebView长按事件" class="headerlink" title="WebView长按事件"></a>WebView长按事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">webView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> WebView.HitTestResult hitTestResult = webView.getHitTestResult();</div><div class="line">        <span class="comment">// 如果是图片类型或者是带有图片链接的类型</span></div><div class="line">        <span class="keyword">if</span> (hitTestResult.getType() == WebView.HitTestResult.IMAGE_TYPE ||</div><div class="line">                hitTestResult.getType() == WebView.HitTestResult.SRC_IMAGE_ANCHOR_TYPE) &#123;</div><div class="line">            <span class="comment">// 弹出保存图片的对话框</span></div><div class="line">            <span class="keyword">new</span> AlertDialog.Builder(WebViewActivity.<span class="keyword">this</span>)</div><div class="line">                    .setItems(<span class="keyword">new</span> String[]&#123;<span class="string">"查看大图"</span>, <span class="string">"保存图片到相册"</span>&#125;, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                            String picUrl = hitTestResult.getExtra();</div><div class="line">                            <span class="comment">//获取图片</span></div><div class="line">                            Log.e(<span class="string">"picUrl"</span>, picUrl);</div><div class="line">                            <span class="keyword">switch</span> (which) &#123;</div><div class="line">                                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                                    <span class="keyword">break</span>;</div><div class="line">                                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                                    <span class="keyword">break</span>;</div><div class="line">                                <span class="keyword">default</span>:</div><div class="line">                                    <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                    .show();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://blog.csdn.net/wangtingshuai/article/details/8631835" target="_blank" rel="external">android webview js交互 第一节 （java和js交互）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上觉来终觉浅，绝知此事要躬行。 - 陆游/诗人(宋)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="webview" scheme="http://jingbin.me/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>Android-应用被作为第三方浏览器打开</title>
    <link href="http://jingbin.me/2018/12/15/third-party-browser/"/>
    <id>http://jingbin.me/2018/12/15/third-party-browser/</id>
    <published>2018-12-15T13:27:31.000Z</published>
    <updated>2019-01-12T08:06:14.649Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>微信里的文章页面，可以选择<strong>“在浏览器打开”</strong>。现在很多应用都内嵌了WebView，那是否可以使自己的应用作为第三方浏览器打开此文章呢？<br><a id="more"></a><br>如图：</p>
<ul>
<li><img src="https://upload-images.jianshu.io/upload_images/1354448-4a8b8f2956cfabdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信打开三方浏览器.png"></li>
</ul>
<p>就像图中这样，让自己的应用出现在列表里。<br>这篇文章就是为了实现这个功能。</p>
<p>项目代码地址：<a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external"><strong>WebViewStudy</strong></a></p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>实现其实很简单：<br>在Manifest文件中，给想要接收跳转的Activity添加<intent-filter>配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">     android:name=".WebViewActivity"</div><div class="line">     android:configChanges="orientation|screenSize"</div><div class="line">     android:hardwareAccelerated="true"</div><div class="line">     android:launchMode="singleTask"</div><div class="line">     android:screenOrientation="portrait"</div><div class="line">     android:theme="@style/WebViewTheme"&gt;</div><div class="line"></div><div class="line">     &lt;!--需要添加下面的intent-filter配置--&gt;</div><div class="line">     &lt;intent-filter tools:ignore="AppLinkUrlError"&gt;</div><div class="line">         &lt;action android:name="android.intent.action.VIEW" /&gt;</div><div class="line"></div><div class="line">         &lt;category android:name="android.intent.category.DEFAULT" /&gt;</div><div class="line">         &lt;category android:name="android.intent.category.BROWSABLE" /&gt;</div><div class="line">         &lt;!--使用http，则只能打开http开头的网页--&gt;</div><div class="line">         &lt;data android:scheme="https" /&gt;</div><div class="line">     &lt;/intent-filter&gt;</div><div class="line"></div><div class="line"> &lt;/activity&gt;</div></pre></td></tr></table></figure></intent-filter></p>
<p>然后在 WebViewActivity 中获取相关传递数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_web_view);</div><div class="line">        getIntentData();</div><div class="line">        initTitle();</div><div class="line">        initWebView();</div><div class="line">        webView.loadUrl(mUrl);</div><div class="line">       <span class="comment">// 处理 作为三方浏览器打开传过来的值</span></div><div class="line">        getDataFromBrowser(getIntent());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">     * 使用singleTask启动模式的Activity在系统中只会存在一个实例。</div><div class="line">     * 如果这个实例已经存在，intent就会通过onNewIntent传递到这个Activity。</div><div class="line">     * 否则新的Activity实例被创建。</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onNewIntent(intent);</div><div class="line">        getDataFromBrowser(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 作为三方浏览器打开传过来的值</div><div class="line">     * Scheme: https</div><div class="line">     * host: www.jianshu.com</div><div class="line">     * path: /p/1cbaf784c29c</div><div class="line">     * url = scheme + "://" + host + path;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getDataFromBrowser</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Uri data = intent.getData();</div><div class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String scheme = data.getScheme();</div><div class="line">                String host = data.getHost();</div><div class="line">                String path = data.getPath();</div><div class="line">                String text = <span class="string">"Scheme: "</span> + scheme + <span class="string">"\n"</span> + <span class="string">"host: "</span> + host + <span class="string">"\n"</span> + <span class="string">"path: "</span> + path;</div><div class="line">                Log.e(<span class="string">"data"</span>, text);</div><div class="line">                String url = scheme + <span class="string">"://"</span> + host + path;</div><div class="line">                webView.loadUrl(url);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>以上是核心代码，有几点需要说明的：</p>
<ul>
<li>1、设置启动模式：<code>launchMode=&quot;singleTask&quot;</code></li>
<li>2、<code>getDataFromBrowser()</code>方法会在<code>onCreate</code>和<code>onNewIntent</code>方法中调用。</li>
</ul>
<h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p>在实际使用中，有这样的场景：<br>我们在微信中“通过浏览器”打开自己的应用，然后将自己的应用切到后台。重复上面的操作，会一直创建应用的实例，这样肯定是不好的，为了避免这种情况我们设置启动模式为：<code>launchMode=&quot;singleTask&quot;</code>。</p>
<blockquote>
<p>使用singleTask启动模式的Activity在系统中只会存在一个实例。<br>如果这个实例不存在，新的Activity实例被创建。<br>如果这个实例已经存在，那么在Activity回退栈中，所有位于该Activity上面的Activity实例都将被销毁掉（销毁过程会调用Activity生命周期回调），这样使得singleTask Activity实例位于栈顶。与此同时，Intent会通过<code>onNewIntent</code>传递到这个SingleTask Activity实例。 - <a href="https://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode/" target="_blank" rel="external">&lt;深入讲解Android中Activity launchMode&gt;</a></p>
</blockquote>
<p>这就是为什么要在<code>onNewIntent</code>中调用的原因，当此Activity已存在时，值会通过<code>onNewIntent</code>传递过来。</p>
<h3 id="继续拓展"><a href="#继续拓展" class="headerlink" title="继续拓展"></a>继续拓展</h3><p>也许大家用<code>知乎</code>进行过类似的操作，会发现有这样一个效果：<br>当知乎没有开启时，在其他应用打开知乎后，关闭页面会回到知乎的<strong>主页面</strong>。正常是不会有出现这样的情况的，我们需要简单设置一下。</p>
<p>1、在主页面设置静态变量，初始化时改变静态变量的值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span>  </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 是否开启了主页，没有开启则会返回主页</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isLaunch = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line">        isLaunch = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        isLaunch = <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>2、当<code>WebViewActivity</code>关闭时判断是否打开主页面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 直接通过三方浏览器打开时，回退到首页</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleFinish</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">        finishAfterTransition();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!MainActivity.isLaunch) &#123;</div><div class="line">        MainActivity.start(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>其实这相当于Activity隐式跳转，其中点击网页中的电话跳转到手机的拨号盘也是这样的原理，DeepLink也基本是这个逻辑。</p>
<p>设想这样一种情况：<br>我们通过浏览器拉起自己的应用，不一定要打开WebView，也可以打开原生的页面，只需要传过来的数据里有此页面想要的数据即可。其实很多应用都这样做了。</p>
<h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><ul>
<li>下载体验：<a href="https://fir.im/webviewstudy" target="_blank" rel="external">https://fir.im/webviewstudy</a></li>
<li>最后再附一遍项目地址😆：<strong><a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external">WebViewStudy</a></strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;微信里的文章页面，可以选择&lt;strong&gt;“在浏览器打开”&lt;/strong&gt;。现在很多应用都内嵌了WebView，那是否可以使自己的应用作为第三方浏览器打开此文章呢？&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="Android基础知识点" scheme="http://jingbin.me/tags/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>《云阅2.0》一款同时看玩安卓和干货集中营资讯的App</title>
    <link href="http://jingbin.me/2018/11/06/cloudreader-app-introduce/"/>
    <id>http://jingbin.me/2018/11/06/cloudreader-app-introduce/</id>
    <published>2018-11-06T13:47:31.000Z</published>
    <updated>2018-12-07T14:58:18.247Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1354448-de9c800389402d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CloudReader.png"></p>
<a id="more"></a>
<h3 id="一、云阅2-0"><a href="#一、云阅2-0" class="headerlink" title="一、云阅2.0 "></a>一、<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">云阅2.0 </a></h3><p><a href="https://www.jianshu.com/p/69a229fb6e1d" target="_blank" rel="external">《云阅》一个仿网易云音乐UI，使用Gank.Io及豆瓣Api开发的开源项目</a><br>在云阅发布第一版之后，大约经过了近两年的时间，不断的更新迭代，现在已经完成了2.0，相比第一版它改变了很多：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-2b1b26e7efb8b2dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最新截图"></p>
<h4 id="1、新增功能"><a href="#1、新增功能" class="headerlink" title="1、新增功能"></a>1、新增功能</h4><ul>
<li>玩安卓完整模块(首页、知识体系、导航数据、收藏文章和网址)</li>
<li>糗事百科段子内容</li>
<li>webview 新增分享，复制，刷新，浏览器打开，添加到收藏功能</li>
<li>侧边栏新增 账号登录、我的收藏、退出应用功能</li>
<li>增加Room的使用</li>
</ul>
<h4 id="2、优化-amp-修复"><a href="#2、优化-amp-修复" class="headerlink" title="2、优化&amp;修复"></a>2、优化&amp;修复</h4><ul>
<li>网络请求升级到Retrofit2.x，稳定运行</li>
<li>保存图片优化</li>
<li>webview大幅完善，具体详见<strong><a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external">WebViewStudy</a></strong></li>
<li>解决应用退出后台，点击图标重新启动问题</li>
<li>升级gradle到3.0以上</li>
<li>Andoird性能优化 - 布局优化</li>
<li>修复可能存在的内存泄漏问题</li>
</ul>
<p>具体见<a href="https://jingbin.me/2016/12/30/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97-%E4%BA%91%E9%98%85/">更新日志-云阅</a></p>
<h3 id="二、交流"><a href="#二、交流" class="headerlink" title="二、交流"></a>二、交流</h3><ul>
<li><p>期间有很多人提了很多<a href="https://github.com/youlookwhat/CloudReader/issues" target="_blank" rel="external">Issues</a>，有很多表示喜欢的，说已经使用了一年多了，很感谢。还有指出问题的，比如提到说MVVM架构不规范及内存泄漏问题，还有一部分请教问题的，尽量解决大家的问题，同时提升自己，但有些时候由于自己本身工作的原因，没有多余的时间解决问题还请大家多见谅。</p>
</li>
<li><p>关于MVVM架构的问题之前和大家说了，是我理解的有点偏差，可能大部分的架构是MVP - databinding，也有比较典型的MVVM - datadinding，比如登录页面<a href="https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/menu/LoginActivity.java" target="_blank" rel="external">LoginActivity</a>。感觉MVVM有些情况并没有很好的解决日常开发的问题。对于MVC，MVP，MVVM，我们都应该理解它们的含义，并在具体的情况使用合适的架构，比如一个简单的页面就没太大的必要去写MVVM，那样只会多一些class文件，也许一个MVC就解决的很好。</p>
</li>
<li><p>因为我平时也是用这个软件来看一些技术的动态，随着干货集中营更新的不频繁，玩安卓也越来越完善后，便实现了玩安卓的大部分功能，没有实现的只有少部分接口了，比如TODO，搜索部分，搜索后期也会完善，TODO因为平时自己用<a href="https://www.wunderlist.com/zh/" target="_blank" rel="external"><code>奇妙清单</code></a>觉得很好用，感觉再写一个用处不大，之后要做的话就是结合文章一起做了，比如看到一篇好文章想什么时间来学就添加一个TODO，不过这是之后的事了。</p>
</li>
</ul>
<h3 id="三、2-0-之后的计划"><a href="#三、2-0-之后的计划" class="headerlink" title="三、2.0 之后的计划"></a>三、2.0 之后的计划</h3><ul>
<li><p>如果应用中使用到的Api(玩安卓、干货集中营和豆瓣开放Api)可以继续使用的话，以后的样式ui基本就是这样子了，期间也会加一些实用的功能，如监控剪切板的内容打开链接等。我会一直维护这个项目，有什么问题可以随时交流，但今后的重心可能不会于此。</p>
</li>
<li><p>此应用虽然基础的UI是仿网易云音乐界面，但是具体的一些细节，如电影部分和玩安卓的主页面等都是花了很长时间慢慢调试才达到这样相对美观的效果，其中包含文字颜色，图标及一些图片的选择。这对于一个业余的开发者来讲很耗时间，其中参考了ui设计网站里的一部分设计图，可以说考虑ui方面的展示比写代多码付出了几倍的时间。</p>
</li>
<li><p>不久后可能会出一款全栈的App，并自己设计UI，而不是使用其他软件的UI，仿xxx系列只是初期的阶段，正如模仿刘德华，张学友之类的，模仿始终是模仿，活在其他人的影子之下，最终实现一款完全属于自己的App才是我们的目标。</p>
</li>
</ul>
<h3 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h3><ul>
<li><p>如果大家感兴趣可以前往下载：<a href="https://fir.im/cloudreader" target="_blank" rel="external">https://fir.im/cloudreader</a><br>有什么问题可以随时交流：</p>
<ul>
<li>email: jingbin127@163.com</li>
<li>个人主页：<a href="http://jingbin.me">http://jingbin.me</a></li>
<li>项目地址： <strong><a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a></strong></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-de9c800389402d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;CloudReader.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开源项目" scheme="http://jingbin.me/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="cloudreader" scheme="http://jingbin.me/tags/cloudreader/"/>
    
      <category term="开源项目" scheme="http://jingbin.me/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android DeepLink介绍与使用</title>
    <link href="http://jingbin.me/2018/07/02/deeplink-intro-use/"/>
    <id>http://jingbin.me/2018/07/02/deeplink-intro-use/</id>
    <published>2018-07-02T13:22:09.000Z</published>
    <updated>2018-07-03T15:58:23.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1354448-f9353b100e86560b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>前段时间公司让调研一下DeepLink，说以后会用到，之前看了很久，并做了个demo，现整理一下，方便以后查阅，如果有幸帮助到其他人就更好了。</p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Deep Link，又叫deep linking，中文翻译作深层链接。</p>
<p>简单地从用户体验来讲，Deep Link，就是可以让你在手机的浏览器/Google Search上点击搜索的结果，便能直接跳转到已安装的应用中的某一个页面的技术。</p>
<p>对于不懂技术的运营人员来说就是一个分享功能，而从技术层面上去简单理解是实现将某APP用户带到另外APP相对应的内容页面，实现APP之间无缝跳转！</p>
<h2 id="商业价值"><a href="#商业价值" class="headerlink" title="商业价值"></a>商业价值</h2><p>相信大家或多或少看到过这样的页面：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-a4fcbfe2740d1b8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="deeplink"></p>
<p>底部有一个“App内打开”，点击后如果安装过应用直接跳到应用的对应页面，如果没安装则跳到下载应用页。</p>
<h3 id="Deeplink（深度链接）"><a href="#Deeplink（深度链接）" class="headerlink" title="Deeplink（深度链接）"></a>Deeplink（深度链接）</h3><p>对于已经安装APP，指向特定的页面，和上面说的一致。</p>
<h3 id="Deferred-deeplink（-延迟深度链接）"><a href="#Deferred-deeplink（-延迟深度链接）" class="headerlink" title="Deferred deeplink（ 延迟深度链接）"></a>Deferred deeplink（ 延迟深度链接）</h3><p>相比deeplink，它增加了判断APP是否被安装，用户匹配的2个功能；</p>
<ul>
<li>1.当用户点击链接的时候判断APP是否安装，如果用户没有安装时，引导用户跳转到应用商店下载应用。</li>
<li>2.用户匹配功能，当用户点击链接时和用户启动APP时，分别将这两次用户Device Fingerprint（设备指纹信息）传到服务器进行模糊匹配，使用户下载且启动APP时，直接打开相应的指定页面。</li>
</ul>
<p>通过上面的2个技术方案，不仅：①可以让被分享者更快更便捷的回到APP，且回到指定的活动页面，而且：②可以引导未安装APP的用户下载APP、③分享者和被分享者的关系链会通过设备指纹信息记录下来，在业务场景中给出相应的奖励。</p>
<p>使用deeplink前后对比：<br><img src="https://upload-images.jianshu.io/upload_images/1354448-b4468f9f81f2e0b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对比"></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><blockquote>
<p>具体见Demo：<a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external">WebViewStudy</a></p>
</blockquote>
<h3 id="HTML页面：deeplink-html"><a href="#HTML页面：deeplink-html" class="headerlink" title="HTML页面：deeplink.html"></a>HTML页面：<a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/assets/deeplink.html" target="_blank" rel="external">deeplink.html</a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"[scheme]://[host]/[path]?[query]"</span>&gt;</span>启动应用程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"will://link/testId"</span>&gt;</span>立即打开（直接打开）&amp;gt;&amp;gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a><a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/AndroidManifest.xml" target="_blank" rel="external">AndroidManifest.xml</a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--用于DeepLink，html跳到此页面  scheme_Adr: 'will://link/testid',--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".DeepLinkActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span></span></div><div class="line">                    <span class="attr">android:host</span>=<span class="string">"link"</span></div><div class="line">                    <span class="attr">android:scheme</span>=<span class="string">"will"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="MyWebViewClient-class"><a href="#MyWebViewClient-class" class="headerlink" title="MyWebViewClient.class"></a><a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebViewClient.java" target="_blank" rel="external">MyWebViewClient.class</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(url)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 用于DeepLink测试</span></div><div class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"will://"</span>)) &#123;</div><div class="line">            Uri uri = Uri.parse(url);</div><div class="line">            Log.e(<span class="string">"---------scheme"</span>, uri.getScheme() + <span class="string">"；host: "</span> + uri.getHost() + <span class="string">"；Id: "</span> + uri.getPathSegments().get(<span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Intent intent1 = <span class="keyword">new</span> Intent();</div><div class="line">        intent1.setAction(<span class="string">"android.intent.action.VIEW"</span>);</div><div class="line">        Uri uri = Uri.parse(url);</div><div class="line">        intent1.setData(uri);</div><div class="line">        intent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        mActivity.startActivity(intent1);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DeepLinkActivity-java"><a href="#DeepLinkActivity-java" class="headerlink" title="DeepLinkActivity.java"></a><a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/DeepLinkActivity.java" target="_blank" rel="external">DeepLinkActivity.java</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 从deep link中获取数据</div><div class="line">  * 'will://share/传过来的数据'</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getDataFromBrowser</span><span class="params">(TextView textView)</span> </span>&#123;</div><div class="line">     Uri data = getIntent().getData();</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         String scheme = data.getScheme();</div><div class="line">         String host = data.getHost();</div><div class="line">         List&lt;String&gt; params = data.getPathSegments();</div><div class="line">         <span class="comment">// 从网页传过来的数据</span></div><div class="line">         String testId = params.get(<span class="number">0</span>);</div><div class="line">         String text = <span class="string">"Scheme: "</span> + scheme + <span class="string">"\n"</span> + <span class="string">"host: "</span> + host + <span class="string">"\n"</span> + <span class="string">"params: "</span> + testId;</div><div class="line">         Log.e(<span class="string">"ScrollingActivity"</span>, text);</div><div class="line">         textView.setText(text);</div><div class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>页面具体显示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Scheme：will</div><div class="line">host：link</div><div class="line">params：testId</div></pre></td></tr></table></figure></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>DeepLink用到的核心技术就是：URL SCHEMES。不论是IOS还是Android。<br>URL Schemes 有两个单词：</p>
<ul>
<li>URL，我们都很清楚，<a href="http://www.apple.com" target="_blank" rel="external">http://www.apple.com</a> 就是个 URL，也叫它链接或网址；</li>
<li>Schemes，表示的是一个 URL 中的一个位置——最初始的位置，即 ://之前的那段字符。比如 <a href="http://www.apple.com" target="_blank" rel="external">http://www.apple.com</a> 这个网址的 Schemes 是 http。</li>
</ul>
<p>我们可以像定位一个网页一样，用一种特殊的 URL 来定位一个应用甚至应用里某个具体的功能。而定位这个应用的，就应该这个应用的 URL 的 Schemes 部分，也就是开头儿那部分。但是需要注意的是应用的URL Schemes 并不唯一，也就是说一个应用可以“起多个名“，不同应用的URL Schemes也可能因为名字一样发生冲突。</p>
<p>Android系统级应用，有一些已经定义了URL Schemes，比如短信是 sms:、通话是tel:、email是mailto:，在定义自己APP的URL Schemes的时候要避免跟系统应用名称一样。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:15088888888"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:15088888888"</span>&gt;</span>短信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:15088888888@qq.com"</span>&gt;</span>邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>与URL一样，URL Schemes也可以通过传参打开特定的APP界面。</p>
<ul>
<li>URL：<a href="http://images.google.com/images?q=关键字" target="_blank" rel="external">http://images.google.com/images?q=关键字</a></li>
<li>URL Schemes：weixin://dl/moments（打开微信朋友圈）</li>
</ul>
<h2 id="Applink"><a href="#Applink" class="headerlink" title="Applink"></a>Applink</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>官网文档：<a href="https://developer.android.com/training/app-links/verify-site-associations#the-difference" target="_blank" rel="external">Verify Android App Links</a></p>
<p>Android App Links是一种特殊的Deep Links，它使Android系统能够直接通过网站地址打开应用程序对应的内容页面，而不需要用户选择使用哪个应用来处理网站地址。</p>
<p>要添加Android App Links到应用中，需要在应用里定义通过Http(s)地址打开应用的intent filter，并验证你确实拥有该应用和该网站。如果系统成功验证到你拥有该网站，那么系统会直接把URL对应的intent路由到你的应用。</p>
<p>为了验证你对应用和网站的所有权，以下两个步骤是必须的：</p>
<ul>
<li>1.在AndroidManifest里要求系统自动进行App Links的所有权验证。这个配置会告诉Android系统去验证你的应用是否属于在intent filter内指定的URL域名。</li>
<li>2.在以下链接地址里，放置一个数字资产链接的Json文件，声明你的网址和应用之间的关系：<ul>
<li><code>https://domain.name/.well-known/assetlinks.json</code> </li>
</ul>
</li>
</ul>
<h3 id="与Deep-Links的区别"><a href="#与Deep-Links的区别" class="headerlink" title="与Deep Links的区别"></a>与Deep Links的区别</h3><ul>
<li><p>Deep Links 是一种允许用户进入应用某个特定Activity的intent filter。点击这类链接时，系统可能会弹出一个选择列表，让用户在一堆能够处理这类链接的应用里(包括你的)选择一个来处理该链接。图一展示了这样一种情况：用户点击了一个地图相关的链接，系统弹出一个选择列表，让用户选择是要使用地图应用来处理，还是使用Chrome浏览器来处理。</p>
</li>
<li><p>App Links 是一种基于你的网站地址且验证通过的Deep Links。因此，点击一个这样的链接会直接打开你的应用(如果已经安装)，系统将不会弹出选择列表。当然，后续用户可以更改配好设置，来指定由哪个应用程序处理这类链接。</p>
</li>
</ul>
<p>下面这个列表描述更多差异：</p>
<table>
<thead>
<tr>
<th>item</th>
<th style="text-align:center">Deep Links</th>
<th style="text-align:center">App Links</th>
</tr>
</thead>
<tbody>
<tr>
<td>Intent URL Scheme</td>
<td style="text-align:center">https, http，或者自定义</td>
<td style="text-align:center">需为http或https</td>
</tr>
<tr>
<td>Intent Action</td>
<td style="text-align:center">任意Action</td>
<td style="text-align:center">需为<code>android.intent.action.VIEW</code></td>
</tr>
<tr>
<td>Intent Category</td>
<td style="text-align:center">任意Category</td>
<td style="text-align:center">需为<code>android.intent.category.BROWSABLE</code>和<code>android.intent.category.DEFAULT</code></td>
</tr>
<tr>
<td>链接验证</td>
<td style="text-align:center">不需要</td>
<td style="text-align:center">需要在网站上放置一个数字资产链接，并能够通过HTTPS访问</td>
</tr>
<tr>
<td>用户体验</td>
<td style="text-align:center">可能会弹出一个选择列表给用户选择用哪个应用处理连接</td>
<td style="text-align:center">没有弹框，系统直接打开你的应用处理网站连接</td>
</tr>
<tr>
<td>兼容性</td>
<td style="text-align:center">所有Android版本</td>
<td style="text-align:center">Android 6.0及以上</td>
</tr>
</tbody>
</table>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><ul>
<li>1.APP要想被其他APP直接打开，自身得支持，让自己具备被人打开的能力。（URL Schemes）</li>
<li>2.APP要想打开其他的APP，自身也得支持。（判断设备是否安装、各种跳转的处理）</li>
</ul>
<p>应该来讲，deeplink技术比较适用于独立电商、金融理财APP，一方面这类APP的广告内容可以是平台的商品（产品），链接后直接进入相关商品（产品）的详情页，另一方面，这类APP在打开后是会产生后续的交易行为。</p>
<p>这种方式只能用于系统处理URL的intent的情况，若URL本身没有抛给系统处理，而是直接在应用内打开了，那就无法直接拉起应用。</p>
<p>由于大部分应用，如微博、微信、第三方浏览器(包括Chrome)，都不会将URL抛给系统处理(对scheme进行屏蔽)，因此App Links生效的情况就很有限了，比如只能从记事本应用、短信应用这些进行跳转。总体来说，实属鸡肋。</p>
<blockquote>
<p>京东及淘宝的CPS即是使用此方式实现的。<br><a href="https://jingbin.me/2018/02/02/%E4%BA%AC%E4%B8%9CCPS%E5%95%86%E5%93%81%E6%8E%A8%E5%B9%BF%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/">京东CPS商品推广接入流程</a><br><a href="https://jingbin.me/2018/01/19/Android-%E9%98%BF%E9%87%8C%E7%99%BE%E5%B7%9Dcps-SDK%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/">Android 阿里百川cps SDK接入流程</a></p>
</blockquote>
<h2 id="一些常用APP的URL-Schemes"><a href="#一些常用APP的URL-Schemes" class="headerlink" title="一些常用APP的URL Schemes"></a>一些常用APP的URL Schemes</h2><p>知乎：回答 zhihu://answers/{id}用户页 zhihu://people/{id}<br>微信：<br>weixin://dl/scan 扫一扫weixin://dl/feedback 反馈weixin://dl/moments 朋友圈weixin://dl/settings 设置weixin://dl/notifications 消息通知设置weixin://dl/chat 聊天设置weixin://dl/general 通用设置weixin://dl/officialaccounts 公众号weixin://dl/games 游戏weixin://dl/help 帮助weixin://dl/feedback 反馈weixin://dl/profile 个人信息weixin://dl/features 功能插件</p>
<p>腾讯微博：TencentWeibo://<br>淘宝：taobao://<br>支付宝：alipay://<br>微博：sinaweibo://<br>weico微博：weico://<br>QQ浏览器：mqqbrowser://<br>uc浏览器：ucbrowser://<br>海豚浏览器：dolphin://<br>搜狗浏览器：SogouMSE://<br>百度地图：baidumap://<br>Chrome：googlechrome://<br>优酷：youku://<br>京东：openapp.jdmoble://<br>人人：renren://<br>美团：imeituan://<br>1号店：wccbyihaodian://<br>我查查：wcc://<br>有道词典：ddictproapp://<br>点评：dianping://<br>微盘：sinavdisk://<br>豆瓣fm：doubanradio://<br>网易公开课：ntesopen://<br>名片全能王：camcard://<br>淘宝宝贝搜索：taobao://<a href="http://s.taobao.com/?q=[prompt" target="_blank" rel="external">http://s.taobao.com/?q=[prompt</a>]<br>淘宝店铺搜索：taobao://<a href="http://shopsearch.t" target="_blank" rel="external">http://shopsearch.t</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/" target="_blank" rel="external">Deep Link是什么</a></li>
<li><a href="https://mp.weixin.qq.com/s/fWBDfd-7al7MsY0zwDn6dA" target="_blank" rel="external">深度链接（Deeplink）技术助力APP运营，实现病毒式用户增长</a></li>
<li><a href="http://www.sohu.com/a/122694049_491343" target="_blank" rel="external">现在很火的app上的deeplink技术，到底是什么？</a></li>
<li><a href="https://juejin.im/entry/590fe2d8ac502e006cf9e3e4" target="_blank" rel="external">5 分钟搞懂 Android DeepLink</a></li>
<li><a href="https://juejin.im/post/59b3eab25188257e8d77c991#heading-16" target="_blank" rel="external">Android AppLinks 接入</a></li>
<li><a href="https://github.com/hehonghui/android-tech-frontier/blob/master/issue-15/Android-M%E7%9A%84App-Links%E5%AE%9E%E7%8E%B0%E8%AF%A6%E8%A7%A3.md" target="_blank" rel="external">Android M的App Links实现详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20694818" target="_blank" rel="external">移动DeepLink的前生今世</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-f9353b100e86560b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;前段时间公司让调研一下DeepLink，说以后会用到，之前看了很久，并做了个demo，现整理一下，方便以后查阅，如果有幸帮助到其他人就更好了。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="deeplink" scheme="http://jingbin.me/tags/deeplink/"/>
    
  </entry>
  
  <entry>
    <title>Android 内存泄漏分析与优化</title>
    <link href="http://jingbin.me/2018/06/27/memory-leak-analysis/"/>
    <id>http://jingbin.me/2018/06/27/memory-leak-analysis/</id>
    <published>2018-06-27T13:31:24.000Z</published>
    <updated>2018-07-06T06:17:57.473Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>大范围借鉴及自己思考总结的内容，感谢各位博主的分享。</p>
</blockquote>
<a id="more"></a>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="何为性能问题"><a href="#何为性能问题" class="headerlink" title="何为性能问题"></a>何为性能问题</h4><h5 id="1-响应时间"><a href="#1-响应时间" class="headerlink" title="(1). 响应时间"></a>(1). 响应时间</h5><p>指从用户操作开始到系统给用户以正确反馈的时间。一般包括逻辑处理时间 + 网络传输时间 + 展现时间。对于非网络类应用不包括网络传输时间。</p>
<p>展现时间即：网页或 App 界面渲染时间。<br>响应时间是：用户对性能最直接的感受。</p>
<h5 id="2-TPS-Transaction-Per-Second"><a href="#2-TPS-Transaction-Per-Second" class="headerlink" title="(2). TPS(Transaction Per Second)"></a>(2). TPS(Transaction Per Second)</h5><p>TPS为每秒处理的事务数，是系统吞吐量的指标，在搜索系统中也用QPS(Query Per Second)衡量。TPS一般与响应时间反相关。</p>
<p>通常所说的性能问题就是指响应时间过长、系统吞吐量过低。</p>
<p>对后台开发来说，也常将高并发下内存泄漏归为性能问题。<br>对移动开发来说，性能问题还包括电量、内存使用这两类较特殊情况。</p>
<h4 id="性能调优方式"><a href="#性能调优方式" class="headerlink" title="性能调优方式"></a>性能调优方式</h4><p>明白了何为性能问题之后，就能明白性能优化实际就是优化系统的响应时间，提高TPS。优化响应时间，提高TPS。方式不外乎这三大类：</p>
<ul>
<li>(1) 降低执行时间，又包括几小类<ul>
<li>a. 利用多线程并发或分布式提高 TPS</li>
<li>b. 缓存(包括对象缓存、IO 缓存、网络缓存等)</li>
<li>c. 数据结构和算法优化</li>
<li>d. 性能更优的底层接口调用，如 JNI 实现</li>
<li>e. 逻辑优化</li>
<li>f. 需求优化</li>
</ul>
</li>
<li>(2) 同步改异步，利用多线程提高TPS</li>
<li>(3) 提前或延迟操作，错峰提高TPS</li>
</ul>
<h3 id="项目优化细节"><a href="#项目优化细节" class="headerlink" title="项目优化细节"></a>项目优化细节</h3><h4 id="内存泄漏问题"><a href="#内存泄漏问题" class="headerlink" title="内存泄漏问题"></a>内存泄漏问题</h4><h5 id="静态单例类引用Activity的context"><a href="#静态单例类引用Activity的context" class="headerlink" title="静态单例类引用Activity的context"></a>静态单例类引用Activity的context</h5><p>单例模式不正确的获取context:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LoginManager manager;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoginManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (manager == <span class="keyword">null</span>)</div><div class="line">            manager = <span class="keyword">new</span> LoginManager(context);</div><div class="line">        <span class="keyword">return</span> manager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LoginManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在LoginActivity中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span>  </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LoginManager loginManager;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line">        loginManager = LoginManager.getInstance(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在LoginManager的单例中context持有了LoginActivity的this对象，即使登录成功后我们跳转到了其他Activity页面，LoginActivity的对象仍然得不到回收因为他被单例所持有，而单例的生命周期是同Application保持一致的。</p>
<p>正确的获取context的方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LoginManager manager;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoginManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (manager == <span class="keyword">null</span>)</div><div class="line">            manager = <span class="keyword">new</span> LoginManager(context);</div><div class="line">        <span class="keyword">return</span> manager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LoginManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context.getApplicationContext();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们单例中context不再持有Activity的context而是持有Application的context即可，因为Application本来就是单例，所以这样就不会存在内存泄漏的的现象了。</p>
</blockquote>
<h5 id="单例模式中通过内部类持有activity对象"><a href="#单例模式中通过内部类持有activity对象" class="headerlink" title="单例模式中通过内部类持有activity对象"></a>单例模式中通过内部类持有activity对象</h5><p>下面是一个单例的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestManager</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> TestManager INSTANCE = <span class="keyword">new</span> TestManager();</div><div class="line">    <span class="keyword">private</span> List&lt;MyListener&gt; mListenerList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        mListenerList = <span class="keyword">new</span> ArrayList&lt;MyListener&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(MyListener listener)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!mListenerList.contains(listener)) &#123;</div><div class="line">            mListenerList.add(listener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(MyListener listener)</span> </span>&#123;</div><div class="line">        mListenerList.remove(listener);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSomeThingHappen</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是activity:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MyListener mMyListener=<span class="keyword">new</span> MyListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSomeThingHappen</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">private</span> TestManager testManager=TestManager.getInstance();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_test);</div><div class="line">        testManager.registerListener(mMyListener);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道在java中，非静态的内部类的对象都是会持有指向外部类对象的引用的，因此我们将内部类对象mMyListener让单例所持有时，由于mMyListener引用了我们的activity对象，因此造成activity对象也不能被回收了，从而出现内存泄漏现象。</p>
<p>修改以上代码，避免内存泄漏，在activity中添加以下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    testManager.unregisterListener(mMyListener);</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>退出界面时，取消相关注册监听！</p>
</blockquote>
<h5 id="AsyncTask不正确使用造成的内存泄漏"><a href="#AsyncTask不正确使用造成的内存泄漏" class="headerlink" title="AsyncTask不正确使用造成的内存泄漏"></a>AsyncTask不正确使用造成的内存泄漏</h5><p>我们在来看一种更加容易被忽略的内存泄漏现象，对于AsyncTask不正确使用造成内存泄漏的问题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mTask=<span class="keyword">new</span> AsyncTask&lt;String,Void,Void&gt;()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">                <span class="comment">//doSamething..</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;.execute(<span class="string">"a task"</span>);</div></pre></td></tr></table></figure>
<p>我们在使用AsyncTask的时候不宜在其中执行太耗时的操作，假设activity已经退出了，然而AsyncTask里任务还没有执行完成或者是还在排队等待执行，就会造成我们的activity对象被回收的时间延后，一段时间内内存占有率变大。</p>
<p>解决方法在activity退出的时候应该调用cancel()函数:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//mTask.cancel(false);</span></div><div class="line">       mTask.cancel(<span class="keyword">true</span>);</div><div class="line">       <span class="keyword">super</span>.onDestroy();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>退出界面时，结束当前页面的线程。</p>
</blockquote>
<h5 id="内部Handler类引起内存泄露"><a href="#内部Handler类引起内存泄露" class="headerlink" title="内部Handler类引起内存泄露"></a>内部Handler类引起内存泄露</h5><p>原因：Handler在Android中用于消息的发送与异步处理，常常在Activity中作为一个匿名内部类来定义，此时Handler会隐式地持有一个外部类对象（通常是一个Activity）的引用。当Activity已经被用户关闭时，由于Handler持有Activity的引用造成Activity无法被GC回收，这样容易造成内存泄露。 正确的做法是将其定义成一个静态内部类（此时不会持有外部类对象的引用），在构造方法中传入Activity并对Activity对象增加一个弱引用，这样Activity被用户关闭之后，即便异步消息还未处理完毕，Activity也能够被GC回收，从而避免了内存泄露。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;Activity&gt; reference;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">            reference = <span class="keyword">new</span> WeakReference&lt;Activity&gt;(activity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (reference.get() != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    <span class="comment">// do something...</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="comment">// do something...</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="webview导致的内存泄漏"><a href="#webview导致的内存泄漏" class="headerlink" title="webview导致的内存泄漏"></a>webview导致的内存泄漏</h5><p>用代码New一个WebView而不是在XML中静态写入(不过貌似不能设置进度条了，不需要进度条的可以忽略):</p>
<p>在XML文件中用layout占位:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout</div><div class="line">    android:id=<span class="string">"@+id/base_web_view_container"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<p>接下来只需要在Activity中New一个WebView并且添加到我们的容器中就ok了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">RelativeLayout webview_container = (RelativeLayout) findViewById(R.id.base_web_view_container);</div><div class="line">web_view_ = <span class="keyword">new</span> WebView(yourApplicationContext);</div><div class="line">web_view_.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</div><div class="line">                ViewGroup.LayoutParams.MATCH_PARENT));</div><div class="line">web_view_.setOnWebCallback(yourWebCallback);</div><div class="line">webview_container.addView(web_view_);</div></pre></td></tr></table></figure>
<p>关于WebView的context应该用Activity还是Application的context，这里网上较为一致的观点都是采用Application的，理由是这样不会造成Activity的context的内存泄漏。</p>
<p>销毁时的动作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearWebViewResource</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (web_view_ != <span class="keyword">null</span>) &#123;</div><div class="line">        LogUtils.d(TAG,<span class="string">"Clear webview's resources"</span>);</div><div class="line">        web_view_.removeAllViews();</div><div class="line">        <span class="comment">// in android 5.1(sdk:21) we should invoke this to avoid memory leak</span></div><div class="line">        <span class="comment">// see (https://coolpers.github.io/webview/memory/leak/2015/07/16/</span></div><div class="line">        <span class="comment">// android-5.1-webview-memory-leak.html)</span></div><div class="line">        ((ViewGroup) web_view_.getParent()).removeView(web_view_);</div><div class="line">        web_view_.setTag(<span class="keyword">null</span>);</div><div class="line">        web_view_.clearHistory();</div><div class="line">        web_view_.destroy();</div><div class="line">        web_view_ = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尽量不要将WebView作为listview的头部使用，这样的话WebView会被一次性加载到内存中。</p>
<h5 id="Window-Leaked"><a href="#Window-Leaked" class="headerlink" title="Window Leaked"></a>Window Leaked</h5><p>按字面了解，Window Leaked大概就是说一个窗体泄漏了，也就是我们常说的内存泄漏，为什么窗体会泄漏呢？</p>
<ul>
<li><p>产生原因：<br> 我们知道Android的每一个Activity都有个WindowManager窗体管理器，同样，构建在某个Activity之上的对话框、PopupWindow也有相应的WindowManager窗体管理器。因为对话框、PopupWindown不能脱离Activity而单独存在着，所以当某个Dialog或者某个PopupWindow正在显示的时候我们去finish()了承载该Dialog(或PopupWindow)的Activity时，就会抛Window Leaked异常了，因为这个Dialog(或PopupWindow)的WindowManager已经没有谁可以附属了，所以它的窗体管理器已经泄漏了。</p>
</li>
<li><p>解决方法：<br>关闭(finish)某个Activity前，要确保附属在上面的Dialog或PopupWindow已经关闭(dismiss)了。</p>
</li>
</ul>
<h5 id="避免内存流失"><a href="#避免内存流失" class="headerlink" title="避免内存流失"></a>避免内存流失</h5><p>内存流失可能会导致出现大量的 GC 事件，如自定义组件的 onDraw() ，避免大量创建临时对象，比如 String ，以免频繁触发 GC。GC 事件通常不影响您的 APP 的性能，然而在很短的时间段，发生许多垃圾收集事件可以快速地吃了您的帧时间，系统上时间的都花费在 GC ，就有很少时间做其他的东西像渲染或音频流。</p>
<h5 id="监听器的注销"><a href="#监听器的注销" class="headerlink" title="监听器的注销"></a>监听器的注销</h5><ul>
<li>对于观察者, 广播, Listener等, 注册和注销没有成对出现而导致的内存泄露.</li>
<li>使用CountDownTimer倒计时时，退出activity要取消：<code>timer.cancel()</code></li>
<li>使用LocationManager获取地理位置，及时取消注册：<code>locationManager.removeUpdates(mListener);</code></li>
<li>使用dialog或BottomSheetDialog，消失时移除监听，对象置空</li>
<li>使用RxBus，退出activity取消注册</li>
<li>使用一些三方的库，仔细查看是否需要取消注册的情况</li>
</ul>
<h5 id="Bitmap处理"><a href="#Bitmap处理" class="headerlink" title="Bitmap处理"></a>Bitmap处理</h5><p>以<a href="https://www.fresco-cn.org/docs/troubleshooting.html" target="_blank" rel="external">fresco</a>为例：</p>
<ul>
<li>(最好是加载图片宽高大小的图片，多余的尺寸会导致内存浪费，不过webp后缀的图片无法设置宽高，这是个问题？)加载特别特别大的图片时最容易导致这种情况。如果你加载的图片比承载的View明显大出太多，那你应该考虑将它Resize一下。</li>
<li>Android <strong><em>无法绘制长或宽大于2048像素的图片</em></strong>。这是由OpenGL渲染系统限制的，如果它超过了这个界限，Fresco会对它进行Resize。</li>
<li>decode format：解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。在不需要特别清晰的图片情况下，使用<strong><em>RBG_565</em></strong>为好。</li>
</ul>
<h5 id="SharedPreference-存储value"><a href="#SharedPreference-存储value" class="headerlink" title="SharedPreference 存储value"></a>SharedPreference 存储value</h5><p>sp在创建的时候会把整个文件全部加载进内存，如果你的sp文件比较大，那么会带来两个严重问题：</p>
<ul>
<li>第一次从sp中获取值的时候，有可能阻塞主线程，使界面卡顿、掉帧。</li>
<li>解析sp的时候会产生大量的临时对象，导致频繁GC，引起界面卡顿。</li>
<li>这些key和value会永远存在于内存之中，占用大量内存。</li>
</ul>
<p>储存数据量过大后，取值小屏手机vivoY23L,v4.4.4会取值失败。</p>
<h5 id="Cursor关闭"><a href="#Cursor关闭" class="headerlink" title="Cursor关闭"></a>Cursor关闭</h5><p>如查询数据库的操作，使用到Cursor，也要对Cursor对象及时关闭。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">     <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">        cursor.moveToFirst();</div><div class="line">        <span class="comment">// do something.</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">        cursor.close();</div><div class="line">        cursor = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="有效使用内存的建议"><a href="#有效使用内存的建议" class="headerlink" title="有效使用内存的建议"></a>有效使用内存的建议</h4><h5 id="去掉bean里无用的字段"><a href="#去掉bean里无用的字段" class="headerlink" title="去掉bean里无用的字段"></a>去掉bean里无用的字段</h5><p>有时候我们通过GsonFormat直接生成返回的json的Bean，而有一些我们并未使用的字段也一并生成了，建议删除这些无用字段，不然将无可避免的占用一定的内存空间。</p>
<h5 id="关闭页面，全局的list清空后置空"><a href="#关闭页面，全局的list清空后置空" class="headerlink" title="关闭页面，全局的list清空后置空"></a>关闭页面，全局的list清空后置空</h5><p>用完就清空，并设置为null，不要到处引用不然会导致不能及时释放。</p>
<h5 id="谨慎使用服务Service"><a href="#谨慎使用服务Service" class="headerlink" title="谨慎使用服务Service"></a>谨慎使用服务Service</h5><p>离开了 APP 还在运行服务是最糟糕的内存管理错误之一，当 APP 处在后台，我们应该停止服务，除非它需要运行的任务。我们可以使用<a href="https://developer.android.google.cn/topic/performance/background-optimization" target="_blank" rel="external">JobScheduler</a>替代实现，JobScheduler把一些不是特别紧急的任务放到更合适的时机批量处理。如果必须使用一个服务，最佳方法是使用<a href="https://developer.android.google.cn/guide/components/services" target="_blank" rel="external">IntentService</a>，限制服务寿命，所有请求处理完成后，IntentService 会自动停止。</p>
<h5 id="使用优化后的数据容器"><a href="#使用优化后的数据容器" class="headerlink" title="使用优化后的数据容器"></a>使用优化后的数据容器</h5><p>考虑使用优化过数据的容器 SparseArray / SparseBooleanArray / LongSparseArray 代替 HashMap 等传统数据结构，通用 HashMap 的实现可以说是相当低效的内存，因为它需要为每个映射一个单独的条目对象</p>
<p>关于HashMap，ArrayMap，SparseArray, <a href="https://www.jianshu.com/p/7b9a1b386265" target="_blank" rel="external">这篇文章</a>有个比较直观的比较, 可以看下</p>
<h5 id="少用枚举enum结构"><a href="#少用枚举enum结构" class="headerlink" title="少用枚举enum结构"></a>少用枚举enum结构</h5><p>枚举一般是用来列举一系列相同类型的常量，它是一种特殊的数据类型，使用枚举能够确保参数的安全性。但是Android开发文档上指出，使用枚举会比使用静态变量多消耗两倍的内存，应该尽量避免在Android中使用枚举。</p>
<p>那么枚举为什么会更消耗内存呢？ - <a href="https://blog.csdn.net/xiao_nian/article/details/80002101" target="_blank" rel="external">分析链接</a></p>
<h5 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h5><p>诸如一些临时对象, 特别是循环中的.</p>
<h5 id="使用异步处理数据较多的情况"><a href="#使用异步处理数据较多的情况" class="headerlink" title="使用异步处理数据较多的情况"></a>使用异步处理数据较多的情况</h5><p>如果一些数据需要处理再显示在UI上，对于数据量比较大的情况强烈建议异步处理后再在主线程处理。</p>
<h5 id="使用-nano-protobufs-序列化数据"><a href="#使用-nano-protobufs-序列化数据" class="headerlink" title="使用 nano protobufs 序列化数据"></a>使用 nano protobufs 序列化数据</h5><p>Protocol buffers 是一个语言中立，平台中立的，可扩展的机制，由谷歌进行序列化结构化数据，类似于 XML 设计的，但是更小，更快，更简单。如果需要为您的数据序列化与协议化，建议使用 nano protobufs。</p>
<h5 id="使用ProGuard来剔除不需要的代码"><a href="#使用ProGuard来剔除不需要的代码" class="headerlink" title="使用ProGuard来剔除不需要的代码"></a>使用ProGuard来剔除不需要的代码</h5><p>使用 ProGuard 来剔除不需要的代码，移除任何冗余的，不必要的，或臃肿的组件，资源或库完善 APP 的内存消耗。</p>
<h5 id="降低整体尺寸APK"><a href="#降低整体尺寸APK" class="headerlink" title="降低整体尺寸APK"></a>降低整体尺寸APK</h5><p>您可以通过减少 APP 的整体规模显著减少 APP 的内存使用情况。文章：<a href="http://wuxiaolong.me/2017/03/19/ReduceAPKSize/" target="_blank" rel="external">Android APK瘦身实践</a></p>
<h5 id="优化布局层次"><a href="#优化布局层次" class="headerlink" title="优化布局层次"></a>优化布局层次</h5><p>通过优化视图层次结构，以减少重叠的 UI 对象的数量来提高性能。文章：<a href="http://wuxiaolong.me/2017/03/26/Rendering/" target="_blank" rel="external">Android 渲染优化</a></p>
<h3 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h3><ul>
<li><a href="https://github.com/square/leakcanary" target="_blank" rel="external">leakcanary</a></li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="http://www.trinea.cn/android/performance/" target="_blank" rel="external">性能优化系列总篇</a></li>
<li><a href="https://blog.csdn.net/ys408973279/article/details/50389200" target="_blank" rel="external">Android内存优化之——static使用篇</a></li>
<li><a href="https://gist.github.com/yangdm0209/ded1d6fe2d7724070b3af87caa5515c2" target="_blank" rel="external">Android 中handler的HandlerLeak问题</a></li>
<li><a href="https://blog.csdn.net/sanjay_f/article/details/50208847" target="_blank" rel="external">源码探索系列1—Handler与HandlerLeak的那些事</a></li>
<li><a href="http://lipeng1667.github.io/2016/08/06/memory-optimisation-for-webview-in-android/" target="_blank" rel="external">WebView内存泄漏优化之路</a></li>
<li><a href="https://blog.csdn.net/u_xtian/article/details/6123945" target="_blank" rel="external">关于android.view.WindowLeaked的解决方案</a></li>
<li><a href="http://wuxiaolong.me/2017/04/15/memory/" target="_blank" rel="external">Android 内存优化</a></li>
<li><a href="http://weishu.me/2016/10/13/sharedpreference-advices/" target="_blank" rel="external">请不要滥用SharedPreference</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;大范围借鉴及自己思考总结的内容，感谢各位博主的分享。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="性能优化" scheme="http://jingbin.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>武汉购房经历 | 已结束</title>
    <link href="http://jingbin.me/2018/06/13/buying-a-house-in-wuhan/"/>
    <id>http://jingbin.me/2018/06/13/buying-a-house-in-wuhan/</id>
    <published>2018-06-12T17:15:52.000Z</published>
    <updated>2018-06-13T14:52:40.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2018.6.12，今天刚领到了购房合同，从买房到现在已经一年多了，总算完成了一项一百多万的大买卖。总结一下这一年多买房的经历。</p>
<p>很长的文字，建议<del>用时一个小时</del>不要看。</p>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-b85c559592888367.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="开始想买房"><a href="#开始想买房" class="headerlink" title="开始想买房"></a>开始想买房</h3><p>刚毕业半年，还在北京工作的的时候，一高中同学就打算在武汉买套房，那时候是2015年底，因为她毕业的早一年，而且提前出去工作的，在武汉已经工作了一年了，对那里的形势也比较了解。</p>
<p>跟我说了一下买房的事情，由于我对武汉的情况并不了解，而且那时候刚毕业不久，没有很稳定的工作，不确定是不是一定到武汉定居，所以并没有多在意，当年过年回家和父母商量可不可以买。</p>
<p>当时没有买，我知道的几个原因有，<br>第一：家里那时候生意不太好做，准备搬到市区去做另一行的生意，进货、租店而且还要一定的资金周转，拿出20万作为首付后资金有点紧张。<br>第二：父母问了其他人武汉的房子好不好买，大家都说好买，不急，到处都拉着你买房子。<br>第三：我还不确定回武汉，以后还不一定在武汉定居，现在买了不一定增值，花20万放在房子上增值现在看不到好的前景。<br>第四：我的收入不稳定，买了不一定还得起，到时候还得让父母还，我心里也不好受。<br>第五：我大学在宜昌上的，之后又去了北京，对武汉的情况不了解，不知道哪个地方好，哪个地方差还需要去好好看，而且买了后还要领合同签贷款交首付之类的要一段时间，我马上就要去北京了，父母忙生意也没时间。<br>由于种种原因，当时是没有买的，不然现在也不会花这么大价钱买。</p>
<p>那个高中同学买了，之后说的是逼她的父母买的《宝业光谷丽都》，当时的价好像是7500左右，2015年下半年或2016年上半年，买的一个85平左右的两室一厅，对于我们来说已经非常好了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-8558de2b78ae38d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="宝业光谷丽都"></p>
<p>后来房价一路飙升，原定她的小区第三期2017年开盘的一直捂盘到现在，2018年5月，靠近三环的比较吵的以均价15000元一平，靠后一点的以均价17000元一平的出售了。整整翻了两倍不止。</p>
<h3 id="网上看房子"><a href="#网上看房子" class="headerlink" title="网上看房子"></a>网上看房子</h3><p>过完年去北京后，网上一直有武汉房价的消息，可能那时候资本寒冬，投资家的钱没地方去就很多到了房市上面。那时候还在网上慢慢悠悠看房子，看哪里的地段好，哪里符合我工作的地方。</p>
<p>突然，具体时间忘记了，也不是很敏感，因为当时父母没这么想买，我没这么多钱，觉得父母已经很辛苦了，所以没有太在意。大约是2016年下半年的时候，武汉限购了，不是武汉户口的买不了，刚开始是几个区限购，后来越来越多，以至于好点的地方都需要户口或两年社保。[2016、武汉9月限贷，10月限购，11月又限购]</p>
<p>2017年过年的时候回家，差不多2017年2月，在武汉呆了几天，去她的房子那看了一下，好像就是那个三期的，说是快开盘了，我问可以不可以买，说是限购了一定要是武汉户口，或是两年社保，当时想了想两年是不可能的，还要工作两年，本地户口又不是，所以很无奈。</p>
<h3 id="第一次实地看房"><a href="#第一次实地看房" class="headerlink" title="第一次实地看房"></a>第一次实地看房</h3><p>2017年回家后，决定了之后去深圳发展，回北京后辞去当时的工作，然后去了深圳，打算的是在深圳打工然后还武汉的房贷。既然买不了主城区的房子，就买远城区的，心里想的很简单，只要是武汉的房子就好，就算离工作的地方搭车2小时也无所谓。</p>
<p>然后在深圳找工作期间，发现不是很顺利，深圳的工资没有我想象的那么高，而且远城区的房子比我想象的要远😂。</p>
<p>当时在深圳找工作，因为深圳距离武汉比较远，父母和另一个人就开车一起去武汉看了一次，开去武汉差不多就2个小时左右。看了几个楼盘感觉比较好，想我回来看下然后最好能定下来。2017年5月1日前几天我回武汉去和父母看了一下。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-f6c1a99443ad5e62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="汉口北"></p>
<p>当时看了四套房，都在汉口北地铁站附近：</p>
<ul>
<li><p>第一套，位置很偏，旁边还是石子路，配套什么的想都没想。进去小区之后，两个字：“荒芜”，基本没有什么人在那里住，只有一个阿姨推着小孩在那里玩。墙上已经掉漆了，是的，建筑的外墙已经掉漆了，进去楼道口，门和电梯都是旧的，应该是没有物业吧，没人住也不用请物业，不能进去房间里看，就到顶楼看了下，心里很难受，坚决不能买。</p>
</li>
<li><p>第二套，是隔得不远的一间，小区位置还比较好，和之前的比好多了，里面的入住率很高，而且绿化做的很好，就是有个缺点，在一楼或是二楼，阳光不是很好，好像还看了同一个小区的，因为里面的户型不好没有考虑，都是二手房。暂时把这个留作考虑。</p>
</li>
<li><p>第三套，这个很差非常差。。是一个和我一般大的小姑凉带我们看的房，去的路上还有别人在旁边种田，进去后是一个老小区，里面别人住了大几年的那种，很破。房价是一万一平！小姑凉实话说了，之前那里没人来看，因为限购了，所以很多人跑这里买了，这里的价格就起来了。</p>
</li>
<li><p>第四套，是性价比最高的。在第二套的不远处，但是这个是中层，而且是毛坯，户型也还可以采光比较好，大小85平左右，小区物业一般。在楼上看了一下远处新建的一栋楼，问了下中介那么什么价，中介说均价差不多9000-10000，要收10万的茶水费才能买到，就是10万买一个购房名额，当时我们真是目瞪口呆，10万在老家可以付个首付了这里就是一个名额钱。</p>
</li>
</ul>
<p>思来想去，如果买的话最好的选择是第四套，但感觉缺点什么，没有生气还是比较远？父母比较忙也没有时间过来武汉，一直看房子为这事操心，都准备去中介所那里交定金了，一万的定金给预留房源，交了买可以低首付，不买是不能退的。思考了很久，我拉住父母说，我另一个同学也说要在武汉买房子，我参考一下他的意见。</p>
<p>另一个同学也在武汉工作，一个男生，之前和我们说想要在武汉买房，他对武汉应该很熟悉，就问了他很多情况，让他说汉口北是什么情况，建不建议买。他说汉口北有地铁，周边有很多批发市场，看起来还可以，但是离主城区远，周边也没有什么工作的地方，一切都比较虚。这么一说我心里就有点明白了，在回去的时候思考了很久该怎么办。最后灵光一现，干脆回武汉，这样对武汉也熟一些，知道买哪里好，在武汉先工作着，不行就两年后再买，买的很远也不能住没有意义。</p>
<p>然后，我就回武汉了。</p>
<h3 id="可以转户口了"><a href="#可以转户口了" class="headerlink" title="可以转户口了"></a>可以转户口了</h3><p>2017年8月份，听到一个房产中介朋友说可以转户口了！只要是大学生就可以！</p>
<p>当时不敢相信，还特地去东湖高新政务中心问了，武汉启动大学生留汉政策，可以办理！然后下个星期我就拿资料去办理了。</p>
<p>办理所需的资料：<br>[2017年9月1日 星期五 10:24 拍的照片]<br><img src="https://upload-images.jianshu.io/upload_images/1354448-f2572263dbab7a6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="所需资料"></p>
<p>然后很快拿到准迁证，之后回老家的户籍办理中心，将准迁证给工作人员，然后电脑操作一下在准迁证另一半上盖一个章，再回武汉到洪山区关东派出所将另一半准迁证给工作人员。等一两个月新的身份证下来就好了！</p>
<p>这时候我终于可以买主城区的房子了！比我预想的快了将近两年。</p>
<h3 id="江夏庙山保利海上五月花"><a href="#江夏庙山保利海上五月花" class="headerlink" title="江夏庙山保利海上五月花"></a>江夏庙山保利海上五月花</h3><blockquote>
<p>限购区看中的第一套房，严格来讲江夏不算主城区。</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-0d7c1e03c25176ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="保利海上五月花"></p>
<p>租房的时候遇到一个在我爱我家做房产中介的朋友。他在卖二手房，负责保利海上五月花，周末约他去看了一下那的房子。相对之前我看的房子好太多太多了，价格是11600元左右一平，因为是二手房有很多税加一起来差不多这个价，而且是临湖，可以睡到卧室能直接看到湖的哪一种，距离光谷转盘坐公交40-50分钟。没有看到比这还好的了，因为之前看的都比较差。</p>
<p>想买，后来发现我另一同学在武汉做中介，也是在我爱我家，负责另一片区。说可以讲中介费做到0.5%，正常的是2.5%，而且后期还有很多税是和中间评估商有关联的，评估的越高税越贵，他们可以做的低一点，这样算下来可以少几万！当然是找我那同学了，只能对不起那朋友了。</p>
<p>后来，过来这边看了好几次，总觉得还是不太好。第一，单价还是有点贵，第二，房间比较小，77平，两个小房间，两个人住还好，之后人多了不方便，不过当时的首付只有35w，所以大点的话了买不起。总的来说，基本满足我的需要。</p>
<h3 id="江夏庙山广信万汇城"><a href="#江夏庙山广信万汇城" class="headerlink" title="江夏庙山广信万汇城"></a>江夏庙山广信万汇城</h3><blockquote>
<p>江夏庙山地理位置最好的盘</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-0fbef38f53114a30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="广信万汇城"></p>
<p>父母过来准备交首付了，想带父母去房子里看一下，路过了《广信万汇城》。<br>显然那个盘比保利海上五月花好，新房而且地理位置好，旁边就是武昌理工学院。当时单价是9500元一平，算了下，就算交8万的茶水费买97平的和买保利海上五月花一样的价。何乐而不为，当时就定了广信万汇城！</p>
<p>10月份交了认筹资料就没有管了，因为交了茶水费可以说是稳了，大伙基本也知道怎么回事，说的是不交买不到的，没想到的是交了也买不到。</p>
<p>过了两个月，通知开盘，交了20w的认筹金，然后开盘后被告知没有搞到房子，开发商那边炸了，收了很多的茶水费，房子不够用了，大家都没有得到。被号称是全球最快秒光盘，全部内定，一进去选房系统全部秒红，事后很多人去销售中心拉横幅，我还被加入了好多的“广信万汇城退筹群”。这这一次开的是第二期，第三期定在2018年下旬了，没有请营销团队，全部内部售卖，可以说是非常厉害了！</p>
<p><a href="http://haokan.baidu.com/videoui/page/videoland?context=%7B%22nid%22%3A%22sv_8734269223388388804%22%7D" target="_blank" rel="external">秒光视频</a> - 说不定什么时候就没有了<br>—“垃圾，都被内定了，还收20万认凑金，收了一千多份，这样的开发商政府为什么不查？老百姓就这样被折腾没人管吗？大家现在需要的是真相，全部房拿出去收茶水费，还要骗这么多认凑，太过分了！”</p>
<p>之后同学推荐了中海光谷锦城，说的是双轨交汇，就是贵了点差不多四十几万的首付，给父母说了太贵就没作考虑。然后马上过年回家了，这年就没有买到。</p>
<h3 id="保利海上五月花最后一期"><a href="#保利海上五月花最后一期" class="headerlink" title="保利海上五月花最后一期"></a>保利海上五月花最后一期</h3><blockquote>
<p>在毛坯房绝迹时，保利海上五月花最后一期毛坯房推出了</p>
</blockquote>
<p>这次的政策很好，房产商的120平以下的房源，40%拿出来作为刚需选房(2018年6月1日后是60%)。<br>就是如果有100套120平以下的房，那么，就拿40套出来让刚需的先选择一次，没有选中再选择另外的房源。<br>评为刚需的条件是：在武汉没有房而且多少年内没有贷款记录。<br>由房管局将所有刚需的人摇号排序依次选房，保利海上五月花最后一期刚需房源有180套，我被摇到了90名，就是说我是第90人进去选房子的人，选一个少一套。</p>
<p>经过一定的思想斗争，我放弃了。之前一直想买的房子现在免费给我机会不要茶水费，毛坯，而且单价是9700元，这里的二手房价已经是12000元了，网上内定名额已经炒到10w一个人了。<br>这里的交通(2049年都没有规划地铁)，教育配套，生活配套都不行，仅有的好处是便宜。考虑到后期这里显然不是最佳的选择。</p>
<h3 id="安居客看房团"><a href="#安居客看房团" class="headerlink" title="安居客看房团"></a>安居客看房团</h3><blockquote>
<p>白沙洲线路：新力城、美好长江首玺、东原乐见城、中悦滨湖尚城、加州橘郡</p>
</blockquote>
<p>为了了解更多的房源，在安居客上报了一个白沙洲线路的看房团，这条线路的盘均价在12000左右。</p>
<ul>
<li>新力城、美好长江首玺性价比比较高，属于白沙洲，现在的周边环境不太适合居住，交通也基本没有，新力城都没有公交车到那里。不过周围已经规划地铁，相信以后会很好。</li>
<li>东原乐见城位置最好，在南湖，但价格也最高，首付60-70w，验资50w,装修不能贷款。周边有地铁并且已经开通，生活氛围也浓厚。</li>
<li>中悦滨湖尚城属于江夏，四环外了，距离地铁线也比较远，好处是周围有几个学校和一个腾讯大厦，居然叫出12500的高价，应该是距离江夏市政府比较近或其他缘故。</li>
<li>加州橘郡在江夏庙山，距离保利海上五月花比较近，自从经历了广信万汇城，觉得庙山其他的盘都看不上眼了。自带幼儿园小学，周边都是私立学校，置业说一年5w学费，一般人真的上不起，很多家长陪读的，出租到是很好。后期开盘人也是爆满。</li>
</ul>
<p>和公司的一个同事一起去看的，然后在路上遇到了一个一起看房的哥们，从他口中得知了《康桥知园》这个楼盘，说是价格适中，而且地理位置也可以，之前加过他们的置业，马上截止交资料了就把资料拍照发给了置业。</p>
<h3 id="康桥知园"><a href="#康桥知园" class="headerlink" title="康桥知园"></a>康桥知园</h3><blockquote>
<p>旁边楼盘有：招商东城华府和中海光谷锦城。</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-5022f3ca4c95ea7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="康桥知园"></p>
<ul>
<li>位置：位于东湖高新区佛祖岭地块，距离佛祖岭地铁站(2号线南延线最后一站)1.7km左右。旁边的中海和招商华府都属于江夏。</li>
<li>价格：郑州康桥集团拿的地，7200多一点，均价15500元，价格还能接受，周边的中海和招商华府都差不多是这个价，中海的地拿的是8300元左右，是江夏地王。首付将近50w。</li>
<li>配套：说的三轨交汇，2号线，9号线和有轨。2号线2019年1月份开通，有轨已经开通，9号线的站点会距离项目更近一些，不过是很久之后的事情了，也属于2期建设，不知道是何年何月。周边有很多学校，幼儿园小学初中高中都有，而且都可以上，隔壁的楼盘则不能。</li>
<li>小区规模：这个相对劣势，只有三栋楼288户卖完就没有了，不过小区的绿化楼间距可以，品质也比较好。</li>
</ul>
<p>武汉阿松的评价：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/SyXblCmku_cLlWiuqnwVEg" target="_blank" rel="external">武汉有这样一个盘 开发商竟然不以赚钱为目的？</a></li>
<li><a href="https://mp.weixin.qq.com/s/nIOGa-czOtIHORH5fL9Xew" target="_blank" rel="external">阿松楼书：康桥知园-光谷稀有品质房 所有房源一次性全部推出！</a></li>
<li><a href="https://mp.weixin.qq.com/s/nHzGNcE3X6YU48Ye_UzljA" target="_blank" rel="external">康桥知园VS中海光谷锦城！</a></li>
</ul>
<h3 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h3><blockquote>
<p>东湖高新 - 武汉东湖新技术开发区</p>
</blockquote>
<ul>
<li>有人评价东湖高新和汉阳：一个是高科技里搞住宅，一个是住宅里搞高科技。</li>
<li>如果说以前武汉的中心是汉口，那现在武汉的中心就是东湖高新。</li>
<li>光谷是宇宙中心，光谷东是上海，光谷南是广州，光谷西是成都，光谷北是北京。</li>
<li>一个与市政府平级的行政区</li>
</ul>
<p>不做多的解释了，看百度百科：</p>
<ul>
<li><a href="https://baike.baidu.com/item/%E6%AD%A6%E6%B1%89%E4%B8%9C%E6%B9%96%E6%96%B0%E6%8A%80%E6%9C%AF%E4%BA%A7%E4%B8%9A%E5%BC%80%E5%8F%91%E5%8C%BA" target="_blank" rel="external">武汉东湖新技术产业开发区</a></li>
<li><a href="https://mp.weixin.qq.com/s/-8xRVpfbmBE8wBUtv2blwg" target="_blank" rel="external">从0到518平方公里！武汉最牛X的区是如何炼成的？</a></li>
</ul>
<h3 id="贷款事项"><a href="#贷款事项" class="headerlink" title="贷款事项"></a>贷款事项</h3><blockquote>
<p>房贷 装修贷  利率：25%</p>
</blockquote>
<p>经过一系列操作，最终成功买到了康桥知园，总价160w左右，首付50w左右，房贷和装修贷是分开的。</p>
<ul>
<li>房贷：首套房30%(第二套50%)，招商，利率上浮25%，总贷款94w，还款30年。</li>
<li>装修贷：中行信用卡，贷款18w，还款8年。</li>
</ul>
<p>算在一起每月还款8k左右了，在武汉，房价现在这个价很正常，每月月供这个多，在武汉拿的工资很难还得起。除非装修款提前还完之后的生活就宽裕一点。</p>
<p>拿到房子后等通知去售楼部交贷款资料给相关银行审核，前提是我和我父母的收入(可以添加父母为共同还款人)加起来是贷款的2倍，就是一月1.6k。审核的细节很多，还要看父母的征信等，父母过来排了半天的队，半辈子的积蓄就给了首付钱，心里很难受。</p>
<p>给银行审核的时间差不多一个月左右，然后成功后去售楼部交首付，交完首付签购房合同，合同拿去给房管局盖章时间差不多也是一个月左右。然后房贷放款，售楼部拿到购房合同去中行放装修款，这个时间也将近大半个月吧。</p>
<p>最后等房贷和装修贷全部放款之后，就去售楼部拿的购房合同。</p>
<h3 id="落户及房产证"><a href="#落户及房产证" class="headerlink" title="落户及房产证"></a>落户及房产证</h3><blockquote>
<p>置业说的是90天之后可以拿购房合同去东湖高新政务服务中心办理房产证。</p>
</blockquote>
<p>听阿松讲。东湖高新这样的主城区需要100平米以上才能落户，其他的区有点不一样，面积可以小一点。<br>还没有办理房屋落户和房产证暂不多说。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>由最初的能买到，能住就好，到最后考虑到行政区、交通、教育、离上班的位置距离、周边商业、户型。这一年多的买房经历真是学到了不少，以前东南西北都分不清，现在因为要看房子的朝向都老熟了，房子朝南偏13度才是最佳朝向，而不是正朝南。</p>
<p>最辛苦的还是父母，首付钱基本是父母支持的，家里本不富裕，一个农村人在武汉买一套房是多不容易的事情，周围的小伙伴在武汉买房的毕竟还是少数，后期会更加努力争取过上更好的生活。</p>
<p>基本完。</p>
<blockquote>
<p>2018.6.13 00:41 夜深，下次更。<br>2018.6.13 22:51 基本结束</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;2018.6.12，今天刚领到了购房合同，从买房到现在已经一年多了，总算完成了一项一百多万的大买卖。总结一下这一年多买房的经历。&lt;/p&gt;
&lt;p&gt;很长的文字，建议&lt;del&gt;用时一个小时&lt;/del&gt;不要看。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://jingbin.me/categories/life/"/>
    
    
      <category term="life" scheme="http://jingbin.me/tags/life/"/>
    
  </entry>
  
</feed>
