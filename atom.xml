<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JinBeen&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jinbeen.com/"/>
  <updated>2021-04-03T15:03:36.412Z</updated>
  <id>http://jinbeen.com/</id>
  
  <author>
    <name>JinBeen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客装修了，欢迎来坐</title>
    <link href="http://jinbeen.com/2021/04/03/welcome-bolg/"/>
    <id>http://jinbeen.com/2021/04/03/welcome-bolg/</id>
    <published>2021-04-03T09:38:29.000Z</published>
    <updated>2021-04-03T15:03:36.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装修效果-主题"><a href="#装修效果-主题" class="headerlink" title="装修效果(主题)"></a>装修效果(主题)</h2><ul>
<li><a href="https://jinbeen.com/2016/11/19/Mac搭建Hexo博客流程记录，排雷完成/">Mac搭建Hexo博客流程记录</a></li>
<li><a href="http://forsigner.com/2016/03/10/fexo-doc-zh-cn/#%E5%BC%80%E5%A7%8B" target="_blank" rel="external">主题配置</a></li>
</ul>
<p>因为之前搭建过所以更换起来相对比较简单，需要注意的地方：</p>
<ol>
<li><p>没设置标题的时候会出现<code>(no title)</code>的情况，可自定义，我设置为空串了，在这里设置：<code>theme</code>/<code>fexo</code>/<code>layout</code>/<code>partial</code>/<code>article.ejs</code>里的<code>&lt;h1 class=&quot;post-title&quot;&gt;&lt;%= post.title || &#39;&#39; %&gt;&lt;/h1&gt;</code></p>
</li>
<li><p>博客里的音乐的iframe，之前宽度是固定的，可设置为自适应：width=”100%”</p>
</li>
<li><p>评论改为了<a href="https://github.com/gitalk/gitalk#usage" target="_blank" rel="external">gitalk</a>，在主题下的<code>_config.yml</code>配置即可。需要注意的是<code>Authorization callback URL</code>使用的就是网站的域名，例如<code>https://jinbeen.com</code>。配置错误也可以到<a href="https://github.com/settings/applications/1551717" target="_blank" rel="external">此处</a>更改。</p>
</li>
<li><p>分类和标签页面配置的是<code>/categories/Android</code>、<code>tags/Android</code>。感觉应该是<code>categories</code>，但是不行还不知道为啥。</p>
</li>
<li><p>友链的介绍如果太长，在手机上样式会变型，最好是能一行显示完</p>
</li>
</ol>
<p>常用的Hexo命令：</p>
<ol>
<li><code>hexo generate (hexo g)</code>　生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>
<li><code>hexo server (hexo s --debug)</code>　启动本地web服务，用于博客的预览</li>
<li><code>hexo deploy (hexo d)</code> 　部署播客到远端</li>
<li><code>hexo new &quot;postName&quot;</code> 　新建文章</li>
<li><code>hexo new page &quot;pageName&quot;</code> 　新建页面</li>
</ol>
<h2 id="各大文章发布平台"><a href="#各大文章发布平台" class="headerlink" title="各大文章发布平台"></a>各大文章发布平台</h2><p>距离之前的 <code>next</code> 主题已经快五年了，这期间维护花了老大的劲，评论阅读数，访问人数统计，https，域名，图片防盗链等。之前使用github pages搭建博客可是有一大波人，现在留下的估计就那么几个了，奉劝大家还是找一个合适的技术平台，把文章放那里。</p>
<ul>
<li>个人博客：适合装X，一个人的空间，做一些定制化的样式还挺不错</li>
<li>掘金：高质量的技术文章平台，有能力的技术人员推荐在这里发展</li>
<li>CSDN：水文比较多，很多重复文章，但是能发展起来也非常厉害</li>
<li>简书：以前还可以，自从饱醉豚事件后就没落了，现在技术人员基本不在里面活动了</li>
</ul>
<p> 欢迎关注我的<a href="https://github.com/youlookwhat" target="_blank" rel="external">GitHub账号</a>，或<a href="https://juejin.cn/user/201965867640862/posts" target="_blank" rel="external">掘金号</a>，有事没事留个言👋</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;装修效果-主题&quot;&gt;&lt;a href=&quot;#装修效果-主题&quot; class=&quot;headerlink&quot; title=&quot;装修效果(主题)&quot;&gt;&lt;/a&gt;装修效果(主题)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jinbeen.com/2016/11/19/Ma
    
    </summary>
    
      <category term="hexo" scheme="http://jinbeen.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://jinbeen.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>support升级到28.0.0所遇问题</title>
    <link href="http://jinbeen.com/2019/05/23/android-support-update/"/>
    <id>http://jinbeen.com/2019/05/23/android-support-update/</id>
    <published>2019-05-23T10:42:00.000Z</published>
    <updated>2019-05-29T15:34:01.093Z</updated>
    
    <content type="html"><![CDATA[<p><em>com.android.support:support-v4:25.4.0</em> 升级为： <em>com.android.support:support-v4:28.0.0</em></p>
<a id="more"></a>
<h3 id="统一修改为-28-0-0-后编译报错"><a href="#统一修改为-28-0-0-后编译报错" class="headerlink" title="统一修改为 28.0.0 后编译报错"></a>统一修改为 28.0.0 后编译报错</h3><p>编译时各种稀奇古怪的错，如<code>org.gradle.tooling.BuildException: Failed to process resources, see aapt output above for details.</code><br>修改 <code>compileSdkVersion = 28</code>即可</p>
<h3 id="设置TabLayout点击无水波纹效果，失效"><a href="#设置TabLayout点击无水波纹效果，失效" class="headerlink" title="设置TabLayout点击无水波纹效果，失效"></a>设置TabLayout点击无水波纹效果，失效</h3><p>之前使用的属性为：<code>app:tabBackground=&quot;@android:color/transparent&quot;</code><br>现在需要使用属性：<code>app:tabRippleColor=&quot;@android:color/transparent&quot;</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tl_fenlei_type"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"73dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">    <span class="attr">android:visibility</span>=<span class="string">"gone"</span></div><div class="line">    <span class="attr">app:tabRippleColor</span>=<span class="string">"@android:color/transparent"</span></div><div class="line">    <span class="attr">app:tabIndicatorHeight</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="通过反射修改-TabLayout-下划线宽度，失效"><a href="#通过反射修改-TabLayout-下划线宽度，失效" class="headerlink" title="通过反射修改 TabLayout 下划线宽度，失效"></a>通过反射修改 TabLayout 下划线宽度，失效</h3><p>因新的api字段名和之前的不一致或没有该字段导致。<br> 28.0.0后，可通过api直接实现TabLayout固定宽度:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">size</span></span></div><div class="line">                <span class="attr">android:width</span>=<span class="string">"28dp"</span></div><div class="line">                <span class="attr">android:height</span>=<span class="string">"2dp"</span> /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"1dp"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/color_theme"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:tabIndicator="@drawable/shape_tab_indicator"</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：Android 6.0 以下版本此属性不生效，可以直接使用图片试试</p>
</blockquote>
<p>关键源码 DrawableCompat.java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Drawable <span class="title">wrap</span><span class="params">(@NonNull Drawable drawable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">        <span class="keyword">return</span> drawable;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (VERSION.SDK_INT &gt;= <span class="number">21</span>) &#123;</div><div class="line">        <span class="keyword">return</span> (Drawable)(!(drawable <span class="keyword">instanceof</span> TintAwareDrawable) ? <span class="keyword">new</span> WrappedDrawableApi21(drawable) : drawable);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> (Drawable)(!(drawable <span class="keyword">instanceof</span> TintAwareDrawable) ? <span class="keyword">new</span> WrappedDrawableApi14(drawable) : drawable);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过反射为单独TabLayout-Tab设置点击事件，失效"><a href="#通过反射为单独TabLayout-Tab设置点击事件，失效" class="headerlink" title="通过反射为单独TabLayout.Tab设置点击事件，失效"></a>通过反射为单独TabLayout.Tab设置点击事件，失效</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTabClick</span><span class="params">(TabLayout tabLayout)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tabLayout.getTabCount(); i++) &#123;</div><div class="line">            TabLayout.Tab tab = tabLayout.getTabAt(i);</div><div class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//这里使用到反射，拿到Tab对象后获取Class</span></div><div class="line">            Class c = tab.getClass();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//Filed “字段、属性”的意思,c.getDeclaredField 获取私有属性。</span></div><div class="line">                <span class="comment">//"mView"是Tab的私有属性名称(可查看TabLayout源码),类型是 TabView,TabLayout私有内部类。</span></div><div class="line">                <span class="comment">// 25.4.0</span></div><div class="line"><span class="comment">//                Field field = c.getDeclaredField("mView");</span></div><div class="line">                <span class="comment">// 28.0.0</span></div><div class="line">                Field field = c.getDeclaredField(<span class="string">"view"</span>);</div><div class="line">                <span class="comment">//值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查。值为 false 则指示反射的对象应该实施 Java 语言访问检查。</span></div><div class="line">                field.setAccessible(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">final</span> View view = (View) field.get(tab);</div><div class="line">                <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                view.setTag(i);</div><div class="line">                view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                          <span class="comment">//这里就可以根据业务需求处理点击事件了。</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="自己为了修改TabLayout的宽度的-MyTabLayout-，下划线没有了"><a href="#自己为了修改TabLayout的宽度的-MyTabLayout-，下划线没有了" class="headerlink" title="自己为了修改TabLayout的宽度的 MyTabLayout ，下划线没有了"></a>自己为了修改TabLayout的宽度的 MyTabLayout ，下划线没有了</h3><p>替换为最新的 <code>TabLayout</code>，增加属性即可</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:tabIndicator="@drawable/shape_tab_indicator"</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：Android 6.0 以下版本此属性不生效，可以直接使用图片试试</p>
</blockquote>
<h3 id="通过CollapsingToolbarLayout实现的滑动置顶"><a href="#通过CollapsingToolbarLayout实现的滑动置顶" class="headerlink" title="通过CollapsingToolbarLayout实现的滑动置顶"></a>通过CollapsingToolbarLayout实现的滑动置顶</h3><ul>
<li>上滑时，之前滑动一小段松手会快速置顶，速度快时会感觉到卡顿现象。最新的不会，滑动一点就是一点(可能不好表达😂)。</li>
<li>下滑时，之前惯性滑动后，置顶布局会定在那里，需要再次滑动才会下来。最新的直接会下来。</li>
</ul>
<p>更新后显然更好用了，😁</p>
<h3 id="通过反射得到CollapsingToolbarLayout中标题的画笔，失效"><a href="#通过反射得到CollapsingToolbarLayout中标题的画笔，失效" class="headerlink" title="通过反射得到CollapsingToolbarLayout中标题的画笔，失效"></a>通过反射得到CollapsingToolbarLayout中标题的画笔，失效</h3><p>之前反射得到的字段名更改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过反射得到CollapsingToolbarLayout中标题的画笔。通过它得到标题变化中的颜色</div><div class="line">     */</div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TextPaint <span class="title">getCollapsingTitlePaint</span><span class="params">(CollapsingToolbarLayout collapsing)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class clazz = Class.forName(<span class="string">"android.support.design.widget.CollapsingToolbarLayout"</span>);</div><div class="line">            <span class="comment">// 25.4.0</span></div><div class="line"><span class="comment">//            Field fieldTextHelper = clazz.getDeclaredField("mCollapsingTextHelper");</span></div><div class="line">            <span class="comment">// 28.0.0</span></div><div class="line">            Field fieldTextHelper = clazz.getDeclaredField(<span class="string">"collapsingTextHelper"</span>);</div><div class="line">            fieldTextHelper.setAccessible(<span class="keyword">true</span>);</div><div class="line">            Object obj = fieldTextHelper.get(collapsing);</div><div class="line"></div><div class="line">            Class clazzHelper = Class.forName(<span class="string">"android.support.design.widget.CollapsingTextHelper"</span>);</div><div class="line">            <span class="comment">// 25.4.0</span></div><div class="line"><span class="comment">//            Field fieldTextPaint = clazzHelper.getDeclaredField("mTextPaint");</span></div><div class="line">            <span class="comment">// 28.0.0</span></div><div class="line">            Field fieldTextPaint = clazzHelper.getDeclaredField(<span class="string">"textPaint"</span>);</div><div class="line">            fieldTextPaint.setAccessible(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">return</span> (TextPaint) fieldTextPaint.get(obj);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchFieldException | IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>引入的三方库可能不兼容 28.0.0</li>
<li>设置<code>TabLayout</code>的字体大小，对应的属性为<code>app:tabTextAppearance</code></li>
<li>使用style时，遇到<code>app:tabIndicator=&quot;@drawable/shape_tab_indicator&quot;</code>属性，可这样使用<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"tabLayoutStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>match_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>44dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"tabIndicator"</span>&gt;</span>@drawable/shape_tab_indicator<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"tabSelectedTextColor"</span>&gt;</span>@color/color_black_title<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"tabTextAppearance"</span>&gt;</span>@style/MyTabTextAppearance<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyTabTextAppearance"</span> <span class="attr">parent</span>=<span class="string">"TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;com.android.support:support-v4:25.4.0&lt;/em&gt; 升级为： &lt;em&gt;com.android.support:support-v4:28.0.0&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android gradle 命令行打包</title>
    <link href="http://jinbeen.com/2019/04/24/android-gradle-packaging/"/>
    <id>http://jinbeen.com/2019/04/24/android-gradle-packaging/</id>
    <published>2019-04-24T08:47:00.000Z</published>
    <updated>2021-04-03T08:29:29.468Z</updated>
    
    <content type="html"><![CDATA[<p>偶尔用一下，hhh(╯﹏╰)</p>
<a id="more"></a>
<h4 id="项目配置gradle环境"><a href="#项目配置gradle环境" class="headerlink" title="项目配置gradle环境"></a>项目配置gradle环境</h4><ul>
<li><a href="https://jinbeen.com/2016/10/13/Mac-Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE-java%E3%80%81sdk%E3%80%81ndk%E3%80%81gradle/">Mac Android开发环境变量的配置(java、sdk、ndk、gradle)</a></li>
<li><a href="https://blog.csdn.net/jingbin_/article/details/89491970" target="_blank" rel="external">gradle -version Permission denied - in mac terminal</a></li>
</ul>
<h4 id="build-gradle-配置"><a href="#build-gradle-配置" class="headerlink" title="build.gradle 配置"></a>build.gradle 配置</h4><p>在项目的<code>build.gradle</code>配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">	</div><div class="line">    signingConfigs &#123;</div><div class="line">        debug &#123;</div><div class="line">            storeFile file(pStoreFile)</div><div class="line">            storePassword pStorePassword</div><div class="line">            keyAlias pKeyAlias</div><div class="line">            keyPassword pKeyPassword</div><div class="line">            v1SigningEnabled true</div><div class="line">            v2SigningEnabled true</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        release &#123;</div><div class="line">            storeFile file(pStoreFile)</div><div class="line">            storePassword pStorePassword</div><div class="line">            keyAlias pKeyAlias</div><div class="line">            keyPassword pKeyPassword</div><div class="line">            v1SigningEnabled true</div><div class="line">            v2SigningEnabled true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">            signingConfig signingConfigs.debug</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>1.<code>signingConfigs</code>在<code>buildTypes</code>上面</li>
<li>2.<code>v1SigningEnabled</code>、<code>v2SigningEnabled</code> 设置是否包含v1和v2<ul>
<li>只勾选v1签名并不会影响什么，但是在7.0上不会使用更安全的验证方式<br>只勾选V2签名7.0以下会直接安装完显示未安装，7.0以上则使用了V2的方式验证<br>同时勾选V1和V2则所有机型都没问题</li>
</ul>
</li>
</ul>
<ul>
<li>3.里面的 <code>pStoreFile</code>、<code>pStorePassword</code>等属性在<code>gradle.properties</code>文件内：<br><img src="https://img-blog.csdnimg.cn/2021040316263383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70" alt="gradle.properties"></li>
</ul>
<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>在命令行里输入：</p>
<ul>
<li>gradle assembleDebug 只打debug</li>
<li>gradle assembleRelease 只打release</li>
</ul>
<p>要构建 APK，并立即在运行的模拟器或连接的设备上安装：</p>
<ul>
<li>gradle installDebug</li>
</ul>
<p>输出地址：<br><img src="https://img-blog.csdnimg.cn/20210403162649667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70" alt="apk"></p>
<p>参考文件：<a href="https://github.com/youlookwhat/CloudReader/blob/master/app/build.gradle" target="_blank" rel="external">CloudReader - build.gradle</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶尔用一下，hhh(╯﹏╰)&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
      <category term="gradle" scheme="http://jinbeen.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android 系统剪贴板的使用 - 复制、获取和清空</title>
    <link href="http://jinbeen.com/2019/04/23/android-clipboard/"/>
    <id>http://jinbeen.com/2019/04/23/android-clipboard/</id>
    <published>2019-04-23T06:56:00.000Z</published>
    <updated>2019-05-29T15:01:43.508Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>ClipboardManager： 表示一个剪贴板</li>
<li>ClipData： 剪贴板中保存的所有剪贴数据集（剪贴板可同时复制/保存多条多种数据条目）</li>
<li>ClipData.Item： 剪贴数据集中的一个数据条目</li>
</ul>
<a id="more"></a>
<h3 id="复制内容"><a href="#复制内容" class="headerlink" title="复制内容"></a>复制内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 实现文本复制功能</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> content 复制的文本</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(content)) &#123;</div><div class="line">        <span class="comment">// 得到剪贴板管理器</span></div><div class="line">        ClipboardManager cmb = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line">        cmb.setText(content.trim());</div><div class="line">        <span class="comment">// 创建一个剪贴数据集，包含一个普通文本数据条目（需要复制的数据）</span></div><div class="line">        ClipData clipData = ClipData.newPlainText(<span class="keyword">null</span>, content);</div><div class="line">        <span class="comment">// 把数据集设置（复制）到剪贴板</span></div><div class="line">        cmb.setPrimaryClip(clipData);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取系统剪贴板内容"><a href="#获取系统剪贴板内容" class="headerlink" title="获取系统剪贴板内容"></a>获取系统剪贴板内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取系统剪贴板内容</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClipContent</span><span class="params">()</span> </span>&#123;</div><div class="line">    ClipboardManager manager = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line">    <span class="keyword">if</span> (manager != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (manager.hasPrimaryClip() &amp;&amp; manager.getPrimaryClip().getItemCount() &gt; <span class="number">0</span>) &#123;</div><div class="line">            CharSequence addedText = manager.getPrimaryClip().getItemAt(<span class="number">0</span>).getText();</div><div class="line">            String addedTextString = String.valueOf(addedText);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(addedTextString)) &#123;</div><div class="line">                <span class="keyword">return</span> addedTextString;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="清空剪贴板内容"><a href="#清空剪贴板内容" class="headerlink" title="清空剪贴板内容"></a>清空剪贴板内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 清空剪贴板内容</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearClipboard</span><span class="params">()</span> </span>&#123;</div><div class="line">    ClipboardManager manager = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line">    <span class="keyword">if</span> (manager != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            manager.setPrimaryClip(manager.getPrimaryClip());</div><div class="line">            manager.setText(<span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            DebugUtil.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="剪贴板的数据改变监听"><a href="#剪贴板的数据改变监听" class="headerlink" title="剪贴板的数据改变监听"></a>剪贴板的数据改变监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取系统剪贴板</span></div><div class="line">ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 添加剪贴板数据改变监听器</span></div><div class="line">clipboard.addPrimaryClipChangedListener(<span class="keyword">new</span> ClipboardManager.OnPrimaryClipChangedListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrimaryClipChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 剪贴板中的数据被改变，此方法将被回调</span></div><div class="line">        System.out.println(<span class="string">"onPrimaryClipChanged()"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 移除指定的剪贴板数据改变监听器</span></div><div class="line"><span class="comment">// clipboard.removePrimaryClipChangedListener(listener);</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ClipboardManager： 表示一个剪贴板&lt;/li&gt;
&lt;li&gt;ClipData： 剪贴板中保存的所有剪贴数据集（剪贴板可同时复制/保存多条多种数据条目）&lt;/li&gt;
&lt;li&gt;ClipData.Item： 剪贴数据集中的一个数据条目&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
      <category term="clipboard" scheme="http://jinbeen.com/tags/clipboard/"/>
    
  </entry>
  
  <entry>
    <title>链表（上）：如何实现LRU缓存淘汰算法?</title>
    <link href="http://jinbeen.com/2019/04/13/list/"/>
    <id>http://jinbeen.com/2019/04/13/list/</id>
    <published>2019-04-13T06:30:00.000Z</published>
    <updated>2019-05-29T14:58:59.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1354448-9df053cef236aff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<a id="more"></a>
<p>经典的链表应用场景，那就是 LRU 缓存淘汰算法</p>
<p>常见的缓存淘汰策略：</p>
<ul>
<li>先进先出策略 FIFO（First In，First Out）</li>
<li>最少使用策略 LFU（Least Frequently Used）</li>
<li>最近最少使用策略 LRU（Least Recently Used）</li>
</ul>
<blockquote>
<p>这些策略你不用死记，我打个比方你很容易就明白了。假如说，你买了很多本技术书，但有一天你发现，这些书太多了，太占书房空间了，你要做个大扫除，扔掉一些书籍。那这个时候，你会选择扔掉哪些书呢？对应一下，你的选择标准是不是和上面的三种策略神似呢？</p>
</blockquote>
<p>五花八门的链表结构(不止这四种链表结构)</p>
<h2 id="从底层的存储结构看"><a href="#从底层的存储结构看" class="headerlink" title="从底层的存储结构看"></a>从底层的存储结构看</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。</p>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。<br><img src="http://upload-images.jianshu.io/upload_images/1354448-48f37c5fa5a90667.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>三种最常见的链表结构</p>
<ul>
<li>单链表</li>
<li>双向链表</li>
<li>循环链表</li>
</ul>
<h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><blockquote>
<p>链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“<strong>结点</strong>”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。如图所示，我们把这个记录下个结点地址的指针叫作<strong>后继指针 next</strong>。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-9df053cef236aff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>从单链表图中，你应该可以发现，其中有两个结点是比较特殊的，它们分别是第一个结点和最后一个结点。我们习惯性地把第一个结点叫作<strong>头结点</strong>，把最后一个结点叫作<strong>尾结点</strong>。其中，头结点用来记录链表的基地址。有了它，我们就可以遍历得到整条链表。而尾结点特殊的地方是：指针不是指向下一个结点，而是指向一个<strong>空地址 NULL</strong>，表示这是链表上最后一个结点。</p>
<p>插入和删除：</p>
<ul>
<li>数组：插入和删除时，为了保持内存数据的连续性，需要做大量的数据搬移，时间复杂度为O(n)。</li>
<li>链表：链表的插入和删除操作，我们只需要考虑相邻节点的指针改变，时间复杂度为O(1)。</li>
</ul>
<p>查找：</p>
<ul>
<li>链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点，时间复杂度为O(n)。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-6c2972ee0d91f454.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><blockquote>
<p>循环链表是一种特殊的单链表。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-1ded6687d1ba3c51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>与单链表唯一的区别在尾节点：</p>
<ul>
<li>单链表的尾节点指针指向<em>空指针</em>，表示这是最后的节点。</li>
<li>循环链表的尾节点指针指向链表的<em>头结点</em>，</li>
</ul>
<p>与单链表比优点：从链尾到链头比较方便。</p>
<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><blockquote>
<p>单链表只有一个方向，节点只有一个后继指针 next 指向后面的节点。<br>而双向链表，它支持两个方向，每个节点不止有一个后继指针 next 指向后面的节点，还有一个前驱指针 prev 指向前面的节点。(LinkedHashMap)</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-b538df27f89e9ee3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>从图中可以看出来，双向链表需要额外的两个空间来存储前继节点和前驱节点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。<br>虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性。</p>
<p>从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。</p>
<h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><p>在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：</p>
<ul>
<li>1.删除结点中“值等于某个给定值”的结点；</li>
<li>2.删除给定指针指向的结点。</li>
</ul>
<h6 id="1-删除结点中“值等于某个给定值”的结点"><a href="#1-删除结点中“值等于某个给定值”的结点" class="headerlink" title="1. 删除结点中“值等于某个给定值”的结点"></a>1. 删除结点中“值等于某个给定值”的结点</h6><p>不管是单链表还是双向链表，为了查找到值等于给定值的结点，都需要从头结点开始一个一个依次遍历对比，直到找到值等于给定值的结点，然后再通过我前面讲的指针操作将其删除。</p>
<p>尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 O(n)。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 O(n)。</p>
<h6 id="2-删除给定指针指向的结点"><a href="#2-删除给定指针指向的结点" class="headerlink" title="2.删除给定指针指向的结点"></a>2.删除给定指针指向的结点</h6><p>我们已经找到了要删除的结点，但是删除某个结点 q 需要知道其前驱结点，而单链表并不支持直接获取前驱结点，所以，为了找到前驱结点，我们还是要从头结点开始遍历链表，直到 p-&gt;next=q，说明 p 是 q 的前驱结点。</p>
<p>双向链表这种情况比较有优势。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以，针对第二种情况，单链表删除操作需要 O(n) 的时间复杂度，而双向链表只需要在 O(1) 的时间复杂度内就搞定了！</p>
<p>如果我们希望在链表的某个指定结点前面<em>插入</em>一个结点，双向链表比单链表有很大的优势。双向链表可以在 O(1) 时间复杂度搞定，而单向链表需要 O(n) 的时间复杂度。</p>
<p>查询：<br>除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查询的效率也要比单链表高一些。因为，我们可以记录上次查找的位置 p，每次查询时，根据要查找的值与 p 的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。</p>
<ul>
<li>对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；</li>
<li>而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。</li>
</ul>
<h4 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h4><p><img src="http://upload-images.jianshu.io/upload_images/1354448-35804af4bafa5670.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<h2 id="链表-VS-数组性能大比拼"><a href="#链表-VS-数组性能大比拼" class="headerlink" title="链表 VS 数组性能大比拼"></a>链表 VS 数组性能大比拼</h2><p>数组和链表是两种截然不同的内存组织方式。正是因为内存存储的区别，它们插入、删除、随机访问操作的时间复杂度正好相反。</p>
<table>
<thead>
<tr>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">数组</th>
<th style="text-align:center">链表</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">插入删除</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">随机访问</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">O(n)</td>
</tr>
</tbody>
</table>
<ul>
<li>数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。<ul>
<li>链表在内存中并不是连续存储，所以对CPU缓存不友好，没办法有效预读。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。</li>
<li>链表本身没有大小的限制，天然地支持动态扩容，这也是它与数组最大的区别。</li>
</ul>
<p>你可能会说，我们 Java 中的 ArrayList 容器，也可以支持动态扩容啊？我们上一节课讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将数据拷贝过去，而数据拷贝的操作是非常耗时的。</p>
<p>我举一个稍微极端的例子。如果我们用 ArrayList 存储了了 1GB 大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList 会申请一个 1.5GB 大小的存储空间，并且把原来那 1GB 的数据拷贝到新申请的空间上。听起来是不是就很耗时？</p>
<p>除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的存储空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是 Java 语言，就有可能会导致频繁的 GC（Garbage Collection，垃圾回收）。</p>
<p>所以，在我们实际的开发中，针对不同类型的项目，要根据具体情况，权衡究竟是选择数组还是链表。</p>
<h2 id="如何基于链表实现-LRU-缓存淘汰算法？"><a href="#如何基于链表实现-LRU-缓存淘汰算法？" class="headerlink" title="如何基于链表实现 LRU 缓存淘汰算法？"></a>如何基于链表实现 LRU 缓存淘汰算法？</h2><p>我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p>
<ol>
<li><p>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</p>
</li>
<li><p>如果此数据没有在缓存链表中，又可以分为两种情况：</p>
<ul>
<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>
<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>
</ul>
</li>
</ol>
<p>这样我们就用链表实现了一个 LRU 缓存，是不是很简单？</p>
<p>现在我们来看下 m 缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为 O(n)。</p>
<p>实际上，我们可以继续优化这个实现思路，比如引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。因为要涉及我们还没有讲到的数据结构，所以这个优化方案，我现在就不详细说了，等讲到散列表的时候，我会再拿出来讲。</p>
<h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ul>
<li>数组需要一块连续的内存空间来存储。</li>
<li>链表是通过“指针”将一组零散的内存块串联起来使用。</li>
</ul>
<p>单链表的第一个结点叫头结点，最后一个结点叫作尾结点，尾结点指向一个空指针NULL。插入和删除的时间复杂度为O(1)，查找的时间复杂度为O(n)。</p>
<p>循环链表的最后一个结点指向链表头结点，适合处理环形数据结构。</p>
<p>双向链表不止有一个后继指针 next 还有一个前驱指针 prev ，同样的数据双向链表比单链表占更多的内存空间。<br>删除给定的结点，双向链表时间复杂度为O(1)，单链表的时间复杂度为O(n)。</p>
<p>ArrayList：支持动态扩容的数组，但当没有空闲空间了，就会申请一个更大的空间，将数据拷贝过去，而数据拷贝是非常耗时的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1354448-9df053cef236aff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>数组：为什么很多编程语言中数组都从0开始编号？</title>
    <link href="http://jinbeen.com/2019/04/12/array/"/>
    <id>http://jinbeen.com/2019/04/12/array/</id>
    <published>2019-04-12T04:43:00.000Z</published>
    <updated>2019-05-29T14:49:47.154Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1354448-076bc675dd272e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="image"></p>
<a id="more"></a>
<h3 id="如何实现随机访问？"><a href="#如何实现随机访问？" class="headerlink" title="如何实现随机访问？"></a>如何实现随机访问？</h3><p><strong>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</strong></p>
<p>1.第一是<strong>线性表（Linear List）。</strong><br>顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。<br><img src="http://upload-images.jianshu.io/upload_images/1354448-fac4ea94046a2e8c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>而与它相对立的概念是<strong>非线性表</strong>，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-c1edf8fc505e56c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>2.第二个是<strong>连续的内存空间和相同类型的数据。</strong><br>正是因为这两个限制，它才有了一个堪称“杀手锏”的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p>
<h3 id="数组是如何实现根据下标随机访问数组元素的"><a href="#数组是如何实现根据下标随机访问数组元素的" class="headerlink" title="数组是如何实现根据下标随机访问数组元素的?"></a>数组是如何实现根据下标随机访问数组元素的?</h3><p>我们拿一个长度为 10 的 int 类型的数组 int[] a = new int[10] 来举例。在我画的这个图中，计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 base_address = 1000。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-076bc675dd272e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>我们知道，计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</p>
<p><code>a[i]_address = base_address + i * data_type_size</code></p>
<p>其中 data_type_size 表示数组中每个元素的大小。我们举的这个例子里，数组中存储的是 int 类型数据，所以 data_type_size 就为 4 个字节。</p>
<blockquote>
<ul>
<li>这里我要特别纠正一个“错误”。我在面试的时候，常常会问数组和链表的区别，很多人都回答说，“链表适合插入、删除，时间复杂度 O(1)；数组适合查找，查找时间复杂度为 O(1)”。</li>
<li>实际上，这种表述是不准确的。数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，<strong><em>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。</em></strong></li>
</ul>
</blockquote>
<h3 id="低效的“插入”和“删除”"><a href="#低效的“插入”和“删除”" class="headerlink" title="低效的“插入”和“删除”"></a>低效的“插入”和“删除”</h3><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。那插入操作的时间复杂度是多少呢？你可以自己先试着分析一下。</p>
<p>如果在数组的末尾插入元素，那就不需要移动数据了，这时的时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。 因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)/n=O(n)。</p>
<p>如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p>
<p>为了更好地理解，我们举一个例子。假设数组 a[10] 中存储了如下 5 个元素：a，b，c，d，e。</p>
<p>我们现在需要将元素 x 插入到第 3 个位置。我们只需要将 c 放入到 a[5]，将 a[2] 赋值为 x 即可。最后，数组中的元素如下： a，b，x，d，e，c。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-4a81eac6520048ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>利用这种处理技巧，在特定场景下，在第 k 个位置插入一个元素的时间复杂度就会降为 O(1)。这个处理思想在快排中也会用到，我会在排序那一节具体来讲，这里就说到这儿。</p>
<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</p>
<p>和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。</p>
<p>实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p>
<p>我们继续来看例子。数组 a[10] 中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-4ed4d751eb76c7c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p>
<p>如果你了解 JVM，你会发现，这不就是 JVM 标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<strong><em>很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的。</em></strong>如果你细心留意，不管是在软件开发还是架构设计中，总能找到某些算法和数据结构的影子。</p>
<blockquote>
<p>JVM标记清除算法：<br>大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存活。只有当标记工作完成后，清理工作才会开始。<br>不足：1.效率问题。标记和清理效率都不高，但是当知道只有少量垃圾产生时会很高效。2.空间问题。会产生不连续的内存空间碎片。</p>
</blockquote>
<h3 id="警惕数组的访问越界问题"><a href="#警惕数组的访问越界问题" class="headerlink" title="警惕数组的访问越界问题"></a>警惕数组的访问越界问题</h3><p>C语言代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(; i&lt;=<span class="number">3</span>; i++)&#123;</div><div class="line">        arr[i] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>问题：无限打印“hello world”</li>
<li>原因：数组大小为 3，a[0]，a[1]，a[2]，而我们的代码因为书写错误，导致 for 循环的结束条件错写为了 i&lt;=3 而非 i&lt;3，所以当 i=3 时，数组 a[3] 访问越界。</li>
</ul>
<p>我们知道，在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3] 也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。</p>
<p>数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理。因为，访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误。</p>
<h3 id="容器能否完全替代数组？"><a href="#容器能否完全替代数组？" class="headerlink" title="容器能否完全替代数组？"></a>容器能否完全替代数组？</h3><p>我个人觉得，ArrayList 最大的优势就是可以将很多数组操作的细节封装起来。比如前面提到的数组插入、删除数据时需要搬移其他数据等。另外，它还有一个优势，就是支持动态扩容。</p>
<p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</p>
<p>如果使用 ArrayList，我们就完全不需要关心底层的扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。</p>
<p>不过，这里需要注意一点，因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好在创建 ArrayList 的时候事先指定数据大小。</p>
<p>比如我们要从数据库中取出 10000 条数据放入 ArrayList。我们看下面这几行代码，你会发现，相比之下，事先指定数据大小可以省掉很多次内存申请和数据搬移操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList(<span class="number">10000</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</div><div class="line">  users.add(xxx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有些时候，用数组会更合适些，我总结了几点自己的经验。</p>
<ul>
<li><p>1.Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</p>
</li>
<li><p>2.如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</p>
</li>
<li><p>3.还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。比如 Object[][] array；而用容器的话则需要这样定义：ArrayList<arraylist> array。</arraylist></p>
</li>
</ul>
<p>我总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</p>
<h3 id="为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？"><a href="#为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？" class="headerlink" title="为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？"></a>为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？</h3><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。前面也讲到，如果用 a 来表示数组的首地址，a[0] 就是偏移为 0 的位置，也就是首地址，a[k] 就表示偏移 k 个 type_size 的位置，所以计算 a[k] 的内存地址只需要用这个公式：</p>
<p><code>a[k]_address = base_address + k * type_size</code></p>
<p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k] 的内存地址就会变为：</p>
<p><code>a[k]_address = base_address + (k-1)*type_size</code></p>
<p>对比两个公式，我们不难发现，从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。</p>
<p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。</p>
<p>不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非 0 开始不可。所以我觉得最主要的原因可能是历史原因。</p>
<p>C 语言设计者用 0 开始计数数组下标，之后的 Java、JavaScript 等高级语言都效仿了 C 语言，或者说，为了在一定程度上减少 C 语言程序员学习 Java 的学习成本，因此继续沿用了从 0 开始计数的习惯。实际上，很多语言中数组也并不是从 0 开始计数的，比如 Matlab。甚至还有一些语言支持负数下标，比如 Python。</p>
<h3 id="内容小节"><a href="#内容小节" class="headerlink" title="内容小节"></a>内容小节</h3><p>我们今天学习了数组。它可以说是最基础、最简单的数据结构了。数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p>
<blockquote>
<p>二维数组内存寻址：<br>对于m*n的数组，a[ i ][ j ](i &lt; m,j &lt; n)的地址为：<br><code>address = base_address + ( i * n + j) * type_size</code><br>另外，对于数组访问越界造成无限循环，我理解是编译器的问题，对于不同的编译器，在内存分配时，会按照内存地址递增或递减的方式进行分配。老师的程序，如果是内存地址递减的方式，就会造成无限循环。</p>
</blockquote>
<h3 id="个人小结"><a href="#个人小结" class="headerlink" title="个人小结"></a>个人小结</h3><p>数组用来储存相同类型的数据，且内存是连续的，线性表数据结构。<br>方便访问，但是对于删除和插入效果不好。</p>
<p>随机寻址：<br><code>a[i]_address = base_address + i * data_type_size</code></p>
<p>删除和插入要进行移位操作，可以优化的是，先处理完数据，最后再进行移位，和jvm垃圾回收机制类似。</p>
<p>一般情况可以用ArrayList来替代数组，它的好处是支持动态扩容和封装了插入删除等操作，没有空间时它都会将空间自动扩容为 1.5 倍大小。</p>
<p>至于为什么从0开始，猜想<br>一是因为C语言和很多语言都是从0开始，为了学习成本数组也从0开始。<br>二是如果从1开始，内存地址就会成为<code>a[k]_address = base_address + (k-1)*type_size</code>，则会多一次减法运算，为了CPU性能，则从0开始计数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1354448-076bc675dd272e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>为 GitHub 项目生成独立主页</title>
    <link href="http://jinbeen.com/2019/04/09/github-pages-readme/"/>
    <id>http://jinbeen.com/2019/04/09/github-pages-readme/</id>
    <published>2019-04-09T10:00:00.000Z</published>
    <updated>2021-04-03T08:29:31.997Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1354448-b66068bcf588c88a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<h4 id="生成主页"><a href="#生成主页" class="headerlink" title="生成主页"></a>生成主页</h4><p>步骤：</p>
<ol>
<li><p>进入项目的设置页 <code>Settings</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-acb452ee6cf3f1a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Settings.png"></p>
</li>
<li><p>选择 <code>GitHub Pages</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-5941f6d80b024d10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub Pages.png"></p>
</li>
</ol>
<ol>
<li><p>选择主题 <code>Change theme</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-d378ddf6260eaea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Change theme.png"></p>
</li>
<li><p>确定选择<br><img src="https://upload-images.jianshu.io/upload_images/1354448-efbcee3c18c2c798.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Select.png"></p>
</li>
</ol>
<p>效果页面：<a href="https://jinbeen.com/CloudReader">https://jinbeen.com/CloudReader</a></p>
<h4 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h4><ol>
<li><p>图片显示不出来？<br>使用<code>&lt;img /&gt;</code>标签失效，必须使用正规的引入图片的方式：<code>![]()</code><br>图片尺寸太大？ - 图片处理网站：<a href="https://www.fotor.com/create/design" target="_blank" rel="external">https://www.fotor.com/create/design</a></p>
</li>
<li><p>图片链接失效？<br>注意使用正确的图片链接，之前使用的是：<br><code>https://github.com/youlookwhat/CloudReader/blob/master/file/images.png</code><br>发现这个链接是有问题的，点击<code>download</code>进去，正确的链接应该是：<br><code>https://raw.githubusercontent.com/youlookwhat/CloudReader/master/file/images.png</code></p>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://www.jianshu.com/p/1b37016d8db6" target="_blank" rel="external">https://www.jianshu.com/p/1b37016d8db6</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-b66068bcf588c88a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开源项目" scheme="http://jinbeen.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="开源项目" scheme="http://jinbeen.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="github" scheme="http://jinbeen.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 框架实战</title>
    <link href="http://jinbeen.com/2019/04/03/mybatis-practice/"/>
    <id>http://jinbeen.com/2019/04/03/mybatis-practice/</id>
    <published>2019-04-03T10:39:00.000Z</published>
    <updated>2019-04-10T14:49:09.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们容易忽视慢变量，但慢变量才是牵引历史进程的火车头。 - 何帆/变量</p>
</blockquote>
<a id="more"></a>
<ul>
<li>Mybatis 持久层：简化工作量、灵活</li>
<li>Spring 粘合剂：整合框架 AOP IOC DI</li>
<li>SpringMvc 表现层：方便前后端数据的传输</li>
</ul>
<p>Mybatis:</p>
<ul>
<li>1.是对jdbc的封装，</li>
<li>2.将sql语句放在映射文件中(xml)，</li>
<li>3.自动将输入参数映射到sql语句的动态参数上，</li>
<li>4.自动将sql语句执行的结果映射成java对象</li>
</ul>
<p>入门示例：</p>
<h3 id="1-创建项目mubatis-01"><a href="#1-创建项目mubatis-01" class="headerlink" title="1.创建项目mubatis-01"></a>1.创建项目mubatis-01</h3><h3 id="2-导入jar"><a href="#2-导入jar" class="headerlink" title="2.导入jar:"></a>2.导入jar:</h3><ul>
<li>mybatis-3.2.8</li>
<li>mysql-connect</li>
<li>log4j-1.2.17</li>
</ul>
<h3 id="3-加入配置文件"><a href="#3-加入配置文件" class="headerlink" title="3.加入配置文件"></a>3.加入配置文件</h3><p>(1)db.properties</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</div><div class="line">jdbc.url = jdbc:mysql:<span class="comment">//localhost:3306/mysql_0219</span></div><div class="line">jdbc.username = root</div><div class="line">jdbc.password = <span class="number">123456</span></div></pre></td></tr></table></figure>
<p>(2)log4j.properties<br><a href="https://blog.csdn.net/sinat_30185177/article/details/73550377" target="_blank" rel="external">https://blog.csdn.net/sinat_30185177/article/details/73550377</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=DEBUG,A1</div><div class="line">log4j.logger.org.mybatis=DEBUG</div><div class="line">...</div></pre></td></tr></table></figure>
<p>(3) mybatis核心配置文件：mybatis-config.xml</p>
<p>(4) BlogMapper.xml</p>
<p>包:com.jingbin.mybatis.mapper</p>
<h3 id="4-编写接口：BlogMapper"><a href="#4-编写接口：BlogMapper" class="headerlink" title="4.编写接口：BlogMapper"></a>4.编写接口：BlogMapper</h3><h3 id="5-创建pojo：Blog"><a href="#5-创建pojo：Blog" class="headerlink" title="5.创建pojo：Blog"></a>5.创建pojo：Blog</h3><h3 id="6-创建工具类：MyBatisUtil"><a href="#6-创建工具类：MyBatisUtil" class="headerlink" title="6.创建工具类：MyBatisUtil"></a>6.创建工具类：MyBatisUtil</h3><h3 id="7-编写测试类："><a href="#7-编写测试类：" class="headerlink" title="7.编写测试类："></a>7.编写测试类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">testSelectBlog</div><div class="line">发现要连接数据库，学习mysql内容</div><div class="line">学习配置好了后：运行报错：Invalid bound statement (not found): mapper.BlogMapper.selectBlog</div><div class="line">解决：https://www.cnblogs.com/cailijuan/p/9505244.html</div><div class="line">1)使用创建接口的方式</div><div class="line">2)不是用接口的方式</div></pre></td></tr></table></figure>
<h3 id="8-列名和属性名不一致的情况"><a href="#8-列名和属性名不一致的情况" class="headerlink" title="8.列名和属性名不一致的情况"></a>8.列名和属性名不一致的情况</h3><p>数据库里的列名为author_id,属性名为authorId。在BlogMapper.xml里：</p>
<p>1.使用别名</p>
<p><code>select author_id as authorId from Blog where id=#{id}</code></p>
<p>2.使用 resultMap</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Blog" id="blogResultMap"&gt;</div><div class="line">		&lt;id column="id" property="id" jdbcType="INTEGER"/&gt;</div><div class="line">      &lt;result column="author_id" property="authorId" jdbcType="INTEGER"/&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line">&lt;select id="selectBlog" parameterType="Integer" resultMap="blogResultMap"&gt;</div><div class="line">       select * from blog where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h3 id="9-模糊查询之-和-的区别"><a href="#9-模糊查询之-和-的区别" class="headerlink" title="9.模糊查询之#和$的区别"></a>9.模糊查询之<code>#</code>和<code>$</code>的区别</h3><p>模糊查询：根据博客名字查询博客列表</p>
<p>1)使用<code>#</code>传参<br>2)使用<code>$</code>传参</p>
<p><code>#</code>是占位符？，<code>$</code>是字符串拼接。</p>
<p>mybatis定义：</p>
<ul>
<li>使用<code>$</code>。如果参数是单指类型(简单类型)，并且只有一个参数，则花括号里只能写value占位。</li>
<li>使用<code>$</code>可以直接将<code>%</code>写里面，可能有sql注入的风险，建议最好使用<code>#</code>。参数是字符串要使用 ‘’</li>
<li>当参数表示表名或列名的时候，只能使用<code>$</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 使用 $ 不区分大小写的查询 lower--&gt;</div><div class="line">    &lt;select id=<span class="string">"selectBlogByTitle2"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"Blog"</span>&gt;</div><div class="line">            select * <span class="function">from blog where <span class="title">lower</span><span class="params">(title)</span> like <span class="title">lower</span><span class="params">(<span class="string">'%$&#123;value&#125;%'</span>)</span></span></div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
<h3 id="10-查询排序"><a href="#10-查询排序" class="headerlink" title="10.查询排序"></a>10.查询排序</h3><p>需求：按照某一列排序</p>
<p>select * from blog order by CONVERT(${value} USING gbk)</p>
<p>gbk:输入中文时排序成功，否则会失败。且使用gbk规避魅族(gb2313)不排序问题。</p>
<h3 id="11-分页-多参数传递"><a href="#11-分页-多参数传递" class="headerlink" title="11.分页-多参数传递"></a>11.分页-多参数传递</h3><p>需求：查询分页数据</p>
<ul>
<li>1）使用索引</li>
</ul>
<p>按照参数的顺序，从0开始</p>
<p>select * from blog limit #{0}, #{1}</p>
<ul>
<li>2）使用注解</li>
</ul>
<p>注解的value值要和mapper的占位参数一致。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select * from blog limit #&#123;offset&#125;, #&#123;pageSize&#125;</div><div class="line">List&lt;Blog&gt; selectBlogByPage2(@Param(value = "offset") int offset, @Param(value = "pageSize") int pageSize);</div></pre></td></tr></table></figure>
<ul>
<li>3）使用map(常用)</li>
</ul>
<p>注意：mapper中的参数占位符要和测试中的map的key一一对应</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">select * from blog limit #&#123;offset&#125;, #&#123;pageSize&#125;</div><div class="line">// 测试</div><div class="line">SqlSession session = MyBatisUtil.getSqlSession();</div><div class="line">BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class="line">Map&lt;String, Object&gt; objectMap = new HashMap&lt;&gt;();</div><div class="line">objectMap.put("offset", 0);</div><div class="line">objectMap.put("pageSize", 2);</div><div class="line">List&lt;Blog&gt; blogList = blogMapper.selectBlogByPage3(objectMap);</div></pre></td></tr></table></figure>
<h3 id="12-插入功能和获取刚刚插入的id"><a href="#12-插入功能和获取刚刚插入的id" class="headerlink" title="12.插入功能和获取刚刚插入的id"></a>12.插入功能和获取刚刚插入的id</h3><ul>
<li>1)插入记录</li>
</ul>
<p>需求：新增一个博客记录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;insert id="insertBlog" parameterType="Blog"&gt;</div><div class="line">        insert into `blog`(</div><div class="line">          `name`,</div><div class="line">          `age`,</div><div class="line">          `title`,</div><div class="line">          `author_id`,</div><div class="line">          `featured`</div><div class="line">        ) values (</div><div class="line">          #&#123;name&#125;,</div><div class="line">          #&#123;age&#125;,</div><div class="line">          #&#123;title&#125;,</div><div class="line">          #&#123;author_id&#125;,</div><div class="line">          #&#123;featured&#125;</div><div class="line">        )</div><div class="line">    &lt;/insert&gt;</div><div class="line">    </div><div class="line">// 提交</div><div class="line">session.commit();</div></pre></td></tr></table></figure>
<ul>
<li>2）获取自增id<br>方式1：在mapper中配置<code>insert</code>节点的属性 <code>useGeneratedKeys</code>和<code>keyProperty</code>节点<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;insert id=<span class="string">"insertBlog"</span> parameterType=<span class="string">"Blog"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"id"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>方式2：在全局配置文件中配置setting<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--定义数据库链接配置--&gt;</div><div class="line">    &lt;properties resource="db.properties"/&gt;</div><div class="line">    </div><div class="line">&lt;!--具体的insert也得配置 keyProperty节点--&gt;</div><div class="line">    &lt;settings&gt;</div><div class="line">        &lt;setting name="useGeneratedKeys" value="true"/&gt;</div><div class="line">    &lt;/settings&gt;</div></pre></td></tr></table></figure></p>
<p>方式3：适用于没有自增主键的数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;insert id="insertBlogOracle" parameterType="Blog"&gt;</div><div class="line">        &lt;selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="id"&gt;</div><div class="line">            select seq.nextval as id from dual</div><div class="line">        &lt;/selectKey&gt;</div><div class="line">        insert into `blog`(</div><div class="line">          `name`,</div><div class="line">          `age`,</div><div class="line">          `title`,</div><div class="line">          `author_id`,</div><div class="line">          `featured`</div><div class="line">        ) values (</div><div class="line">          #&#123;name&#125;,</div><div class="line">          #&#123;age&#125;,</div><div class="line">          #&#123;title&#125;,</div><div class="line">          #&#123;author_id&#125;,</div><div class="line">          #&#123;featured&#125;</div><div class="line">        )</div><div class="line">    &lt;/insert&gt;</div><div class="line"></div><div class="line">    &lt;insert id="insertBlogMysql" parameterType="Blog"&gt;</div><div class="line">        &lt;selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id"&gt;</div><div class="line">            SELECT LAST_INSERT_ID()</div><div class="line">        &lt;/selectKey&gt;</div><div class="line"></div><div class="line">        insert into `blog`(</div><div class="line">        `name`,</div><div class="line">        `age`,</div><div class="line">        `title`,</div><div class="line">        `author_id`,</div><div class="line">        `featured`</div><div class="line">        ) values (</div><div class="line">        #&#123;name&#125;,</div><div class="line">        #&#123;age&#125;,</div><div class="line">        #&#123;title&#125;,</div><div class="line">        #&#123;author_id&#125;,</div><div class="line">        #&#123;featured&#125;</div><div class="line">        )</div><div class="line">    &lt;/insert&gt;</div></pre></td></tr></table></figure>
<h3 id="13-修改功能和修改部分字段注意的问题"><a href="#13-修改功能和修改部分字段注意的问题" class="headerlink" title="13.修改功能和修改部分字段注意的问题"></a>13.修改功能和修改部分字段注意的问题</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;update id="updateBlog" parameterType="Blog"&gt;</div><div class="line">        update `blog`</div><div class="line">        set</div><div class="line">        `name` = #&#123;name&#125;,</div><div class="line">        `age` = #&#123;age&#125;,</div><div class="line">        `title` = #&#123;title&#125;,</div><div class="line">        `author_id` = #&#123;author_id&#125;,</div><div class="line">        `featured` = #&#123;featured&#125;</div><div class="line">        where</div><div class="line">        `id` = #&#123;id&#125;</div><div class="line">    &lt;/update&gt;</div></pre></td></tr></table></figure>
<p>注意：如果没有为对象设置所有的要修改的属性，那么未设置的属性会用成员变量的默认值填充。<br>解决：<br>方式1：数据库查一遍，再返回的数据修改。缺点：又执行了一遍数据库操作<br>方式2：查询语句里增加if else。</p>
<h3 id="14-删除记录"><a href="#14-删除记录" class="headerlink" title="14.删除记录"></a>14.删除记录</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;delete id="deleteBlogById"&gt;</div><div class="line">  delete from blog where id=#&#123;id&#125;</div><div class="line">&lt;/delete&gt;</div></pre></td></tr></table></figure>
<p>动态sql<br>批量删除：使用动态sql实现<br>if、[choose、when、otherwise]、where、set、trim、foreach、sql片段</p>
<h3 id="15-if"><a href="#15-if" class="headerlink" title="15.if"></a>15.if</h3><p>需求：</p>
<ul>
<li>1.查询已激活的并且博客的名字是包含某个查询字符串的记录</li>
<li>2.如果用户没有输入任何查询字符串，那么就显示所有已激活的记录</li>
</ul>
<p>// 如果用户输入了查询字符串<br>select * from blog<br>where state = ‘ACTIVE’<br>and title like  ‘%o%’</p>
<p>// 用户没有输入查询字符串<br>select * from blog<br>where state = ‘ACTIVE’</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select * from blog</div><div class="line">where state = 'ACTIVE' </div><div class="line">&lt;if test="value != null and value!=''"&gt;</div><div class="line">   and title like value[%%] 具体见代码</div><div class="line">&lt;/if&gt;</div></pre></td></tr></table></figure>
<h3 id="16-choose、when、otherwise"><a href="#16-choose、when、otherwise" class="headerlink" title="16.choose、when、otherwise"></a>16.choose、when、otherwise</h3><p>需求：</p>
<ul>
<li>1、查询已激活的</li>
<li>2、如果用户输入了标题的查询关键字，则根据关键字查询</li>
<li>3、否则根据blog风格样式查询</li>
<li>4、如果什么都没有输入，则显示推荐的博客</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;select id="selectActiveBlogByTitleOrStyle" parameterType="Blog" resultType="Blog"&gt;</div><div class="line">    select * from blog</div><div class="line">    where state = 'ACTIVE'</div><div class="line">    &lt;choose&gt;</div><div class="line">        &lt;when test="title != null and title!=''"&gt;and lower(title) like lower(#&#123;title&#125;)&lt;/when&gt;</div><div class="line">        &lt;when test="style != null and style!=''"&gt;and style = #&#123;style&#125;&lt;/when&gt;</div><div class="line">        &lt;otherwise&gt; and featured = true&lt;/otherwise&gt;</div><div class="line">    &lt;/choose&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h3 id="17-where"><a href="#17-where" class="headerlink" title="17.where"></a>17.where</h3><p>需求：多条件查询，根据状态，标题，是否被推荐<br>自动修补查询条件，查询语句中的where关键字使用<where>标签替代，不能省略 and or 关键字</where></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;select id="selectBlogByCondition" parameterType="Blog" resultType="Blog"&gt;</div><div class="line">    select * from blog</div><div class="line">    &lt;where&gt;</div><div class="line">        &lt;if test="state != null and state!=''"&gt;</div><div class="line">            state = #&#123;state&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test="title != null and title!=''"&gt;</div><div class="line">            and lower(title) like lower(#&#123;title&#125;)</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test="featured != null"&gt;</div><div class="line">            and featured = #&#123;featured&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">    &lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h3 id="18-set"><a href="#18-set" class="headerlink" title="18.set"></a>18.set</h3><p>需求：按需修改，修改执行的列，未指定的不修改<br>set 会自动去掉if语句后面的逗号</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;update id="updateBlogByCondition" parameterType="Blog"&gt;</div><div class="line">    update `blog`</div><div class="line">    &lt;set&gt;</div><div class="line">        &lt;if test="name != null"&gt;`name` = #&#123;name&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="age != null"&gt;`age` = #&#123;age&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="title != null"&gt;`title` = #&#123;title&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="author_id != null"&gt;`author_id` = #&#123;author_id&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="featured != null"&gt;`featured` = #&#123;featured&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="state != null"&gt;`state` = #&#123;state&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="style != null"&gt;`style` = #&#123;state&#125;,&lt;/if&gt;</div><div class="line">    &lt;/set&gt;</div><div class="line">    where `id` = #&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure>
<h3 id="19-trim"><a href="#19-trim" class="headerlink" title="19.trim"></a>19.trim</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;select id="selectBlogByConditionTrim" parameterType="Blog" resultType="Blog"&gt;</div><div class="line">    select * from blog</div><div class="line">    -- prefixOverrides 去掉前面的 and 或 or</div><div class="line">    &lt;trim prefix="where" prefixOverrides="and | or"&gt;</div><div class="line">        &lt;if test="state != null and state!=''"&gt;</div><div class="line">            state = #&#123;state&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test="title != null and title!=''"&gt;</div><div class="line">            and lower(title) like lower(#&#123;title&#125;)</div><div class="line">        &lt;/if&gt;</div><div class="line">        &lt;if test="featured != null"&gt;</div><div class="line">            and featured = #&#123;featured&#125;</div><div class="line">        &lt;/if&gt;</div><div class="line">    &lt;/trim&gt;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">&lt;update id="updateBlogByConditionTrim" parameterType="Blog"&gt;</div><div class="line">    update `blog`</div><div class="line">    -- suffixOverrides 去掉后面的 ,</div><div class="line">    &lt;trim prefix="set" suffixOverrides=","&gt;</div><div class="line">        &lt;if test="name != null"&gt;`name` = #&#123;name&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="age != null"&gt;`age` = #&#123;age&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="title != null"&gt;`title` = #&#123;title&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="author_id != null"&gt;`author_id` = #&#123;author_id&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="featured != null"&gt;`featured` = #&#123;featured&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="state != null"&gt;`state` = #&#123;state&#125;,&lt;/if&gt;</div><div class="line">        &lt;if test="style != null"&gt;`style` = #&#123;state&#125;,&lt;/if&gt;</div><div class="line">    &lt;/trim&gt;</div><div class="line">    where `id` = #&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure>
<h3 id="20-foreach"><a href="#20-foreach" class="headerlink" title="20.foreach"></a>20.foreach</h3><p>需求：批量删除</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> &lt;!-- parameterType 与 collection 一致--&gt;</div><div class="line">&lt;delete id="deleteBlogList" parameterType="list"&gt;</div><div class="line">    delete from blog where id in</div><div class="line">    &lt;foreach collection="list" item="item" open="(" close=")" separator=","&gt;</div><div class="line">        #&#123;item&#125;</div><div class="line">    &lt;/foreach&gt;</div><div class="line">&lt;/delete&gt;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testDeleteBlogList() &#123;</div><div class="line">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class="line">    List&lt;Integer&gt; asList = Arrays.asList(1, 2);</div><div class="line">    int count = blogMapper.deleteBlogList(asList);</div><div class="line">    // 提交</div><div class="line">    session.commit();</div><div class="line">    session.close();</div><div class="line">    System.out.println("更新了" + count + "条记录");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="21-sql片段"><a href="#21-sql片段" class="headerlink" title="21.sql片段"></a>21.sql片段</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!--sql片段--&gt;</div><div class="line">&lt;sql id="columnBase"&gt;</div><div class="line">      `id`,</div><div class="line">      `name`,</div><div class="line">      `age`,</div><div class="line">      `title`,</div><div class="line">      `author_id`,</div><div class="line">      `featured`,</div><div class="line">      `state`,</div><div class="line">      `style`</div><div class="line">&lt;/sql&gt;</div><div class="line"></div><div class="line">&lt;!--通过id查询博客--&gt;</div><div class="line">&lt;select id="selectBlog" parameterType="Integer" resultType="Blog"&gt;</div><div class="line">    select</div><div class="line">    &lt;include refid="columnBase"/&gt;</div><div class="line">    from blog where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<h3 id="22-23-逆向功工程-代码的生成"><a href="#22-23-逆向功工程-代码的生成" class="headerlink" title="22 23.逆向功工程-代码的生成"></a>22 23.逆向功工程-代码的生成</h3><p>使用 Mybatis 官方工具直接生成对应的mapper文件<br>全部生成 - 无实际意义，具体项目中不适用</p>
<h3 id="24-缓存-mybatis的一级缓存"><a href="#24-缓存-mybatis的一级缓存" class="headerlink" title="24.缓存 - mybatis的一级缓存"></a>24.缓存 - mybatis的一级缓存</h3><p>一级缓存：<br>是session级别的缓存，一级缓存默认存在。<br>当在同一个session范围内执行查询的时候，如果执行相同的查询，那么第二次查询会从缓存中获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的一级缓存</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheOne1</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class="line"></div><div class="line">    Blog blog1 = blogMapper.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    Blog blog2 = blogMapper.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询：从缓存中获取数据"</span> + blog2);</div><div class="line"></div><div class="line">    session.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="25-缓存-一级缓存被刷新的情况"><a href="#25-缓存-一级缓存被刷新的情况" class="headerlink" title="25.缓存 - 一级缓存被刷新的情况"></a>25.缓存 - 一级缓存被刷新的情况</h3><p>如果两次查询中间有增删改操作，sql session缓存区会被自动清空，说明下一次查询会重新执行sql语句。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的一级缓存,中间有增删改会刷新</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheOne2</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class="line"></div><div class="line">    Blog blog1 = blogMapper.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    blog1.setFeatured(<span class="keyword">true</span>);</div><div class="line">    blogMapper.updateBlog(blog1);</div><div class="line"></div><div class="line">    Blog blog2 = blogMapper.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询：从新执行查询"</span> + blog2);</div><div class="line"></div><div class="line">    session.commit();</div><div class="line">    session.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="26-缓存-开启二级缓存"><a href="#26-缓存-开启二级缓存" class="headerlink" title="26.缓存 - 开启二级缓存"></a>26.缓存 - 开启二级缓存</h3><p><strong>默认不开启</strong>。如果在不同的session范围内执行相同的数据查询，那么每次查询将会执行独立的数据库检索过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的二级缓存</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheLevelTwo1</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog1 = blogMapper1.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class="line">    Blog blog2 = blogMapper2.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询：从缓存中获取数据"</span> + blog2);</div><div class="line">    session2.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>开启二级缓存<br>1.在mapper文件中设置  <cache><br>2.在实体类中实现序列化接口</cache></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的二级缓存</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheLevelTwo1</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog1 = blogMapper1.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    <span class="comment">// Cache Hit Ratio [mapper.BlogMapper]: 0.5</span></div><div class="line">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class="line">    Blog blog2 = blogMapper2.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询：从缓存中获取数据"</span> + blog2);</div><div class="line">    session2.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="27-缓存-二级缓存被刷新的情况"><a href="#27-缓存-二级缓存被刷新的情况" class="headerlink" title="27.缓存 - 二级缓存被刷新的情况"></a>27.缓存 - 二级缓存被刷新的情况</h3><p>和一级缓存相同，中间有增删改则二级缓存会被清空</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * mybatis的二级缓存 缓存被刷新</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogCacheLevelTwo2</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog1 = blogMapper1.selectBlog(<span class="number">3</span>);</div><div class="line">    blog1.setFeatured(<span class="keyword">true</span>);</div><div class="line">    blogMapper1.updateBlog(blog1);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog1);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class="line">    Blog blog2 = blogMapper2.selectBlog(<span class="number">3</span>);</div><div class="line">    System.out.println(<span class="string">"缓存被刷新，重新查询"</span> + blog2);</div><div class="line">    session2.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"session关闭"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="28-嵌套查询-一对一和多对一"><a href="#28-嵌套查询-一对一和多对一" class="headerlink" title="28.嵌套查询 - 一对一和多对一"></a>28.嵌套查询 - 一对一和多对一</h3><p>高级结果映射<br>一、关联映射(适用于一对一和多对一的情况)</p>
<p>1).创建pojo<br>(1)在Blog中创建Author对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Author author;</div></pre></td></tr></table></figure>
<p>(2)创建Author的pojo</p>
<p>2).配置mapper</p>
<p>BlogMapper.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Blog" id="blogResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"&gt;&lt;/id&gt;</div><div class="line">    &lt;association property="author" column="author_id" javaType="Author"</div><div class="line">                 select="me.jing.mapper.AuthorMapper.selectAuthorById"&gt;</div><div class="line">    &lt;/association&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line">&lt;select id="selectBlogById" parameterType="int" resultMap="blogResultMap"&gt;</div><div class="line">    select * from blog where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>AuthorMapper.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Author" id="authorResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"/&gt;</div><div class="line">    &lt;result column="favourite_section" property="favouriteSection" jdbcType="VARCHAR"/&gt;</div><div class="line"></div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line">&lt;select id="selectAuthorById" parameterType="int" resultMap="authorResultMap"&gt;</div><div class="line">  select * from author where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>3) 接口</p>
<p>(1) Blog</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Blog <span class="title">selectBlogById</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<p>(2) Author</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Author <span class="title">selectAuthorById</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<p>4) 测试</p>
<p>查询Blog列表时，执行的sql语句是 1+n，但是如果blog关联的author有重复的数据，那么从一级缓存中查询。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 通过id查具体的博客，查询时 再拿到作者id 去作者表查具体的作者信息</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogById</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line"></div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="29-嵌套查询-显示信息列表"><a href="#29-嵌套查询-显示信息列表" class="headerlink" title="29.嵌套查询 - 显示信息列表"></a>29.嵌套查询 - 显示信息列表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;select id="selectBlogList" resultMap="blogResultMap"&gt;</div><div class="line">    select * from blog</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">List&lt;Blog&gt; selectBlogList();</div><div class="line"></div><div class="line">@Test</div><div class="line">public void testSelectBlogList() &#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    List&lt;Blog&gt; blogs = blogMapper1.selectBlogList();</div><div class="line"></div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println("结果已查询" + blogs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="30-嵌套查询-一对多的配置-31-嵌套查询-一对多的查询配置"><a href="#30-嵌套查询-一对多的配置-31-嵌套查询-一对多的查询配置" class="headerlink" title="30.嵌套查询-一对多的配置 31.嵌套查询-一对多的查询配置"></a>30.嵌套查询-一对多的配置 31.嵌套查询-一对多的查询配置</h3><p>执行流程：1.先执行单表查询，2.再利用单表查询的结果继续执行其他单表查询，3.最后组装结果映射。</p>
<p>通过post的id 查询post表的内容，同时通过此id查询评论表 comment 里的数据列表,即这篇文章的评论列表</p>
<p>sql:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">create table <span class="title">post</span><span class="params">(id <span class="keyword">int</span>,blog_id <span class="keyword">int</span>,author_id <span class="keyword">int</span>,</span></span></div><div class="line">section varchar(<span class="number">20</span>),subject <span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span>,draft <span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span>);</div><div class="line"></div><div class="line"><span class="function">insert into <span class="title">post</span><span class="params">(id,blog_id,author_id,section,subject,draft)</span> </span></div><div class="line"><span class="title">values</span><span class="params">(<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'15'</span>,<span class="string">'section'</span>,<span class="string">'subject'</span>,<span class="string">'draft'</span>)</span>;</div><div class="line"></div><div class="line"><span class="function">create table <span class="title">comment</span><span class="params">(id <span class="keyword">int</span>,</span></span></div><div class="line">name varchar(<span class="number">20</span>),comment <span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span>);</div><div class="line"></div><div class="line"><span class="function">insert into <span class="title">comment</span><span class="params">(id,name,comment,post_id)</span> </span></div><div class="line"><span class="title">values</span><span class="params">(<span class="string">'1'</span>,<span class="string">'评论name'</span>,<span class="string">'我觉得很棒 评论'</span>,<span class="string">'1'</span>)</span>;</div></pre></td></tr></table></figure>
<p>PostMapper.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Post" id="postResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"&gt;&lt;/id&gt;</div><div class="line">    &lt;collection property="commentList" column="id" javaType="ArrayList" ofType="Comment"</div><div class="line">                select="me.jing.mapper.CommentMapper.selectCommentListByPostId"&gt;&lt;/collection&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;select id="selectPostById" parameterType="int" resultMap="postResultMap"&gt;</div><div class="line">    select * from post where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>CommentMapper.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap type="Comment" id="commentResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"&gt;&lt;/id&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line">&lt;!--通过post_id查询评论列表--&gt;</div><div class="line">&lt;select id="selectCommentListByPostId"  parameterType="int" resultMap="commentResultMap"&gt;</div><div class="line">    select * from comment where post_id = #&#123;postId&#125;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">&lt;select id="selectCommentById" parameterType="int" resultMap="commentResultMap"&gt;</div><div class="line">    select * from comment where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 通过post的id 查询post表的内容，</div><div class="line"> * 同时通过此id查询评论表 comment 里的数据列表,即这篇文章的评论列表</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectPostById</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    PostMapper mapper = session1.getMapper(PostMapper.class);</div><div class="line">    Post post = mapper.selectPostById(<span class="number">1</span>);</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + post);</div><div class="line">    session1.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="32-高级结果映射-嵌套结果"><a href="#32-高级结果映射-嵌套结果" class="headerlink" title="32.高级结果映射-嵌套结果"></a>32.高级结果映射-嵌套结果</h3><p>1).先执行关联查询，一次性将所有数据都查询出来<br>2).再将所有查询出来的列组织成嵌套的结果对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM</div><div class="line">blog b</div><div class="line">LEFT JOIN author a</div><div class="line">ON b.author_id = a.id;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SELECT</div><div class="line"> b.id as blog_id,</div><div class="line"> b.title as blog_title,</div><div class="line"> b.author_id as blog_author_id,</div><div class="line"> b.state as blog_state,</div><div class="line"> b.featured as blog_featured,</div><div class="line"> b.style as blog_style,</div><div class="line"> </div><div class="line"> a.id as author_id,</div><div class="line"> a.username as author_username,</div><div class="line"> a.password as author_password,</div><div class="line"> a.email as author_email</div><div class="line"> </div><div class="line">FROM blog b</div><div class="line">LEFT JOIN author a</div><div class="line">ON b.author_id = a.id;</div></pre></td></tr></table></figure>
<p>BlogMapper.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;resultMap id="blogResultMapNested" type="Blog"&gt;</div><div class="line">    &lt;id column="blog_id" property="id"/&gt;</div><div class="line">    &lt;result column="blog_title" property="title"/&gt;</div><div class="line">    &lt;result column="blog_state" property="state"/&gt;</div><div class="line">    &lt;result column="blog_featured" property="featured"/&gt;</div><div class="line">    &lt;result column="blog_style" property="style"/&gt;</div><div class="line">    &lt;!--&lt;result column="blog_author_id" property="author_id"/&gt;--&gt;</div><div class="line">    &lt;association property="author" column="blog_author_id" javaType="Author"&gt;</div><div class="line">        &lt;id column="author_id" property="id"/&gt;</div><div class="line">        &lt;result column="author_username" property="username"/&gt;</div><div class="line">        &lt;result column="author_password" property="password"/&gt;</div><div class="line">        &lt;result column="author_email" property="email"/&gt;</div><div class="line">    &lt;/association&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line">&lt;!--32.高级结果映射-嵌套结果--&gt;</div><div class="line">&lt;select id="selectBlogListNested" resultMap="blogResultMapNested"&gt;</div><div class="line">    SELECT</div><div class="line">     b.id as blog_id,</div><div class="line">     b.title as blog_title,</div><div class="line">     b.author_id as blog_author_id,</div><div class="line">     b.state as blog_state,</div><div class="line">     b.featured as blog_featured,</div><div class="line">     b.style as blog_style,</div><div class="line"></div><div class="line">     a.id as author_id,</div><div class="line">     a.username as author_username,</div><div class="line">     a.password as author_password</div><div class="line"></div><div class="line">    FROM blog b</div><div class="line">    LEFT JOIN author a</div><div class="line">    ON b.author_id = a.id;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 嵌套查询</div><div class="line"> */</div><div class="line">List&lt;Blog&gt; selectBlogListNested();</div><div class="line"></div><div class="line">/**</div><div class="line"> * 嵌套查询</div><div class="line"> */</div><div class="line">@Test</div><div class="line">public void testSelectBlogListNested() &#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    List&lt;Blog&gt; blogs = blogMapper1.selectBlogListNested();</div><div class="line">    session1.close();</div><div class="line">    System.out.println("结果已查询2:" + blogs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="33-为什么要做扩展结果集-34-扩展结果的实现"><a href="#33-为什么要做扩展结果集-34-扩展结果的实现" class="headerlink" title="33.为什么要做扩展结果集|34.扩展结果的实现"></a>33.为什么要做扩展结果集|34.扩展结果的实现</h3><p>1).mapper</p>
<p>BlogCustomMapper.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;sql id="baseColumn"&gt;</div><div class="line">    b.id,</div><div class="line">    b.`title`,</div><div class="line">    b.`author_id`,</div><div class="line">    b.`state`,</div><div class="line">    b.`featured`,</div><div class="line">    b.`style`,</div><div class="line">    a.username as authorUsername</div><div class="line">&lt;/sql&gt;</div><div class="line"></div><div class="line">&lt;select id="selectBlogById" parameterType="int" resultType="BlogCustom"&gt;</div><div class="line">    select</div><div class="line">    &lt;include refid="baseColumn"/&gt;</div><div class="line">    from blog b</div><div class="line">    left join author a</div><div class="line">    on b.author_id = a.id</div><div class="line">    where b.id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>BlogCustomMapper.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogCustomMapper</span> </span>&#123;</div><div class="line">    <span class="function">BlogCustom <span class="title">selectBlogById</span><span class="params">(Integer id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2)vo.BlogCustom.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 扩展Blog</div><div class="line"> */</div><div class="line">public class BlogCustom extends Blog &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line">    private String authorUsername;</div><div class="line"></div><div class="line">    public String getAuthorUsername() &#123;</div><div class="line">        return authorUsername;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAuthorUsername(String authorUsername) &#123;</div><div class="line">        this.authorUsername = authorUsername;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return "BlogCustom&#123;" +</div><div class="line">                "authorUsername='" + authorUsername + '\'' +</div><div class="line">                '&#125;';</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;!--定义别名--&gt;</div><div class="line">&lt;typeAliases&gt;</div><div class="line">    &lt;!--&lt;typeAlias type="pojo.Blog" alias="Blog"/&gt;--&gt;</div><div class="line">    &lt;package name="me.jing.pojo"/&gt;</div><div class="line">    &lt;package name="me.jing.pojo.vo"/&gt;</div><div class="line">&lt;/typeAliases&gt;</div></pre></td></tr></table></figure>
<p>3)测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过id查具体的博客，查询时 再拿到作者id 去作者表查具体的作者 username</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogById</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogCustomMapper mapper = session1.getMapper(BlogCustomMapper.class);</div><div class="line">    BlogCustom blog = mapper.selectBlogById(<span class="number">3</span>);</div><div class="line"></div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span> + blog);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="35-高级结果映射-构造方式映射"><a href="#35-高级结果映射-构造方式映射" class="headerlink" title="35.高级结果映射 - 构造方式映射"></a>35.高级结果映射 - 构造方式映射</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Bolg.xml</div><div class="line"></div><div class="line">public Blog(Integer id, String title) &#123;</div><div class="line">    this.id = id;</div><div class="line">    this.title = title;</div><div class="line">    System.out.println("构造函数调用-----");</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;!--构造方法映射--&gt;</div><div class="line">&lt;resultMap id="blogResultMapConstructor" type="Blog"&gt;</div><div class="line">    &lt;constructor&gt;</div><div class="line">        &lt;idArg column="id" javaType="int"/&gt;</div><div class="line">        &lt;arg column="title" javaType="string"/&gt;</div><div class="line">    &lt;/constructor&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line">&lt;select id="selectBlogByIdConstructor" parameterType="int" resultMap="blogResultMapConstructor"&gt;</div><div class="line">  select * from blog where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line"> /**</div><div class="line"> * 构造方式映射</div><div class="line"> */</div><div class="line">Blog selectBlogByIdConstructor(Integer id);</div><div class="line"></div><div class="line"> /**</div><div class="line"> * 构造方式映射</div><div class="line"> */</div><div class="line">@Test</div><div class="line">public void testSelectBlogByIdConstructor() &#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    Blog blog = blogMapper1.selectBlogByIdConstructor(3);</div><div class="line">    session1.close();</div><div class="line">    System.out.println("结果已查询:" + blog);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="36-鉴别器"><a href="#36-鉴别器" class="headerlink" title="36.鉴别器"></a>36.鉴别器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `vehicle`(</div><div class="line">	`id` INT(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</div><div class="line">	`vin` VARCHAR(<span class="number">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class="line">	`year` YEAR(<span class="number">4</span>) DEFAULT NULL,</div><div class="line">	`make` VARCHAR(<span class="number">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class="line">	`model` VARCHAR(<span class="number">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class="line">	`color` VARCHAR(<span class="number">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class="line">	`vehicle_type` INT(<span class="number">11</span>) DEFAULT NULL,</div><div class="line">	`door_count` INT(<span class="number">11</span>) DEFAULT NULL,</div><div class="line">	`all_wheel_drive` TINYINT(<span class="number">1</span>) DEFAULT NULL,</div><div class="line">	<span class="function">PRIMARY <span class="title">KEY</span><span class="params">(`id`)</span></span></div><div class="line"> ) ENGINE=INNODB AUTO_INCREMENT=<span class="number">5</span> DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">VehicleMapper.xml</div><div class="line"></div><div class="line">&lt;resultMap type="Vehicle" id="vehicleResultMap"&gt;</div><div class="line">    &lt;id column="id" property="id" jdbcType="INTEGER"/&gt;</div><div class="line">    &lt;discriminator javaType="int" column="vehicle_type"&gt;</div><div class="line">        &lt;case value="1" resultType="Car"&gt;</div><div class="line">            &lt;result column="door_count" property="doorCount"/&gt;</div><div class="line">        &lt;/case&gt;</div><div class="line">        &lt;case value="2" resultType="Suv"&gt;</div><div class="line">            &lt;result column="all_wheel_drive" property="allWheelDrive"/&gt;</div><div class="line">        &lt;/case&gt;</div><div class="line">    &lt;/discriminator&gt;</div><div class="line">&lt;/resultMap&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;select id="selectVehicleById" parameterType="int" resultMap="vehicleResultMap"&gt;</div><div class="line">    select * from vehicle where id = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div><div class="line"></div><div class="line">Vehicle selectVehicleById(Integer id);</div></pre></td></tr></table></figure>
<p>pojo</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> Integer vehicle_type;</div><div class="line">    <span class="keyword">private</span> String vin;</div><div class="line">    <span class="keyword">private</span> String make;</div><div class="line">    <span class="keyword">private</span> String model;</div><div class="line">    <span class="keyword">private</span> String color;</div><div class="line">    <span class="keyword">private</span> Boolean all_wheel_drive;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Suv</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 全轮驱动 awd</span></div><div class="line">    <span class="keyword">private</span> Boolean allWheelDrive;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Suv</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getAllWheelDrive</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> allWheelDrive;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllWheelDrive</span><span class="params">(Boolean allWheelDrive)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.allWheelDrive = allWheelDrive;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Suv&#123;"</span> +</div><div class="line">                <span class="string">"allWheelDrive="</span> + allWheelDrive +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 门的数量</span></div><div class="line">    <span class="keyword">private</span> Integer doorCount;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDoorCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> doorCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDoorCount</span><span class="params">(Integer doorCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.doorCount = doorCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Car&#123;"</span> +</div><div class="line">                <span class="string">"doorCount="</span> + doorCount +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 鉴别器</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectVehicleById</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    VehicleMapper mapper = session1.getMapper(VehicleMapper.class);</div><div class="line">    Vehicle vehicle = mapper.selectVehicleById(<span class="number">1</span>);</div><div class="line">    Vehicle vehicle2 = mapper.selectVehicleById(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Car) &#123;</div><div class="line">        Car car = (Car) vehicle;</div><div class="line">        Suv suv = (Suv) vehicle2;</div><div class="line">        System.out.println(<span class="string">"car:"</span> + car);</div><div class="line">        System.out.println(<span class="string">"suv:"</span> + suv);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Car car = (Car) vehicle2;</div><div class="line">        Suv suv = (Suv) vehicle;</div><div class="line">        System.out.println(<span class="string">"car:"</span> + car);</div><div class="line">        System.out.println(<span class="string">"suv:"</span> + suv);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"vehicle:"</span> + vehicle);</div><div class="line">    System.out.println(<span class="string">"vehicle2:"</span> + vehicle2);</div><div class="line">    session1.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="37-延迟加载-不配置延迟加载的情况"><a href="#37-延迟加载-不配置延迟加载的情况" class="headerlink" title="37.延迟加载 - 不配置延迟加载的情况"></a>37.延迟加载 - 不配置延迟加载的情况</h3><p>测试一：<br>没有配置任何选项，执行两遍查询，性能比较低</p>
<p>无论是否查询blog的任意属性，都会执行author的任何查询，就是说 始终会执行两次查询。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">查询blog----</div><div class="line">Opening JDBC Connection</div><div class="line">Created connection <span class="number">504858437</span>.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">1e178745</span>]</div><div class="line">==&gt;  Preparing: select * from blog where id = ? </div><div class="line">==&gt; Parameters: <span class="number">3</span>(Integer)</div><div class="line">====&gt;  Preparing: select * from author where id = ? </div><div class="line">====&gt; Parameters: <span class="number">15</span>(Integer)</div><div class="line">&lt;====      Total: <span class="number">1</span></div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">1e178745</span>]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">1e178745</span>]</div><div class="line">Returned connection <span class="number">504858437</span> to pool.</div><div class="line">查询blog的title属性----</div><div class="line">Android开发艺术探索</div><div class="line">查询blog的author属性----</div><div class="line">景彬</div><div class="line">结果已查询</div></pre></td></tr></table></figure>
<h3 id="38-延迟加载-配置lazyloadingenabled"><a href="#38-延迟加载-配置lazyloadingenabled" class="headerlink" title="38.延迟加载 - 配置lazyloadingenabled"></a>38.延迟加载 - 配置lazyloadingenabled</h3><p>测试二：<br>如果不查询blog的任意属性，那么不会执行author的查询</p>
<p>配置了全局属性：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;settings&gt;</div><div class="line">    &lt;!--&lt;setting name="useGeneratedKeys" value="true"/&gt;--&gt;</div><div class="line">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class="line">    &lt;setting name="lazyLoadingEnabled" value="true"/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试延迟加载</div><div class="line"> * 没有配置 lazyLoadingEnabled 时，会始终执行两次查询</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByIdLazyLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    System.out.println(<span class="string">"查询blog----"</span>);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line"><span class="comment">//        System.out.println("查询blog的title属性----");</span></div><div class="line"><span class="comment">//        System.out.println(blog.getTitle());</span></div><div class="line"><span class="comment">//        System.out.println("查询blog的author属性----");</span></div><div class="line"><span class="comment">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>日志打印：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">查询blog----</div><div class="line">Opening JDBC Connection</div><div class="line">Created connection <span class="number">210156003</span>.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">==&gt;  Preparing: select * from blog where id = ? </div><div class="line">==&gt; Parameters: <span class="number">3</span>(Integer)</div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Returned connection <span class="number">210156003</span> to pool.</div><div class="line">结果已查询</div></pre></td></tr></table></figure>
<h3 id="39-延迟加载-测试用例1和2的比较"><a href="#39-延迟加载-测试用例1和2的比较" class="headerlink" title="39.延迟加载 - 测试用例1和2的比较"></a>39.延迟加载 - 测试用例1和2的比较</h3><h3 id="40-延迟加载-积极的延迟加载"><a href="#40-延迟加载-积极的延迟加载" class="headerlink" title="40.延迟加载 - 积极的延迟加载"></a>40.延迟加载 - 积极的延迟加载</h3><p>延迟加载：用属性就加载，不用就不加载。<br>积极的延迟加载：只要用属性，就把所有要查询的属性sql全部执行一遍。</p>
<p>测试三：<br>只要查询bolg的任意属性，都会执行author数据的查询</p>
<p>配置了全局属性(同测试2的配置)：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;settings&gt;</div><div class="line">    &lt;!--&lt;setting name="useGeneratedKeys" value="true"/&gt;--&gt;</div><div class="line">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class="line">    &lt;setting name="lazyLoadingEnabled" value="true"/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试延迟加载</div><div class="line"> * 没有配置 lazyLoadingEnabled 时，会始终执行两次查询</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByIdLazyLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    System.out.println(<span class="string">"查询blog----"</span>);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"查询blog的title属性----"</span>);</div><div class="line">    System.out.println(blog.getTitle());</div><div class="line"><span class="comment">//        System.out.println("查询blog的author属性----");</span></div><div class="line"><span class="comment">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="41-延迟加载-非积极延迟加载"><a href="#41-延迟加载-非积极延迟加载" class="headerlink" title="41.延迟加载 - 非积极延迟加载"></a>41.延迟加载 - 非积极延迟加载</h3><p>测试四：<br>延迟加载，并且是非积极的。如果需要访问blog的非author属性，则不执行关联的author查询。</p>
<p>配置了全局属性：</p>
<blockquote>
<p>配置后，没有调用 blog.getAuthor() 属性，就只会执行一次，调用 blog.getAuthor() 属性才回再执行查询author表一次。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--具体的insert也得配置 keyProperty--&gt;</div><div class="line">&lt;settings&gt;</div><div class="line">    &lt;setting name="useGeneratedKeys" value="true"/&gt;</div><div class="line">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class="line">    &lt;setting name="lazyLoadingEnabled" value="true"/&gt;</div><div class="line">    &lt;!--非积极的延迟加载--&gt;</div><div class="line">    &lt;setting name="aggressiveLazyLoading" value="false"/&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 测试延迟加载</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByIdLazyLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    System.out.println(<span class="string">"查询blog----"</span>);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"查询blog的title属性----"</span>);</div><div class="line">    System.out.println(blog.getTitle());</div><div class="line"><span class="comment">//        System.out.println("查询blog的author属性----");</span></div><div class="line"><span class="comment">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class="line">    System.out.println(<span class="string">"结果已查询"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">查询blog----</div><div class="line">Opening JDBC Connection</div><div class="line">Created connection <span class="number">210156003</span>.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">==&gt;  Preparing: select * from blog where id = ? </div><div class="line">==&gt; Parameters: <span class="number">3</span>(Integer)</div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Returned connection <span class="number">210156003</span> to pool.</div><div class="line">查询blog的title属性----</div><div class="line">Android开发艺术探索</div><div class="line">结果已查询</div></pre></td></tr></table></figure>
<p>测试五：</p>
<p>配置了全局属性 同配置四</p>
<p>延迟加载，并且是不积极的。如果访问了blog的author属性，则执行关联的author查询</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试延迟加载</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByIdLazyLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class="line">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class="line">    System.out.println(<span class="string">"查询blog----"</span>);</div><div class="line">    Blog blog = blogMapper1.selectBlogById(<span class="number">3</span>);</div><div class="line">    session1.close();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"查询blog的title属性----"</span>);</div><div class="line">    System.out.println(blog.getTitle());</div><div class="line">    System.out.println(<span class="string">"查询blog的author属性----"</span>);</div><div class="line">    System.out.println(blog.getAuthor().getUsername());</div><div class="line">    System.out.println(<span class="string">"结果已查询"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">查询blog----</div><div class="line">Opening JDBC Connection</div><div class="line">Created connection <span class="number">210156003</span>.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">==&gt;  Preparing: select * from blog where id = ? </div><div class="line">==&gt; Parameters: <span class="number">3</span>(Integer)</div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Returned connection <span class="number">210156003</span> to pool.</div><div class="line">查询blog的title属性----</div><div class="line">Android开发艺术探索</div><div class="line">查询blog的author属性----</div><div class="line">Opening JDBC Connection</div><div class="line">Checked out connection <span class="number">210156003</span> from pool.</div><div class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">==&gt;  Preparing: select * from author where id = ? </div><div class="line">==&gt; Parameters: <span class="number">15</span>(Integer)</div><div class="line">&lt;==      Total: <span class="number">1</span></div><div class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@c</span>86b9e3]</div><div class="line">Returned connection <span class="number">210156003</span> to pool.</div><div class="line">景彬</div><div class="line">结果已查询</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们容易忽视慢变量，但慢变量才是牵引历史进程的火车头。 - 何帆/变量&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java后端" scheme="http://jinbeen.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="MySql" scheme="http://jinbeen.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 使用规范(内部培训笔记)</title>
    <link href="http://jinbeen.com/2019/03/31/mysql-tip/"/>
    <id>http://jinbeen.com/2019/03/31/mysql-tip/</id>
    <published>2019-03-31T14:14:00.000Z</published>
    <updated>2019-04-10T14:42:18.170Z</updated>
    
    <content type="html"><![CDATA[<p>袋鼠云数据库使用基本规范。</p>
<a id="more"></a>
<h3 id="一般操作"><a href="#一般操作" class="headerlink" title="一般操作"></a>一般操作</h3><ul>
<li>高峰期不进行DDL操作，不进行大表全表扫描；</li>
<li>进行更新或删除时，一万以下条数据最好使用 分批更新(计数 如 i 累加到500)（存储方式）</li>
</ul>
<h3 id="设计库"><a href="#设计库" class="headerlink" title="设计库"></a>设计库</h3><ul>
<li>原则：不同业务按库划分</li>
<li>使用：innodb 存储引擎</li>
</ul>
<h3 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h3><ul>
<li>一定要有主键</li>
<li>强烈建议字段为 NOT NULL，并设置默认值</li>
<li>禁止储存图片、文件、视频等</li>
<li>使用 tingint 代替 ENUM</li>
<li>禁止使用外键</li>
<li>少用拆分 BLOB、TEXT字段</li>
<li>控制 字段数量/尽可能小的字段/命名规范</li>
</ul>
<h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><ul>
<li>Tinyint[UNSIGNED] - 无负整数 （从 0 到 255 的整型数据。存储大小为 1 字节。）</li>
<li>DECIIMAL - 精确数值，不是Float/Double</li>
<li>int(3) - 后面的数字无意义</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><blockquote>
<p>index<em>表名</em>字段</p>
</blockquote>
<ul>
<li>联合索引字段建议不超过5个</li>
<li>单表索引数量5个以内</li>
<li>使用自增id作为主键</li>
</ul>
<h3 id="编写sql"><a href="#编写sql" class="headerlink" title="编写sql"></a>编写sql</h3><ul>
<li>update/delete 不使用limit，必须添加where</li>
<li>使用prepared、statement，提成性能，避免SQL注入</li>
<li>禁止使用 % 模糊查询(全表)</li>
<li>表中记录数 <code>count(*)</code></li>
<li>用 join 链接替代 嵌套查询</li>
<li>尽量不使用 hints</li>
<li><p>查询拒绝 select * ，避免对索引字段使用 函数或计算操作</p>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">where new_id = <span class="string">"123456"</span> (<span class="function">where <span class="title">upper</span><span class="params">(id)</span>)</span></div></pre></td></tr></table></figure>
<ul>
<li>如果 new_id 是 varchar 则使用 <code>new_id = &quot;123456&quot;</code> 比使用 <code>new_id = 123456</code> 的效率高很多倍</li>
<li>使用 where upper(id) 的效率很低</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;袋鼠云数据库使用基本规范。&lt;/p&gt;
    
    </summary>
    
      <category term="Java后端" scheme="http://jinbeen.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="MySql" scheme="http://jinbeen.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础</title>
    <link href="http://jinbeen.com/2019/03/30/mysql-basics/"/>
    <id>http://jinbeen.com/2019/03/30/mysql-basics/</id>
    <published>2019-03-30T11:00:00.000Z</published>
    <updated>2019-04-10T14:38:16.714Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我坚信在行动之前，必须先有足够的观察和知识。 - 奇异博士</p>
</blockquote>
<a id="more"></a>
<ul>
<li>持久化操作：保存到数据库</li>
<li>主键：用户表里的id，唯一标识</li>
<li>外键：另一个表里引用的用户id，外键</li>
</ul>
<p><a href="https://www.cnblogs.com/xiaomaotao/p/9211152.html" target="_blank" rel="external">下载mysql 配置环境</a> 更改密码：a12345678</p>
<p><a href="https://www.jianshu.com/p/f3ef78deadaa" target="_blank" rel="external">Navicat Premium for Mac的破解教程</a> 注意时间戳是今天的时间-2019-02-20 12:00:00</p>
<p>命令行操作(一般来说关键字都用大写)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias mysql=/usr/local/mysql/bin/mysql</div><div class="line">alias mysqladmin=/usr/local/mysql/bin/mysqladmin</div></pre></td></tr></table></figure>
<pre><code>启动mysql
mysql
// 更换密码：
mysqladmin -u root -p password
登录：
mysql -u root -p
</code></pre><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><blockquote>
<p>;是结束符</p>
</blockquote>
<ul>
<li><p>1.创建数据库<br><code>create database mysql_0219;</code></p>
</li>
<li><p>2.查看所有数据库<br><code>show databases;</code></p>
</li>
<li><p>3.使用数据库<br><code>use mysql_0219;</code></p>
</li>
<li><p>4.删除数据库<br><code>drop database mysql_0219;</code></p>
</li>
<li><p>5.查看数据库状态<br><code>status (注意编码：utf-8)</code></p>
</li>
</ul>
<h3 id="表的创建与管理"><a href="#表的创建与管理" class="headerlink" title="表的创建与管理:"></a>表的创建与管理:</h3><ul>
<li><p>1.创建表<br><code>create table t_user1(id int,name varchar(20),age int,birthday date);</code></p>
</li>
<li><p>2.修改表<br><code>alter table t_user1 rename t_user2;</code></p>
</li>
<li><p>3.查看具体表<br><code>desc t_user2;</code></p>
</li>
<li><p>4.查看所有表<br><code>show tables;</code></p>
</li>
<li><p>5.删除<br><code>drop table t_user2;</code></p>
</li>
<li><p>6.表中添加字段</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table 表名称 add 字段名称 字段类型</div><div class="line">alter table t_user1 add sex varchar(3);</div></pre></td></tr></table></figure>
<ul>
<li>7.修改表中的字段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table t_user1 change name user_name varchar(3);</div><div class="line">// 更改表的类型名称 布尔为 tinyint(1)</div><div class="line">alter table t_user1 modify user_name varchar(2);</div></pre></td></tr></table></figure>
<ul>
<li>8.删除表重的字段<br><code>alter table t_user1 drop birthday;</code></li>
</ul>
<h3 id="表数据更新："><a href="#表数据更新：" class="headerlink" title="表数据更新："></a>表数据更新：</h3><ul>
<li><p>1.数据插入<br><code>insert into t_user1(id,user_name,age,sex) values(&#39;1&#39;,&#39;ad&#39;,&#39;22&#39;,&#39;男&#39;);</code></p>
</li>
<li><p>2.查看数据<br><code>select * from t_user1;</code></p>
</li>
<li><p>3.数据更新</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">单条</div><div class="line">update t_user1 set user_name=&apos;admin&apos; where id=1;</div><div class="line">多条</div><div class="line">update t_user1 set age=33,sex=&apos;女&apos; where id=1;</div></pre></td></tr></table></figure>
<ul>
<li>4.删除数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">delete from t_user1 where id =2;</div><div class="line">delete from t_user1;(清空表)</div></pre></td></tr></table></figure>
<h3 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h3><p>非空约束 唯一约束 主键约束 主外键约束</p>
<p>图形化连接:</p>
<p>使用 Navicat for MySQL 输入密码：a123456789 新建查询创建</p>
<h4 id="非空约束："><a href="#非空约束：" class="headerlink" title="非空约束："></a>非空约束：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">CREATE TABLE <span class="title">t_user2</span><span class="params">(</span></span></div><div class="line">id <span class="keyword">int</span>,</div><div class="line">name VARCHAR(<span class="number">2</span>) not <span class="keyword">null</span></div><div class="line">);</div><div class="line"></div><div class="line">show TABLES;</div><div class="line"></div><div class="line"><span class="function">INSERT INTO <span class="title">t_user2</span><span class="params">(id,name)</span> <span class="title">VALUES</span><span class="params">(<span class="number">1</span>,<span class="number">23</span>)</span></span>;</div><div class="line">-- <span class="function">INSERT INTO <span class="title">t_user2</span><span class="params">(id,name)</span> <span class="title">VALUES</span><span class="params">(<span class="number">1</span>,<span class="keyword">null</span>)</span></span>;</div><div class="line"></div><div class="line">SELECT * FROM t_user2;</div></pre></td></tr></table></figure>
<h4 id="唯一约束："><a href="#唯一约束：" class="headerlink" title="唯一约束："></a>唯一约束：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">CREATE TABLE <span class="title">t_user3</span><span class="params">(</span></span></div><div class="line">id <span class="keyword">int</span>,</div><div class="line">name VARCHAR(<span class="number">30</span>) not <span class="keyword">null</span>,</div><div class="line">email <span class="title">VARCHAR</span><span class="params">(<span class="number">20</span>)</span> UNIQUE -- 唯一约束，邮箱不允许重复</div><div class="line">);</div><div class="line"></div><div class="line"><span class="function">INSERT INTO <span class="title">t_user3</span><span class="params">(id,name,email)</span> <span class="title">VALUES</span><span class="params">(<span class="number">1</span>,<span class="number">23</span>,<span class="string">'110@email.com'</span>)</span></span>;</div><div class="line"><span class="function">INSERT INTO <span class="title">t_user3</span><span class="params">(id,name,email)</span> <span class="title">VALUES</span><span class="params">(<span class="number">2</span>,<span class="number">333</span>,<span class="string">'111@email.com'</span>)</span></span>;</div><div class="line"></div><div class="line">SELECT * FROM t_user3;</div></pre></td></tr></table></figure>
<h4 id="主键约束："><a href="#主键约束：" class="headerlink" title="主键约束："></a>主键约束：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DROP TABLE t_user3;</div><div class="line"></div><div class="line"><span class="function">CREATE TABLE <span class="title">t_user3</span><span class="params">(</span></span></div><div class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键唯一不能为<span class="keyword">null</span>，自增</div><div class="line">name VARCHAR(<span class="number">30</span>) not <span class="keyword">null</span>,</div><div class="line">email <span class="title">VARCHAR</span><span class="params">(<span class="number">20</span>)</span> UNIQUE -- 唯一约束，邮箱不允许重复</div><div class="line">);</div><div class="line"></div><div class="line"><span class="function">INSERT INTO <span class="title">t_user3</span><span class="params">(name,email)</span> <span class="title">VALUES</span><span class="params">(<span class="number">23</span>,<span class="string">'110@email.com'</span>)</span></span>;</div><div class="line"><span class="function">INSERT INTO <span class="title">t_user3</span><span class="params">(name,email)</span> <span class="title">VALUES</span><span class="params">(<span class="number">2223</span>,<span class="string">'112220@email.com'</span>)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="主外键约束："><a href="#主外键约束：" class="headerlink" title="主外键约束："></a>主外键约束：</h4><p>一般不会建，不能单独删除这个约束表。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">CREATE TABLE <span class="title">t_user</span><span class="params">(</span></span></div><div class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键不能为 <span class="keyword">null</span>，且不能重复，自增</div><div class="line">name VARCHAR(<span class="number">30</span>) not <span class="keyword">null</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="function">CREATE TABLE <span class="title">t_order</span><span class="params">(</span></span></div><div class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键不能为 <span class="keyword">null</span>，且不能重复，自增</div><div class="line">order_name VARCHAR(<span class="number">30</span>),</div><div class="line">user_id <span class="keyword">int</span>,</div><div class="line">CONSTRAINT user_id_fk FOREIGN <span class="title">key</span> <span class="params">(user_id)</span> REFERENCES <span class="title">t_user</span><span class="params">(id)</span> -- 添加外键</div><div class="line">);</div><div class="line"></div><div class="line"><span class="function">INSERT INTO <span class="title">t_user</span><span class="params">(name)</span> <span class="title">VALUES</span><span class="params">(<span class="string">'amdin'</span>)</span></span>;</div><div class="line">SELECT * FROM t_user;</div><div class="line"><span class="function">INSERT INTO <span class="title">t_order</span><span class="params">(order_name,user_id)</span> <span class="title">VALUES</span><span class="params">(<span class="string">'订单1'</span>,<span class="number">1</span>)</span></span>;</div><div class="line"><span class="function">INSERT INTO <span class="title">t_order</span><span class="params">(order_name,user_id)</span> <span class="title">VALUES</span><span class="params">(<span class="string">'订单2'</span>,<span class="number">2</span>)</span></span>;<span class="comment">// 报错</span></div><div class="line">SELECT * FROM t_order;</div></pre></td></tr></table></figure></p>
<h3 id="Mysql的备份与恢复"><a href="#Mysql的备份与恢复" class="headerlink" title="Mysql的备份与恢复"></a>Mysql的备份与恢复</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>导出数据库：</p>
<p>mysqldump -u root -p mysql_0219&gt;/Users/jingbin/Documents/LearningFile/S-Mybatis/mysql_0219.sql;</p>
<p>一、<a href="https://www.cnblogs.com/malcolmfeng/p/6560772.html" target="_blank" rel="external">Mac os导出Mysql数据库</a></p>
<p>1.打开终端，</p>
<p>2.执行： cd 要导出到的目录  （如：cd /Users/jingbin/Documents/LearningFile/mysql）</p>
<p>3.执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　alias mysqldump=/usr/local/mysql/bin/mysqldump</div><div class="line">　　mysqldump -u root -p 要导出的数据库名&gt;名字随意.sql </div><div class="line">　　（如：mysqldump -u root -p mysql_0219&gt;mysql_0219.sql;） 输入数据密码</div><div class="line">此时，会在/Users/jingbin/Documents/LearningFile/mysql中发现已经导出的.sql文件：mysql_0219.sql。</div></pre></td></tr></table></figure>
<p>导出数据库里对应的表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u root -p mysql_0219 t_user&gt;mysql_0219_user.sql;</div></pre></td></tr></table></figure>
<h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">create database mysql_back;</div><div class="line">use mysql_back;</div><div class="line">show tables;</div><div class="line">source /Users/jingbin/Documents/LearningFile/mysql/mysql_0219_user.sql</div><div class="line">show tables;</div><div class="line">select * from t_user;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我坚信在行动之前，必须先有足够的观察和知识。 - 奇异博士&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java后端" scheme="http://jinbeen.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="MySql" scheme="http://jinbeen.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Maven基础</title>
    <link href="http://jinbeen.com/2019/03/29/maven-basics/"/>
    <id>http://jinbeen.com/2019/03/29/maven-basics/</id>
    <published>2019-03-29T10:25:00.000Z</published>
    <updated>2019-04-10T14:32:30.774Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>真正的价值并不在人生的舞台上，而在我们扮演的角色中。 - 席勒/画家</p>
</blockquote>
<a id="more"></a>
<h2 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h2><ul>
<li><a href="https://www.cnblogs.com/xulisheng/p/4049740.html" target="_blank" rel="external">Mac中host设置方法</a></li>
<li><a href="https://www.jianshu.com/p/3c87487e7121" target="_blank" rel="external">IntelliJ IDEA 2018 破解过程</a></li>
</ul>
<p>jdk1.8</p>
<p>File Encodings 全部utf-8</p>
<p>企业做法 - Maven</p>
<ul>
<li>新建 maven</li>
<li><strong>普通项目 quickstart</strong></li>
<li><strong>web项目 webapp</strong></li>
</ul>
<p>GAV坐标：GroupId 组织 ArtifactId 项目 Version 版本</p>
<ul>
<li>新建的时候，setting.xml第一次需要新建，并配置本地仓库地址</li>
<li>配置自动导入，maven - inporting</li>
</ul>
<p>Maven install 打包部署</p>
<hr>
<p>建web项目：</p>
<ul>
<li>Maven - webapp</li>
<li>默认建立没有java目录 - 手动创建Java目录</li>
</ul>
<p>web项目打包格式：<packaging>war</packaging> 不适合给三方团队使用。</p>
<p>关联web容器：</p>
<ul>
<li>顶部导航栏 - Add Configuration - 加号 - Tomcat Server local</li>
</ul>
<p>下载tomcat : <a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="external">http://tomcat.apache.org/download-80.cgi</a></p>
<p>部署：</p>
<ul>
<li>顶部导航栏 - Add Configuration - 加号 - Tomcat Server local - Deployment - 加号 “/web_war”？“/” 不用改</li>
<li>maven - install - 开始键部署</li>
</ul>
<hr>
<p>多模块开发：</p>
<ul>
<li>父子项目 - 选择站点模式 - site-simple</li>
<li>目的：让父项目来管理所有子项目的jar包</li>
<li>server引用dao的代码：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--导入dao--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;me.jing&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jd-dao&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>直接右键 - Run</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;真正的价值并不在人生的舞台上，而在我们扮演的角色中。 - 席勒/画家&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java后端" scheme="http://jinbeen.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Maven" scheme="http://jinbeen.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度</title>
    <link href="http://jinbeen.com/2019/03/27/complexity-analysis-next/"/>
    <id>http://jinbeen.com/2019/03/27/complexity-analysis-next/</id>
    <published>2019-03-27T14:56:00.000Z</published>
    <updated>2019-04-10T14:26:49.420Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>最好情况时间复杂度（best case time complexity）、</li>
<li>最坏情况时间复杂度（worst case time complexity）、</li>
<li>平均情况时间复杂度（average case time complexity）、</li>
<li>均摊时间复杂度（amortized time complexity）</li>
</ul>
<h3 id="最好、最坏情况时间复杂度"><a href="#最好、最坏情况时间复杂度" class="headerlink" title="最好、最坏情况时间复杂度"></a>最好、最坏情况时间复杂度</h3><p>首先看这段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n 表示数组 array 的长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</div><div class="line">    <span class="keyword">if</span> (array[i] == x) pos = i;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> pos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比较明显：这段代码的复杂度是 O(n)，其中，n 代表数组的长度。</p>
<p>优化一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n 表示数组 array 的长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</div><div class="line">    <span class="keyword">if</span> (array[i] == x) &#123;</div><div class="line">       pos = i;</div><div class="line">       <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> pos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>要查找的变量 x 可能出现在数组的任意位置</strong></p>
<ul>
<li>如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。</li>
<li>但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。</li>
</ul>
<p>所以，不同的情况下，这段代码的时间复杂度是不一样的。</p>
<p>为了表示代码在不同情况下的不同时间复杂度，我们需要引入三个概念：<strong>最好情况时间复杂度</strong>、<strong>最坏情况时间复杂度</strong>和<strong>平均情况时间复杂度</strong>。</p>
<p><strong>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。</strong>就像我们刚刚讲到的，在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这个时候对应的时间复杂度就是最好情况时间复杂度。</p>
<p>同理，<strong>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。</strong>就像刚举的那个例子，如果数组中没有要查找的变量 x，我们需要把整个数组都遍历一遍才行，所以这种最糟糕情况下对应的时间复杂度就是最坏情况时间复杂度。</p>
<h3 id="平均情况时间复杂度"><a href="#平均情况时间复杂度" class="headerlink" title="平均情况时间复杂度"></a>平均情况时间复杂度</h3><p>借助刚才查找变量 x 的例子来给你解释:</p>
<p>要查找的变量 x 在数组中的位置，有 n+1 种情况：<strong>在数组的 0～n-1 位置中和不在数组中</strong>。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：</p>
<p>(1+2+3+…+n+n)/(n+1) = n(n+3)/2(n+1)</p>
<p>我们知道，时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以，咱们把刚刚这个公式简化之后，得到的平均时间复杂度就是 O(n)。</p>
<p>但是计算过程稍微有点儿问题。究竟是什么问题呢？我们刚讲的这 n+1 种情况，出现的概率并不是一样的。我带你具体分析一下。</p>
<p>我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。</p>
<p>因此，前面的推导过程中存在的最大问题就是，没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-d44427c8032e4dc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>这个值就是概率论中的<strong>加权平均值</strong>，也叫作<strong>期望值</strong>，所以平均时间复杂度的全称应该叫<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p>
<p>引入概率之后，前面那段代码的加权平均值为 (3n+1)/4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。</p>
<p>实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p>
<h3 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h3><p>大部分情况下，我们并不需要区分最好、最坏、平均三种复杂度。平均复杂度只在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// array 表示一个长度为 n 的数组</span></div><div class="line"><span class="comment">// 代码中的 array.length 就等于 n</span></div><div class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (count == array.length) &#123;</div><div class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</div><div class="line">         sum = sum + array[i];</div><div class="line">      &#125;</div><div class="line">      array[<span class="number">0</span>] = sum;</div><div class="line">      count = <span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   array[count] = val;</div><div class="line">   ++count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我先来解释一下这段代码。这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p>
<ul>
<li>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。</li>
<li>最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</li>
<li>那平均时间复杂度是多少呢？答案是 O(1)。我们还是可以通过前面讲的概率论的方法来分析。</li>
</ul>
<p>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-7f74e561d22382dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>至此为止，前面的最好、最坏、平均时间复杂度的计算，理解起来应该都没有问题。但是这个例子里的平均复杂度分析其实并不需要这么复杂，不需要引入概率论的知识。这是为什么呢？我们先来对比一下这个 insert() 的例子和前面那个 find() 的例子，你就会发现这两者有很大差别。</p>
<p>首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()第一个区别于 find() 的地方。</p>
<p>我们再来看第二个不同的地方。对于 insert() 函数来说，O(1) 时间复杂度的插入和 O(n) 时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。</p>
<p>所以，针对这样一种特殊场景的复杂度分析，我们并不需要像之前讲平均复杂度分析方法那样，找出所有的输入情况及相应的发生概率，然后再计算加权平均值。</p>
<p>针对这种特殊的场景，我们引入了一种更加简单的分析方法：摊还分析法，通过摊还分析得到的时间复杂度我们起了一个名字，叫均摊时间复杂度。</p>
<p>那究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p>
<p>我们还是继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。你都理解了吗？</p>
<p>均摊时间复杂度和摊还分析应用场景比较特殊，所以我们并不会经常用到。为了方便你理解、记忆，我这里简单总结一下它们的应用场景。如果你遇到了，知道是怎么回事儿就行了。</p>
<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p>
<p>尽管很多数据结构和算法书籍都花了很大力气来区分平均时间复杂度和均摊时间复杂度，但其实我个人认为，均摊时间复杂度就是一种特殊的平均时间复杂度，我们没必要花太多精力去区分它们。你最应该掌握的是它的分析方法，摊还分析。至于分析出来的结果是叫平均还是叫均摊，这只是个说法，并不重要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？</title>
    <link href="http://jinbeen.com/2019/03/26/complexity-analysis/"/>
    <id>http://jinbeen.com/2019/03/26/complexity-analysis/</id>
    <published>2019-03-26T13:38:00.000Z</published>
    <updated>2019-04-10T14:25:03.499Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>T(n) = O(f(n))</p>
</blockquote>
<a id="more"></a>
<h3 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</div><div class="line">    sum = sum + i;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总的执行时间就是T(n) = (2n+2)*unit_time。<br>记为：T(n) = O(n)； </p>
<p>所有代码的执行时间 T(n) 与每行代码的执行次数成正比。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</div><div class="line">    j = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</div><div class="line">      sum = sum +  i * j;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行时间 T(n) = (2n2+2n+3)* unit_time。<br>记为：T(n) = O(n2)</p>
<p><strong>大 O 复杂度表示法：</strong></p>
<p><center>T(n) = O(f(n))</center></p>
<p>T(n): 表示代码执行的时间；<br>n: 表示数据规模的大小；<br>f(n): 表示每行代码执行的次数总和；<br>O: 表示代码的执行时间T(n)与f(n)表达式成正比。</p>
<p>大 O 复杂度表示法时间上并不具体表示代码真正的执行时间，而是表示代码<strong>执行时间随数据规模增长的变化趋势</strong>，所以，也叫作渐进时间复杂度，简称<strong>时间复杂度</strong>。</p>
<h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><ul>
<li>1.只关注循环执行次数最多的一段代码</li>
<li>2.加法法则：总复杂度等于量级最大的那段代码的复杂度</li>
<li>3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>
</ul>
<h3 id="几种常见时间复杂度实例分析"><a href="#几种常见时间复杂度实例分析" class="headerlink" title="几种常见时间复杂度实例分析"></a>几种常见时间复杂度实例分析</h3><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了你今后可以接触的所有代码的复杂度量级。</p>
<p>复杂度量级(按数量级递增)</p>
<ul>
<li>多项式量级<ul>
<li>常量阶 O(1) </li>
<li>对数阶 O(log n)</li>
<li>线性阶 O(n)</li>
<li>线性代数阶 O(nlogn)</li>
<li>平方阶 O(n²)、立方阶O(n³)…k次方阶O(n^{k})</li>
</ul>
</li>
<li>非多项式量级<ul>
<li>指数阶 O(2^n)</li>
<li>阶乘积 O(n!)</li>
</ul>
</li>
</ul>
<h4 id="1-O-1"><a href="#1-O-1" class="headerlink" title="1.O(1)"></a>1.O(1)</h4><p>首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">8</span>;</div><div class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</div><div class="line"><span class="keyword">int</span> sum = i + j;</div></pre></td></tr></table></figure>
<p>我稍微总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。</strong></p>
<h4 id="2-O-logn-、O-nlogn"><a href="#2-O-logn-、O-nlogn" class="headerlink" title="2.O(logn)、O(nlogn)"></a>2.O(logn)、O(nlogn)</h4><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。我通过一个例子来说明一下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i=<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</div><div class="line">  i = i * <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。</p>
<p>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：</p>
<p><code>2^0 * 2^1 * 2^2 ... 2^k ... 2^n = m 3 n</code></p>
<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2x=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log2n，所以，这段代码的时间复杂度就是 O(log2n)。</p>
<p>现在，我把代码稍微改下，你再看看，这段代码的时间复杂度是多少？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i=<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</div><div class="line">  i = i * <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据我刚刚讲的思路，很简单就能看出来，这段代码的时间复杂度为 O(log3n)。</p>
<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>
<p>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 <em> log2n，所以 O(log3n) = O(C </em> log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p>
<p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>
<h4 id="3-O-m-n-、O-m-n"><a href="#3-O-m-n-、O-m-n" class="headerlink" title="3.O(m+n)、O(m*n)"></a>3.O(m+n)、O(m*n)</h4><p>我们再来讲一种跟前面都不一样的时间复杂度，代码的复杂度由两个数据的规模来决定。老规矩，先看代码！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt; m; ++i) &#123;</div><div class="line">    sum_1 = sum_1 + i;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (; j &lt; n; ++j) &#123;</div><div class="line">    sum_2 = sum_2 + j;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> sum_1 + sum_2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p>
<p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)<em>T2(n) = O(f(m) </em> f(n))。</p>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系。</strong></p>
<p>举个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">  <span class="keyword">for</span> (i; i &lt;n; ++i) &#123;</div><div class="line">    a[i] = i * i;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">    print out a[i]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>
<p>我们常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p>
<h3 id="内容小节"><a href="#内容小节" class="headerlink" title="内容小节"></a>内容小节</h3><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。等你学完整个专栏之后，你就会发现几乎所有的数据结构和算法的复杂度都跑不出这几个。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-d2f12e37539d8733.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;T(n) = O(f(n))&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>推荐几款常用的Chrome插件</title>
    <link href="http://jinbeen.com/2019/03/25/chrome-plugin/"/>
    <id>http://jinbeen.com/2019/03/25/chrome-plugin/</id>
    <published>2019-03-25T12:02:00.000Z</published>
    <updated>2019-04-10T14:19:32.778Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>天空既在我们的头上又在我们的脚下。 - 梭罗/作家</p>
</blockquote>
<a id="more"></a>
<h3 id="1-广告终结者"><a href="#1-广告终结者" class="headerlink" title="1.广告终结者"></a>1.广告终结者</h3><p>用来清除网页上乱七八糟的广告，比如网站的竞价广告的显示，使自己想要的结果显示在前面。<br><img src="https://upload-images.jianshu.io/upload_images/1354448-3cb16077659f99e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="广告终结者.png"></p>
<h3 id="2-The-Great-Suspender"><a href="#2-The-Great-Suspender" class="headerlink" title="2.The Great Suspender"></a>2.The Great Suspender</h3><p>开很多页面时，用来释放很久没有浏览过的标签页，点击后再加载网页。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-b84479b4fc2cb42e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The Great Suspender.png"></p>
<h3 id="3-JSONView"><a href="#3-JSONView" class="headerlink" title="3.JSONView"></a>3.JSONView</h3><p>格式化json，如果是get请求，返回的json数据会结构清晰的显示在网页上。<br><img src="https://upload-images.jianshu.io/upload_images/1354448-b654cec6f132ba42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JSONView.png"></p>
<h3 id="4-Octotree"><a href="#4-Octotree" class="headerlink" title="4.Octotree"></a>4.Octotree</h3><p>看GitHub时，用来查看项目的目录结构，这个插件普及有段时间了。<br><img src="https://upload-images.jianshu.io/upload_images/1354448-123659e654301e01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Octotree.png"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-f73faeb37738e67d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图.png"></p>
<h3 id="5-Imagus"><a href="#5-Imagus" class="headerlink" title="5.Imagus"></a>5.Imagus</h3><p>添加后，将鼠标移到有图片链接的地方，就会显示图片大图。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-84419d8188b06fb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Imagus.png"></p>
<h3 id="6-捕捉网页截图-FireShot的"><a href="#6-捕捉网页截图-FireShot的" class="headerlink" title="6.捕捉网页截图 - FireShot的"></a>6.捕捉网页截图 - FireShot的</h3><p>可以自动滚动截图，保存GitHub每日趋势图和自己仓库图等很有作用。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-8a33c8934b1ad1ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FireShot.png"></p>
<h3 id="7-Dark-Reader"><a href="#7-Dark-Reader" class="headerlink" title="7.Dark Reader"></a>7.Dark Reader</h3><p>网页的黑夜模式。将网页的白底变成黑底，适合长时间看博客文章，找很久了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-8f7db07c6794b139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dark Reader.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;天空既在我们的头上又在我们的脚下。 - 梭罗/作家&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="http://jinbeen.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://jinbeen.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>如何学习数据结构与算法</title>
    <link href="http://jinbeen.com/2019/03/25/array/"/>
    <id>http://jinbeen.com/2019/03/25/array/</id>
    <published>2019-03-25T04:43:00.000Z</published>
    <updated>2019-05-29T14:46:41.926Z</updated>
    
    <content type="html"><![CDATA[<p>笔记源于极客时间<a href="http://gk.link/a/102Xb" target="_blank" rel="external">《数据结构与算法之美》</a></p>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-a1846067f2f612b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="数据结构与算法之美.jpg"></p>
<p>什么是数据结构？什么是算法？<br>从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。<br>从狭义上讲，也就是我们专栏要讲的，是指某些著名的数据结构和算法，比如队列、栈、堆、二分查找、动态规划等。<br>数据结构和算法解决的是如何更省、更快地存储和处理数据的问题。因此，我们就需要一个考量效率和资源消耗的方法，这就是复杂度分方法。</p>
<p>10个数据结构：<br>数组、链表、栈、队列、散列表、二叉树、堆、调表、图、Trie树。<br>10个算法：<br>递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。</p>
<p>学习技巧：</p>
<ol>
<li>边学边练，适度刷题</li>
<li>多问、多思考、多互动</li>
<li>打怪升级学习法<br>我们在枯燥的学习过程中，也可以给自己设立一个切实可行的目标</li>
<li>知识需要沉淀，不要想试图一下子掌握所有</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记源于极客时间&lt;a href=&quot;http://gk.link/a/102Xb&quot;&gt;《数据结构与算法之美》&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin | 2.Kotlin基础</title>
    <link href="http://jinbeen.com/2019/03/24/kotlin-basics/"/>
    <id>http://jinbeen.com/2019/03/24/kotlin-basics/</id>
    <published>2019-03-24T05:21:00.000Z</published>
    <updated>2021-04-03T08:25:18.568Z</updated>
    
    <content type="html"><![CDATA[<p>上篇：<a href="https://jinbeen.com/2019/03/22/kotlin-define/">《Kotlin | 1.定义和目的》</a></p>
<a id="more"></a>
<blockquote>
<ul>
<li>声明函数、变量、类、枚举以及类型</li>
<li>Kotlin中的控制结构</li>
<li>智能转换</li>
<li>抛出和处理异常</li>
</ul>
</blockquote>
<p><a href="https://github.com/youlookwhat/kotlin-learning/blob/master/kotlin/app/src/main/java/com/kotlin/jingbin/kotlinapp/MainActivity.kt" target="_blank" rel="external">函数学习</a></p>
<h3 id="函数和变量"><a href="#函数和变量" class="headerlink" title="函数和变量"></a>函数和变量</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    *  求最大值</div><div class="line">    * if是表达式而不是语句，表达式有值，语句没有。</div><div class="line">    * java中所有的控制结构都是语句</div><div class="line">    * kotlin中除了循环以外大多数控制结构都是表达式</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 如果函数体写在花括号中，我们说这个函数有代码块体。</div><div class="line">    * 如果直接返回了一个表达式体，他就有表达式体。</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">max2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</div></pre></td></tr></table></figure>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="可变变量和不可变变量"><a href="#可变变量和不可变变量" class="headerlink" title="可变变量和不可变变量"></a>可变变量和不可变变量</h5><ul>
<li>val - 不可变引用。 相当于Java的final变量。</li>
<li>var - 可变引用。   普通的Java变量。</li>
</ul>
<p>在定义了val变量的代码块执行期间，val变量只能进行唯一一次初始化。但是，如果编译器能确保只有唯一一条初始化语句被执行，可以根据条件使用不同的值来初始化它：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> message:String</div><div class="line"><span class="keyword">if</span> (CanPerformOperation())&#123;</div><div class="line">   message = <span class="string">"Success"</span></div><div class="line">   <span class="comment">// ...</span></div><div class="line">&#125; <span class="keyword">else</span>&#123;</div><div class="line">   message = <span class="string">"Failed"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：尽管val引用自身是不可变的，但是它指向的对象可能是可变的。例如：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> languages = arrayListOf(<span class="string">"Java"</span>)  <span class="comment">// 声明不可变引用</span></div><div class="line">languages.add(<span class="string">"Kotlin"</span>)              <span class="comment">// 改变引用指向的对象</span></div></pre></td></tr></table></figure>
<p>错误：类型不匹配</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> answer = <span class="number">42</span></div><div class="line">answer = <span class="string">"no answer"</span></div></pre></td></tr></table></figure>
<h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a1 = <span class="number">1</span></div><div class="line"><span class="keyword">val</span> s1 = <span class="string">"a is <span class="subst">$a1</span>"</span></div><div class="line">a1 = <span class="number">3</span></div><div class="line"><span class="comment">// 模板中的任意表达式</span></div><div class="line"><span class="keyword">val</span> s2 = <span class="string">"<span class="subst">$&#123;s1.replace("is", "was")&#125;</span>,but no is <span class="subst">$a1</span>"</span></div><div class="line"><span class="comment">// a was 1, but now is 3</span></div><div class="line">Log.e(<span class="string">"s2"</span>, s2)</div></pre></td></tr></table></figure>
<p>和许多脚本语言一样，只需要在变量名称前加上 $ ，就可以在字符串字面值中引用局部变量。<br>引用”$”需要转义<code>“\$”</code></p>
<h3 id="类和属性"><a href="#类和属性" class="headerlink" title="类和属性"></a>类和属性</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>在Kotlin中，public是默认的可见性，所以你能省略它。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>—&gt;</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class Person(private val name: String)</div></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonProperty</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 只读属性：生成一个字段和一个简单的getter</span></div><div class="line">    val name: String = <span class="string">"kotlin_hahaha"</span></div><div class="line"></div><div class="line">    <span class="comment">// 可写属性：一个字段、一个getter和一个setter</span></div><div class="line">    var isMarried: Boolean = <span class="function"><span class="keyword">false</span></span></div><div class="line"></div><div class="line">    fun <span class="title">set</span><span class="params">()</span> &#123;</div><div class="line">        isMarried = <span class="keyword">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自定义访问器"><a href="#自定义访问器" class="headerlink" title="自定义访问器"></a>自定义访问器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by jingbin on 2018/11/18.</div><div class="line"> * 自定义访问器</div><div class="line"> * 也可以使用函数返回，实现和性能没有差别，唯一的差别是可读性</div><div class="line"> * 通常来说：</div><div class="line"> * 如果描述的是类的特征(属性)，应该把它声明成属性。</div><div class="line"> */</div><div class="line">class Rectangle(val height: Int, val width: Int) &#123;</div><div class="line"></div><div class="line">    // 函数表达式 可以赋值</div><div class="line">    val isSquare: Boolean</div><div class="line">    // 声明属性的getter</div><div class="line">        get() &#123;</div><div class="line">            return height == width</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Kotlin源码布局：目录和包"><a href="#Kotlin源码布局：目录和包" class="headerlink" title="Kotlin源码布局：目录和包"></a>Kotlin源码布局：目录和包</h4><blockquote>
<p>1.把类和函数的声明放在包中，可以同级</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span>(<span class="keyword">val</span> height: <span class="built_in">Int</span>, <span class="keyword">val</span> width: <span class="built_in">Int</span>) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 函数表达式 可以赋值</span></div><div class="line">    <span class="keyword">val</span> isSquare: <span class="built_in">Boolean</span></div><div class="line">    <span class="comment">// 声明属性的getter</span></div><div class="line">        <span class="keyword">get</span>() &#123;</div><div class="line">            <span class="keyword">return</span> height == width</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createRandomRectangle</span><span class="params">()</span></span>: Rectangle &#123;</div><div class="line">    <span class="keyword">val</span> random = Random()</div><div class="line">    <span class="keyword">return</span> Rectangle(random.nextInt(), random.nextInt())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Kotlin不区分导入的是类还是函数，而且，它允许使用import关键字导入任何种类的声明。可以直接导入顶层函数的名称。</p>
<blockquote>
<p>2.导入其他包中的函数</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入函数的名称</span></div><div class="line"><span class="keyword">import</span> com.kotlin.jingbin.kotlinapp.classproperty.createRandomRectangle</div><div class="line"><span class="comment">// 导入其他包中的函数</span></div><div class="line">LogUtil.e(createRandomRectangle().isSquare)</div></pre></td></tr></table></figure>
<p>包层级和java类似。</p>
<h3 id="表示和处理选择-枚举和”when”"><a href="#表示和处理选择-枚举和”when”" class="headerlink" title="表示和处理选择: 枚举和”when”"></a>表示和处理选择: 枚举和”when”</h3><p>when结构，java中switch结构的替代品，但是更强大。智能转换。</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><h5 id="1-声明简单的枚举类"><a href="#1-声明简单的枚举类" class="headerlink" title="1.声明简单的枚举类"></a>1.声明简单的枚举类</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleColor</span> </span>&#123;</div><div class="line">    RED, ORANGE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-声明一个带属性的枚举类"><a href="#2-声明一个带属性的枚举类" class="headerlink" title="2.声明一个带属性的枚举类"></a>2.声明一个带属性的枚举类</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span></span>(</div><div class="line">        <span class="comment">// 声明枚举常量的属性</span></div><div class="line">        <span class="keyword">val</span> r: <span class="built_in">Int</span>, <span class="keyword">val</span> g: <span class="built_in">Int</span>, <span class="keyword">val</span> b: <span class="built_in">Int</span>) &#123;</div><div class="line">    <span class="comment">// 在每一个常量创建的时候指定属性值</span></div><div class="line">    RED(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),</div><div class="line">    ORANGE(<span class="number">255</span>, <span class="number">165</span>, <span class="number">0</span>),</div><div class="line">    WELLOW(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>),</div><div class="line">    GREEN(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),</div><div class="line">    BULE(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),</div><div class="line">    INDIGO(<span class="number">75</span>, <span class="number">0</span>, <span class="number">130</span>),</div><div class="line">    VIILET(<span class="number">238</span>, <span class="number">130</span>, <span class="number">238</span>);<span class="comment">// 分号</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">rgb</span><span class="params">()</span></span> = (r * <span class="number">256</span> + g) * <span class="number">256</span> + b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-使用“when”处理枚举类"><a href="#3-使用“when”处理枚举类" class="headerlink" title="3.使用“when”处理枚举类"></a>3.使用“when”处理枚举类</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 使用when处理枚举类:</div><div class="line">    * 直接返回一个“when"表达式</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getMnemonic</span><span class="params">(color: <span class="type">Color</span>)</span></span> = &#123;</div><div class="line">       <span class="keyword">when</span> (color) &#123;</div><div class="line">           RED -&gt; <span class="string">"Richard"</span></div><div class="line">           ORANGE -&gt; <span class="string">"Of"</span></div><div class="line">           WELLOW -&gt; <span class="string">"Haha"</span></div><div class="line">           <span class="comment">// 合并多个选项</span></div><div class="line">           BULE, GREEN -&gt; <span class="string">"望穿"</span></div><div class="line">           VIILET, INDIGO -&gt; <span class="string">"秋水"</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="when"><a href="#when" class="headerlink" title="when"></a>when</h4><h5 id="1、在-when-结构中使用任意对象"><a href="#1、在-when-结构中使用任意对象" class="headerlink" title="1、在 when 结构中使用任意对象"></a>1、在 when 结构中使用任意对象</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mix</span><span class="params">(c1: <span class="type">Color</span>, c2: <span class="type">Color</span>)</span></span> = &#123;</div><div class="line">        <span class="comment">// when 表达式的实参可以是任何对象，它被检查是否与分支条件对等</span></div><div class="line">        <span class="keyword">when</span> (setOf(c1, c2)) &#123;</div><div class="line">            setOf(Color.RED, Color.YELLOW) -&gt; Color.ORANGE</div><div class="line">            setOf(Color.BLUE, Color.YELLOW) -&gt; Color.GREEN</div><div class="line">            setOf(Color.BLUE, Color.VIOLET) -&gt; Color.INDIGO</div><div class="line">        <span class="comment">// 如果没有任何其他分支匹配这里就会执行</span></div><div class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> Exception(<span class="string">"Dirty color"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="2、不带参数的-when"><a href="#2、不带参数的-when" class="headerlink" title="2、不带参数的 when"></a>2、不带参数的 when</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">minOptimized</span><span class="params">(c1: <span class="type">Color</span>, c2: <span class="type">Color</span>)</span></span> = &#123;</div><div class="line">        <span class="comment">// 没有实参传给 when</span></div><div class="line">        <span class="keyword">when</span> &#123;</div><div class="line">            (c1 == Color.RED &amp;&amp; c2 == Color.YELLOW) || (c2 == Color.RED &amp;&amp; c1 == Color.YELLOW) -&gt; Color.ORANGE</div><div class="line">            (c1 == Color.BLUE &amp;&amp; c2 == Color.YELLOW) || (c2 == Color.BLUE &amp;&amp; c1 == Color.YELLOW) -&gt; Color.GREEN</div><div class="line">            (c1 == Color.BLUE &amp;&amp; c2 == Color.VIOLET) || (c2 == Color.BLUE &amp;&amp; c1 == Color.VIOLET) -&gt; Color.INDIGO</div><div class="line"></div><div class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> Exception(<span class="string">"Dirty color"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="3、智能转换：合并类型检查和转换"><a href="#3、智能转换：合并类型检查和转换" class="headerlink" title="3、智能转换：合并类型检查和转换"></a>3、智能转换：合并类型检查和转换</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 3.1表达式层次结构</span></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Expr</span></span></div><div class="line"></div><div class="line">    <span class="comment">// 简单的值对象类，只有一个属性value，实现了Expr接口</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Num</span></span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Expr</div><div class="line"></div><div class="line">    <span class="comment">// sum运算的实参可以是任何Expr: Num或者另一个Sum</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Sum</span></span>(<span class="keyword">val</span> left: Expr, <span class="keyword">val</span> right: Expr) : Expr</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 3.2 使用 if 层叠对表达式求值</div><div class="line">     * 在 Kotlin 中，如果你检查过一个变量是某种类型，后面就不再需要转换它，可以就把它当作你检查过的类型使用。</div><div class="line">     * 事实上编译器为你执行了类型转换，我们把这种行为称为智能转换。</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="comment">// is - instanceOf</span></div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> Num) &#123;</div><div class="line">            <span class="comment">// 显示的转换成类型 Num是多余的</span></div><div class="line">            <span class="keyword">val</span> num = e <span class="keyword">as</span> Num</div><div class="line">            <span class="keyword">return</span> num.value</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> Sum) &#123;</div><div class="line">            <span class="comment">// 变量 e 被智能转换了类型</span></div><div class="line">            <span class="keyword">return</span> eval(e.left) + eval(e.right)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> IllegalAccessException(<span class="string">"Unknown expression"</span>)</div></pre></td></tr></table></figure>
<h5 id="4、重构：用“when”代替“if”"><a href="#4、重构：用“when”代替“if”" class="headerlink" title="4、重构：用“when”代替“if”"></a>4、重构：用“when”代替“if”</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Kotlin 中没有三元运算符，因为if有返回值</div><div class="line">     * 意味着: 可以用表达式语法重写eval函数，去掉return语句和花括号，使用if表达式作为函数体</div><div class="line">     */</div><div class="line">    <span class="comment">// 4.1 使用用返回值的 if 表达式</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eval2</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> =</div><div class="line">            <span class="keyword">if</span> (e <span class="keyword">is</span> Num) &#123;</div><div class="line">                e.value</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">is</span> Sum) &#123;</div><div class="line">                eval2(e.right) + eval2(e.left)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> IllegalAccessException(<span class="string">"Unknown expression"</span>)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 4.2 使用 when 代替 if 层叠</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eval3</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> =</div><div class="line">            <span class="keyword">when</span> (e) &#123;</div><div class="line">                <span class="keyword">is</span> Num -&gt; e.value</div><div class="line">                <span class="keyword">is</span> Sum -&gt; eval3(e.right) + eval3(e.left)</div><div class="line">                <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalAccessException(<span class="string">"Unknown expression"</span>)</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h5 id="5、代码块作为-“if”-和-“when”-的分支"><a href="#5、代码块作为-“if”-和-“when”-的分支" class="headerlink" title="5、代码块作为 “if” 和 “when” 的分支"></a>5、代码块作为 “if” 和 “when” 的分支</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 一个函数要么具有不是代码块的表达式函数体，</div><div class="line">     * 要么具有包含显示return语句的代码块函数体</div><div class="line">     */</div><div class="line">    <span class="comment">// 在分支中含有混合操作的 when</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">evalWithLogging</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> =</div><div class="line">            <span class="keyword">when</span> (e) &#123;</div><div class="line">                <span class="keyword">is</span> Num -&gt; &#123;</div><div class="line">                    LogUtil.e(<span class="string">"num: <span class="subst">$&#123;e.value&#125;</span>"</span>)</div><div class="line">                    e.value</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">is</span> Sum -&gt; &#123;</div><div class="line">                    <span class="keyword">val</span> left = <span class="keyword">this</span>.evalWithLogging(e.left)</div><div class="line">                    <span class="keyword">val</span> right = <span class="keyword">this</span>.evalWithLogging(e.right)</div><div class="line">                    LogUtil.e(<span class="string">"Sum: <span class="subst">$left</span> + <span class="subst">$right</span>"</span>)</div><div class="line">                    <span class="comment">// 代码块中最后的表达式就是结果</span></div><div class="line">                    left + right</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalAccessException(<span class="string">"Unknown expression"</span>)</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h3 id="迭代事物-“when”循环和“for”循环"><a href="#迭代事物-“when”循环和“for”循环" class="headerlink" title="迭代事物: “when”循环和“for”循环"></a>迭代事物: “when”循环和“for”循环</h3><h4 id="1、“while”-循环"><a href="#1、“while”-循环" class="headerlink" title="1、“while” 循环"></a>1、“while” 循环</h4><p>Kotlin 有 while 循环和 do-while 循环，他们的语法和Java中相应的循环没有什么区别</p>
<h4 id="2、迭代数字：区间和数列"><a href="#2、迭代数字：区间和数列" class="headerlink" title="2、迭代数字：区间和数列"></a>2、迭代数字：区间和数列</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">     * 区间：区间本质上就是两个值之间的间隔，这两个值通常是数字：一个起始值，一个结束值。</div><div class="line">     * 使用 .. 运算符来表示区间</div><div class="line">     * 数列：你能用整数区间做的最基本的事情就是循环迭代其中所有的值。</div><div class="line">     * 如果你能迭代区间中所有的值，这样的区间被称作数列。</div><div class="line">     * */</div><div class="line"></div><div class="line">    <span class="keyword">val</span> oneToTen = <span class="number">1.</span><span class="number">.10</span></div><div class="line"></div><div class="line">    <span class="comment">// 使用 when 实现 Fizz-Buzz 游戏</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fizzBuzz</span><span class="params">(i: <span class="type">Int</span>)</span></span> = <span class="keyword">when</span> &#123;</div><div class="line">        i % <span class="number">15</span> == <span class="number">0</span> -&gt; <span class="string">"FizzBuzz"</span></div><div class="line">        i % <span class="number">3</span> == <span class="number">0</span> -&gt; <span class="string">"Fizz"</span></div><div class="line">        i % <span class="number">5</span> == <span class="number">0</span> -&gt; <span class="string">"Buzz"</span></div><div class="line">        <span class="keyword">else</span> -&gt; <span class="string">"<span class="subst">$i</span>"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;</div><div class="line"><span class="comment">//            LogUtil.e(fizzBuzz(i))</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 倒序 只计偶数 [使用 until 函数可以标识：不包含指定结束值的半闭合区间]</span></div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">100</span> downTo <span class="number">0</span> step <span class="number">2</span>) &#123;</div><div class="line">            LogUtil.e(fizzBuzz(i))</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h4 id="3、迭代map"><a href="#3、迭代map" class="headerlink" title="3、迭代map"></a>3、迭代map</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 TreeMap 让键排序</span></div><div class="line"> <span class="keyword">val</span> binaryReps = TreeMap&lt;<span class="built_in">Char</span>, String&gt;()</div><div class="line"> <span class="comment">// 创建字符区间 包括 F</span></div><div class="line"> <span class="keyword">for</span> (c <span class="keyword">in</span> <span class="string">'A'</span>..<span class="string">'F'</span>) &#123;</div><div class="line">     <span class="comment">// 把 ASCII 码转换成二进制</span></div><div class="line">     <span class="keyword">val</span> binaryString = Integer.toBinaryString(c.toInt())</div><div class="line">     binaryReps[c] = binaryString</div><div class="line"> &#125;</div><div class="line"> <span class="comment">// 迭代 map ，把键和值赋值给两个变量</span></div><div class="line"> <span class="keyword">for</span> ((letter, binary) <span class="keyword">in</span> binaryReps) &#123;</div><div class="line">     LogUtil.e(<span class="string">"<span class="subst">$letter</span> = <span class="subst">$binary</span>"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 迭代集合时 使用下标</span></div><div class="line"> <span class="keyword">val</span> list = arrayListOf(<span class="string">"10"</span>, <span class="string">"11"</span>, <span class="string">"1001"</span>)</div><div class="line"> <span class="keyword">for</span> ((index, element) <span class="keyword">in</span> list.withIndex()) &#123;</div><div class="line">     LogUtil.e(<span class="string">"<span class="subst">$index</span> = <span class="subst">$element</span>"</span>)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="4、使用-“in”-检查集合和区间的成员"><a href="#4、使用-“in”-检查集合和区间的成员" class="headerlink" title="4、使用 “in” 检查集合和区间的成员"></a>4、使用 “in” 检查集合和区间的成员</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// 1.使用 in 检查区间的成员</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isLetter</span><span class="params">(c: <span class="type">Char</span>)</span></span> = c <span class="keyword">in</span> <span class="string">'a'</span>..<span class="string">'z'</span> || c <span class="keyword">in</span> <span class="string">'A'</span>..<span class="string">'Z'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isNoDigitic</span><span class="params">(c: <span class="type">Char</span>)</span></span> = c !<span class="keyword">in</span> <span class="string">'0'</span>..<span class="string">'9'</span></div><div class="line"></div><div class="line">    <span class="comment">// 2.用 in 检查作为when分支</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">recognize</span><span class="params">(c: <span class="type">Char</span>)</span></span> = <span class="keyword">when</span> (c) &#123;</div><div class="line">        <span class="keyword">in</span> <span class="string">'0'</span>..<span class="string">'9'</span> -&gt; <span class="string">"In's a digit!"</span></div><div class="line">        <span class="keyword">in</span> <span class="string">'a'</span>..<span class="string">'z'</span>, <span class="keyword">in</span> <span class="string">'A'</span>..<span class="string">'Z'</span> -&gt; <span class="string">"In's a letter!"</span></div><div class="line">        <span class="keyword">else</span> -&gt; <span class="string">"I don't know.."</span></div><div class="line">    &#125;</div><div class="line">``` </div><div class="line"></div><div class="line">### Kotlin中的异常</div><div class="line">```kotlin</div><div class="line"><span class="comment">// val 不能再赋值，相当于 final</span></div><div class="line">        <span class="keyword">val</span> percentage = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (percentage !<span class="keyword">in</span> <span class="number">0.</span><span class="number">.100</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> IllegalAccessException(<span class="string">"A percentage value must be between 0 and 100: <span class="subst">$percentage</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 和所有其他类一样，不必使用 new 关键字来创建异常实例。</div><div class="line">         * 和java不同的是，Kotlin中throw结构是一个表达式，能作为另一个表达式的一部分使用：</div><div class="line">         */</div><div class="line"></div><div class="line">        <span class="keyword">val</span> number = <span class="number">8</span></div><div class="line">        <span class="keyword">val</span> percentage2 =</div><div class="line">                <span class="keyword">if</span> (number <span class="keyword">in</span> <span class="number">0.</span><span class="number">.100</span>) &#123;</div><div class="line">                    number</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// throw 是一个表达式</span></div><div class="line">                    <span class="keyword">throw</span> IllegalAccessException(<span class="string">"A percentage value must be between 0 and 100: <span class="subst">$percentage</span>"</span>)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> bufferedReader = BufferedReader(StringReader(<span class="string">"239"</span>))</div></pre></td></tr></table></figure>
<h4 id="1、try-catch-和-finally"><a href="#1、try-catch-和-finally" class="headerlink" title="1、try catch 和 finally"></a>1、try catch 和 finally</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不必显式地知道这个函数可能抛出的异常</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readNumber</span><span class="params">(reader: <span class="type">BufferedReader</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">val</span> line = reader.readLine()</div><div class="line">            <span class="keyword">return</span> Integer.parseInt(line)</div><div class="line"></div><div class="line">            <span class="comment">// 异常类型在右边</span></div><div class="line">        &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            reader.close()</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="2、try-作为表达式"><a href="#2、try-作为表达式" class="headerlink" title="2、try 作为表达式"></a>2、try 作为表达式</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readNumber2</span><span class="params">(reader: <span class="type">BufferedReader</span>)</span></span> &#123;</div><div class="line">        <span class="keyword">val</span> number = <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 没有任何异常发生时 使用这个值</span></div><div class="line">            Integer.parseInt(reader.readLine())</div><div class="line">        &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</div><div class="line"><span class="comment">//            return</span></div><div class="line">            <span class="comment">// 发生异常时的情况下使用 null</span></div><div class="line">            <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>fun 关键字用来声明函数。Val关键字和var关键字分别用来声明只读变量和可变变量。</li>
<li>字符串模板帮组你避免繁琐的字符串拼接。在变量名称前加上 $ 前缀或者用 ${} 包围一个表达式，来把值注入到字符串中。</li>
<li>值对象类在Kotlin中以简洁的方式表示。</li>
<li>熟悉的if现在是带返回值的表达式。</li>
<li>when表达式类似于Java中的switch但功能更强大。</li>
<li>在检查过变量具有某种类型之后不必显示地转换它的类型:编译器使用智能转换字段帮你完成。</li>
<li>for、while、和 do-while 循环与java类似，但是for循环现在更加方便，特别是当你需要迭代map的时候，又或是迭代集合需要下标的时候。</li>
<li>简洁的语法 1..5 会创建一个区间。区间和数列允许Kotlin在for循环中使用统一的语法和同一套抽象机制，并且还可以使用in运算符和!in运算符来检查值是否属于某个区间。</li>
<li>Kotlin中的异常处理和java非常相似，除了Kotlin不要求你声明函数可以抛出异常。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇：&lt;a href=&quot;https://jinbeen.com/2019/03/22/kotlin-define/&quot;&gt;《Kotlin | 1.定义和目的》&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://jinbeen.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://jinbeen.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin | 1.定义和目的</title>
    <link href="http://jinbeen.com/2019/03/22/kotlin-define/"/>
    <id>http://jinbeen.com/2019/03/22/kotlin-define/</id>
    <published>2019-03-22T09:24:00.000Z</published>
    <updated>2019-03-22T15:39:05.490Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>书籍：<a href="https://book.douban.com/subject/27093660/" target="_blank" rel="external">《Kotlin实战》</a></li>
</ul>
<a id="more"></a>
<p>本章内容包括：</p>
<blockquote>
<ul>
<li>Kotlin 的基本示范</li>
<li>Kotlin 语言的主要特征</li>
<li>Android 和服务端开发的可能性</li>
<li>Kotlin 与其他语言的区别</li>
<li>用 Kotlin 编写并运行代码</li>
</ul>
</blockquote>
<ul>
<li>Kotlin和Java一样是一种静态类型的编程语言。编译时即可检查代码正确性。动态语言：Groovy,JRuby。</li>
<li>根据上下问判断变量类型： val x=1</li>
<li>性能、可靠性、可维护性、工具支持。</li>
</ul>
<hr>
<p>支持函数式编程风格，不强制使用：</p>
<ul>
<li>函数类型，允许函数接受其他函数作为参数，或者返回其他函数。</li>
<li>lambda表达式</li>
<li>数据类，提供了创建不可变值对象的简明语法</li>
<li>标准库中包含了丰富的API集合，让你用函数式编程风格操作对象和集合。</li>
</ul>
<hr>
<p>自动检查空指针：</p>
<ul>
<li>val s: String? = null  可以为null，也会检查，禁止可能导致的空指针</li>
<li>val s2: String = “”    不能为null</li>
</ul>
<p>避免类型转换异常：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(value <span class="keyword">is</span> String)               检查类型</div><div class="line">  println(value.toUpperCase())    调用该类型的方法</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>源代码文件存放在后缀名为.kt的文件中，编辑器生成.class文件。</li>
<li>AndriodSdudio中使用：<strong>“Setting(设置) - Plugins(插件) - Install JetBrains Plugin - Kotlin”</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;书籍：&lt;a href=&quot;https://book.douban.com/subject/27093660/&quot;&gt;《Kotlin实战》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://jinbeen.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://jinbeen.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android Span在项目中的几种使用方式</title>
    <link href="http://jinbeen.com/2019/03/21/android-span/"/>
    <id>http://jinbeen.com/2019/03/21/android-span/</id>
    <published>2019-03-21T08:33:00.000Z</published>
    <updated>2019-03-22T15:34:19.577Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>1.改变文字颜色</li>
<li>2.改变文字大小</li>
<li>3.改变文字颜色 并 添加点击事件</li>
<li>4.增加边框和改变颜色及字体大小</li>
</ul>
<a id="more"></a>
<h3 id="1-改变文字颜色"><a href="#1-改变文字颜色" class="headerlink" title="1.改变文字颜色"></a>1.改变文字颜色</h3><blockquote>
<p>ForegroundColorSpan</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义颜色</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> content 全部文本</div><div class="line"> * <span class="doctag">@param</span> keyWord 需要变色的关键字</div><div class="line"> * <span class="doctag">@param</span> color   颜色</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpannableStringBuilder <span class="title">getSpan</span><span class="params">(String content, String keyWord, <span class="keyword">int</span> color)</span> </span>&#123;</div><div class="line">    SpannableStringBuilder span = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (content == <span class="keyword">null</span>) &#123;</div><div class="line">        span = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">""</span>);</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> startIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (keyWord != <span class="keyword">null</span>) &#123;</div><div class="line">            startIndex = content.indexOf(keyWord);</div><div class="line">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class="line">            span = <span class="keyword">new</span> SpannableStringBuilder(content);</div><div class="line">            <span class="keyword">if</span> (startIndex != -<span class="number">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class="line">                span.setSpan(<span class="keyword">new</span> ForegroundColorSpan(getResoure().getColor(color)), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-改变文字大小"><a href="#2-改变文字大小" class="headerlink" title="2.改变文字大小"></a>2.改变文字大小</h3><blockquote>
<p>AbsoluteSizeSpan</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置单个字符串的文字大小</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> content 全部文字</div><div class="line"> * <span class="doctag">@param</span> keyWord 需要改变的文本</div><div class="line"> * <span class="doctag">@param</span> spValue 需要设置的文本大小</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpannableStringBuilder <span class="title">getSizeSpan</span><span class="params">(String content, String keyWord, <span class="keyword">float</span> spValue)</span> </span>&#123;</div><div class="line">    SpannableStringBuilder span = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(content)) &#123;</div><div class="line">        span = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">""</span>);</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> startIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (keyWord != <span class="keyword">null</span>) &#123;</div><div class="line">            startIndex = content.indexOf(keyWord);</div><div class="line">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class="line">            span = <span class="keyword">new</span> SpannableStringBuilder(content);</div><div class="line">            <span class="keyword">if</span> (startIndex != -<span class="number">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class="line">                <span class="keyword">float</span> px = DensityAppUtil.sp2px(spValue);</div><div class="line">                span.setSpan(<span class="keyword">new</span> AbsoluteSizeSpan((<span class="keyword">int</span>) px), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-改变文字颜色-并-添加点击事件"><a href="#3-改变文字颜色-并-添加点击事件" class="headerlink" title="3.改变文字颜色 并 添加点击事件"></a>3.改变文字颜色 并 添加点击事件</h3><blockquote>
<p>ClickableSpan</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButtonSpan</span> <span class="keyword">extends</span> <span class="title">ClickableSpan</span> </span>&#123;</div><div class="line"></div><div class="line">    View.OnClickListener onClickListener;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> colorId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ButtonSpan</span><span class="params">(Context context, View.OnClickListener onClickListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, onClickListener, R.color.color_theme);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ButtonSpan</span><span class="params">(Context context, View.OnClickListener onClickListener, <span class="keyword">int</span> colorId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onClickListener = onClickListener;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.colorId = colorId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</div><div class="line">        ds.setColor(context.getResources().getColor(colorId));</div><div class="line">        ds.setUnderlineText(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (onClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">            onClickListener.onClick(widget);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content为全部的字符串，keyWord为需要改变的字符串</span></div><div class="line">SpannableString spannableString = <span class="keyword">new</span> SpannableString(content);</div><div class="line">ButtonSpan span = <span class="keyword">new</span> ButtonSpan(v.getContext(), <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something..</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, R.color.color_theme);</div><div class="line">spannableString.setSpan(span, content.indexOf(keyWord), content.indexOf(keyWord + keyWord.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line"><span class="comment">//不设置 没有点击事件</span></div><div class="line">titleTop.setMovementMethod(LinkMovementMethod.getInstance());</div><div class="line"><span class="comment">//设置点击后的颜色为透明</span></div><div class="line">titleTop.setHighlightColor(Color.TRANSPARENT);</div><div class="line">titleTop.setText(spannableString);</div></pre></td></tr></table></figure></p>
<h3 id="4-增加边框和改变颜色及字体大小"><a href="#4-增加边框和改变颜色及字体大小" class="headerlink" title="4.增加边框和改变颜色及字体大小"></a>4.增加边框和改变颜色及字体大小</h3><blockquote>
<p>ReplacementSpan</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagSpan</span> <span class="keyword">extends</span> <span class="title">ReplacementSpan</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// span width</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSize;</div><div class="line">    <span class="comment">// text and background wireframe color</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor;</div><div class="line">    <span class="comment">// tag text size</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextSizePx;</div><div class="line">    <span class="comment">// background radius</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRadiusPx;</div><div class="line">    <span class="comment">// background wireframe right margin</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRightMarginPx;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagSpan</span><span class="params">(<span class="keyword">int</span> color, <span class="keyword">int</span> textSizePx, <span class="keyword">int</span> radiusPx, <span class="keyword">int</span> rightMarginPx)</span> </span>&#123;</div><div class="line">        mColor = color;</div><div class="line">        mTextSizePx = textSizePx;</div><div class="line">        mRadiusPx = radiusPx;</div><div class="line">        mRightMarginPx = rightMarginPx;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(@NonNull Paint paint, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, Paint.FontMetricsInt fm)</span> </span>&#123;</div><div class="line">        mSize = (<span class="keyword">int</span>) paint.measureText(text, start, end) + mRightMarginPx;</div><div class="line">        <span class="keyword">return</span> mSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(@NonNull Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, Paint paint)</span> </span>&#123;</div><div class="line">        drawTagRect(canvas, x, y, paint);</div><div class="line">        drawTagText(canvas, text, start, end, y, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTagRect</span><span class="params">(Canvas canvas, <span class="keyword">float</span> x, <span class="keyword">int</span> y, Paint paint)</span> </span>&#123;</div><div class="line">        paint.setColor(mColor);</div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        Paint.FontMetricsInt fontMetrics = paint.getFontMetricsInt();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span> strokeWidth = paint.getStrokeWidth();</div><div class="line">        RectF oval = <span class="keyword">new</span> RectF(x + strokeWidth + <span class="number">0.5f</span>, y + fontMetrics.ascent, x + mSize + strokeWidth + <span class="number">0.5f</span> - mRightMarginPx, y + fontMetrics.descent);</div><div class="line">        paint.setStyle(Paint.Style.STROKE);</div><div class="line">        canvas.drawRoundRect(oval, mRadiusPx, mRadiusPx, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTagText</span><span class="params">(Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> y, Paint paint)</span> </span>&#123;</div><div class="line">        paint.setTextSize(mTextSizePx);</div><div class="line">        paint.setColor(mColor);</div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        paint.setTextAlign(Paint.Align.CENTER);</div><div class="line"></div><div class="line">        Paint.FontMetrics fontMetrics = paint.getFontMetrics();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> textCenterX = (mSize - mRightMarginPx / <span class="number">2</span>) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> textBaselineY = (<span class="keyword">int</span>) (y - fontMetrics.descent / <span class="number">2</span>);</div><div class="line">        <span class="keyword">final</span> String tag = text.subSequence(start, end).toString();</div><div class="line">        canvas.drawText(tag, textCenterX, textBaselineY, paint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用静态方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 增加边框和改变颜色及字体大小</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> content 内容</div><div class="line"> * <span class="doctag">@param</span> keyWord 关键字</div><div class="line"> * <span class="doctag">@param</span> color   颜色</div><div class="line"> * <span class="doctag">@param</span> sp      字体sp，需转换为对应的px</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpannableStringBuilder <span class="title">getSpan</span><span class="params">(String content, String keyWord, <span class="keyword">int</span> color, <span class="keyword">int</span> sp)</span> </span>&#123;</div><div class="line">    SpannableStringBuilder span = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (content == <span class="keyword">null</span>) &#123;</div><div class="line">        span = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">""</span>);</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> startIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(keyWord)) &#123;</div><div class="line">            startIndex = content.indexOf(keyWord);</div><div class="line">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class="line">            span = <span class="keyword">new</span> SpannableStringBuilder(content);</div><div class="line">            <span class="keyword">if</span> (startIndex != -<span class="number">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class="line">                <span class="comment">// 圆角 右边距</span></div><div class="line">                span.setSpan(<span class="keyword">new</span> TagSpan(color, (<span class="keyword">int</span>) sp, <span class="number">4</span>, <span class="number">8</span>), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> span;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1.改变文字颜色&lt;/li&gt;
&lt;li&gt;2.改变文字大小&lt;/li&gt;
&lt;li&gt;3.改变文字颜色 并 添加点击事件&lt;/li&gt;
&lt;li&gt;4.增加边框和改变颜色及字体大小&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
      <category term="span" scheme="http://jinbeen.com/tags/span/"/>
    
  </entry>
  
  <entry>
    <title>Git commit 规范</title>
    <link href="http://jinbeen.com/2019/03/20/git-commit/"/>
    <id>http://jinbeen.com/2019/03/20/git-commit/</id>
    <published>2019-03-20T07:49:00.000Z</published>
    <updated>2019-03-22T15:30:29.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与道人之短，勿说己之长；人骂之一笑，人誉之一笑。  - 齐白石/国画大师</p>
</blockquote>
<a id="more"></a>
<p>git提交估计也快上万次了，每次不知道怎么写好，今天在网上找到一套规范然后加上常用的一些，总结出来一套 Git commit 规范，没有强制的规定，主要是翻阅以前的日志会更清晰。</p>
<hr>
<p> <code>type: description</code></p>
<p><code>type</code> 是 commit 的类别，只允许如下几种标识：</p>
<ul>
<li>fix: 修复bug</li>
<li>add: 新功能</li>
<li>update: 更新</li>
<li>refactor : 某个已有功能重构</li>
<li>perf : 性能优化</li>
<li>style : 代码格式改变</li>
<li>test: 增加测试代码</li>
<li>docs : 文档改变</li>
<li>revert: 撤销上一次的commit</li>
<li>build: 构建工具或构建过程等的变动，如：关联包升级等</li>
</ul>
<p><code>description</code> 是对本次提交的简短描述：</p>
<ul>
<li>不超过50个字符。</li>
<li>推荐以动词开头，如： 设置、修改、增加、删减、撤销等</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与道人之短，勿说己之长；人骂之一笑，人誉之一笑。  - 齐白石/国画大师&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jinbeen.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jinbeen.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>TabLayout的几种用法</title>
    <link href="http://jinbeen.com/2019/03/19/android-tablayout/"/>
    <id>http://jinbeen.com/2019/03/19/android-tablayout/</id>
    <published>2019-03-19T12:13:00.000Z</published>
    <updated>2019-03-22T15:26:18.103Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>1.结合ViewPager使用</li>
<li>2.点击滑动选中，类似<code>RadioGroup</code>的效果</li>
<li>3.点击滑动到屏幕中央，并再次点击可取消</li>
</ul>
<a id="more"></a>
<h3 id="1-结合ViewPager使用"><a href="#1-结合ViewPager使用" class="headerlink" title="1.结合ViewPager使用"></a>1.结合ViewPager使用</h3><p>这是最常见的用法了，实现也比较简单。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-c52cde3a668e998a.gif?imageMogr2/auto-orient/strip" alt="tablayout01.gif"></p>
<p>布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tab_book"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"38dp"</span></div><div class="line">    <span class="attr">app:tabBackground</span>=<span class="string">"@drawable/ripple_tab_bg"</span></div><div class="line">    <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@color/colorTheme"</span></div><div class="line">    <span class="attr">app:tabSelectedTextColor</span>=<span class="string">"@color/colorTheme"</span></div><div class="line">    <span class="attr">app:tabTextColor</span>=<span class="string">"@color/colorTabText"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/vp_book"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>对应的Activity页面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WanFragment</span> <span class="keyword">extends</span> <span class="title">BaseFragment</span>&lt;<span class="title">NoViewModel</span>,<span class="title">FragmentBookBinding</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mTitleList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Fragment&gt; mFragments = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line"></div><div class="line">        showLoading();</div><div class="line">        initFragmentList();</div><div class="line">        MyFragmentPagerAdapter myAdapter = <span class="keyword">new</span> MyFragmentPagerAdapter(getChildFragmentManager(), mFragments, mTitleList);</div><div class="line">        bindingView.vpBook.setAdapter(myAdapter);</div><div class="line">        <span class="comment">// 左右预加载页面的个数</span></div><div class="line">        bindingView.vpBook.setOffscreenPageLimit(<span class="number">2</span>);</div><div class="line">        myAdapter.notifyDataSetChanged();</div><div class="line">        bindingView.tabBook.setTabMode(TabLayout.MODE_FIXED);</div><div class="line">        bindingView.tabBook.setupWithViewPager(bindingView.vpBook);</div><div class="line">        showContentView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">setContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.fragment_book;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFragmentList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTitleList.clear();</div><div class="line">        mTitleList.add(<span class="string">"玩安卓"</span>);</div><div class="line">        mTitleList.add(<span class="string">"知识体系"</span>);</div><div class="line">        mTitleList.add(<span class="string">"导航数据"</span>);</div><div class="line">        mFragments.add(BannerFragment.newInstance());</div><div class="line">        mFragments.add(TreeFragment.newInstance());</div><div class="line">        mFragments.add(NaviFragment.newInstance());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置后就可以达到切换滑动的效果。</p>
<h3 id="2-点击滑动选中，类似RadioGroup的效果"><a href="#2-点击滑动选中，类似RadioGroup的效果" class="headerlink" title="2.点击滑动选中，类似RadioGroup的效果"></a>2.点击滑动选中，类似<code>RadioGroup</code>的效果</h3><p><img src="https://upload-images.jianshu.io/upload_images/1354448-d1001a99c065fadc.gif?imageMogr2/auto-orient/strip" alt="tablayout02.gif"></p>
<p>不过它与<code>RadioGroup</code>不同在于它有下划线可以滑动，更<code>动感</code>…，如果产品经理要求这样实现，就可以派上用场了。</p>
<p>布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tl_search"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorTheme"</span></div><div class="line">            <span class="attr">app:tabGravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">            <span class="attr">app:tabMode</span>=<span class="string">"fixed"</span></div><div class="line">            <span class="attr">app:tabSelectedTextColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">            <span class="attr">app:tabTextAppearance</span>=<span class="string">"@style/MyTabLayoutTextAppearance"</span></div><div class="line">            <span class="attr">app:tabTextColor</span>=<span class="string">"@color/colorWhiteHalf"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"玩安卓"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"干货 | 安卓"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"干货 | 全部"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"网页"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然也可以在Activit动态添加，其中的一些颜色设置等就不细说了~：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String bean : list) &#123;</div><div class="line">     MyTabLayout.Tab tab = binding.tlSearch.newTab();</div><div class="line">     tab.setText(bean.getName());</div><div class="line">     binding.tlSearch.addTab(tab);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>然后再监听点击的时候做处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">binding.tlSearch.addOnTabSelectedListener(<span class="keyword">new</span> TabLayout.OnTabSelectedListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabSelected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">        <span class="comment">// 选中 逻辑操作 (再次点击不会触发)</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabUnselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabReselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="3-点击滑动到屏幕中央，并再次点击可取消"><a href="#3-点击滑动到屏幕中央，并再次点击可取消" class="headerlink" title="3.点击滑动到屏幕中央，并再次点击可取消"></a>3.点击滑动到屏幕中央，并再次点击可取消</h3><p><img src="https://upload-images.jianshu.io/upload_images/1354448-59d07d987b8a1104.gif?imageMogr2/auto-orient/strip" alt="tablayout03.gif"></p>
<p>这样的效果很实用，很多App都会有这样的效果，以前我都是用<code>HorizontalScrollView</code>来实现的，设置点击的item滑动到屏幕中央。</p>
<p>后来想想<code>TabLayout</code>继承自<code>HorizontalScrollView</code>，选中也会自动滚动并居中，于是就选用了它来实现，相对于直接使用<code>HorizontalScrollView</code>代码量更少。</p>
<p>布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tl_tag"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></div><div class="line">    <span class="attr">app:tabIndicatorHeight</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span></div><div class="line">    <span class="attr">app:tabSelectedTextColor</span>=<span class="string">"@color/color_theme"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>Activity里控制：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加自定义Tab</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</div><div class="line">    TabLayout.Tab tab = bindingView.tlTag.newTab();</div><div class="line">    bindingView.tlTag.addTab(tab.setCustomView(getTabView(result.get(i).getName())));</div><div class="line">&#125;</div><div class="line"><span class="comment">// 默认 手动设置 position=0的Tab不选中</span></div><div class="line"><span class="keyword">if</span> (bindingView.tlTag.getTabAt(<span class="number">0</span>) != <span class="keyword">null</span></div><div class="line">        &amp;&amp; bindingView.tlTag.getTabAt(<span class="number">0</span>).getCustomView() != <span class="keyword">null</span>) &#123;</div><div class="line">    bindingView.tlTag.getTabAt(<span class="number">0</span>).getCustomView().setSelected(<span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 添加监听</span></div><div class="line">addTagListener();</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">// 哪个tag被选择过</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> tagSelectPosition = <span class="number">0</span>;</div><div class="line"><span class="comment">// 是否被选中</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> tagSelect = <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// 主要处理取消选中的状态</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTagListener</span><span class="params">()</span> </span>&#123;</div><div class="line">    bindingView.tlTag.addOnTabSelectedListener(<span class="keyword">new</span> TabLayout.OnTabSelectedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabSelected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">            <span class="comment">// // 切换到此tab，则设置已选中position和选中的状态</span></div><div class="line">            tagSelectPosition = tab.getPosition();</div><div class="line">            tagSelect = <span class="keyword">true</span>;</div><div class="line">            <span class="comment">// do something..</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabUnselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabReselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">            <span class="comment">// // Tab再次被点击会走这里</span></div><div class="line">            <span class="comment">// 之前手动 [取消] 的tab角标 初始值为0</span></div><div class="line">            <span class="keyword">if</span> (tagSelectPosition == tab.getPosition()) &#123;</div><div class="line">                <span class="keyword">if</span> (tagSelect) &#123;</div><div class="line">                    <span class="comment">// tab之前被选中，则手动取消</span></div><div class="line">                    <span class="keyword">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class="keyword">null</span></div><div class="line">                            &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class="keyword">null</span>) &#123;</div><div class="line">                        tagSelectPosition = tab.getPosition();</div><div class="line">                        tagSelect = <span class="keyword">false</span>;</div><div class="line">                        bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView().setSelected(<span class="keyword">false</span>);</div><div class="line">                        <span class="comment">// do something..</span></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// tab之前被取消，则手动将其选中</span></div><div class="line">                    <span class="keyword">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class="keyword">null</span></div><div class="line">                            &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class="keyword">null</span>) &#123;</div><div class="line">                        tagSelectPosition = tab.getPosition();</div><div class="line">                        tagSelect = <span class="keyword">true</span>;</div><div class="line">                         <span class="comment">// do something..</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 一般不会触发，以防万一</span></div><div class="line">                <span class="keyword">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class="keyword">null</span></div><div class="line">                        &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class="keyword">null</span>) &#123;</div><div class="line">                    tagSelectPosition = tab.getPosition();</div><div class="line">                    tagSelect = <span class="keyword">true</span>;</div><div class="line">                     <span class="comment">// do something..</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><p>第一部分：<a href="https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/wan/WanFragment.java" target="_blank" rel="external">WanFragment.java</a><br>第二部分：<a href="https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/menu/SearchActivity.java" target="_blank" rel="external">SearchActivity.java</a></p>
<p>完整Demo项目：<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">https://github.com/youlookwhat/CloudReader</a></p>
<p>第三部分因为是公司项目，暂时只有上面的代码片段，已包含所有的相关代码，如果有问题请留言，我会重新整理在Demo里。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1.结合ViewPager使用&lt;/li&gt;
&lt;li&gt;2.点击滑动选中，类似&lt;code&gt;RadioGroup&lt;/code&gt;的效果&lt;/li&gt;
&lt;li&gt;3.点击滑动到屏幕中央，并再次点击可取消&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
  </entry>
  
</feed>
