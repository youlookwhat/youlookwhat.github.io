<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JingBin&#39;s Home</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jingbin.me/"/>
  <updated>2018-07-03T15:58:23.590Z</updated>
  <id>http://jingbin.me/</id>
  
  <author>
    <name>JingBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android DeepLink介绍与使用</title>
    <link href="http://jingbin.me/2018/07/02/deeplink-intro-use/"/>
    <id>http://jingbin.me/2018/07/02/deeplink-intro-use/</id>
    <published>2018-07-02T13:22:09.000Z</published>
    <updated>2018-07-03T15:58:23.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1354448-f9353b100e86560b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>前段时间公司让调研一下DeepLink，说以后会用到，之前看了很久，并做了个demo，现整理一下，方便以后查阅，如果有幸帮助到其他人就更好了。</p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Deep Link，又叫deep linking，中文翻译作深层链接。</p>
<p>简单地从用户体验来讲，Deep Link，就是可以让你在手机的浏览器/Google Search上点击搜索的结果，便能直接跳转到已安装的应用中的某一个页面的技术。</p>
<p>对于不懂技术的运营人员来说就是一个分享功能，而从技术层面上去简单理解是实现将某APP用户带到另外APP相对应的内容页面，实现APP之间无缝跳转！</p>
<h2 id="商业价值"><a href="#商业价值" class="headerlink" title="商业价值"></a>商业价值</h2><p>相信大家或多或少看到过这样的页面：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-a4fcbfe2740d1b8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="deeplink"></p>
<p>底部有一个“App内打开”，点击后如果安装过应用直接跳到应用的对应页面，如果没安装则跳到下载应用页。</p>
<h3 id="Deeplink（深度链接）"><a href="#Deeplink（深度链接）" class="headerlink" title="Deeplink（深度链接）"></a>Deeplink（深度链接）</h3><p>对于已经安装APP，指向特定的页面，和上面说的一致。</p>
<h3 id="Deferred-deeplink（-延迟深度链接）"><a href="#Deferred-deeplink（-延迟深度链接）" class="headerlink" title="Deferred deeplink（ 延迟深度链接）"></a>Deferred deeplink（ 延迟深度链接）</h3><p>相比deeplink，它增加了判断APP是否被安装，用户匹配的2个功能；</p>
<ul>
<li>1.当用户点击链接的时候判断APP是否安装，如果用户没有安装时，引导用户跳转到应用商店下载应用。</li>
<li>2.用户匹配功能，当用户点击链接时和用户启动APP时，分别将这两次用户Device Fingerprint（设备指纹信息）传到服务器进行模糊匹配，使用户下载且启动APP时，直接打开相应的指定页面。</li>
</ul>
<p>通过上面的2个技术方案，不仅：①可以让被分享者更快更便捷的回到APP，且回到指定的活动页面，而且：②可以引导未安装APP的用户下载APP、③分享者和被分享者的关系链会通过设备指纹信息记录下来，在业务场景中给出相应的奖励。</p>
<p>使用deeplink前后对比：<br><img src="https://upload-images.jianshu.io/upload_images/1354448-b4468f9f81f2e0b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对比"></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><blockquote>
<p>具体见Demo：<a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external">WebViewStudy</a></p>
</blockquote>
<h3 id="HTML页面：deeplink-html"><a href="#HTML页面：deeplink-html" class="headerlink" title="HTML页面：deeplink.html"></a>HTML页面：<a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/assets/deeplink.html" target="_blank" rel="external">deeplink.html</a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"[scheme]://[host]/[path]?[query]"</span>&gt;</span>启动应用程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"will://link/testId"</span>&gt;</span>立即打开（直接打开）&amp;gt;&amp;gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a><a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/AndroidManifest.xml" target="_blank" rel="external">AndroidManifest.xml</a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--用于DeepLink，html跳到此页面  scheme_Adr: 'will://link/testid',--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".DeepLinkActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span></span></div><div class="line">                    <span class="attr">android:host</span>=<span class="string">"link"</span></div><div class="line">                    <span class="attr">android:scheme</span>=<span class="string">"will"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="MyWebViewClient-class"><a href="#MyWebViewClient-class" class="headerlink" title="MyWebViewClient.class"></a><a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebViewClient.java" target="_blank" rel="external">MyWebViewClient.class</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(url)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 用于DeepLink测试</span></div><div class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"will://"</span>)) &#123;</div><div class="line">            Uri uri = Uri.parse(url);</div><div class="line">            Log.e(<span class="string">"---------scheme"</span>, uri.getScheme() + <span class="string">"；host: "</span> + uri.getHost() + <span class="string">"；Id: "</span> + uri.getPathSegments().get(<span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Intent intent1 = <span class="keyword">new</span> Intent();</div><div class="line">        intent1.setAction(<span class="string">"android.intent.action.VIEW"</span>);</div><div class="line">        Uri uri = Uri.parse(url);</div><div class="line">        intent1.setData(uri);</div><div class="line">        intent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        mActivity.startActivity(intent1);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DeepLinkActivity-java"><a href="#DeepLinkActivity-java" class="headerlink" title="DeepLinkActivity.java"></a><a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/DeepLinkActivity.java" target="_blank" rel="external">DeepLinkActivity.java</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 从deep link中获取数据</div><div class="line">  * 'will://share/传过来的数据'</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getDataFromBrowser</span><span class="params">(TextView textView)</span> </span>&#123;</div><div class="line">     Uri data = getIntent().getData();</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         String scheme = data.getScheme();</div><div class="line">         String host = data.getHost();</div><div class="line">         List&lt;String&gt; params = data.getPathSegments();</div><div class="line">         <span class="comment">// 从网页传过来的数据</span></div><div class="line">         String testId = params.get(<span class="number">0</span>);</div><div class="line">         String text = <span class="string">"Scheme: "</span> + scheme + <span class="string">"\n"</span> + <span class="string">"host: "</span> + host + <span class="string">"\n"</span> + <span class="string">"params: "</span> + testId;</div><div class="line">         Log.e(<span class="string">"ScrollingActivity"</span>, text);</div><div class="line">         textView.setText(text);</div><div class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>页面具体显示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Scheme：will</div><div class="line">host：link</div><div class="line">params：testId</div></pre></td></tr></table></figure></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>DeepLink用到的核心技术就是：URL SCHEMES。不论是IOS还是Android。<br>URL Schemes 有两个单词：</p>
<ul>
<li>URL，我们都很清楚，<a href="http://www.apple.com" target="_blank" rel="external">http://www.apple.com</a> 就是个 URL，也叫它链接或网址；</li>
<li>Schemes，表示的是一个 URL 中的一个位置——最初始的位置，即 ://之前的那段字符。比如 <a href="http://www.apple.com" target="_blank" rel="external">http://www.apple.com</a> 这个网址的 Schemes 是 http。</li>
</ul>
<p>我们可以像定位一个网页一样，用一种特殊的 URL 来定位一个应用甚至应用里某个具体的功能。而定位这个应用的，就应该这个应用的 URL 的 Schemes 部分，也就是开头儿那部分。但是需要注意的是应用的URL Schemes 并不唯一，也就是说一个应用可以“起多个名“，不同应用的URL Schemes也可能因为名字一样发生冲突。</p>
<p>Android系统级应用，有一些已经定义了URL Schemes，比如短信是 sms:、通话是tel:、email是mailto:，在定义自己APP的URL Schemes的时候要避免跟系统应用名称一样。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:15088888888"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:15088888888"</span>&gt;</span>短信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:15088888888@qq.com"</span>&gt;</span>邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>与URL一样，URL Schemes也可以通过传参打开特定的APP界面。</p>
<ul>
<li>URL：<a href="http://images.google.com/images?q=关键字" target="_blank" rel="external">http://images.google.com/images?q=关键字</a></li>
<li>URL Schemes：weixin://dl/moments（打开微信朋友圈）</li>
</ul>
<h2 id="Applink"><a href="#Applink" class="headerlink" title="Applink"></a>Applink</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>官网文档：<a href="https://developer.android.com/training/app-links/verify-site-associations#the-difference" target="_blank" rel="external">Verify Android App Links</a></p>
<p>Android App Links是一种特殊的Deep Links，它使Android系统能够直接通过网站地址打开应用程序对应的内容页面，而不需要用户选择使用哪个应用来处理网站地址。</p>
<p>要添加Android App Links到应用中，需要在应用里定义通过Http(s)地址打开应用的intent filter，并验证你确实拥有该应用和该网站。如果系统成功验证到你拥有该网站，那么系统会直接把URL对应的intent路由到你的应用。</p>
<p>为了验证你对应用和网站的所有权，以下两个步骤是必须的：</p>
<ul>
<li>1.在AndroidManifest里要求系统自动进行App Links的所有权验证。这个配置会告诉Android系统去验证你的应用是否属于在intent filter内指定的URL域名。</li>
<li>2.在以下链接地址里，放置一个数字资产链接的Json文件，声明你的网址和应用之间的关系：<ul>
<li><code>https://domain.name/.well-known/assetlinks.json</code> </li>
</ul>
</li>
</ul>
<h3 id="与Deep-Links的区别"><a href="#与Deep-Links的区别" class="headerlink" title="与Deep Links的区别"></a>与Deep Links的区别</h3><ul>
<li><p>Deep Links 是一种允许用户进入应用某个特定Activity的intent filter。点击这类链接时，系统可能会弹出一个选择列表，让用户在一堆能够处理这类链接的应用里(包括你的)选择一个来处理该链接。图一展示了这样一种情况：用户点击了一个地图相关的链接，系统弹出一个选择列表，让用户选择是要使用地图应用来处理，还是使用Chrome浏览器来处理。</p>
</li>
<li><p>App Links 是一种基于你的网站地址且验证通过的Deep Links。因此，点击一个这样的链接会直接打开你的应用(如果已经安装)，系统将不会弹出选择列表。当然，后续用户可以更改配好设置，来指定由哪个应用程序处理这类链接。</p>
</li>
</ul>
<p>下面这个列表描述更多差异：</p>
<table>
<thead>
<tr>
<th>item</th>
<th style="text-align:center">Deep Links</th>
<th style="text-align:center">App Links</th>
</tr>
</thead>
<tbody>
<tr>
<td>Intent URL Scheme</td>
<td style="text-align:center">https, http，或者自定义</td>
<td style="text-align:center">需为http或https</td>
</tr>
<tr>
<td>Intent Action</td>
<td style="text-align:center">任意Action</td>
<td style="text-align:center">需为<code>android.intent.action.VIEW</code></td>
</tr>
<tr>
<td>Intent Category</td>
<td style="text-align:center">任意Category</td>
<td style="text-align:center">需为<code>android.intent.category.BROWSABLE</code>和<code>android.intent.category.DEFAULT</code></td>
</tr>
<tr>
<td>链接验证</td>
<td style="text-align:center">不需要</td>
<td style="text-align:center">需要在网站上放置一个数字资产链接，并能够通过HTTPS访问</td>
</tr>
<tr>
<td>用户体验</td>
<td style="text-align:center">可能会弹出一个选择列表给用户选择用哪个应用处理连接</td>
<td style="text-align:center">没有弹框，系统直接打开你的应用处理网站连接</td>
</tr>
<tr>
<td>兼容性</td>
<td style="text-align:center">所有Android版本</td>
<td style="text-align:center">Android 6.0及以上</td>
</tr>
</tbody>
</table>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><ul>
<li>1.APP要想被其他APP直接打开，自身得支持，让自己具备被人打开的能力。（URL Schemes）</li>
<li>2.APP要想打开其他的APP，自身也得支持。（判断设备是否安装、各种跳转的处理）</li>
</ul>
<p>应该来讲，deeplink技术比较适用于独立电商、金融理财APP，一方面这类APP的广告内容可以是平台的商品（产品），链接后直接进入相关商品（产品）的详情页，另一方面，这类APP在打开后是会产生后续的交易行为。</p>
<p>这种方式只能用于系统处理URL的intent的情况，若URL本身没有抛给系统处理，而是直接在应用内打开了，那就无法直接拉起应用。</p>
<p>由于大部分应用，如微博、微信、第三方浏览器(包括Chrome)，都不会将URL抛给系统处理(对scheme进行屏蔽)，因此App Links生效的情况就很有限了，比如只能从记事本应用、短信应用这些进行跳转。总体来说，实属鸡肋。</p>
<blockquote>
<p>京东及淘宝的CPS即是使用此方式实现的。<br><a href="https://jingbin.me/2018/02/02/%E4%BA%AC%E4%B8%9CCPS%E5%95%86%E5%93%81%E6%8E%A8%E5%B9%BF%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/">京东CPS商品推广接入流程</a><br><a href="https://jingbin.me/2018/01/19/Android-%E9%98%BF%E9%87%8C%E7%99%BE%E5%B7%9Dcps-SDK%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/">Android 阿里百川cps SDK接入流程</a></p>
</blockquote>
<h2 id="一些常用APP的URL-Schemes"><a href="#一些常用APP的URL-Schemes" class="headerlink" title="一些常用APP的URL Schemes"></a>一些常用APP的URL Schemes</h2><p>知乎：回答 zhihu://answers/{id}用户页 zhihu://people/{id}<br>微信：<br>weixin://dl/scan 扫一扫weixin://dl/feedback 反馈weixin://dl/moments 朋友圈weixin://dl/settings 设置weixin://dl/notifications 消息通知设置weixin://dl/chat 聊天设置weixin://dl/general 通用设置weixin://dl/officialaccounts 公众号weixin://dl/games 游戏weixin://dl/help 帮助weixin://dl/feedback 反馈weixin://dl/profile 个人信息weixin://dl/features 功能插件</p>
<p>腾讯微博：TencentWeibo://<br>淘宝：taobao://<br>支付宝：alipay://<br>微博：sinaweibo://<br>weico微博：weico://<br>QQ浏览器：mqqbrowser://<br>uc浏览器：ucbrowser://<br>海豚浏览器：dolphin://<br>搜狗浏览器：SogouMSE://<br>百度地图：baidumap://<br>Chrome：googlechrome://<br>优酷：youku://<br>京东：openapp.jdmoble://<br>人人：renren://<br>美团：imeituan://<br>1号店：wccbyihaodian://<br>我查查：wcc://<br>有道词典：ddictproapp://<br>点评：dianping://<br>微盘：sinavdisk://<br>豆瓣fm：doubanradio://<br>网易公开课：ntesopen://<br>名片全能王：camcard://<br>淘宝宝贝搜索：taobao://<a href="http://s.taobao.com/?q=[prompt" target="_blank" rel="external">http://s.taobao.com/?q=[prompt</a>]<br>淘宝店铺搜索：taobao://<a href="http://shopsearch.t" target="_blank" rel="external">http://shopsearch.t</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/" target="_blank" rel="external">Deep Link是什么</a></li>
<li><a href="https://mp.weixin.qq.com/s/fWBDfd-7al7MsY0zwDn6dA" target="_blank" rel="external">深度链接（Deeplink）技术助力APP运营，实现病毒式用户增长</a></li>
<li><a href="http://www.sohu.com/a/122694049_491343" target="_blank" rel="external">现在很火的app上的deeplink技术，到底是什么？</a></li>
<li><a href="https://juejin.im/entry/590fe2d8ac502e006cf9e3e4" target="_blank" rel="external">5 分钟搞懂 Android DeepLink</a></li>
<li><a href="https://juejin.im/post/59b3eab25188257e8d77c991#heading-16" target="_blank" rel="external">Android AppLinks 接入</a></li>
<li><a href="https://github.com/hehonghui/android-tech-frontier/blob/master/issue-15/Android-M%E7%9A%84App-Links%E5%AE%9E%E7%8E%B0%E8%AF%A6%E8%A7%A3.md" target="_blank" rel="external">Android M的App Links实现详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20694818" target="_blank" rel="external">移动DeepLink的前生今世</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-f9353b100e86560b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;前段时间公司让调研一下DeepLink，说以后会用到，之前看了很久，并做了个demo，现整理一下，方便以后查阅，如果有幸帮助到其他人就更好了。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="deeplink" scheme="http://jingbin.me/tags/deeplink/"/>
    
  </entry>
  
  <entry>
    <title>Android 内存泄漏分析与优化</title>
    <link href="http://jingbin.me/2018/06/27/memory-leak-analysis/"/>
    <id>http://jingbin.me/2018/06/27/memory-leak-analysis/</id>
    <published>2018-06-27T13:31:24.000Z</published>
    <updated>2018-07-06T06:17:57.473Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>大范围借鉴及自己思考总结的内容，感谢各位博主的分享。</p>
</blockquote>
<a id="more"></a>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="何为性能问题"><a href="#何为性能问题" class="headerlink" title="何为性能问题"></a>何为性能问题</h4><h5 id="1-响应时间"><a href="#1-响应时间" class="headerlink" title="(1). 响应时间"></a>(1). 响应时间</h5><p>指从用户操作开始到系统给用户以正确反馈的时间。一般包括逻辑处理时间 + 网络传输时间 + 展现时间。对于非网络类应用不包括网络传输时间。</p>
<p>展现时间即：网页或 App 界面渲染时间。<br>响应时间是：用户对性能最直接的感受。</p>
<h5 id="2-TPS-Transaction-Per-Second"><a href="#2-TPS-Transaction-Per-Second" class="headerlink" title="(2). TPS(Transaction Per Second)"></a>(2). TPS(Transaction Per Second)</h5><p>TPS为每秒处理的事务数，是系统吞吐量的指标，在搜索系统中也用QPS(Query Per Second)衡量。TPS一般与响应时间反相关。</p>
<p>通常所说的性能问题就是指响应时间过长、系统吞吐量过低。</p>
<p>对后台开发来说，也常将高并发下内存泄漏归为性能问题。<br>对移动开发来说，性能问题还包括电量、内存使用这两类较特殊情况。</p>
<h4 id="性能调优方式"><a href="#性能调优方式" class="headerlink" title="性能调优方式"></a>性能调优方式</h4><p>明白了何为性能问题之后，就能明白性能优化实际就是优化系统的响应时间，提高TPS。优化响应时间，提高TPS。方式不外乎这三大类：</p>
<ul>
<li>(1) 降低执行时间，又包括几小类<ul>
<li>a. 利用多线程并发或分布式提高 TPS</li>
<li>b. 缓存(包括对象缓存、IO 缓存、网络缓存等)</li>
<li>c. 数据结构和算法优化</li>
<li>d. 性能更优的底层接口调用，如 JNI 实现</li>
<li>e. 逻辑优化</li>
<li>f. 需求优化</li>
</ul>
</li>
<li>(2) 同步改异步，利用多线程提高TPS</li>
<li>(3) 提前或延迟操作，错峰提高TPS</li>
</ul>
<h3 id="项目优化细节"><a href="#项目优化细节" class="headerlink" title="项目优化细节"></a>项目优化细节</h3><h4 id="内存泄漏问题"><a href="#内存泄漏问题" class="headerlink" title="内存泄漏问题"></a>内存泄漏问题</h4><h5 id="静态单例类引用Activity的context"><a href="#静态单例类引用Activity的context" class="headerlink" title="静态单例类引用Activity的context"></a>静态单例类引用Activity的context</h5><p>单例模式不正确的获取context:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LoginManager manager;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoginManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (manager == <span class="keyword">null</span>)</div><div class="line">            manager = <span class="keyword">new</span> LoginManager(context);</div><div class="line">        <span class="keyword">return</span> manager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LoginManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在LoginActivity中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span>  </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LoginManager loginManager;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line">        loginManager = LoginManager.getInstance(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在LoginManager的单例中context持有了LoginActivity的this对象，即使登录成功后我们跳转到了其他Activity页面，LoginActivity的对象仍然得不到回收因为他被单例所持有，而单例的生命周期是同Application保持一致的。</p>
<p>正确的获取context的方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LoginManager manager;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoginManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (manager == <span class="keyword">null</span>)</div><div class="line">            manager = <span class="keyword">new</span> LoginManager(context);</div><div class="line">        <span class="keyword">return</span> manager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LoginManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context.getApplicationContext();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们单例中context不再持有Activity的context而是持有Application的context即可，因为Application本来就是单例，所以这样就不会存在内存泄漏的的现象了。</p>
</blockquote>
<h5 id="单例模式中通过内部类持有activity对象"><a href="#单例模式中通过内部类持有activity对象" class="headerlink" title="单例模式中通过内部类持有activity对象"></a>单例模式中通过内部类持有activity对象</h5><p>下面是一个单例的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestManager</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> TestManager INSTANCE = <span class="keyword">new</span> TestManager();</div><div class="line">    <span class="keyword">private</span> List&lt;MyListener&gt; mListenerList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        mListenerList = <span class="keyword">new</span> ArrayList&lt;MyListener&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(MyListener listener)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!mListenerList.contains(listener)) &#123;</div><div class="line">            mListenerList.add(listener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(MyListener listener)</span> </span>&#123;</div><div class="line">        mListenerList.remove(listener);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSomeThingHappen</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是activity:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MyListener mMyListener=<span class="keyword">new</span> MyListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSomeThingHappen</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">private</span> TestManager testManager=TestManager.getInstance();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_test);</div><div class="line">        testManager.registerListener(mMyListener);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道在java中，非静态的内部类的对象都是会持有指向外部类对象的引用的，因此我们将内部类对象mMyListener让单例所持有时，由于mMyListener引用了我们的activity对象，因此造成activity对象也不能被回收了，从而出现内存泄漏现象。</p>
<p>修改以上代码，避免内存泄漏，在activity中添加以下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    testManager.unregisterListener(mMyListener);</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>退出界面时，取消相关注册监听！</p>
</blockquote>
<h5 id="AsyncTask不正确使用造成的内存泄漏"><a href="#AsyncTask不正确使用造成的内存泄漏" class="headerlink" title="AsyncTask不正确使用造成的内存泄漏"></a>AsyncTask不正确使用造成的内存泄漏</h5><p>我们在来看一种更加容易被忽略的内存泄漏现象，对于AsyncTask不正确使用造成内存泄漏的问题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mTask=<span class="keyword">new</span> AsyncTask&lt;String,Void,Void&gt;()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">                <span class="comment">//doSamething..</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;.execute(<span class="string">"a task"</span>);</div></pre></td></tr></table></figure>
<p>我们在使用AsyncTask的时候不宜在其中执行太耗时的操作，假设activity已经退出了，然而AsyncTask里任务还没有执行完成或者是还在排队等待执行，就会造成我们的activity对象被回收的时间延后，一段时间内内存占有率变大。</p>
<p>解决方法在activity退出的时候应该调用cancel()函数:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//mTask.cancel(false);</span></div><div class="line">       mTask.cancel(<span class="keyword">true</span>);</div><div class="line">       <span class="keyword">super</span>.onDestroy();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>退出界面时，结束当前页面的线程。</p>
</blockquote>
<h5 id="内部Handler类引起内存泄露"><a href="#内部Handler类引起内存泄露" class="headerlink" title="内部Handler类引起内存泄露"></a>内部Handler类引起内存泄露</h5><p>原因：Handler在Android中用于消息的发送与异步处理，常常在Activity中作为一个匿名内部类来定义，此时Handler会隐式地持有一个外部类对象（通常是一个Activity）的引用。当Activity已经被用户关闭时，由于Handler持有Activity的引用造成Activity无法被GC回收，这样容易造成内存泄露。 正确的做法是将其定义成一个静态内部类（此时不会持有外部类对象的引用），在构造方法中传入Activity并对Activity对象增加一个弱引用，这样Activity被用户关闭之后，即便异步消息还未处理完毕，Activity也能够被GC回收，从而避免了内存泄露。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;Activity&gt; reference;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">            reference = <span class="keyword">new</span> WeakReference&lt;Activity&gt;(activity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (reference.get() != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    <span class="comment">// do something...</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="comment">// do something...</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="webview导致的内存泄漏"><a href="#webview导致的内存泄漏" class="headerlink" title="webview导致的内存泄漏"></a>webview导致的内存泄漏</h5><p>用代码New一个WebView而不是在XML中静态写入(不过貌似不能设置进度条了，不需要进度条的可以忽略):</p>
<p>在XML文件中用layout占位:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout</div><div class="line">    android:id=<span class="string">"@+id/base_web_view_container"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<p>接下来只需要在Activity中New一个WebView并且添加到我们的容器中就ok了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">RelativeLayout webview_container = (RelativeLayout) findViewById(R.id.base_web_view_container);</div><div class="line">web_view_ = <span class="keyword">new</span> WebView(yourApplicationContext);</div><div class="line">web_view_.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</div><div class="line">                ViewGroup.LayoutParams.MATCH_PARENT));</div><div class="line">web_view_.setOnWebCallback(yourWebCallback);</div><div class="line">webview_container.addView(web_view_);</div></pre></td></tr></table></figure>
<p>关于WebView的context应该用Activity还是Application的context，这里网上较为一致的观点都是采用Application的，理由是这样不会造成Activity的context的内存泄漏。</p>
<p>销毁时的动作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearWebViewResource</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (web_view_ != <span class="keyword">null</span>) &#123;</div><div class="line">        LogUtils.d(TAG,<span class="string">"Clear webview's resources"</span>);</div><div class="line">        web_view_.removeAllViews();</div><div class="line">        <span class="comment">// in android 5.1(sdk:21) we should invoke this to avoid memory leak</span></div><div class="line">        <span class="comment">// see (https://coolpers.github.io/webview/memory/leak/2015/07/16/</span></div><div class="line">        <span class="comment">// android-5.1-webview-memory-leak.html)</span></div><div class="line">        ((ViewGroup) web_view_.getParent()).removeView(web_view_);</div><div class="line">        web_view_.setTag(<span class="keyword">null</span>);</div><div class="line">        web_view_.clearHistory();</div><div class="line">        web_view_.destroy();</div><div class="line">        web_view_ = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尽量不要将WebView作为listview的头部使用，这样的话WebView会被一次性加载到内存中。</p>
<h5 id="Window-Leaked"><a href="#Window-Leaked" class="headerlink" title="Window Leaked"></a>Window Leaked</h5><p>按字面了解，Window Leaked大概就是说一个窗体泄漏了，也就是我们常说的内存泄漏，为什么窗体会泄漏呢？</p>
<ul>
<li><p>产生原因：<br> 我们知道Android的每一个Activity都有个WindowManager窗体管理器，同样，构建在某个Activity之上的对话框、PopupWindow也有相应的WindowManager窗体管理器。因为对话框、PopupWindown不能脱离Activity而单独存在着，所以当某个Dialog或者某个PopupWindow正在显示的时候我们去finish()了承载该Dialog(或PopupWindow)的Activity时，就会抛Window Leaked异常了，因为这个Dialog(或PopupWindow)的WindowManager已经没有谁可以附属了，所以它的窗体管理器已经泄漏了。</p>
</li>
<li><p>解决方法：<br>关闭(finish)某个Activity前，要确保附属在上面的Dialog或PopupWindow已经关闭(dismiss)了。</p>
</li>
</ul>
<h5 id="避免内存流失"><a href="#避免内存流失" class="headerlink" title="避免内存流失"></a>避免内存流失</h5><p>内存流失可能会导致出现大量的 GC 事件，如自定义组件的 onDraw() ，避免大量创建临时对象，比如 String ，以免频繁触发 GC。GC 事件通常不影响您的 APP 的性能，然而在很短的时间段，发生许多垃圾收集事件可以快速地吃了您的帧时间，系统上时间的都花费在 GC ，就有很少时间做其他的东西像渲染或音频流。</p>
<h5 id="监听器的注销"><a href="#监听器的注销" class="headerlink" title="监听器的注销"></a>监听器的注销</h5><ul>
<li>对于观察者, 广播, Listener等, 注册和注销没有成对出现而导致的内存泄露.</li>
<li>使用CountDownTimer倒计时时，退出activity要取消：<code>timer.cancel()</code></li>
<li>使用LocationManager获取地理位置，及时取消注册：<code>locationManager.removeUpdates(mListener);</code></li>
<li>使用dialog或BottomSheetDialog，消失时移除监听，对象置空</li>
<li>使用RxBus，退出activity取消注册</li>
<li>使用一些三方的库，仔细查看是否需要取消注册的情况</li>
</ul>
<h5 id="Bitmap处理"><a href="#Bitmap处理" class="headerlink" title="Bitmap处理"></a>Bitmap处理</h5><p>以<a href="https://www.fresco-cn.org/docs/troubleshooting.html" target="_blank" rel="external">fresco</a>为例：</p>
<ul>
<li>(最好是加载图片宽高大小的图片，多余的尺寸会导致内存浪费，不过webp后缀的图片无法设置宽高，这是个问题？)加载特别特别大的图片时最容易导致这种情况。如果你加载的图片比承载的View明显大出太多，那你应该考虑将它Resize一下。</li>
<li>Android <strong><em>无法绘制长或宽大于2048像素的图片</em></strong>。这是由OpenGL渲染系统限制的，如果它超过了这个界限，Fresco会对它进行Resize。</li>
<li>decode format：解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。在不需要特别清晰的图片情况下，使用<strong><em>RBG_565</em></strong>为好。</li>
</ul>
<h5 id="SharedPreference-存储value"><a href="#SharedPreference-存储value" class="headerlink" title="SharedPreference 存储value"></a>SharedPreference 存储value</h5><p>sp在创建的时候会把整个文件全部加载进内存，如果你的sp文件比较大，那么会带来两个严重问题：</p>
<ul>
<li>第一次从sp中获取值的时候，有可能阻塞主线程，使界面卡顿、掉帧。</li>
<li>解析sp的时候会产生大量的临时对象，导致频繁GC，引起界面卡顿。</li>
<li>这些key和value会永远存在于内存之中，占用大量内存。</li>
</ul>
<p>储存数据量过大后，取值小屏手机vivoY23L,v4.4.4会取值失败。</p>
<h5 id="Cursor关闭"><a href="#Cursor关闭" class="headerlink" title="Cursor关闭"></a>Cursor关闭</h5><p>如查询数据库的操作，使用到Cursor，也要对Cursor对象及时关闭。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">     <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">        cursor.moveToFirst();</div><div class="line">        <span class="comment">// do something.</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">        cursor.close();</div><div class="line">        cursor = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="有效使用内存的建议"><a href="#有效使用内存的建议" class="headerlink" title="有效使用内存的建议"></a>有效使用内存的建议</h4><h5 id="去掉bean里无用的字段"><a href="#去掉bean里无用的字段" class="headerlink" title="去掉bean里无用的字段"></a>去掉bean里无用的字段</h5><p>有时候我们通过GsonFormat直接生成返回的json的Bean，而有一些我们并未使用的字段也一并生成了，建议删除这些无用字段，不然将无可避免的占用一定的内存空间。</p>
<h5 id="关闭页面，全局的list清空后置空"><a href="#关闭页面，全局的list清空后置空" class="headerlink" title="关闭页面，全局的list清空后置空"></a>关闭页面，全局的list清空后置空</h5><p>用完就清空，并设置为null，不要到处引用不然会导致不能及时释放。</p>
<h5 id="谨慎使用服务Service"><a href="#谨慎使用服务Service" class="headerlink" title="谨慎使用服务Service"></a>谨慎使用服务Service</h5><p>离开了 APP 还在运行服务是最糟糕的内存管理错误之一，当 APP 处在后台，我们应该停止服务，除非它需要运行的任务。我们可以使用<a href="https://developer.android.google.cn/topic/performance/background-optimization" target="_blank" rel="external">JobScheduler</a>替代实现，JobScheduler把一些不是特别紧急的任务放到更合适的时机批量处理。如果必须使用一个服务，最佳方法是使用<a href="https://developer.android.google.cn/guide/components/services" target="_blank" rel="external">IntentService</a>，限制服务寿命，所有请求处理完成后，IntentService 会自动停止。</p>
<h5 id="使用优化后的数据容器"><a href="#使用优化后的数据容器" class="headerlink" title="使用优化后的数据容器"></a>使用优化后的数据容器</h5><p>考虑使用优化过数据的容器 SparseArray / SparseBooleanArray / LongSparseArray 代替 HashMap 等传统数据结构，通用 HashMap 的实现可以说是相当低效的内存，因为它需要为每个映射一个单独的条目对象</p>
<p>关于HashMap，ArrayMap，SparseArray, <a href="https://www.jianshu.com/p/7b9a1b386265" target="_blank" rel="external">这篇文章</a>有个比较直观的比较, 可以看下</p>
<h5 id="少用枚举enum结构"><a href="#少用枚举enum结构" class="headerlink" title="少用枚举enum结构"></a>少用枚举enum结构</h5><p>枚举一般是用来列举一系列相同类型的常量，它是一种特殊的数据类型，使用枚举能够确保参数的安全性。但是Android开发文档上指出，使用枚举会比使用静态变量多消耗两倍的内存，应该尽量避免在Android中使用枚举。</p>
<p>那么枚举为什么会更消耗内存呢？ - <a href="https://blog.csdn.net/xiao_nian/article/details/80002101" target="_blank" rel="external">分析链接</a></p>
<h5 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h5><p>诸如一些临时对象, 特别是循环中的.</p>
<h5 id="使用异步处理数据较多的情况"><a href="#使用异步处理数据较多的情况" class="headerlink" title="使用异步处理数据较多的情况"></a>使用异步处理数据较多的情况</h5><p>如果一些数据需要处理再显示在UI上，对于数据量比较大的情况强烈建议异步处理后再在主线程处理。</p>
<h5 id="使用-nano-protobufs-序列化数据"><a href="#使用-nano-protobufs-序列化数据" class="headerlink" title="使用 nano protobufs 序列化数据"></a>使用 nano protobufs 序列化数据</h5><p>Protocol buffers 是一个语言中立，平台中立的，可扩展的机制，由谷歌进行序列化结构化数据，类似于 XML 设计的，但是更小，更快，更简单。如果需要为您的数据序列化与协议化，建议使用 nano protobufs。</p>
<h5 id="使用ProGuard来剔除不需要的代码"><a href="#使用ProGuard来剔除不需要的代码" class="headerlink" title="使用ProGuard来剔除不需要的代码"></a>使用ProGuard来剔除不需要的代码</h5><p>使用 ProGuard 来剔除不需要的代码，移除任何冗余的，不必要的，或臃肿的组件，资源或库完善 APP 的内存消耗。</p>
<h5 id="降低整体尺寸APK"><a href="#降低整体尺寸APK" class="headerlink" title="降低整体尺寸APK"></a>降低整体尺寸APK</h5><p>您可以通过减少 APP 的整体规模显著减少 APP 的内存使用情况。文章：<a href="http://wuxiaolong.me/2017/03/19/ReduceAPKSize/" target="_blank" rel="external">Android APK瘦身实践</a></p>
<h5 id="优化布局层次"><a href="#优化布局层次" class="headerlink" title="优化布局层次"></a>优化布局层次</h5><p>通过优化视图层次结构，以减少重叠的 UI 对象的数量来提高性能。文章：<a href="http://wuxiaolong.me/2017/03/26/Rendering/" target="_blank" rel="external">Android 渲染优化</a></p>
<h3 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h3><ul>
<li><a href="https://github.com/square/leakcanary" target="_blank" rel="external">leakcanary</a></li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="http://www.trinea.cn/android/performance/" target="_blank" rel="external">性能优化系列总篇</a></li>
<li><a href="https://blog.csdn.net/ys408973279/article/details/50389200" target="_blank" rel="external">Android内存优化之——static使用篇</a></li>
<li><a href="https://gist.github.com/yangdm0209/ded1d6fe2d7724070b3af87caa5515c2" target="_blank" rel="external">Android 中handler的HandlerLeak问题</a></li>
<li><a href="https://blog.csdn.net/sanjay_f/article/details/50208847" target="_blank" rel="external">源码探索系列1—Handler与HandlerLeak的那些事</a></li>
<li><a href="http://lipeng1667.github.io/2016/08/06/memory-optimisation-for-webview-in-android/" target="_blank" rel="external">WebView内存泄漏优化之路</a></li>
<li><a href="https://blog.csdn.net/u_xtian/article/details/6123945" target="_blank" rel="external">关于android.view.WindowLeaked的解决方案</a></li>
<li><a href="http://wuxiaolong.me/2017/04/15/memory/" target="_blank" rel="external">Android 内存优化</a></li>
<li><a href="http://weishu.me/2016/10/13/sharedpreference-advices/" target="_blank" rel="external">请不要滥用SharedPreference</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;大范围借鉴及自己思考总结的内容，感谢各位博主的分享。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="性能优化" scheme="http://jingbin.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>武汉购房经历 | 已结束</title>
    <link href="http://jingbin.me/2018/06/13/buying-a-house-in-wuhan/"/>
    <id>http://jingbin.me/2018/06/13/buying-a-house-in-wuhan/</id>
    <published>2018-06-12T17:15:52.000Z</published>
    <updated>2018-06-13T14:52:40.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2018.6.12，今天刚领到了购房合同，从买房到现在已经一年多了，总算完成了一项一百多万的大买卖。总结一下这一年多买房的经历。</p>
<p>很长的文字，建议<del>用时一个小时</del>不要看。</p>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-b85c559592888367.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="开始想买房"><a href="#开始想买房" class="headerlink" title="开始想买房"></a>开始想买房</h3><p>刚毕业半年，还在北京工作的的时候，一高中同学就打算在武汉买套房，那时候是2015年底，因为她毕业的早一年，而且提前出去工作的，在武汉已经工作了一年了，对那里的形势也比较了解。</p>
<p>跟我说了一下买房的事情，由于我对武汉的情况并不了解，而且那时候刚毕业不久，没有很稳定的工作，不确定是不是一定到武汉定居，所以并没有多在意，当年过年回家和父母商量可不可以买。</p>
<p>当时没有买，我知道的几个原因有，<br>第一：家里那时候生意不太好做，准备搬到市区去做另一行的生意，进货、租店而且还要一定的资金周转，拿出20万作为首付后资金有点紧张。<br>第二：父母问了其他人武汉的房子好不好买，大家都说好买，不急，到处都拉着你买房子。<br>第三：我还不确定回武汉，以后还不一定在武汉定居，现在买了不一定增值，花20万放在房子上增值现在看不到好的前景。<br>第四：我的收入不稳定，买了不一定还得起，到时候还得让父母还，我心里也不好受。<br>第五：我大学在宜昌上的，之后又去了北京，对武汉的情况不了解，不知道哪个地方好，哪个地方差还需要去好好看，而且买了后还要领合同签贷款交首付之类的要一段时间，我马上就要去北京了，父母忙生意也没时间。<br>由于种种原因，当时是没有买的，不然现在也不会花这么大价钱买。</p>
<p>那个高中同学买了，之后说的是逼她的父母买的《宝业光谷丽都》，当时的价好像是7500左右，2015年下半年或2016年上半年，买的一个85平左右的两室一厅，对于我们来说已经非常好了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-8558de2b78ae38d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="宝业光谷丽都"></p>
<p>后来房价一路飙升，原定她的小区第三期2017年开盘的一直捂盘到现在，2018年5月，靠近三环的比较吵的以均价15000元一平，靠后一点的以均价17000元一平的出售了。整整翻了两倍不止。</p>
<h3 id="网上看房子"><a href="#网上看房子" class="headerlink" title="网上看房子"></a>网上看房子</h3><p>过完年去北京后，网上一直有武汉房价的消息，可能那时候资本寒冬，投资家的钱没地方去就很多到了房市上面。那时候还在网上慢慢悠悠看房子，看哪里的地段好，哪里符合我工作的地方。</p>
<p>突然，具体时间忘记了，也不是很敏感，因为当时父母没这么想买，我没这么多钱，觉得父母已经很辛苦了，所以没有太在意。大约是2016年下半年的时候，武汉限购了，不是武汉户口的买不了，刚开始是几个区限购，后来越来越多，以至于好点的地方都需要户口或两年社保。[2016、武汉9月限贷，10月限购，11月又限购]</p>
<p>2017年过年的时候回家，差不多2017年2月，在武汉呆了几天，去她的房子那看了一下，好像就是那个三期的，说是快开盘了，我问可以不可以买，说是限购了一定要是武汉户口，或是两年社保，当时想了想两年是不可能的，还要工作两年，本地户口又不是，所以很无奈。</p>
<h3 id="第一次实地看房"><a href="#第一次实地看房" class="headerlink" title="第一次实地看房"></a>第一次实地看房</h3><p>2017年回家后，决定了之后去深圳发展，回北京后辞去当时的工作，然后去了深圳，打算的是在深圳打工然后还武汉的房贷。既然买不了主城区的房子，就买远城区的，心里想的很简单，只要是武汉的房子就好，就算离工作的地方搭车2小时也无所谓。</p>
<p>然后在深圳找工作期间，发现不是很顺利，深圳的工资没有我想象的那么高，而且远城区的房子比我想象的要远😂。</p>
<p>当时在深圳找工作，因为深圳距离武汉比较远，父母和另一个人就开车一起去武汉看了一次，开去武汉差不多就2个小时左右。看了几个楼盘感觉比较好，想我回来看下然后最好能定下来。2017年5月1日前几天我回武汉去和父母看了一下。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-f6c1a99443ad5e62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="汉口北"></p>
<p>当时看了四套房，都在汉口北地铁站附近：</p>
<ul>
<li><p>第一套，位置很偏，旁边还是石子路，配套什么的想都没想。进去小区之后，两个字：“荒芜”，基本没有什么人在那里住，只有一个阿姨推着小孩在那里玩。墙上已经掉漆了，是的，建筑的外墙已经掉漆了，进去楼道口，门和电梯都是旧的，应该是没有物业吧，没人住也不用请物业，不能进去房间里看，就到顶楼看了下，心里很难受，坚决不能买。</p>
</li>
<li><p>第二套，是隔得不远的一间，小区位置还比较好，和之前的比好多了，里面的入住率很高，而且绿化做的很好，就是有个缺点，在一楼或是二楼，阳光不是很好，好像还看了同一个小区的，因为里面的户型不好没有考虑，都是二手房。暂时把这个留作考虑。</p>
</li>
<li><p>第三套，这个很差非常差。。是一个和我一般大的小姑凉带我们看的房，去的路上还有别人在旁边种田，进去后是一个老小区，里面别人住了大几年的那种，很破。房价是一万一平！小姑凉实话说了，之前那里没人来看，因为限购了，所以很多人跑这里买了，这里的价格就起来了。</p>
</li>
<li><p>第四套，是性价比最高的。在第二套的不远处，但是这个是中层，而且是毛坯，户型也还可以采光比较好，大小85平左右，小区物业一般。在楼上看了一下远处新建的一栋楼，问了下中介那么什么价，中介说均价差不多9000-10000，要收10万的茶水费才能买到，就是10万买一个购房名额，当时我们真是目瞪口呆，10万在老家可以付个首付了这里就是一个名额钱。</p>
</li>
</ul>
<p>思来想去，如果买的话最好的选择是第四套，但感觉缺点什么，没有生气还是比较远？父母比较忙也没有时间过来武汉，一直看房子为这事操心，都准备去中介所那里交定金了，一万的定金给预留房源，交了买可以低首付，不买是不能退的。思考了很久，我拉住父母说，我另一个同学也说要在武汉买房子，我参考一下他的意见。</p>
<p>另一个同学也在武汉工作，一个男生，之前和我们说想要在武汉买房，他对武汉应该很熟悉，就问了他很多情况，让他说汉口北是什么情况，建不建议买。他说汉口北有地铁，周边有很多批发市场，看起来还可以，但是离主城区远，周边也没有什么工作的地方，一切都比较虚。这么一说我心里就有点明白了，在回去的时候思考了很久该怎么办。最后灵光一现，干脆回武汉，这样对武汉也熟一些，知道买哪里好，在武汉先工作着，不行就两年后再买，买的很远也不能住没有意义。</p>
<p>然后，我就回武汉了。</p>
<h3 id="可以转户口了"><a href="#可以转户口了" class="headerlink" title="可以转户口了"></a>可以转户口了</h3><p>2017年8月份，听到一个房产中介朋友说可以转户口了！只要是大学生就可以！</p>
<p>当时不敢相信，还特地去东湖高新政务中心问了，武汉启动大学生留汉政策，可以办理！然后下个星期我就拿资料去办理了。</p>
<p>办理所需的资料：<br>[2017年9月1日 星期五 10:24 拍的照片]<br><img src="https://upload-images.jianshu.io/upload_images/1354448-f2572263dbab7a6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="所需资料"></p>
<p>然后很快拿到准迁证，之后回老家的户籍办理中心，将准迁证给工作人员，然后电脑操作一下在准迁证另一半上盖一个章，再回武汉到洪山区关东派出所将另一半准迁证给工作人员。等一两个月新的身份证下来就好了！</p>
<p>这时候我终于可以买主城区的房子了！比我预想的快了将近两年。</p>
<h3 id="江夏庙山保利海上五月花"><a href="#江夏庙山保利海上五月花" class="headerlink" title="江夏庙山保利海上五月花"></a>江夏庙山保利海上五月花</h3><blockquote>
<p>限购区看中的第一套房，严格来讲江夏不算主城区。</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-0d7c1e03c25176ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="保利海上五月花"></p>
<p>租房的时候遇到一个在我爱我家做房产中介的朋友。他在卖二手房，负责保利海上五月花，周末约他去看了一下那的房子。相对之前我看的房子好太多太多了，价格是11600元左右一平，因为是二手房有很多税加一起来差不多这个价，而且是临湖，可以睡到卧室能直接看到湖的哪一种，距离光谷转盘坐公交40-50分钟。没有看到比这还好的了，因为之前看的都比较差。</p>
<p>想买，后来发现我另一同学在武汉做中介，也是在我爱我家，负责另一片区。说可以讲中介费做到0.5%，正常的是2.5%，而且后期还有很多税是和中间评估商有关联的，评估的越高税越贵，他们可以做的低一点，这样算下来可以少几万！当然是找我那同学了，只能对不起那朋友了。</p>
<p>后来，过来这边看了好几次，总觉得还是不太好。第一，单价还是有点贵，第二，房间比较小，77平，两个小房间，两个人住还好，之后人多了不方便，不过当时的首付只有35w，所以大点的话了买不起。总的来说，基本满足我的需要。</p>
<h3 id="江夏庙山广信万汇城"><a href="#江夏庙山广信万汇城" class="headerlink" title="江夏庙山广信万汇城"></a>江夏庙山广信万汇城</h3><blockquote>
<p>江夏庙山地理位置最好的盘</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-0fbef38f53114a30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="广信万汇城"></p>
<p>父母过来准备交首付了，想带父母去房子里看一下，路过了《广信万汇城》。<br>显然那个盘比保利海上五月花好，新房而且地理位置好，旁边就是武昌理工学院。当时单价是9500元一平，算了下，就算交8万的茶水费买97平的和买保利海上五月花一样的价。何乐而不为，当时就定了广信万汇城！</p>
<p>10月份交了认筹资料就没有管了，因为交了茶水费可以说是稳了，大伙基本也知道怎么回事，说的是不交买不到的，没想到的是交了也买不到。</p>
<p>过了两个月，通知开盘，交了20w的认筹金，然后开盘后被告知没有搞到房子，开发商那边炸了，收了很多的茶水费，房子不够用了，大家都没有得到。被号称是全球最快秒光盘，全部内定，一进去选房系统全部秒红，事后很多人去销售中心拉横幅，我还被加入了好多的“广信万汇城退筹群”。这这一次开的是第二期，第三期定在2018年下旬了，没有请营销团队，全部内部售卖，可以说是非常厉害了！</p>
<p><a href="http://haokan.baidu.com/videoui/page/videoland?context=%7B%22nid%22%3A%22sv_8734269223388388804%22%7D" target="_blank" rel="external">秒光视频</a> - 说不定什么时候就没有了<br>—“垃圾，都被内定了，还收20万认凑金，收了一千多份，这样的开发商政府为什么不查？老百姓就这样被折腾没人管吗？大家现在需要的是真相，全部房拿出去收茶水费，还要骗这么多认凑，太过分了！”</p>
<p>之后同学推荐了中海光谷锦城，说的是双轨交汇，就是贵了点差不多四十几万的首付，给父母说了太贵就没作考虑。然后马上过年回家了，这年就没有买到。</p>
<h3 id="保利海上五月花最后一期"><a href="#保利海上五月花最后一期" class="headerlink" title="保利海上五月花最后一期"></a>保利海上五月花最后一期</h3><blockquote>
<p>在毛坯房绝迹时，保利海上五月花最后一期毛坯房推出了</p>
</blockquote>
<p>这次的政策很好，房产商的120平以下的房源，40%拿出来作为刚需选房(2018年6月1日后是60%)。<br>就是如果有100套120平以下的房，那么，就拿40套出来让刚需的先选择一次，没有选中再选择另外的房源。<br>评为刚需的条件是：在武汉没有房而且多少年内没有贷款记录。<br>由房管局将所有刚需的人摇号排序依次选房，保利海上五月花最后一期刚需房源有180套，我被摇到了90名，就是说我是第90人进去选房子的人，选一个少一套。</p>
<p>经过一定的思想斗争，我放弃了。之前一直想买的房子现在免费给我机会不要茶水费，毛坯，而且单价是9700元，这里的二手房价已经是12000元了，网上内定名额已经炒到10w一个人了。<br>这里的交通(2049年都没有规划地铁)，教育配套，生活配套都不行，仅有的好处是便宜。考虑到后期这里显然不是最佳的选择。</p>
<h3 id="安居客看房团"><a href="#安居客看房团" class="headerlink" title="安居客看房团"></a>安居客看房团</h3><blockquote>
<p>白沙洲线路：新力城、美好长江首玺、东原乐见城、中悦滨湖尚城、加州橘郡</p>
</blockquote>
<p>为了了解更多的房源，在安居客上报了一个白沙洲线路的看房团，这条线路的盘均价在12000左右。</p>
<ul>
<li>新力城、美好长江首玺性价比比较高，属于白沙洲，现在的周边环境不太适合居住，交通也基本没有，新力城都没有公交车到那里。不过周围已经规划地铁，相信以后会很好。</li>
<li>东原乐见城位置最好，在南湖，但价格也最高，首付60-70w，验资50w,装修不能贷款。周边有地铁并且已经开通，生活氛围也浓厚。</li>
<li>中悦滨湖尚城属于江夏，四环外了，距离地铁线也比较远，好处是周围有几个学校和一个腾讯大厦，居然叫出12500的高价，应该是距离江夏市政府比较近或其他缘故。</li>
<li>加州橘郡在江夏庙山，距离保利海上五月花比较近，自从经历了广信万汇城，觉得庙山其他的盘都看不上眼了。自带幼儿园小学，周边都是私立学校，置业说一年5w学费，一般人真的上不起，很多家长陪读的，出租到是很好。后期开盘人也是爆满。</li>
</ul>
<p>和公司的一个同事一起去看的，然后在路上遇到了一个一起看房的哥们，从他口中得知了《康桥知园》这个楼盘，说是价格适中，而且地理位置也可以，之前加过他们的置业，马上截止交资料了就把资料拍照发给了置业。</p>
<h3 id="康桥知园"><a href="#康桥知园" class="headerlink" title="康桥知园"></a>康桥知园</h3><blockquote>
<p>旁边楼盘有：招商东城华府和中海光谷锦城。</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-5022f3ca4c95ea7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="康桥知园"></p>
<ul>
<li>位置：位于东湖高新区佛祖岭地块，距离佛祖岭地铁站(2号线南延线最后一站)1.7km左右。旁边的中海和招商华府都属于江夏。</li>
<li>价格：郑州康桥集团拿的地，7200多一点，均价15500元，价格还能接受，周边的中海和招商华府都差不多是这个价，中海的地拿的是8300元左右，是江夏地王。首付将近50w。</li>
<li>配套：说的三轨交汇，2号线，9号线和有轨。2号线2019年1月份开通，有轨已经开通，9号线的站点会距离项目更近一些，不过是很久之后的事情了，也属于2期建设，不知道是何年何月。周边有很多学校，幼儿园小学初中高中都有，而且都可以上，隔壁的楼盘则不能。</li>
<li>小区规模：这个相对劣势，只有三栋楼288户卖完就没有了，不过小区的绿化楼间距可以，品质也比较好。</li>
</ul>
<p>武汉阿松的评价：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/SyXblCmku_cLlWiuqnwVEg" target="_blank" rel="external">武汉有这样一个盘 开发商竟然不以赚钱为目的？</a></li>
<li><a href="https://mp.weixin.qq.com/s/nIOGa-czOtIHORH5fL9Xew" target="_blank" rel="external">阿松楼书：康桥知园-光谷稀有品质房 所有房源一次性全部推出！</a></li>
<li><a href="https://mp.weixin.qq.com/s/nHzGNcE3X6YU48Ye_UzljA" target="_blank" rel="external">康桥知园VS中海光谷锦城！</a></li>
</ul>
<h3 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h3><blockquote>
<p>东湖高新 - 武汉东湖新技术开发区</p>
</blockquote>
<ul>
<li>有人评价东湖高新和汉阳：一个是高科技里搞住宅，一个是住宅里搞高科技。</li>
<li>如果说以前武汉的中心是汉口，那现在武汉的中心就是东湖高新。</li>
<li>光谷是宇宙中心，光谷东是上海，光谷南是广州，光谷西是成都，光谷北是北京。</li>
<li>一个与市政府平级的行政区</li>
</ul>
<p>不做多的解释了，看百度百科：</p>
<ul>
<li><a href="https://baike.baidu.com/item/%E6%AD%A6%E6%B1%89%E4%B8%9C%E6%B9%96%E6%96%B0%E6%8A%80%E6%9C%AF%E4%BA%A7%E4%B8%9A%E5%BC%80%E5%8F%91%E5%8C%BA" target="_blank" rel="external">武汉东湖新技术产业开发区</a></li>
<li><a href="https://mp.weixin.qq.com/s/-8xRVpfbmBE8wBUtv2blwg" target="_blank" rel="external">从0到518平方公里！武汉最牛X的区是如何炼成的？</a></li>
</ul>
<h3 id="贷款事项"><a href="#贷款事项" class="headerlink" title="贷款事项"></a>贷款事项</h3><blockquote>
<p>房贷 装修贷  利率：25%</p>
</blockquote>
<p>经过一系列操作，最终成功买到了康桥知园，总价160w左右，首付50w左右，房贷和装修贷是分开的。</p>
<ul>
<li>房贷：首套房30%(第二套50%)，招商，利率上浮25%，总贷款94w，还款30年。</li>
<li>装修贷：中行信用卡，贷款18w，还款8年。</li>
</ul>
<p>算在一起每月还款8k左右了，在武汉，房价现在这个价很正常，每月月供这个多，在武汉拿的工资很难还得起。除非装修款提前还完之后的生活就宽裕一点。</p>
<p>拿到房子后等通知去售楼部交贷款资料给相关银行审核，前提是我和我父母的收入(可以添加父母为共同还款人)加起来是贷款的2倍，就是一月1.6k。审核的细节很多，还要看父母的征信等，父母过来排了半天的队，半辈子的积蓄就给了首付钱，心里很难受。</p>
<p>给银行审核的时间差不多一个月左右，然后成功后去售楼部交首付，交完首付签购房合同，合同拿去给房管局盖章时间差不多也是一个月左右。然后房贷放款，售楼部拿到购房合同去中行放装修款，这个时间也将近大半个月吧。</p>
<p>最后等房贷和装修贷全部放款之后，就去售楼部拿的购房合同。</p>
<h3 id="落户及房产证"><a href="#落户及房产证" class="headerlink" title="落户及房产证"></a>落户及房产证</h3><blockquote>
<p>置业说的是90天之后可以拿购房合同去东湖高新政务服务中心办理房产证。</p>
</blockquote>
<p>听阿松讲。东湖高新这样的主城区需要100平米以上才能落户，其他的区有点不一样，面积可以小一点。<br>还没有办理房屋落户和房产证暂不多说。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>由最初的能买到，能住就好，到最后考虑到行政区、交通、教育、离上班的位置距离、周边商业、户型。这一年多的买房经历真是学到了不少，以前东南西北都分不清，现在因为要看房子的朝向都老熟了，房子朝南偏13度才是最佳朝向，而不是正朝南。</p>
<p>最辛苦的还是父母，首付钱基本是父母支持的，家里本不富裕，一个农村人在武汉买一套房是多不容易的事情，周围的小伙伴在武汉买房的毕竟还是少数，后期会更加努力争取过上更好的生活。</p>
<p>基本完。</p>
<blockquote>
<p>2018.6.13 00:41 夜深，下次更。<br>2018.6.13 22:51 基本结束</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;2018.6.12，今天刚领到了购房合同，从买房到现在已经一年多了，总算完成了一项一百多万的大买卖。总结一下这一年多买房的经历。&lt;/p&gt;
&lt;p&gt;很长的文字，建议&lt;del&gt;用时一个小时&lt;/del&gt;不要看。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://jingbin.me/categories/life/"/>
    
    
      <category term="life" scheme="http://jingbin.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>hexo permalink设置技巧</title>
    <link href="http://jingbin.me/2018/06/06/set-hexo-permalink/"/>
    <id>http://jingbin.me/2018/06/06/set-hexo-permalink/</id>
    <published>2018-06-06T15:25:20.000Z</published>
    <updated>2018-06-12T17:25:38.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前的文章有幸被鸿洋的公众号收录，文章内引用了博客中的一篇文章链接：<strong><a href="https://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/">https://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/</a></strong>；着实尴尬，因为默认生成的文章链接是<code>:year/:month/:day/:title/</code>，里面的汉字经过转义，导致了这样的结局。</p>
<a id="more"></a>
<h3 id="永久链接"><a href="#永久链接" class="headerlink" title="永久链接"></a>永久链接</h3><p>看一下<a href="https://hexo.io/zh-cn/docs/permalinks.html" target="_blank" rel="external">永久链接（Permalinks）</a>的解释，在站点的<code>_config.yml</code>中，生成的文章链接默认为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div></pre></td></tr></table></figure>
<p>因为<strong>title</strong>可能为中文，那生成的链接就可能为上面的情况，这时候我们希望自己在每篇文章的Front-matter中指定一个字段，然后替换<strong>title</strong>，这样就可以显示我们自己定义的url了，例如：</p>
<ul>
<li><code>permalink: :year/:month/:day/:urlname/</code></li>
<li><code>permalink: post/:urlname/</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">permalink: :year/:month/:day/:urlname/</div><div class="line"># 当没有urlname时显示什么,写上 :title 也没有用，会作为字符串处理</div><div class="line">permalink_defaults:</div><div class="line">  urlname: index</div></pre></td></tr></table></figure>
<p>因为之前文章的形式是<code>:year/:month/:day/:title/</code>，为了保留以前的文章阅读数，这里我使用第一种形式，然后在以前每篇文章的Front-matter中加上<strong>urlname</strong>，保持和以前的文章链接一致就可以了，例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 《Android群英传 神兵利器》读书笔记</div><div class="line">urlname: 《Android群英传-神兵利器》读书笔记</div><div class="line">date: <span class="number">2018</span>-<span class="number">02</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">16</span>:<span class="number">31</span></div><div class="line">tags:</div><div class="line">- Android</div><div class="line">- Books</div><div class="line">- 工具</div><div class="line">categories: Android</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：标题上的空格，有时候转义为“%20”，有时候则为“-”。其他的特殊字符也要注意，不然和以前的文章就不是一个链接了！</p>
</blockquote>
<p>为了每次<code>hexo new “my new blog title”</code>时就有<strong>urlname</strong>字段，我们可以在<code>scaffolds/post.md</code>里配上这个字段，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">urlname: </div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">categories:</div><div class="line">---</div></pre></td></tr></table></figure>
<p>这样生成的链接形式就是这样了：<a href="https://jingbin.me/2018/06/06/set-hexo-permalink/">https://jingbin.me/2018/06/06/set-hexo-permalink/</a></p>
<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><ul>
<li>修改站点文件<code>_config.yml</code>中的<strong>permalink</strong>： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">permalink: :year/:month/:day/:urlname/</div><div class="line">permalink_defaults:</div><div class="line">  urlname: index</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>在<code>scaffolds/post.md</code>里配上<strong>urlname</strong>字段：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">urlname: </div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">categories:</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="hexo遇到的问题"><a href="#hexo遇到的问题" class="headerlink" title="hexo遇到的问题"></a>hexo遇到的问题</h3><h4 id="hexo-d卡很久"><a href="#hexo-d卡很久" class="headerlink" title="hexo d卡很久"></a>hexo d卡很久</h4><p>之前遇到的一个问题，折磨了几天，和这篇文章无关，现记录在这里：<br>用<code>hexo d</code>命令部署的时候总是会卡住很久，只用<code>hexo d -debug</code>查看日志发现信息一直在循环：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">▶ hexo d -debug</div><div class="line">INFO  Start processing</div><div class="line">INFO  Files loaded in <span class="number">620</span> ms</div><div class="line">INFO  Start processing</div><div class="line">INFO  Files loaded in <span class="number">342</span> ms</div><div class="line">...</div><div class="line">INFO  Start processing</div><div class="line">INFO  Files loaded in <span class="number">274</span> ms</div><div class="line">INFO  <span class="number">0</span> files generated in <span class="number">381</span> ms</div><div class="line">INFO  Start processing</div><div class="line">^C  </div><div class="line">Bye!</div></pre></td></tr></table></figure>
<p>这里和另一个使用hexo的人情况一致，<a href="http://duanyifu.com/2016/08/23/hexo-deploy-problem/" target="_blank" rel="external">hexo deploy 命令卡住的奇怪问题</a>，参考他的解决方法还是没有解决，估计每个人产生的原因可能不一致，最后<code>删除db.json 文件</code>才好了。</p>
<h4 id="debug预览错误提示"><a href="#debug预览错误提示" class="headerlink" title="debug预览错误提示"></a>debug预览错误提示</h4><blockquote>
<p>TypeError: The header content contains invalid characters</p>
</blockquote>
<p>网上有说是链接上有中文的原因，不过是2016年的了。</p>
<p>我的是使用了<code>![图片](图片)</code>这样的文本，本想做一个占位然后后期补上的，不过加上这个会导致错误！</p>
<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><ul>
<li><a href="https://jingbin.me/2016/11/19/Mac%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95%EF%BC%8C%E6%8E%92%E9%9B%B7%E5%AE%8C%E6%88%90/">Mac搭建Hexo博客流程记录，排雷完成</a></li>
<li><a href="http://www.wuliaole.com/post/permalink_and_internal_link_in_hexo/" target="_blank" rel="external">HEXO的站内链接和永久链接</a></li>
<li><a href="http://luanlouis.com/big-front-end/build-perfect-url-in-hexo.html" target="_blank" rel="external">在hexo博客中打造相对完美的URL</a></li>
<li><a href="http://www.cnblogs.com/donglegend/p/5821052.html" target="_blank" rel="external">hexo问题篇(偶尔抽抽疯)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;之前的文章有幸被鸿洋的公众号收录，文章内引用了博客中的一篇文章链接：&lt;strong&gt;&lt;a href=&quot;https://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/&quot;&gt;https://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/&lt;/a&gt;&lt;/strong&gt;；着实尴尬，因为默认生成的文章链接是&lt;code&gt;:year/:month/:day/:title/&lt;/code&gt;，里面的汉字经过转义，导致了这样的结局。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://jingbin.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://jingbin.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>一次面试题的简单整理</title>
    <link href="http://jingbin.me/2018/05/27/%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%B4%E7%90%86/"/>
    <id>http://jingbin.me/2018/05/27/一次面试题的简单整理/</id>
    <published>2018-05-26T16:35:00.000Z</published>
    <updated>2018-06-06T15:45:08.857Z</updated>
    
    <content type="html"><![CDATA[<p>牛客网：<a href="https://www.nowcoder.com/9070733" target="_blank" rel="external">https://www.nowcoder.com/9070733</a><br><a id="more"></a></p>
<h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><p>1、广播的注册方式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--广播注册--&gt;  </div><div class="line">   &lt;receiver android:name=".SmsBroadCastReceiver"&gt;  </div><div class="line">       &lt;intent-filter android:priority="20"&gt;  </div><div class="line">          &lt;action android:name="android.provider.Telephony.SMS_RECEIVED"/&gt;  </div><div class="line">       &lt;/intent-filter&gt;  </div><div class="line">   &lt;/receiver&gt;</div></pre></td></tr></table></figure>
<hr>
<p>2、android 关于service生命周期的onCreate()和onStart()说法正确的是?(<a href="https://www.nowcoder.com/questionTerminal/ed1d86767b314513916228a38014789f?from=14pdf" target="_blank" rel="external">AD</a>)</p>
<ul>
<li>A.当第一次启动的时候先后调用onCreate()和onStart()方法</li>
<li>B.当第一次启动的时候只会调用onCreate()方法</li>
<li>C.如果service已经启动，将先后调用onCreate()和onStart()方法</li>
<li>D.如果service已经启动，只会执行onStart()方法，不在执行onCreate()方法</li>
</ul>
<p><img src="https://uploadfiles.nowcoder.net/images/20161103/7327747_1478142515011_5191CAD3158E038AE9D09ED7CF1D5165" alt=""></p>
<hr>
<p>3.在android中使用Menu时可能需要重写的方法有?（<a href="https://www.nowcoder.com/questionTerminal/9a4add5a37434be0a5f28e5c371609be" target="_blank" rel="external">AC</a>）</p>
<ul>
<li>A.onCreateOptionsMenu()</li>
<li>B.onCreateMenu()</li>
<li>C.onOptionsItemSelected()</li>
<li>D.onItemSelected()</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;  </div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.  </span></div><div class="line">        getMenuInflater().inflate(R.menu.activity_main, menu);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        <span class="keyword">switch</span>(item.getItemId())&#123;  </div><div class="line">           <span class="keyword">case</span> R.id.menu_about:             </div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">""</span>+<span class="string">"关于"</span>, Toast.LENGTH_SHORT).show();  </div><div class="line">               <span class="keyword">break</span>;  </div><div class="line">           <span class="keyword">case</span> R.id.menu_settings:  </div><div class="line">                 </div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">""</span>+<span class="string">"设置"</span>, Toast.LENGTH_SHORT).show();  </div><div class="line">               <span class="keyword">break</span>;  </div><div class="line">           <span class="keyword">case</span> R.id.menu_quit:  </div><div class="line">                 </div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">""</span>+<span class="string">"退出"</span>, Toast.LENGTH_SHORT).show();  </div><div class="line">               <span class="keyword">break</span>;  </div><div class="line">           <span class="keyword">default</span>:  </div><div class="line">               <span class="keyword">break</span>;  </div><div class="line">           &#125;  </div><div class="line"><span class="comment">//         Toast.makeText(MainActivity.this, ""+item.getItemId(), Toast.LENGTH_SHORT).show();  </span></div><div class="line">      </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<p>4.android中下列属于intent的作用是(<a href="https://www.nowcoder.com/questionTerminal/e261e82aee5248d2939f251318ae11c4" target="_blank" rel="external">C</a>)</p>
<ul>
<li>A.实现应用程序间的数据共享</li>
<li>B.是一段长的生命周期，没有用户界面的程序，可以保持应用在后台运行，而不会因为切换页面而消失</li>
<li>C.可以实现界面间的切换，可以包含动作和动作数据，连接四大组件的纽带</li>
<li>D.处理一个应用程序整体性的工作</li>
</ul>
<blockquote>
<p>不同activity间的数据共享</p>
</blockquote>
<hr>
<p>5.如果在Activity中对一些资源以及状态进行保存操作，最好是在生命周期的哪个函数中进行呢？（A）</p>
<ul>
<li>A.onPause()</li>
<li>B.onCreat()</li>
<li>C.onResume()</li>
<li>D.onStart() </li>
</ul>
<blockquote>
<p>暂停的时候保存。在onPause()时候保存状态，才能保存用户最终的使用状态。</p>
</blockquote>
<hr>
<p>6.android 工程最后生成的工程文件是？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app\build\intermediates文件夹里是也</div><div class="line">intermediates：是一个中间人，调节人的意思，</div><div class="line">java源文件转为class文件后再转为dex文件，最后生成apk</div><div class="line">这里面class文件夹就被存放在intermediates文件夹里面</div></pre></td></tr></table></figure>
<h3 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h3><p>1.android常用的五种布局FrameLayout(框架布局)，LinearLayout(线性布局)，RelativeLayout(相对布局)，AbsoluteLayout(绝对布局)，TableLayout(表格布局)</p>
<hr>
<p>2.Android四大基本组件分别是Activity，Service服务,Content Provider内容提供者，BroadcastReceiver广播接收器。</p>
<hr>
<p>3.android 中 service 的实现方法是： <strong><strong><em>__</em></strong></strong> 和 <strong><strong><strong>_</strong></strong></strong> 。<br>start 和 bind</p>
<hr>
<p>4.Android的系统体系结构分为四层，自顶向下分别是</p>
<ul>
<li>应用程序(Applications)</li>
<li>应用程序框架(Application Frameworks)</li>
<li>系统运行库与Android运行环境(Libraris &amp; Android Runtime)</li>
<li>Linux内核(Linux Kernel)</li>
</ul>
<hr>
<p>5.AsyncTask是什么？AsyncTask的使用方法？<br>android的类AsyncTask对线程间通讯进行了包装，提供了简易的编程方式来使后台线程和UI线程进行通讯：后台线程执行异步任务，并把操作结果通知UI线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt;</span>&#123;  </div><div class="line">        <span class="comment">//后面尖括号内分别是参数（例子里是线程休息时间），进度(publishProgress用到)，返回值 类型  </span></div><div class="line">          </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="comment">//第一个执行方法  </span></div><div class="line">            <span class="keyword">super</span>.onPreExecute();  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;  </div><div class="line">            <span class="comment">//第二个执行方法,onPreExecute()执行完后执行  </span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;  </div><div class="line">                pb.setProgress(i);  </div><div class="line">                publishProgress(i);  </div><div class="line">                <span class="keyword">try</span> &#123;  </div><div class="line">                    Thread.sleep(params[<span class="number">0</span>]);  </div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">return</span> <span class="string">"执行完毕"</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progress)</span> </span>&#123;  </div><div class="line">            <span class="comment">//这个函数在doInBackground调用publishProgress时触发，虽然调用时只有一个参数  </span></div><div class="line">            <span class="comment">//但是这里取到的是一个数组,所以要用progesss[0]来取值  </span></div><div class="line">            <span class="comment">//第n个参数就用progress[n]来取值  </span></div><div class="line">            tv.setText(progress[<span class="number">0</span>]+<span class="string">"%"</span>);  </div><div class="line">            <span class="keyword">super</span>.onProgressUpdate(progress);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;  </div><div class="line">            <span class="comment">//doInBackground返回时触发，换句话说，就是doInBackground执行完后触发  </span></div><div class="line">            <span class="comment">//这里的result就是上面doInBackground执行后的返回值，所以这里是"执行完毕"  </span></div><div class="line">            setTitle(result);  </div><div class="line">            <span class="keyword">super</span>.onPostExecute(result);  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://allenwu.itscoder.com/Arts-Development-of-Android-11-1" target="_blank" rel="external">AsyncTask 的使用方法和工作原理</a></p>
</blockquote>
<hr>
<p>6.什么是AIDL？AIDL是如何工作的？</p>
<blockquote>
<p>AIDL: Android Interface Definition Language</p>
</blockquote>
<p>AIDL是一种IDL语言，用于生成可以在Android设备上两个进程之间进行进程间通信(interprocess communication, IPC)的代码。如果在一个进程中（例如Activity）要调用另一个进程中（例如Service）对象的操作，就可以使用AIDL生成可序列化的参数。</p>
<p>AIDL是一种接口定义语言，用于生成可在Android设备上两个进程之间进行进程间通信(IPC)的代码。<br>高度概括AIDL的用法，就是服务端里有一个Service，给与之绑定(bindService)的特定客户端进程提供Binder对象。客户端通过AIDL接口的静态方法asInterface 将Binder对象转化成AIDL接口的代理对象，通过这个代理对象就可以发起远程调用请求了。</p>
<blockquote>
<p>引：<a href="https://blog.csdn.net/tellh/article/details/55100167" target="_blank" rel="external">https://blog.csdn.net/tellh/article/details/55100167</a></p>
</blockquote>
<hr>
<p>7.Android中如何避免OOM异常？</p>
<blockquote>
<p>Java.lang.OutOfMemoryError : bitmap size exceeds VM budget。</p>
</blockquote>
<p>OOM 内存溢出，想要避免OOM 异常首先我们要知道什么情况下会导致OOM 异常。<br>1、图片过大导致OOM<br>2、界面切换导致OOM<br>3、在页面切换时尽可能少地重复使用一些代码<br>3、查询数据库没有关闭游标<br>4、构造Adapter 时，没有使用缓存的convertView<br>5、Bitmap 对象不再使用时调用recycle()释放内存<br>6、其他<br>Android 应用程序中最典型的需要注意释放资源的情况是在Activity 的生命周期中，在onPause()、onStop()、onDestroy()方法中需要适当的释放资源的情况。使用广播没有注销也会产生OOM。</p>
<blockquote>
<p><a href="https://blog.csdn.net/jiayi_yao/article/details/51107960" target="_blank" rel="external">https://blog.csdn.net/jiayi_yao/article/details/51107960</a></p>
</blockquote>
<hr>
<p>8.什么是ANR 如何避免它？</p>
<blockquote>
<p>ANR：Application Not Responding</p>
</blockquote>
<p>不同的组件发生ANR的时间不一样，Activity是5秒，BroadCastReceiver是10秒，Service是20秒。<br>解决方案：<br>1、将所有耗时操作，比如访问网络，Socket 通信，查询大量SQL 语句，复杂逻辑计算等都放在子线程中去，然后通过handler.sendMessage、runonUITread、AsyncTask 等方式更新UI，以确保用户界面操作的流畅度。<br>2、如果耗时操作需要让用户等待，那么可以在界面上显示进度条。</p>
<blockquote>
<p><a href="https://blog.csdn.net/m_xiaoer/article/details/62438802" target="_blank" rel="external">https://blog.csdn.net/m_xiaoer/article/details/62438802</a></p>
</blockquote>
<hr>
<hr>
<p>9.NDK 与 JNI 是什么？</p>
<blockquote>
<p>JNI: Java Native Interface，即 Java本地接口<br>NDK: Native Development Kit，是 Android的一个工具开发包 </p>
</blockquote>
<p>JNI介绍<br>定义：Java Native Interface，即 Java本地接口<br>作用： 使得Java 与 本地其他类型语言（如C、C++）交互<br>即在 Java代码 里调用 C、C++等语言的代码 或 C、C++代码调用 Java 代码</p>
<p>特别注意：<br>JNI是 Java 调用 Native 语言的一种特性<br>JNI 是属于 Java 的，与 Android 无直接关系</p>
<p>实现步骤:<br>1.在Java中声明Native方法（即需要调用的本地方法）<br>2.编译上述 Java源文件javac（得到 .class文件）<br>3.通过 javah 命令导出JNI的头文件（.h文件）<br>使用 Java需要交互的本地代码 实现在 Java中声明的Native方法<br>如 Java 需要与 C++ 交互，那么就用C++实现 Java的Native方法<br>4.编译.so库文件<br>5.通过Java命令执行 Java程序，最终实现Java调用本地代码</p>
<p>NDK介绍<br>定义：Native Development Kit，是 Android的一个工具开发包<br>NDK是属于 Android 的，与Java并无直接关系</p>
<p>作用：快速开发C、 C++的动态库，并自动将so和应用一起打包成 APK<br>即可通过 NDK在 Android中 使用 JNI与本地代码（如C、C++）交互</p>
<blockquote>
<p><a href="https://blog.csdn.net/carson_ho/article/details/73250163" target="_blank" rel="external">https://blog.csdn.net/carson_ho/article/details/73250163</a></p>
</blockquote>
<hr>
<p>10.Android Fragment 生命周期图</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-99a43b3f7496fa2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Fragment生命周期图.png"></p>
<p>fragments的大部分状态都和activitie很相似，但fragment有一些新的状态。</p>
<p>onAttached() —— 当fragment被加入到activity时调用（在这个方法中可以获得所在的activity）。<br>onCreateView() —— 当activity要得到fragment的layout时，调用此方法，fragment在其中创建自己的layout(界面)。<br>onActivityCreated() —— 当activity的onCreated()方法返回后调用此方法<br>onDestroyView() —— 当fragment中的视图被移除的时候，调用这个方法。<br>onDetach() —— 当fragment和activity分离的时候，调用这个方法。</p>
<p>一旦activity进入resumed状态（也就是running状态），你就可以自由地添加和删除fragment了。因此，只有当activity在resumed状态时，fragment的生命周期才能独立的运转，其它时候是依赖于activity的生命周期变化的。</p>
<blockquote>
<p><a href="http://www.cnblogs.com/purediy/p/3276545.html" target="_blank" rel="external">http://www.cnblogs.com/purediy/p/3276545.html</a></p>
</blockquote>
<hr>
<p>11.Android5.0和6.0之后有哪些新控件？<br>Android5.0和6.0之后新增的控件，在项目中使用的时候，可分为三大类：</p>
<ul>
<li><p>1、第一类是内核提供的控件，位于SDK的android.jar中。<br>这个与系统版本有关，每个版本的android.jar是固定的，有在该内核中定义的控件才能正常调用，没在内核中定义的控件在运行时会扔出类找不到的异常。比如水波图形RippleDrawable和矢量图形VectorDrawable，这两个控件在Android5.0之后的系统内核中提供，所以只有系统版本不低于5.0的手机才能使用它们，运行4.*系统的手机是无法正常调用这两个控件的。</p>
</li>
<li><p>2、第二类是v4兼容库提供的控件，位于SDK的android-support-v4.jar中。<br>v4库默认会被编译进App的安装包，所以它不需要系统内核支持，可直接运行在4.0之后的所有系统上，并且App工程无需手工导入v4库。使用v4控件唯一需要注意的地方，是布局文件中要引用完整路径的控件名称，如抽屉布局android.support.v4.widget.DrawerLayout、下拉刷新布局android.support.v4.widget.SwipeRefreshLayout等等。</p>
</li>
<li><p>3、第三类是v7兼容库和design库，它们有各自的库工程，开发者要在App工程中手工导入用到的兼容库。<br>v7与design库导入App工程后，编译出来的App即可兼容4.*的系统。使用v7与design库的控件，类似于使用自定义控件，不但要在布局文件中引用完整路径的控件名称，还要在根布局声明命名空间（即添加属性<code>xmlns:app=http://schemas.android.com/apk/res-auto</code>），然后方可使用这些控件的自定义属性。这部分控件数量最多，实现的界面特效最丰富，而且互相之间存在依赖关系，如design库依赖于appcompat-v7库，部分design控件如NavigationView还依赖于recyclerview-v7库，所以若要正确使用design库的控件，往往得同时导入好几个相关的兼容库。</p>
</li>
</ul>
<blockquote>
<p><a href="https://blog.csdn.net/aqi00/article/details/59108336" target="_blank" rel="external">https://blog.csdn.net/aqi00/article/details/59108336</a></p>
</blockquote>
<h3 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h3><p>1.<a href="https://blog.csdn.net/zhangke3016/article/details/75923323" target="_blank" rel="external">写一个自己的Handler，对消息进行处理</a></p>
<hr>
<p>2.写一个冒泡排序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bubbleSort</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span>	<span class="title">bubbleSort</span><span class="params">()</span></span>&#123;</div><div class="line">	 <span class="keyword">int</span> a[]=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</div><div class="line">	<span class="keyword">int</span> temp=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-<span class="number">1</span>-i;j++)&#123;</div><div class="line">		<span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</div><div class="line">			temp=a[j];</div><div class="line">			a[j]=a[j+<span class="number">1</span>];</div><div class="line">			a[j+<span class="number">1</span>]=temp;</div><div class="line">		&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</div><div class="line">		System.out.println(a[i]);	</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>3.快速排序<br>基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">quickSort</span> </span>&#123;</div><div class="line"></div><div class="line">inta[]=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">quickSort</span><span class="params">()</span></span>&#123;</div><div class="line">    quick(a);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</div><div class="line">       System.out.println(a[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;   </div><div class="line">            <span class="keyword">int</span> tmp = list[low];    <span class="comment">//数组的第一个作为中轴   </span></div><div class="line">            <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">                <span class="keyword">while</span> (low &lt; high &amp;&amp; list[high] &gt;= tmp) &#123;   </div><div class="line">                    high--;   </div><div class="line">                &#125;   </div><div class="line">                list[low] = list[high];   <span class="comment">//比中轴小的记录移到低端   </span></div><div class="line">                <span class="keyword">while</span> (low &lt; high &amp;&amp; list[low] &lt;= tmp) &#123;   </div><div class="line">                    low++;   </div><div class="line">                &#125;</div><div class="line">                list[high] = list[low];   <span class="comment">//比中轴大的记录移到高端   </span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">           list[low] = tmp;              <span class="comment">//中轴记录到尾   </span></div><div class="line">           <span class="keyword">return</span> low;                   <span class="comment">//返回中轴的位置   </span></div><div class="line">        &#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_quickSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;   </div><div class="line">            <span class="keyword">if</span> (low &lt; high) &#123;</div><div class="line">               <span class="keyword">int</span> middle = getMiddle(list, low, high);  <span class="comment">//将list数组进行一分为二</span></div><div class="line">                _quickSort(list, low, middle - <span class="number">1</span>);        <span class="comment">//对低字表进行递归排序</span></div><div class="line">               _quickSort(list, middle + <span class="number">1</span>, high);       <span class="comment">//对高字表进行递归排序</span></div><div class="line">            &#125;   </div><div class="line">        &#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] a2)</span> </span>&#123;   </div><div class="line">            <span class="keyword">if</span> (a2.length &gt; <span class="number">0</span>) &#123;    <span class="comment">//查看数组是否为空   </span></div><div class="line">                _quickSort(a2, <span class="number">0</span>, a2.length - <span class="number">1</span>);   </div><div class="line">        &#125;   </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://blog.csdn.net/pzhtpf/article/details/7560294" target="_blank" rel="external">https://blog.csdn.net/pzhtpf/article/details/7560294</a></p>
</blockquote>
<h3 id="kotlin了解一下"><a href="#kotlin了解一下" class="headerlink" title="kotlin了解一下"></a>kotlin了解一下</h3><p><a href="https://kotlintc.com/" target="_blank" rel="external">kotlin中国</a><br><img src="https://upload-images.jianshu.io/upload_images/1354448-26afa9803cdfc340.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kotlin.jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;牛客网：&lt;a href=&quot;https://www.nowcoder.com/9070733&quot;&gt;https://www.nowcoder.com/9070733&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="面试" scheme="http://jingbin.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android 水波纹效果的探究</title>
    <link href="http://jingbin.me/2018/05/20/Android%20%E6%B0%B4%E6%B3%A2%E7%BA%B9%E6%95%88%E6%9E%9C%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
    <id>http://jingbin.me/2018/05/20/Android 水波纹效果的探究/</id>
    <published>2018-05-20T14:48:31.000Z</published>
    <updated>2018-12-07T14:43:42.608Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1354448-8f11f2c691d43da9.gif?imageMogr2/auto-orient/strip" alt="长按水波纹扩展效果"></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>水波纹效果从Android5.0就已经出来了，基本的使用相信大家都知道了，这里多谈一些相对深层次的使用：</p>
<ul>
<li>1、基本使用</li>
<li>2、水波纹效果与布局绘制之间的问题</li>
<li>3、长按水波纹扩散效果</li>
<li>4、Button点击的水波纹效果</li>
</ul>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="系统自带水波纹实现方式"><a href="#系统自带水波纹实现方式" class="headerlink" title="系统自带水波纹实现方式"></a>系统自带水波纹实现方式</h3><h4 id="有界水波纹"><a href="#有界水波纹" class="headerlink" title="有界水波纹"></a>有界水波纹</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background=<span class="string">"?android:attr/selectableItemBackground"</span></div></pre></td></tr></table></figure>
<h4 id="无界水波纹"><a href="#无界水波纹" class="headerlink" title="无界水波纹"></a>无界水波纹</h4><blockquote>
<p>以控件宽高中最大的数值作为水波纹效果所在正方形的边界进行绘制</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background=<span class="string">"?android:attr/selectableItemBackgroundBorderless"</span></div></pre></td></tr></table></figure>
<h3 id="自定义水波纹实现方式"><a href="#自定义水波纹实现方式" class="headerlink" title="自定义水波纹实现方式"></a>自定义水波纹实现方式</h3><h4 id="无界水波纹-1"><a href="#无界水波纹-1" class="headerlink" title="无界水波纹"></a>无界水波纹</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line">&lt;ripple xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">android:color="@color/colorAccent"&gt; </div><div class="line">&lt;/ripple&gt;</div></pre></td></tr></table></figure>
<h4 id="有界水波纹-1"><a href="#有界水波纹-1" class="headerlink" title="有界水波纹"></a>有界水波纹</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;ripple xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:color="@color/itemBackground"&gt;</div><div class="line">    &lt;item &gt;</div><div class="line">        &lt;color android:color="@android:color/white" /&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/ripple&gt;</div></pre></td></tr></table></figure>
<h2 id="水波纹效果与布局绘制之间的问题"><a href="#水波纹效果与布局绘制之间的问题" class="headerlink" title="水波纹效果与布局绘制之间的问题"></a>水波纹效果与布局绘制之间的问题</h2><p><img src="https://upload-images.jianshu.io/upload_images/1354448-37ff47faeefa1837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>在使用了以上的<strong>自定义有界水波纹点击效果</strong>后，使用[开发者选项 - 调试GPU过渡绘制]得到下面的视图<br><img src="https://upload-images.jianshu.io/upload_images/1354448-d64a1d0d128a14f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自定义有界水波纹"></p>
<p>对比后，发现绿色的文字部分经过了二重绘制，因为布局的白色背景和文字自身颜色的原因。如果布局背景能去掉还能实现水波纹的效果就好了，这样就只有文字一层的颜色。</p>
<h3 id="有两种方案可以达到想要的这种效果："><a href="#有两种方案可以达到想要的这种效果：" class="headerlink" title="有两种方案可以达到想要的这种效果："></a>有两种方案可以达到想要的这种效果：</h3><p>1、使用系统自带有界水波纹实现方式，因为系统本身的默认背景是透明色的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background=<span class="string">"?android:attr/selectableItemBackground"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>系统的默认水波纹颜色是灰色，如果需要使用对应的高亮色来作为ripple的背景色，我们可以在<code>styles-v21</code>系统主题里加入这个：<code>&lt;item name = &quot;android:colorControlHighlight&quot;&gt;@color/colorAccent&lt;/item&gt;</code></p>
</blockquote>
<p>2、使用自定义有界水波纹效果，使其默认背景色为透明色。<br>写法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;ripple xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:color="@color/itemBackground"&gt;</div><div class="line">    &lt;item android:id="@android:id/mask"&gt;</div><div class="line">        &lt;color android:color="@android:color/white" /&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/ripple&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>添item时，如果<strong><em>指定id为@android:id/mask</em></strong>，那么不点击时不会显示出该item指定的color。<br>可以设置指定子层item的android:id=”@android:id/mask”来设定当前Ripple的Mask。<br>Mask的内容并不会被绘制到屏幕上，它的作用是限定Ripple效果的绘制区域。</p>
</blockquote>
<p>最后可以得到我们想要的效果：<br><img src="https://upload-images.jianshu.io/upload_images/1354448-9200fb6b1432db62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="长按水波纹扩散效果"><a href="#长按水波纹扩散效果" class="headerlink" title="长按水波纹扩散效果"></a>长按水波纹扩散效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/1354448-8f11f2c691d43da9.gif?imageMogr2/auto-orient/strip" alt="长按水波纹扩展效果"></p>
<p>在使用小红书时，我们可以看到关于“笔记”的item长按会展示扩散的效果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:foreground=<span class="string">"?attr/selectableItemBackgroundBorderless"</span></div></pre></td></tr></table></figure></p>
<p>又或者，无边界的水波纹也可以达到长按扩散的效果，只是它会超出边界，那我们就在对应的父布局加一层有边界的水波纹背景即可。就像这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:background="?attr/selectableItemBackground"&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">            android:onClick="@&#123;()-&gt;adapter.openDetail(bean)&#125;"</div><div class="line">            android:padding="8dp"&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>两者的区别是：长按扩散时，前者的水波纹会在图片之上，而后者在图片之下。</p>
</blockquote>
<h2 id="Button点击的水波纹效果"><a href="#Button点击的水波纹效果" class="headerlink" title="Button点击的水波纹效果"></a>Button点击的水波纹效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/1354448-5d195c450d541d19.gif?imageMogr2/auto-orient/strip" alt="button阴影与点击效果"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    style=<span class="string">"@style/Widget.AppCompat.Button.Colored"</span></div><div class="line">    android:layout_width=<span class="string">"0dp"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:layout_marginLeft=<span class="string">"20dp"</span></div><div class="line">    android:layout_weight=<span class="string">"1"</span></div><div class="line">    android:onClick=<span class="string">"login"</span></div><div class="line">    android:text=<span class="string">"登陆"</span></div><div class="line">    android:textColor=<span class="string">"@android:color/white"</span></div><div class="line">    android:textStyle=<span class="string">"bold"</span> /&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>The Widget.AppCompat.Button.Colored 继承了 Widget.AppCompat.Button style并且根据你选择的主题应用最接近的颜色。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.cnblogs.com/baiqiantao/p/8b57d809d212be6301bf5af850c115c7.html" target="_blank" rel="external">Ripple 水波纹效果</a></li>
<li><a href="https://blog.csdn.net/u012702547/article/details/52325418" target="_blank" rel="external">聊聊Android5.0中的水波纹效果</a></li>
<li><a href="https://www.jianshu.com/p/c29cfd89cb52" target="_blank" rel="external">解决点击ripple水波纹无效的问题</a></li>
<li><a href="https://www.jianshu.com/p/66c6a97a8d80" target="_blank" rel="external">UI之修改Button颜色保持默认点击效果</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-8f11f2c691d43da9.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;长按水波纹扩展效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="Android基础知识点" scheme="http://jingbin.me/tags/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>性能优化之布局优化记录</title>
    <link href="http://jingbin.me/2018/05/17/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%95/"/>
    <id>http://jingbin.me/2018/05/17/性能优化之布局优化记录/</id>
    <published>2018-05-17T08:44:31.000Z</published>
    <updated>2018-06-06T15:48:02.991Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1354448-37ff47faeefa1837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gpu绘制"></p>
<p>做开发时间长了之后，收集后台的bug，发现很多都是OOM(Out Of Memory Killer)。性能优化这时候成为了重点，下面是自己项目中布局优化的记录，希望对大家有所帮助。</p>
<a id="more"></a>
<h3 id="父布局"><a href="#父布局" class="headerlink" title="父布局"></a>父布局</h3><ul>
<li>对于ViewGroup的选择问题：推荐FrameLayout &gt; LinearLayout &gt; RelativeLayout(为了优化布局，RelativeLayout会调用childrenView 的onMeasure()两次)，推荐阅读：<a href="https://www.jianshu.com/p/8a7d059da746" target="_blank" rel="external">LinearLayout与RelativeLayout的性能比较</a></li>
<li>尽量不要嵌套使用RelativeLayout.</li>
<li>尽量不要在嵌套的LinearLayout中都使用weight属性.</li>
<li>避免使用多重布局嵌套，层级能少就少</li>
<li>善用TextView的Drawable减少布局层级</li>
</ul>
<h3 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h3><ul>
<li>去掉多余的布局背景色，比如ScrollView包裹的内容分为两段，第一段使用的是<code>match_parent</code>的宽，第二段是文字，只需要给文字部分加背景，则背景色属性就放在文字部分的节点属性里。</li>
<li>RecyclerView及ViewPager等外部容器最好不要使用背景色，如果内容有背景色会导致重叠</li>
<li>selector可使用系统自带的点击效果<code>android:background=&quot;?attr/selectableItemBackground&quot;</code>，因为初始值为透明色，不会重绘。如果需要使用对应的高亮色来作为ripple的背景色，那么就需要在styles-v21里面加这个加入：<br><code>&lt;item name = &quot;android:colorControlHighlight&quot;&gt;@color/colorAccent&lt;/item&gt;</code></li>
<li>注：Navigation的background会影响4.4系统的状态栏</li>
<li>CardView会自动加一层背景色</li>
<li><code>ripple</code>里的默认颜色为<item>标签下设置，如果设置多个重复的<item>会导致多重绘制。</item></item></li>
<li><code>ripple</code>里如要设置默认色为透明色，因为设置透明色不会导致重新绘制。直接设置<code>color=&quot;@android:color/transparent&quot;</code>点击会没有效果，加上一个掩码<item android:id="@android:id/mask">就好了</item></li>
<li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;ripple xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:color="@color/itemBackground"&gt;</div><div class="line">    &lt;item android:id="@android:id/mask"&gt;</div><div class="line">        &lt;color android:color="@android:color/white" /&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/ripple&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Mask层(Mask Layer):<br>可以设置指定子层item的android:id=”@android:id/mask”来设定当前Ripple的Mask。<br>Mask的内容并不会被绘制到屏幕上，它的作用是限定Ripple效果的绘制区域。<br>mask所在的的子层限制了Ripple效果的最大范围只能是View的边界，不会扩散到父组件。</p>
</blockquote>
<h3 id="布局优化标签"><a href="#布局优化标签" class="headerlink" title="布局优化标签"></a>布局优化标签</h3><p>1、<code>&lt;include&gt;</code>：常用于将布局中的公共部分提取出来供其他layout共用，以实现布局模块化，这在布局编写方便提供了大大的便利。</p>
<p>2、<code>&lt;viewstub&gt;</code>：viewstub标签同include标签一样可以用来引入一个外部布局，不同的是，viewstub引入的布局默认不会扩张，即既不会占用显示也不会占用位置，从而在解析layout时节省cpu和内存。<br>viewstub常用来引入那些默认不会显示，只在特殊情况下显示的布局，如进度布局、网络失败显示的刷新布局、信息出错出现的提示布局等。<br>比较直观的感觉是：在设置里打开显示布局边界后，如果不是使用<code>&lt;viewstub&gt;</code>标签，<code>GONE</code>掉后，<strong>加载中的布局</strong>还是会有颜色显示，而使用了此标签后颜色会消失。</p>
<table>
<thead>
<tr>
<th style="text-align:center">使用前</th>
<th style="text-align:center">使用后</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://upload-images.jianshu.io/upload_images/1354448-9eabb8928ef612f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用前"></td>
<td style="text-align:center"><img src="https://upload-images.jianshu.io/upload_images/1354448-ee5b4e1a13244e97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用后"></td>
</tr>
</tbody>
</table>
<p>3、<code>&lt;merge&gt;</code>：在使用了include后可能导致布局嵌套过多，多余不必要的layout节点，从而导致解析变慢，不必要的节点和嵌套可通过hierarchy viewer(下面布局调优工具中有具体介绍)或设置-&gt;开发者选项-&gt;显示布局边界查看。</p>
<h3 id="优化工具"><a href="#优化工具" class="headerlink" title="优化工具"></a>优化工具</h3><p>1、GPU过渡绘制：Graphic Processing Unit</p>
<p>位置：设置/选择开发选项（Developer Options）/调试GPU 过度绘制（Debug GPU Overdraw），然后选择“显示过度绘制区域（Show overdraw area）”。</p>
<p>定义：指在屏幕上的一个像素在单个帧中被重绘了多次。可以通过手机设置/开发者选项/调试GPU过渡绘制/，不同的颜色显示了渲染过渡程度<br><img src="https://upload-images.jianshu.io/upload_images/1354448-8b5d6f7c6cfefbfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手机gpu绘制"></p>
<p>2、Hierarchy Viewer<br>3、Lint tool</p>
<h3 id="优化结果"><a href="#优化结果" class="headerlink" title="优化结果"></a>优化结果</h3><table>
<thead>
<tr>
<th style="text-align:center">优化前</th>
<th style="text-align:center">优化后</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://upload-images.jianshu.io/upload_images/1354448-ac9f12fc0f737096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="优化前"></td>
<td style="text-align:center"><img src="https://upload-images.jianshu.io/upload_images/1354448-33a678ffc779709d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="优化后"></td>
</tr>
</tbody>
</table>
<blockquote>
<p>对应项目：<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a></p>
</blockquote>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.trinea.cn/android/layout-performance/" target="_blank" rel="external">性能优化之布局优化</a></li>
<li><a href="https://www.jianshu.com/p/af26dd165626" target="_blank" rel="external">[Android] 布局优化</a></li>
<li><a href="https://www.jianshu.com/p/8030a8eeff1f" target="_blank" rel="external">Android性能优化–布局优化</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-37ff47faeefa1837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;gpu绘制&quot;&gt;&lt;/p&gt;
&lt;p&gt;做开发时间长了之后，收集后台的bug，发现很多都是OOM(Out Of Memory Killer)。性能优化这时候成为了重点，下面是自己项目中布局优化的记录，希望对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="性能优化" scheme="http://jingbin.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>健身记录</title>
    <link href="http://jingbin.me/2018/04/28/%E5%81%A5%E8%BA%AB%E8%AE%B0%E5%BD%95/"/>
    <id>http://jingbin.me/2018/04/28/健身记录/</id>
    <published>2018-04-28T07:43:21.000Z</published>
    <updated>2018-06-06T15:49:31.323Z</updated>
    
    <content type="html"><![CDATA[<p>从2017五月中旬开始锻炼了半年有余，体重从57kg到68kg，算是达成目标。后期的持续锻炼也很重要，前天去健身房练背，有些动作忘记了，记录下来今后查阅。</p>
<a id="more"></a>
<h2 id="心肺训练-有氧"><a href="#心肺训练-有氧" class="headerlink" title="心肺训练(有氧)"></a>心肺训练(有氧)</h2><ul>
<li>深蹲跳</li>
<li>箭步蹲</li>
<li>原地碎步跑20s＋俯卧撑8</li>
<li>单脚过障碍</li>
<li>蛙跳</li>
<li>跳绳</li>
</ul>
<h2 id="无氧训练"><a href="#无氧训练" class="headerlink" title="无氧训练"></a>无氧训练</h2><h3 id="胸"><a href="#胸" class="headerlink" title="胸"></a>胸</h3><ul>
<li>俯卧撑</li>
<li>史密斯平板卧推</li>
<li>坐姿黄蜂推胸</li>
<li>小杠铃平板卧推</li>
<li>高位俯卧撑</li>
<li>上斜卧推</li>
<li>站姿钢线夹胸</li>
<li>坐姿夹胸</li>
<li>仰卧推胸飞鸟</li>
</ul>
<h3 id="腹"><a href="#腹" class="headerlink" title="腹"></a>腹</h3><ul>
<li>平板支撑</li>
<li>高位抬腿</li>
<li>卷腹</li>
<li>高位俯卧撑 – 抬腿</li>
<li>坐姿腿屈伸</li>
<li>两头起+卷腹</li>
<li>自行车碰膝、大风车</li>
<li>仰卧起坐</li>
<li>山羊挺身</li>
</ul>
<h3 id="腰"><a href="#腰" class="headerlink" title="腰"></a>腰</h3><ul>
<li>哑铃侧身弯体</li>
<li>侧身弯体</li>
<li>侧身抬腿</li>
<li>杠铃前躬体</li>
<li>单腿罗马尼亚硬拉</li>
<li>罗马椅背屈伸</li>
</ul>
<h3 id="背部"><a href="#背部" class="headerlink" title="背部"></a>背部</h3><ul>
<li>坐姿划船</li>
<li>高位下拉</li>
<li>俯身哑铃臂屈伸</li>
<li>杠铃拉背</li>
<li>杠铃硬拉</li>
<li>大黄蜂拉背</li>
<li>自重引体</li>
<li>俯身飞鸟</li>
<li>器械夹背</li>
</ul>
<h3 id="腿"><a href="#腿" class="headerlink" title="腿"></a>腿</h3><ul>
<li>倒蹬机</li>
<li>器械开腿</li>
<li>器械合退</li>
<li>器械反勾腿</li>
<li>哑铃箭步走</li>
<li>杠铃深蹲</li>
<li>器械腿屈伸</li>
<li>史密斯深蹲</li>
</ul>
<h3 id="二头肌"><a href="#二头肌" class="headerlink" title="二头肌"></a>二头肌</h3><ul>
<li>二头弯举</li>
<li>哑铃自由二头弯举</li>
<li>二头举重龙门架</li>
<li>杠铃站姿弯举</li>
</ul>
<h3 id="肩"><a href="#肩" class="headerlink" title="肩"></a>肩</h3><ul>
<li>器械推肩</li>
<li>坐姿哑铃推肩</li>
<li>哑铃侧平举</li>
<li>仰卧哑铃屈伸</li>
<li>大黄蜂推肩</li>
<li>哑铃臂屈伸</li>
</ul>
<h2 id="放松"><a href="#放松" class="headerlink" title="放松"></a>放松</h2><h3 id="伸展"><a href="#伸展" class="headerlink" title="伸展"></a>伸展</h3><ul>
<li>斜方肌上束</li>
<li>肩胛提肌</li>
<li>胸锁乳突肌</li>
<li>斜角肌</li>
<li>腰方肌左侧</li>
</ul>
<h3 id="筋膜放松"><a href="#筋膜放松" class="headerlink" title="筋膜放松"></a>筋膜放松</h3><ul>
<li>仰卧肚脐回贴</li>
<li>弹力带仰卧下拉</li>
<li>弹力带推肩</li>
<li>弹力带提拉</li>
<li>弹力带外展</li>
<li>弹力带下拉</li>
<li>蛙泳划臂</li>
<li>支撑抬臀</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从2017五月中旬开始锻炼了半年有余，体重从57kg到68kg，算是达成目标。后期的持续锻炼也很重要，前天去健身房练背，有些动作忘记了，记录下来今后查阅。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://jingbin.me/categories/life/"/>
    
    
      <category term="life" scheme="http://jingbin.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码：Android（第2版）》读书笔记</title>
    <link href="http://jingbin.me/2018/04/28/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%9AAndroid%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://jingbin.me/2018/04/28/《第一行代码：Android（第2版）》读书笔记/</id>
    <published>2018-04-28T07:29:31.000Z</published>
    <updated>2018-06-06T15:49:45.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://book.douban.com/subject/26915433/" target="_blank" rel="external">《第一行代码：Android（第2版）》</a> - 被广大Android 开发者誉为“Android 学习第一书”。全书系统全面、循序渐进地介绍了Android软件开发的必备知识、经验和技巧。</p>
</blockquote>
<p>内容比较基础，查漏补缺，记一些重点。</p>
<a id="more"></a>
<p>第2版基于Android 7.0 对第1 版进行了全面更新，将所有知识点都在最新的Android 系统上进行重新适配，使用 全新的Android Studio 开发工具代替之前的Eclipse，并添加了对Material Design、运行时权限、Gradle、RecyclerView、百分比布局、OkHttp、Lambda 表达式等全新知识点的详细讲解。</p>
<h2 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h2><p>总的来说，<a href="https://hit-alibaba.github.io/interview/Android/basic/Android-Arch.html" target="_blank" rel="external">Android的系统体系结构</a>分为四层，自顶向下分别是</p>
<ul>
<li>应用程序(Applications)</li>
<li>应用程序框架(Application Frameworks)</li>
<li>系统运行库与Android运行环境(Libraris &amp; Android Runtime)</li>
<li>Linux内核(Linux Kernel)</li>
</ul>
<p><img src="https://github.com/HIT-Alibaba/interview/blob/master/img/android-system-architecture.jpg?raw=true" alt=""></p>
<h3 id="应用程序-Applications"><a href="#应用程序-Applications" class="headerlink" title="应用程序(Applications)"></a>应用程序(Applications)</h3><p>Android会同一系列核心应用程序包一起发布，该应用程序包包括email客户端，SMS短消息程序，日历，地图，浏览器，联系人管理程序等。所有的应用程序都是使用JAVA语言编写的。通常开发人员就处在这一层。</p>
<h3 id="应用程序框架-Application-Frameworks"><a href="#应用程序框架-Application-Frameworks" class="headerlink" title="应用程序框架(Application Frameworks)"></a>应用程序框架(Application Frameworks)</h3><p>提供应用程序开发的各种API进行快速开发，也即隐藏在每个应用后面的是一系列的服务和系统，大部分使用Java编写，所谓官方源码很多也就是看这里，其中包括：</p>
<ul>
<li>丰富而又可扩展的视图（Views），可以用来构建应用程序， 它包括列表（lists），网格（grids），文本框（text boxes），按钮（buttons）， 甚至可嵌入的web浏览器。</li>
<li>内容提供器（Content Providers）使得应用程序可以访问另一个应用程序的数据（如联系人数据库）， 或者共享它们自己的数据</li>
<li>资源管理器（Resource Manager）提供 非代码资源的访问，如本地字符串，图形，和布局文件（ layout files ）。</li>
<li>通知管理器 （Notification Manager） 使得应用程序可以在状态栏中显示自定义的提示信息。</li>
<li>活动管理器（ Activity Manager） 用来管理应用程序生命周期并提供常用的导航回退功能。</li>
</ul>
<h3 id="系统运行库与Android运行环境-Libraris-amp-Android-Runtime"><a href="#系统运行库与Android运行环境-Libraris-amp-Android-Runtime" class="headerlink" title="系统运行库与Android运行环境(Libraris &amp; Android Runtime)"></a>系统运行库与Android运行环境(Libraris &amp; Android Runtime)</h3><h4 id="系统运行库"><a href="#系统运行库" class="headerlink" title="系统运行库"></a>系统运行库</h4><p>Android 包含一些C/C++库，这些库能被Android系统中不同的组件使用。它们通过 Android 应用程序框架为开发者提供服务。以下是一些核心库：</p>
<ul>
<li>Bionic系统 C 库 - 一个从 BSD 继承来的标准 C 系统函数库（ libc ）， 它是专门为基于 embedded linux 的设备定制的。</li>
<li>媒体库 - 基于 PacketVideo OpenCORE；该库支持多种常用的音频、视频格式回放和录制，同时支持静态图像文件。编码格式包括MPEG4, H.264, MP3, AAC, AMR, JPG, PNG 。</li>
<li>Surface Manager - 对显示子系统的管理，并且为多个应用程序提 供了2D和3D图层的无缝融合。这部分代码</li>
<li>Webkit,LibWebCore - 一个最新的web浏览器引擎用，支持Android浏览器和一个可嵌入的web视图。鼎鼎大名的 Apple Safari背后的引擎就是Webkit</li>
<li>SGL - 底层的2D图形引擎</li>
<li>3D libraries - 基于OpenGL ES 1.0 APIs实现；该库可以使用硬件 3D加速（如果可用）或者使用高度优化的3D软加速。</li>
<li>FreeType -位图（bitmap）和矢量（vector）字体显示。</li>
<li>SQLite - 一个对于所有应用程序可用，功能强劲的轻型关系型数据库引擎。</li>
<li>还有部分上面没有显示出来的就是硬件抽象层。其实Android并非讲所有的设备驱动都放在linux内核里面，而是实现在userspace空间，这么做的主要原因是GPL协议，Linux是遵循该 协议来发布的，也就意味着对 linux内核的任何修改，都必须发布其源代码。而现在这么做就可以避开而无需发布其源代码，毕竟它是用来赚钱的。 而 在linux内核中为这些userspace驱动代码开一个后门，就可以让本来userspace驱动不可以直接控制的硬件可以被访问。而只需要公布这个 后门代码即可。一般情况下如果要将Android移植到其他硬件去运行，只需要实现这部分代码即可。包括：显示器驱动，声音，相机，GPS,GSM等等</li>
</ul>
<h4 id="Android运行环境"><a href="#Android运行环境" class="headerlink" title="Android运行环境"></a>Android运行环境</h4><p>该核心库提供了JAVA编程语言核心库的大多数功能。</p>
<p>每一个Android应用程序都在它自己的进程中运 行，都拥有一个独立的Dalvik虚拟 机实例。Dalvik被设计成一个设备可以同时高效地运行多个虚拟系统。 Dalvik虚拟机执行（.dex）的Dalvik可执行文件，该格式文件针对小内存使用做了 优化。同时虚拟机是基于寄存器的，所有的类都经由JAVA编译器编译，然后通过SDK中 的 “dx” 工具转化成.dex格式由虚拟机执行。</p>
<h3 id="Linux内核-Linux-Kernel"><a href="#Linux内核-Linux-Kernel" class="headerlink" title="Linux内核(Linux Kernel)"></a>Linux内核(Linux Kernel)</h3><p>Android的核心系统服务依赖于Linux 2.6 内核，如安全性，内存管理，进程管理， 网络协议栈和驱动模型。 Linux 内核也同时作为硬件和软件栈之间的抽象层。其外还对其做了部分修改，主要涉及两部分修改：</p>
<ul>
<li>Binder (IPC)：提供有效的进程间通信，虽然linux内核本身已经提供了这些功能，但Android系统很多服务都需要用到该功能，为了某种原因其实现了自己的一套。</li>
<li>电源管理：主要是为了省电，毕竟是手持设备嘛，低耗电才是我们的追求。</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><strong>gradew和gradlew.bat</strong>：这两个文件是用来命令行界面中执行gradle命令的，其中gradlew是在Linux或Mac系统中使用的；gradlew.bat是在Windows系统中使用的。</li>
<li>HelloWorld.iml：iml文件是所有InteliJ IDEA项目都会自动生成的一个文件(Android Studio是基于InteliJ IDEA开发的)，用于标识这是一个InteliJ IDEA项目，我们不需要修改这个文件中的任何内容。</li>
<li>proguard-rules.pro：指定代码混淆规则。</li>
<li>Gradle是一个非常先进的项目构建工具，它使用了一种基于Groovy的领域特定语言（DSL）来声明项目设置，摒弃了传统基于XML（如Ant何Maven）的各种繁琐配置。</li>
<li>compileSdkVersion：用于指定项目的编译版本，指定的24表示使用Android7.0系统的SDK编译。</li>
<li>buildToolsVersion：用于指定项目构建工具的版本。</li>
<li>targetSdkVersion：指定的值表示你在该目标版本上已经做过了充分的测试，系统将会为你的应用程序启动一些最新的功能和特性。</li>
</ul>
<h2 id="更多隐式Intent的用法"><a href="#更多隐式Intent的用法" class="headerlink" title="更多隐式Intent的用法"></a>更多隐式Intent的用法</h2><p><img src="https://upload-images.jianshu.io/upload_images/1354448-9a6b1b6b20053220.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-5067ab76605c7e95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-fac5abfbca8be214.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="随时随地退出程序"><a href="#随时随地退出程序" class="headerlink" title="随时随地退出程序"></a>随时随地退出程序</h2><p><img src="https://upload-images.jianshu.io/upload_images/1354448-59b3d14e5d9962d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26915433/&quot;&gt;《第一行代码：Android（第2版）》&lt;/a&gt; - 被广大Android 开发者誉为“Android 学习第一书”。全书系统全面、循序渐进地介绍了Android软件开发的必备知识、经验和技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内容比较基础，查漏补缺，记一些重点。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="Books" scheme="http://jingbin.me/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>《Android开发艺术探索》读书笔记</title>
    <link href="http://jingbin.me/2018/04/13/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://jingbin.me/2018/04/13/《Android开发艺术探索》读书笔记/</id>
    <published>2018-04-13T14:29:31.000Z</published>
    <updated>2018-09-18T14:04:14.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://book.douban.com/subject/26599538/" target="_blank" rel="external">《Android开发艺术探索》</a> - 一本Android进阶类书籍，采用理论、源码和实践相结合的方式来阐述高水准的Android应用开发要点。</p>
</blockquote>
<a id="more"></a>
<p>《Android开发艺术探索》从三个方面来组织内容。第一，介绍Android开发者不容易掌握的一些知识点；第二，结合Android源代码和应用层开发过程，融会贯通，介绍一些比较深入的知识点；第三，介绍一些核心技术和Android的性能优化思想。</p>
<p>《Android开发艺术探索》侧重于Android知识的体系化和系统工作机制的分析，通过《Android开发艺术探索》的学习可以极大地提高开发者的Android技术水平，从而更加高效地成为高级开发者。而对于高级开发者来说，仍然可以从《Android开发艺术探索》的知识体系中获益。</p>
<blockquote>
<p>完善中，借鉴了他人的读书笔记。</p>
</blockquote>
<h2 id="Activity的生命周期和启动模式"><a href="#Activity的生命周期和启动模式" class="headerlink" title="Activity的生命周期和启动模式"></a>Activity的生命周期和启动模式</h2><p>用户正常使用情况下的生命周期 &amp; 由于Activity被系统回收或者设备配置改变导致Activity被销毁重建情况下的生命周期。</p>
<h3 id="Activity的生命周期全面分析"><a href="#Activity的生命周期全面分析" class="headerlink" title="Activity的生命周期全面分析"></a>Activity的生命周期全面分析</h3><h4 id="典型情况下的生命周期分析"><a href="#典型情况下的生命周期分析" class="headerlink" title="典型情况下的生命周期分析"></a>典型情况下的生命周期分析</h4><p>  <img src="https://upload-images.jianshu.io/upload_images/1354448-cfaabc5b421c5945.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="Activity生命周期.png"></p>
<ul>
<li>1.Activity第一次启动：onCreate-&gt;onStart-&gt;onResume。</li>
<li>2.Activity切换到后台（ 用户打开新的Activity或者切换到桌面）,onPause-&gt;onStop。</li>
<li>3.Activity从后台到前台，重新可见，onRestart-&gt;onStart-&gt;onResume。</li>
<li>4.用户退出Activity，onPause-&gt;onStop-&gt;onDestroy。</li>
<li>5.onStart开始到onStop之前，Activity可见。onResume到onPause之前，Activity可以接受用户交互。</li>
<li>6.在新Activity启动之前，栈顶的Activity需要先onPause后，新Activity才能启动。所以不能在onPause执行耗时操作。</li>
</ul>
<h4 id="异常情况下的生命周期分析"><a href="#异常情况下的生命周期分析" class="headerlink" title="异常情况下的生命周期分析"></a>异常情况下的生命周期分析</h4><h5 id="系统配置变化导致Activity销毁重建"><a href="#系统配置变化导致Activity销毁重建" class="headerlink" title="系统配置变化导致Activity销毁重建"></a>系统配置变化导致Activity销毁重建</h5><p>例如Activity处于竖屏状态，<strong><em>如果突然旋转屏幕</em></strong>，由于系统配置发生了改变，Activity就会被销毁并重新创建。</p>
<ul>
<li>在异常情况下系统会在onStop之前调用onSaveInstanceState来保存状态。Activity重新创建后，会在onStart之后调用onRestoreInstanceState来恢复之前保存的数据。</li>
<li>保存数据的流程： Activity被意外终止，调用onSaveIntanceState保存数据-&gt; Activity委托Window，Window委托它上面的顶级容器一个ViewGroup（ 书上说很可能就是DecorView） 。然后顶层容器在通知所有子元素来保存数据。 每个View都有 onSaveInstanceState 和 onRestoreInstanceState 方法。查看TextView 源码可以发现保存了文本选中状态和文本内容。</li>
<li>系统只在Activity异常终止的时候才会调用 onSaveInstanceState 和onRestoreInstanceState 方法。其他情况不会触发。</li>
</ul>
<h5 id="资源内存不足导致低优先级的Activity被回收"><a href="#资源内存不足导致低优先级的Activity被回收" class="headerlink" title="资源内存不足导致低优先级的Activity被回收"></a>资源内存不足导致低优先级的Activity被回收</h5><ul>
<li>1.前台- 可见非前台（ 被对话框遮挡的Activity） -后台，这三种Activity优先级从高到低。</li>
<li>2.android:configChanges=”orientation” 在manifest中指定 configChanges 在系统配置变化后不重新创建Activity，也不会执行onSaveInstanceState 和 onRestoreInstanceState 方法，而是调用 onConfigurationChnaged 方法。</li>
<li>3.configChanges 一般常用三个选项：<ul>
<li>locale 系统语言变化</li>
<li>keyborardHidden 键盘的可访问性发生了变化，比如用户调出了键盘</li>
<li>orientation 屏幕方向变化</li>
</ul>
</li>
</ul>
<h3 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h3><h4 id="Activity的LaunchMode"><a href="#Activity的LaunchMode" class="headerlink" title="Activity的LaunchMode"></a>Activity的LaunchMode</h4><p>Android使用栈来管理Activity。</p>
<h5 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h5><ul>
<li>每次启动都会重新创建一个实例，不管这个Activity在栈中是否已经存在。</li>
<li>谁启动了这个Activity，那么Activity就运行在启动它的那个Activity所在的栈中。</li>
<li>用Application去启动Activity时会报错，提示非Activity的Context没有所谓的任务栈。解决<br>办法是为待启动Activity制定FLAG_ACTIVITY_NEW_TASH标志位，这样就会为它创建<br>一个新的任务栈。</li>
</ul>
<h5 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h5><ul>
<li>如果新Activity位于任务栈的栈顶，那么此Activity不会被重新创建，同时回调 onNewIntent 方法。</li>
<li>如果新Activity已经存在但不是位于栈顶，那么新Activity仍然会被创建。</li>
</ul>
<h5 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h5><ul>
<li>这是一种单实例模式</li>
<li>只要Activity在栈中存在，那么多次启动这个Activity都不会重新创建实例，同时也会回调 onNewIntent 方法。</li>
<li>同时会导致在Activity之上的栈内Activity出栈。</li>
</ul>
<h5 id="singleIntance"><a href="#singleIntance" class="headerlink" title="singleIntance"></a>singleIntance</h5><ul>
<li>具有singleTask模式的所有特性，同时具有此模式的Activity只能单独的位于一个任务栈中</li>
</ul>
<h5 id="TaskAffinity属性"><a href="#TaskAffinity属性" class="headerlink" title="TaskAffinity属性"></a>TaskAffinity属性</h5><p>TaskAffinity参数标识了一个Activity所需要的任务栈的名字。为字符串，且中间必须包含包名分隔符“.”。默认情况下，所有Activity所需的任务栈名字为应用包名。TashAffinity属性主要和singleTask启动模式或者 allowTaskReparenting 属性配对使用，其他情况下没有意义。 应用A启动了应用B的某个Activity后，如果Activity的allowTaskReparenting属性为true的话，那么当应用B被启动后，此Activity会直接从应用A的任务栈转移到应用B的任务栈中。 打个比方就是，应用A启动了应用B的ActivityX，然后按Home回到桌面，单击应用B的图标，这时并不会启动B的主Activity，而是重新显示已经被应用A启动的ActivityX。这是因为ActivityX的TaskAffinity值肯定不和应用A的任务栈相同（ 因为包名不同） 。所以当应用B被启动以后，发现ActivityX原本所需的任务栈已经被创建了，所以把ActivityX从A的任务栈中转移过来了。</p>
<p>设置启动模式:</p>
<ul>
<li>1.manifest中 设置下的 android:launchMode 属性。</li>
<li>2.启动Activity的 intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); 。</li>
<li>3.两种同时存在时，以第二种为准。第一种方式无法直接为Activity添加FLAG_ACTIVITY_CLEAR_TOP标识，第二种方式无法指定singleInstance模式。</li>
<li>4.可以通过命令行 adb shell dumpsys activity 命令查看栈中的Activity信息。</li>
</ul>
<h4 id="Activity的Flags"><a href="#Activity的Flags" class="headerlink" title="Activity的Flags"></a>Activity的Flags</h4><p>这些FLAG可以设定启动模式、可以影响Activity的运行状态。</p>
<ul>
<li>FLAG_ACTIVITY_CLEAR_TOP 具有此标记位的Activity启动时，同一个任务栈中位于它上面的Activity都要出栈，一般和FLAG_ACTIVITY_NEW_TASK配合使用。效果和singleTask一样。</li>
<li>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS 如果设置，新的Activity不会在最近启动的Activity的列表(就是安卓手机里显示最近打开的Activity那个系统级的UI)中保存。</li>
</ul>
<h3 id="IntentFilter的匹配规则"><a href="#IntentFilter的匹配规则" class="headerlink" title="IntentFilter的匹配规则"></a>IntentFilter的匹配规则</h3><p>启动Activity分为两种：</p>
<ul>
<li>1.显示调用 明确指定被启动对象的组件信息，包括包名和类名</li>
<li>2.隐式调用 不需要明确指定组件信息，需要Intent能够匹配目标组件中的IntentFilter中所设置的过滤信息。</li>
<li>3.IntentFilter中的过滤信息有action、category、data。</li>
<li>4.只有一个Intent同时匹配action类别、category类别、data类别才能成功启动目标Activity。</li>
<li>5.一个Activity可以有多个intent-filter，一个Intent只要能匹配任何一组intent-filter即可成功启动对应的Activity。</li>
</ul>
<h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><ul>
<li>1.action是一个字符串。</li>
<li>2.一个intent-filter可以有多个aciton，只要Intent中的action能够和任何一个action相同即可成功匹配。匹配是指与action的字符串完全一样。</li>
<li>3.Intent中如果没有指定action，那么匹配失败。</li>
</ul>
<h4 id="category"><a href="#category" class="headerlink" title="category"></a>category</h4><ul>
<li>category是一个字符串。</li>
<li>2.Intent可以没有category，但是如果你一旦有category，不管有几个，每个都能够与<br>intent-filter中的其中一个category相同。</li>
<li>3.系统在<code>startActivity</code>和<code>startActivityForResult</code>的时候，会默认为Intent加上 android.intent.category.DEFAULT 这个category，所以为了我们的activity能够接收隐式调用，就必须在intent-filter中加上 android.intent.category.DEFAULT 这个category。</li>
</ul>
<h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><ul>
<li>1.data的匹配规则与action一样，如果intent-filter中定义了data，那么Intent中必须要定义可匹配的data。</li>
<li><p>2.intent-filter中data的语法：</p>
<pre><code>&lt;data android:scheme=&quot;string&quot;
    android:host=&quot;string&quot;
    android:port=&quot;string&quot;
    android:path=&quot;string&quot;
    android:pathPattern=&quot;string&quot;
    android:pathPrefix=&quot;string&quot;
    android:mimeType=&quot;string&quot;/&gt;
</code></pre></li>
<li><p>3.Intent中的data有两部分组成：mimeType和URI。mimeType是指媒体类型，比如<br>image/jpeg、audio/mpeg4-generic和video/等，可以表示图片、文本、视频等不同的媒<br>体格式。</p>
<ul>
<li>URI的结构：<code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</code><br>//实际例子<br>content://com.example.project:200/folder/subfolder/etc<br><a href="http://www.baidu.com:80/search/info" target="_blank" rel="external">http://www.baidu.com:80/search/info</a><ul>
<li>scheme：URI的模式，比如http、file、content等，默认值是 file 。</li>
<li>host：URI的主机名</li>
<li>port：URI的端口号</li>
<li>path、pathPattern和pathPrefix：这三个参数描述路径信息。<ul>
<li>path、pathPattern可以表示完整的路径信息，其中pathPattern可以包含通配符 * ，表示0个或者多个任意字符。</li>
<li>pathPrefix只表示路径的前缀信息。</li>
</ul>
</li>
</ul>
</li>
<li>Intent指定data时，必须调用 setDataAndType 方法， setData 和 setType 会清除另一方的值。</li>
</ul>
</li>
</ul>
<p><strong>隐式调用需注意:</strong></p>
<ul>
<li><p>1.当通过隐式调用启动Activity时，没找到对应的Activity系统就会抛出 android.content.ActivityNotFoundException 异常，所以需要判断是否有Activity能够匹配我们的隐式Intent。</p>
<ul>
<li>i. 采用 PackageManager 的 resloveActivity 方法<br>public abstract List<resolveinfo> queryIntentActivityies(Intent intent,int flags);<br>public abstract ResolveInfo resloveActivity(Intent intent,int flags);<br>以上的第二个参数使用 MATCH_DEFAULT_ONLY ，这个标志位的含义是仅仅匹配那些在intent-filter中声明了 android.intent.category.DEFAULT 这个category的Activity。因为如果把不含这个category的Activity匹配出来了，由于不含DEFAULT这个category的Activity是无法接受隐式Intent的从而导致startActivity失败。</resolveinfo></li>
<li>ii. 采用 Intent 的 resloveActivity 方法</li>
</ul>
</li>
<li><p>2.下面的action和category用来表明这是一个入口Activity并且会出现在系统的应用列表中，二者缺一不可。<br><action android:name="android.intent.action.MAIN"></action></p>
<category android:name="android.intent.category.LAUNCHER">

</category></li>
</ul>
<hr>
<h2 id="View的事件体系"><a href="#View的事件体系" class="headerlink" title="View的事件体系"></a>View的事件体系</h2><h3 id="view的基础知识"><a href="#view的基础知识" class="headerlink" title="view的基础知识"></a>view的基础知识</h3><h4 id="什么是view"><a href="#什么是view" class="headerlink" title="什么是view"></a>什么是view</h4><p>View是Android中所有控件的基类，View的本身可以是单个空间，也可以是多个控件组成的一<br>组控件，即ViewGroup，ViewGroup继承自View，其内部可以有子View，这样就形成了View<br>树的结构。</p>
<h4 id="View的位置参数"><a href="#View的位置参数" class="headerlink" title="View的位置参数"></a>View的位置参数</h4><p>View的位置主要由它的四个顶点来决定，即它的四个属性：top、left、right、bottom，分别表示View左上角的坐标点（top，left）以及右下角的坐标点（right，bottom）。同时，我们可以得到View的大小：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">width = right - left</div><div class="line">height = bottom - top</div></pre></td></tr></table></figure></p>
<p>而这四个参数可以由以下方式获取：</p>
<ul>
<li>Left = getLeft();</li>
<li>Right = getRight();</li>
<li>Top = getTop();</li>
<li>Bottom = getBottom();<br>Android3.0后，View增加了x、y、translationX和translationY这几个参数。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于容器的偏移量。</li>
</ul>
<p>他们之间的换算关系如下：<br>x = left + translationX;<br>y = top + translationY;<br>注意：View在平移的过程中，top和left不会改变，改变的是x、y、translationX和translaY。</p>
<h4 id="MotionEvent和TouchSlop"><a href="#MotionEvent和TouchSlop" class="headerlink" title="MotionEvent和TouchSlop"></a>MotionEvent和TouchSlop</h4><h5 id="MotionEvent"><a href="#MotionEvent" class="headerlink" title="MotionEvent"></a>MotionEvent</h5><p>在手指接触到屏幕后会产生乙烯类的点击事件，如</p>
<ul>
<li>点击屏幕后离开松开，事件序列为DOWN-&gt;UP</li>
<li>点击屏幕滑动一会再松开，事件序列为DOWN-&gt;MOVE-&gt;…-&gt;MOVE-&gt;UP 通过MotionEven对象我们可以得到事件发生的x和y坐标，我们可以通过getX/getY和getRawX/getRawY得到，它们的区别是：getX/getY返回的是相对于当前View左上角的x和y坐标，getRawX/getRawY返回的是相对于手机屏幕左上角的x和y坐标。</li>
</ul>
<h5 id="TouchSloup"><a href="#TouchSloup" class="headerlink" title="TouchSloup"></a>TouchSloup</h5><p>TouchSloup是系统所能识别出的被认为是滑动的最小距离，这是一个常量，与设备有关，可通过以下方法获得：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ViewConfiguration.get(getContext()).getScaledTouchSloup().</div></pre></td></tr></table></figure></p>
<h4 id="VelocityTracker、GestureDetector和Scroller"><a href="#VelocityTracker、GestureDetector和Scroller" class="headerlink" title="VelocityTracker、GestureDetector和Scroller"></a>VelocityTracker、GestureDetector和Scroller</h4><h5 id="VelocityTracker"><a href="#VelocityTracker" class="headerlink" title="VelocityTracker"></a>VelocityTracker</h5><p>速度追踪，用于追踪手指在滑动过程中的速度，包括水平放向速度和竖直方向速度。 使用方法：<br>1.在View的onTouchEvent方法中追踪当前单击事件的速度<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">VelocityRracker velocityTracker = VelocityTracker.obtain();</div><div class="line">velocityTracker.addMovement(event);</div></pre></td></tr></table></figure></p>
<p>2.计算速度，获得水平速度和竖直速度<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">velocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</div><div class="line"><span class="keyword">int</span> xVelocity = (<span class="keyword">int</span>)velocityTracker.getXVelocity();</div><div class="line"><span class="keyword">int</span> yVelocity = (<span class="keyword">int</span>)velocityTracker.getYVelocity();</div></pre></td></tr></table></figure></p>
<p>注意，获取速度之前必须先计算速度，即调用computeCurrentVelocity方法，这里指的速度是指一段时间内手指滑过的像素数，1000指的是1000毫秒，得到的是1000毫秒内滑过的像素数。速度可正可负：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">速度 = （终点位置 - 起点位置） / 时间段</div></pre></td></tr></table></figure></p>
<p>3.最后，当不需要使用的时候，需要调用clear()方法重置并回收内存：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">velocityTracker.clear();</div><div class="line">velocityTracker.recycle();</div></pre></td></tr></table></figure></p>
<h5 id="GestureDetector"><a href="#GestureDetector" class="headerlink" title="GestureDetector"></a>GestureDetector</h5><p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。 使用方法：<br>1.创建一个GestureDetector对象并实现OnGestureListener接口，根据需要，也可实现<br>OnDoubleTapListener接口从而监听双击行为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GestureDetector mGestureDetector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>);</div><div class="line"><span class="comment">//解决长按屏幕后无法拖动的现象</span></div><div class="line">mGestureDetector.setIsLongpressEnabled(<span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
<p>2.在目标View的OnTouchEvent方法中添加以下实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> consume = mGestureDetector.onTouchEvent(event);</div><div class="line"><span class="keyword">return</span> consume;</div></pre></td></tr></table></figure></p>
<p>3.实现OnGestureListener和OnDoubleTapListener接口中的方法，其中常用的方法有：<br>onSingleTapUp(单击)、onFling(快速滑动)、onScroll(拖动)、onLongPress(长按)和onDoubleTap（双击）。 建议：如果只是监听滑动相关的，可以自己在onTouchEvent中实现，如果要监听双击这种行为，那么就使用GestureDetector。</p>
<h5 id="Scroller"><a href="#Scroller" class="headerlink" title="Scroller"></a>Scroller</h5><p>弹性滑动对象，用于实现View的弹性滑动。其本身无法让View他行滑动，需要和View的computeScroll方法配合使用才能完成这个功能。 使用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Scroller scroller = <span class="keyword">new</span> Scroller(mContext);</div><div class="line"><span class="comment">//缓慢移动到指定位置</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">smoothScrollTo</span><span class="params">(<span class="keyword">int</span> destX,<span class="keyword">int</span> destY)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> scrollX = getScrollX();</div><div class="line">	<span class="keyword">int</span> delta = destX - scrollX;</div><div class="line">	<span class="comment">//1000ms内滑向destX,效果就是慢慢滑动</span></div><div class="line">	mScroller.startScroll(scrollX,<span class="number">0</span>,delta,<span class="number">0</span>,<span class="number">1000</span>);</div><div class="line">	invalidata();</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(mScroller.computeScrollOffset())&#123;</div><div class="line">		scrollTo(mScroller.getCurrX,mScroller.getCurrY());</div><div class="line">		postInvalidate();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原理下节讲。</p>
<h3 id="View的滑动"><a href="#View的滑动" class="headerlink" title="View的滑动"></a>View的滑动</h3><h4 id="使用scrollTo-scrollBy"><a href="#使用scrollTo-scrollBy" class="headerlink" title="使用scrollTo/scrollBy"></a>使用scrollTo/scrollBy</h4><p>1.scrollBy实际调用了scrollTo，它实现了基于当前位置的相对滑动，而scrollTo则实现了绝对滑动。<br>2.scrollTo和scrollBy只能改变View的内容位置而不能改变View在布局中的位置。<br>3.滑动偏移量mScrollX和mScrollY的正负与实际滑动方向相反，即从左向右滑动，mScrollX为负值，从上往下滑动mScrollY为负值。</p>
<h4 id="使用动画"><a href="#使用动画" class="headerlink" title="使用动画"></a>使用动画</h4><p>使用动画移动View，主要是操作View的translationX和translationY属性，既可以采用传统的View动画，也可以采用属性动画，如果使用属性动画，为了能够兼容3.0以下的版本，需要采用开源动画库nineolddandroids。 如使用属性动画：(View在100ms内向右移动100像素)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator.ofFloat(targetView,<span class="string">"translationX"</span><span class="number">0</span>,<span class="number">100</span>).setDuration(<span class="number">100</span>).start();</div></pre></td></tr></table></figure></p>
<h4 id="改变布局属性"><a href="#改变布局属性" class="headerlink" title="改变布局属性"></a>改变布局属性</h4><p>通过改变布局属性来移动View，即改变LayoutParams。</p>
<h4 id="各种滑动方式的对比"><a href="#各种滑动方式的对比" class="headerlink" title="各种滑动方式的对比"></a>各种滑动方式的对比</h4><p>1.scrollTo/scrollBy：操作简单，适合对View内容的滑动；<br>2.动画：操作简单，主要适用于没有交互的View和实现复杂的动画效果；<br>3.改变布局参数：操作稍微复杂，适用于有交互的View。</p>
<h3 id="弹性滑动"><a href="#弹性滑动" class="headerlink" title="弹性滑动"></a>弹性滑动</h3><h4 id="使用Scroller"><a href="#使用Scroller" class="headerlink" title="使用Scroller"></a>使用Scroller</h4><p>使用Scroller实现弹性滑动的典型使用方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Scroller scroller = <span class="keyword">new</span> Scroller(mContext);</div><div class="line"><span class="comment">//缓慢移动到指定位置</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">smoothScrollTo</span><span class="params">(<span class="keyword">int</span> destX,<span class="keyword">int</span> dextY)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> scrollX = getScrollX();</div><div class="line">	<span class="keyword">int</span> deltaX = destX - scrollX;</div><div class="line">	<span class="comment">//1000ms内滑向destX，效果就是缓慢滑动</span></div><div class="line">	mScroller.startSscroll(scrollX,<span class="number">0</span>,deltaX,<span class="number">0</span>,<span class="number">1000</span>);</div><div class="line">	invalidate();</div><div class="line">&#125;</div><div class="line"><span class="meta">@override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(mScroller.computeScrollOffset())&#123;</div><div class="line">		scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</div><div class="line">		postInvalidate();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面代码可以知道，我们首先会构造一个Scroller对象，并调用他的startScroll方法，该方法并没有让view实现滑动，只是把参数保存下来，我们来看看startScroll方法的实现就知道了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScroll</span><span class="params">(<span class="keyword">int</span> startX,<span class="keyword">int</span> startY,<span class="keyword">int</span> dx,<span class="keyword">int</span> dy,<span class="keyword">int</span> duration)</span></span>&#123;</div><div class="line">	mMode = SCROLL_MODE;</div><div class="line">	mFinished = <span class="keyword">false</span>;</div><div class="line">	mDuration = duration;</div><div class="line">	mStartTime = AnimationUtils.currentAminationTimeMills();</div><div class="line">	mStartX = startX;</div><div class="line">	mStartY = startY;</div><div class="line">	mFinalX = startX + dx;</div><div class="line">	mFinalY = startY + dy;</div><div class="line">	mDeltaX = dx;</div><div class="line">	mDeltaY = dy;</div><div class="line">	mDurationReciprocal = <span class="number">1.0f</span> / (<span class="keyword">float</span>)mDuration;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以知道，startScroll方法的几个参数的含义，startX和startY表示滑动的起点，dx和dy表示的是滑动的距离，而duration表示的是滑动时间，注意，这里的滑动指的是View内容的滑动，在startScroll方法被调用后，马上调用invalidate方法，这是滑动的开始，invalidate方法会导致View的重绘，在View的draw方法中调用computeScroll方法，computeScroll又会去向Scroller获取当前的scrollX和scrollY；然后通过scrollTo方法实现滑动，接着又调用postInvalidate方法进行第二次重绘，一直循环，知道computeScrollOffset()方法返回值为false才结束整个滑动过程。 我们可以看看computeScrollOffset方法是如何获得当前的scrollX和scrollY的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">computeScrollOffset</span><span class="params">()</span></span>&#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">int</span> timePassed = (<span class="keyword">int</span>)(AnimationUtils.currentAnimationTimeMills() - mStartTime);</div><div class="line">	<span class="keyword">if</span>(timePassed &lt; mDuration)&#123;</div><div class="line">		<span class="keyword">switch</span>(mMode)&#123;</div><div class="line">			<span class="keyword">case</span> SCROLL_MODE:</div><div class="line">				<span class="keyword">final</span> <span class="keyword">float</span> x = mInterpolator.getInterpolation(timePassed * mDurationReciprocal);</div><div class="line">				mCurrX = mStartX + Math.round(x * mDeltaX);</div><div class="line">				mCurrY = mStartY + Math.round(y * mDeltaY);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		...</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里我们就基本明白了，computeScroll向Scroller获取当前的scrollX和scrollY其实是通过计算时间流逝的百分比来获得的，每一次重绘距滑动起始时间会有一个时间间距，通过这个时间间距Scroller就可以得到View当前的滑动位置，然后就可以通过scrollTo方法来完成View的滑动了。</p>
<h4 id="通过动画"><a href="#通过动画" class="headerlink" title="通过动画"></a>通过动画</h4><p>动画本身就是一种渐近的过程，因此通过动画来实现的滑动本身就具有弹性。实现也很简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator.ofFloat(targetView,<span class="string">"translationX"</span><span class="number">0</span>,<span class="number">100</span>).setDuration(<span class="number">100</span>).start();</div></pre></td></tr></table></figure></p>
<p>当然，我们也可以利用动画来模仿Scroller实现View弹性滑动的过程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> startX = <span class="number">0</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> deltaX = <span class="number">100</span>;</div><div class="line">ValueAnimator animator = ValueAnimator.ofInt(<span class="number">0</span>,<span class="number">1</span>).setDuration(<span class="number">1000</span>);</div><div class="line">animator.addUpdateListener(<span class="keyword">new</span> AnimatorUpdateListener()&#123;</div><div class="line">	<span class="meta">@override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animator)</span></span>&#123;</div><div class="line">		<span class="keyword">float</span> fraction = animator.getAnimatedFraction();</div><div class="line">		mButton1.scrollTo(startX + (<span class="keyword">int</span>) (deltaX * fraction) , <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p>
<p>上面的动画本质上是没有作用于任何对象上的，他只是在1000ms内完成了整个动画过程，利用这个特性，我们就可以在动画的每一帧到来时获取动画完成的比例，根据比例计算出View所滑动的距离。</p>
<h4 id="使用延时策略"><a href="#使用延时策略" class="headerlink" title="使用延时策略"></a>使用延时策略</h4><p>延时策略的核心思想是通过发送一系列延时信息从而达到一种渐近式的效果，具体可以通过Hander和View的postDelayed方法，也可以使用线程的sleep方法。下面以Handler为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_SCROLL_TO = <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FRAME_COUNT = <span class="number">30</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DELATED_TIME = <span class="number">33</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mCount = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="meta">@suppressLint</span>(<span class="string">"HandlerLeak"</span>)</div><div class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> handler()&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</div><div class="line">		<span class="keyword">switch</span>(msg.what)&#123;</div><div class="line">			<span class="keyword">case</span> MESSAGE_SCROLL_TO:</div><div class="line">			mCount ++ ;</div><div class="line">			<span class="keyword">if</span> (mCount &lt;= FRAME_COUNT)&#123;</div><div class="line">				<span class="keyword">float</span> fraction = mCount / (<span class="keyword">float</span>) FRAME_COUNT;</div><div class="line">				<span class="keyword">int</span> scrollX = (<span class="keyword">int</span>) (fraction * <span class="number">100</span>);</div><div class="line">				mButton1.scrollTo(scrollX,<span class="number">0</span>);</div><div class="line">				mHandelr.sendEmptyMessageDelayed(MESSAGE_SCROLL_TO , DELAYED_TIME);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span> : <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="View的事件分发机制"><a href="#View的事件分发机制" class="headerlink" title="View的事件分发机制"></a>View的事件分发机制</h3><h4 id="点击事件的传递规则"><a href="#点击事件的传递规则" class="headerlink" title="点击事件的传递规则"></a>点击事件的传递规则</h4><p>首先我们先看看下面一段伪代码，通过它我们可以理解到点击事件的传递规则：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span> <span class="params">(MotionEvent ev)</span></span>&#123;</div><div class="line">	<span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">if</span> (onInterceptTouchEvnet(ev)&#123;</div><div class="line">		consume = onTouchEvent(ev);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		consume = child.dispatchTouchEnvet(ev);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> consume;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码主要涉及到以下三个方法：</p>
<ul>
<li>public boolean dispatchTouchEvent(MotionEvent ev); 这个方法用来进行事件的分发</li>
<li>public boolean onInterceptTouchEvent(MotionEvent ev); 这个方法用来判断是否拦截事件</li>
<li>public boolean onTouchEvent(MotionEvent ev); 这个方法用来处理点击事件</li>
</ul>
<p>下面理一理点击事件的传递规则：对于一个根ViewGroup，点击事件产生后，首先会传递给他，这时候就会调用他的onDispatchTouchEvent方法，如果Viewgroup的onInterceptTouchEvent方法返回true表示他要拦截事件，接下来事件就会交给ViewGroup处理，调用ViewGroup的onTouchEvent方法；如果ViewGroup的onInteceptTouchEvent方法返回值为false，表示ViewGroup不拦截该事件，这时事件就传递给他的子View，接下来子View的dispatchTouchEvent方法，如此反复直到事件被最终处理。</p>
<p>当一个View需要处理事件时，如果它设置了OnTouchListener，那么onTouch方法会被调用，如果onTouch返回false，则当前View的onTouchEvent方法会被调用，返回true则不会被调用，同时，在onTouchEvent方法中如果设置了OnClickListener，那么他的onClick方法会被调用。由此可见处理事件时的优先级关系：<br>onTouchListener &gt; onTouchEvent &gt; onClickListener</p>
<p>关于事件传递的机制，这里给出一些结论：</p>
<ol>
<li>一个事件系列以down事件开始，中间包含数量不定的move事件，最终以up事件结束。</li>
<li>正常情况下，一个事件序列只能由一个View拦截并消耗。</li>
<li>某个View拦截了事件后，该事件序列只能由它去处理，并且它的onInterceptTouchEvent不会再被调用。</li>
<li>某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvnet返回false），那么同一事件序列中的其他事件都不会交给他处理，并且事件将重新交由他的父元素去处理，即父元素的onTouchEvent被调用。</li>
<li>如果View不消耗ACTION_DOWN以外的其他事件，那么这个事件将会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终消失的点击事件会传递给Activity去处理。</li>
<li>ViewGroup默认不拦截任何事件。</li>
<li>View没有onInterceptTouchEvent方法，一旦事件传递给它，它的onTouchEvent方法会被View的事件体系调用。</li>
<li>View的onTouchEvent默认消耗事件，除非他是不可点击的（clickable和longClickable同时为false）。</li>
<li>View的enable不影响onTouchEvent的默认返回值。</li>
<li>onClick会发生的前提是当前View是可点击的，并且收到了down和up事件。</li>
<li>事件传递过程总是由外向内的，即事件总是先传递给父元素，然后由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的分发过程，但是ACTION_DOWN事件除外。</li>
</ol>
<h3 id="View的滑动冲突"><a href="#View的滑动冲突" class="headerlink" title="View的滑动冲突"></a>View的滑动冲突</h3><p>在界面中，只要内外两层同时可以滑动，这个时候就会产生滑动冲突。</p>
<h4 id="常见的滑动冲突场景"><a href="#常见的滑动冲突场景" class="headerlink" title="常见的滑动冲突场景"></a>常见的滑动冲突场景</h4><ol>
<li>外部滑动和内部滑动方向不一致；</li>
<li>外部滑动方向和内部滑动方向一致；</li>
<li>上面两种情况的嵌套。</li>
</ol>
<h4 id="滑动冲突的处理规则"><a href="#滑动冲突的处理规则" class="headerlink" title="滑动冲突的处理规则"></a>滑动冲突的处理规则</h4><ol>
<li>对于场景一，处理的规则是：当用户左右（上下）滑动时，需要让外部的View拦截点击事件，当用户上下（左右）滑动的时候，需要让内部的View拦截点击事件。根据滑动的方向判断谁来拦截事件。</li>
<li>对于场景二，由于滑动方向一致，这时候只能在业务上找到突破点，根据业务需求，规定什么时候让外部View拦截事件，什么时候由内部View拦截事件。</li>
<li>场景三的情况相对比较复杂，同样根据需求在业务上找到突破点。</li>
</ol>
<h4 id="滑动冲突的解决方式"><a href="#滑动冲突的解决方式" class="headerlink" title="滑动冲突的解决方式"></a>滑动冲突的解决方式</h4><ol>
<li>外部拦截法：所谓的外部拦截法是指点击事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，否则就不拦截。下面是伪代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span> <span class="params">(MotionEvent event)</span></span>&#123;</div><div class="line">	<span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">	<span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line">	<span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">			intercepted = <span class="keyword">false</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">			<span class="keyword">if</span> (父容器需要当前事件） &#123;</div><div class="line">				intercepted = <span class="keyword">true</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				intercepted = flase;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">			intercepted = <span class="keyword">false</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span> : <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">mLastXIntercept = x;</div><div class="line">mLastYIntercept = y;</div><div class="line"><span class="keyword">return</span> intercepted;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>内部拦截法：内部拦截法是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗，否则就交由父容器进行处理。这种方法与Android事件分发机制不一致，需要配合requestDisallowInterceptTouchEvent方法才能正常工作。下面是伪代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span> <span class="params">( MotionEvent event )</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">		<span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line">		<span class="keyword">switch</span> (event.getAction) &#123;</div><div class="line">			<span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">				parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">				<span class="keyword">int</span> deltaX = x - mLastX;</div><div class="line">				<span class="keyword">int</span> deltaY = y - mLastY;</div><div class="line">				<span class="keyword">if</span> (父容器需要此类点击事件) &#123;</div><div class="line">					parent.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span> : <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	mLastX = x;</div><div class="line">	mLastY = y;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了子元素需要做处理外，父元素也要默认拦截除了ACTION_DOWN以外的其他事件，这样当子元素调用parent.requestDisallowInterceptTouchEvent(false)方法时，父元素才能继续拦截所需的事件。因此，父元素要做以下修改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span> <span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> action = event.getAction();</div><div class="line">	<span class="keyword">if</span>(action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至于具体的实现可以根据实际需要去修改拦截成立的条件，开发艺术艺术中也给出了实<br>例，具体可参考书中P161-P173。</p>
<hr>
<h2 id="理解RemoteViews"><a href="#理解RemoteViews" class="headerlink" title="理解RemoteViews"></a>理解RemoteViews</h2><p>RemoteViews提供了一组基础的操作，用于跨进程更新它的界面。RemoteViews在Andriod中的使用场景有两种：通知栏和桌面小部件(都运行在SystemServer进程)。</p>
<h3 id="RemoteViews的应用"><a href="#RemoteViews的应用" class="headerlink" title="RemoteViews的应用"></a>RemoteViews的应用</h3><p>通知栏主要通过NotificationManager的notify方法来实现，除了默认效果外还可以自定义布局。<br>桌面小工具主要通过AppWidgetProvider来实现，AppWidgetProvider本质上是一个广播。<br>两者都会用到RemoteViews，两者都运行在其他进程中，准确的说是系统的SystemServer进程。</p>
<h4 id="RemoteViews在通知栏上的应用"><a href="#RemoteViews在通知栏上的应用" class="headerlink" title="RemoteViews在通知栏上的应用"></a>RemoteViews在通知栏上的应用</h4><p>关于PendingIntent，它表示的是一种特定的Intent，这个Intent中所包含的意图必须由用户来触发。</p>
<h4 id="RemoteViews在桌面小部件上的应用"><a href="#RemoteViews在桌面小部件上的应用" class="headerlink" title="RemoteViews在桌面小部件上的应用"></a>RemoteViews在桌面小部件上的应用</h4><p>AppWidgetProvider实现桌面小工具的类，本质是一个广播即BroadcastReceiver。<br>具体使用看系统自动生成的桌面小工具。<br>桌面小部件上不管是初始化界面还是后续的更新界面都必须使用RemoteViews来完成。</p>
<h4 id="PendingIntent概述"><a href="#PendingIntent概述" class="headerlink" title="PendingIntent概述"></a>PendingIntent概述</h4><p>PendingIntent和Intent的区别在于，PendingIntent是在将来的某个环节的不确定的时刻发生，而Intent是立刻发生。</p>
<h3 id="RemoteViews的内部机制"><a href="#RemoteViews的内部机制" class="headerlink" title="RemoteViews的内部机制"></a>RemoteViews的内部机制</h3><ul>
<li>大部分的set方法的确是通过发射来完成的。</li>
<li>NotificationManager和AppWidgetProvider通过Binder分别和SystemServer进程中的NotificationManagerService以及AppWidgetServer进行通信。</li>
<li>RemoteViews会通过Binder传递到SystemServer进程中，这是因为RemoteViews实现了Parcelable接口，因此它可以跨进程传输，系统会根据RemoteViews中的包名等信息去得到该应用的资源。</li>
</ul>
<h3 id="RemoteViews的意义"><a href="#RemoteViews的意义" class="headerlink" title="RemoteViews的意义"></a>RemoteViews的意义</h3><p>模拟通知栏效果实现跨进程跨进程的UI更新。<br>我们可以像系统一样使用Binder来实现，但是为了简单起见就采用广播。<br>实际：</p>
<ul>
<li>现在用两个应用，一个应用需要能够更新另一个应用的某个界面，这个时候我们当然可以选择AIDL去实现（<strong>跨应用更新UI</strong>），但是如果对界面的更新比较频繁，这个时候就会有效率的问题，如果采用RemoteViews来实现就没有这个问题了。（RemoteViews只支持一些常用的View,对于自定义的View是不支持的。）</li>
</ul>
<hr>
<h2 id="Android动画深入分析"><a href="#Android动画深入分析" class="headerlink" title="Android动画深入分析"></a>Android动画深入分析</h2><p>Android动画分为三种：</p>
<ul>
<li>1.View动画（平移、缩放、旋转、透明度）</li>
<li>2.帧动画（图片切换动画）</li>
<li>3.属性动画（动态的改变对象的属性从而达到动画的效果）</li>
</ul>
<h3 id="View动画"><a href="#View动画" class="headerlink" title="View动画"></a>View动画</h3><p>View动画的作用对象是View，支持四种动画效果：</p>
<ul>
<li>1.平移</li>
<li>2.缩放</li>
<li>3.旋转</li>
<li>4.透明</li>
</ul>
<h4 id="View动画的种类"><a href="#View动画的种类" class="headerlink" title="View动画的种类"></a>View动画的种类</h4><p>上述四种变换效果对应着Animation四个子类： TranslateAnimation 、 ScaleAnimation 、 RotateAnimation 和 AlphaAnimation 。这四种动画皆可以通过XML定义，也可以通过代码来动态创建。</p>
<p><strong>xml定义动画:</strong></p>
<ul>
<li><p>1.<set> 标签表示动画集合，对应AnimationSet类，可以包含一个或若干个动画，内部还可以嵌套其他动画集合。两个属性：</set></p>
<ul>
<li>i. android:interpolator 表示动画集合所采用的插值器，插值器影响动画速度，比如非匀速动画就需要通过插值器来控制动画的播放过程。</li>
<li>ii. android:shareInterpolator 表示集合中的动画是否和集合共享同一个插值器，如果集合不指定插值器，那么子动画就需要单独指定所需的插值器或默认值。</li>
</ul>
</li>
<li><p>2.<code>&lt;translate&gt;</code>、<code>&lt;scale&gt;</code>、<code>&lt;rotate&gt;</code>、<code>&lt;alpha&gt;</code>这几个子标签分别代表四种变换效果。</p>
</li>
<li><p>3.定义完View动画的xml后，通过以下代码应用动画：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Aniamation anim = AnimationUtils.loadAnimation(context,R.anim.animation_test);</div><div class="line">view.startAnimation(anim);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>代码动态创建动画：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AlphaAnimation alphaAnimation = <span class="keyword">new</span> AlphaAnimation(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">alphaAnimation.setDuration(<span class="number">1500</span>);</div><div class="line">view.startAnimation(alphaAnimation);</div></pre></td></tr></table></figure>
<h4 id="自定义View动画"><a href="#自定义View动画" class="headerlink" title="自定义View动画"></a>自定义View动画</h4><p>需要继承 Animation 这个抽象类，重写它的 initialize 和 applyTransformation 方法。在 initialize 方法中做一些初始化工作，在 applyTransformation 中进行相应的矩阵变换即可，很多时候需要采用 Camera 来简化矩阵变换的过程。自定义View动画的过程主要是矩阵变换的过程。</p>
<h4 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h4><p>帧动画是顺序播放一组预先定义好的图片，使用简单，但容易引起OOM，所以在使用帧动画时应尽量避免使用过多尺寸较大的图片。</p>
<h3 id="View动画的特殊使用场景"><a href="#View动画的特殊使用场景" class="headerlink" title="View动画的特殊使用场景"></a>View动画的特殊使用场景</h3><h4 id="LayoutAnimation"><a href="#LayoutAnimation" class="headerlink" title="LayoutAnimation"></a>LayoutAnimation</h4><p>作用于ViewGroup，为ViewGroup指定一个动画，当它的子元素出场时都会具有这种动画效果，一般用在ListView上。</p>
<h4 id="Activity的切换效果"><a href="#Activity的切换效果" class="headerlink" title="Activity的切换效果"></a>Activity的切换效果</h4><p>我们可以自定义Activity的切换效果，主要通过在 startActivity 或者 finish 的后面增加<code>overridePendingTransition(int enterAnim , int exitAnim)</code>方法</p>
<h3 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h3><p>API 11后加入，可以在一个时间间隔内完成对象从一个属性值到另一个属性值的改变。因此与<br>View动画相比，属性动画几乎无所不能，只要对象有这个属性，它都能实现动画效果。API11<br>以下可以通过 nineoldandroids 库来兼容以前版本。</p>
<h4 id="属性动画有以下三种使用方法："><a href="#属性动画有以下三种使用方法：" class="headerlink" title="属性动画有以下三种使用方法："></a><strong>属性动画有以下三种使用方法：</strong></h4><ul>
<li>ObjectAnimator:<ul>
<li><code>ObjectAnimator.ofFloat(view,&quot;translationY&quot;,values).start();</code></li>
</ul>
</li>
<li><p>ValueAnimator</p>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ValueAnimator colorAnim = ObjectAnimator.ofInt(view,<span class="string">"backgroundColor"</span>,<span class="comment">/*red*/</span><span class="number">0xffff8080</span>,<span class="comment">/*blue*/</span><span class="number">0xff8080ff</span>);</div><div class="line">colorAnim.setDuration(<span class="number">2000</span>);</div><div class="line">colorAnim.setEvaluator(<span class="keyword">new</span> ArgbEvaluator());</div><div class="line">colorAnim.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">colorAnim.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">colorAnim.start();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>AnimatorSet</p>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</div><div class="line">set.playTogether(animator1,animator2,animator3);</div><div class="line">set.setDuration(<span class="number">3</span>*<span class="number">1000</span>).start();</div></pre></td></tr></table></figure>
</li>
<li><p>也可以通过在xml中定义在 res/animator/ 目录下。具体如下:</p>
<ul>
<li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line">&lt;objectAnimator</div><div class="line">....../&gt;</div><div class="line">&lt;animator</div><div class="line">....../&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
</li>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">AnimatorSet set = (AnimatorSet)AnimatorInflater.loadAnimator(context , R.animator.anim);</div><div class="line">set.setTarget(view);</div><div class="line">set.start();</div><div class="line">&lt;set&gt; 标签对应 AnimatorSet,&lt;animator&gt;对应ValueAnimator,</div><div class="line">而&lt;objectAnimator&gt;则对应 ObjectAnimator。</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="理解差值器和估值器"><a href="#理解差值器和估值器" class="headerlink" title="理解差值器和估值器"></a>理解差值器和估值器</h4><ul>
<li><p>时间插值器（ TimeInterpolator） 的作用是根据时间流逝的百分比来计算出当前属性值改变的百分比，系统预置的有LinearInterpolator（<strong>线性插值器：匀速动画</strong>),AccelerateDecelerateInterpolator（<strong>加速减速插值器：动画两头慢中间快</strong>）,DecelerateInterpolator(<strong>减速插值器：动画越来越慢</strong>）。</p>
</li>
<li><p>估值器（ TypeEvaluator） 的作用是根据当前属性改变的百分比来计算改变后的属性值。<br>系统预置有IntEvaluator 、FloatEvaluator 、ArgbEvaluator。</p>
</li>
<li><p>具体来说 对于一个作用在view上改变其宽度属性、持续40ms的属性动画来说，就是当时间t=20ms时，时间流逝了50%，那么view的宽度属性应该改变了多少呢？这个就由Interpolator和Evaluator的算法来决定。</p>
</li>
</ul>
<h4 id="属性动画的监听器"><a href="#属性动画的监听器" class="headerlink" title="属性动画的监听器"></a>属性动画的监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnimatorListener</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span></span>; <span class="comment">//动画开始</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span></span>; <span class="comment">//动画结束</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span></span>; <span class="comment">//动画取消</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span></span>; <span class="comment">//动画重复播放</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了方便开发，系统提供了AnimatorListenerAdapter类，它是AnimatorListener的适配器类，可以有选择的实现以上4个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Implementors of this interface can add themselves as update listeners</div><div class="line">* to an &lt;code&gt;ValueAnimator&lt;/code&gt; instance to receive callbacks on every animation</div><div class="line">* frame, after the current frame's values have been calculated for that</div><div class="line">* &lt;code&gt;ValueAnimator&lt;/code&gt;.</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnimatorUpdateListener</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	* &lt;p&gt;Notifies the occurrence of another frame of the animation.&lt;/p&gt;</div><div class="line">	* *</div><div class="line">	<span class="doctag">@param</span> animation The animation which was repeated.</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>AnimatorUpdateListener会监听整个动画的过程，动画由许多帧组成的，每播放一帧，onAnimationUpdate就会调用一次。</p>
<h4 id="对任意属性做动画"><a href="#对任意属性做动画" class="headerlink" title="对任意属性做动画"></a>对任意属性做动画</h4><ul>
<li><p>1.属性动画要求作用的对象提供该属性的get和set方法，属性动画根据外界传递的该属性的初始值和最终值，通过多次调用set方法来实现动画效果。</p>
</li>
<li><p>2.如果被作用的对象没有set/get方法，可以：</p>
<ul>
<li>i.请给你的对象加上get和set方法，如果你有权限的话（ 对于SDK或者其他第三方类库<br>的类无法加上的） </li>
<li>ii.用一个类来包装原始对象，间接为其提供get和set方法</li>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//包装View类 用于给属性动画调用 从而包装了set get</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewWrapper</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> View target;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ViewWrapper</span><span class="params">(View target)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.target = target;</div><div class="line">	&#125; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> target.getLayoutParams().width;</div><div class="line">	&#125; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</div><div class="line">		target.getLayoutParams().width = width;</div><div class="line">		target.requestLayout();</div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"><span class="comment">//使用：</span></div><div class="line">ViewWrapper wrapper = <span class="keyword">new</span> ViewWrapper(mButton);</div><div class="line">ObjectAnimator.ofInt(mButton,<span class="string">"width"</span>,<span class="number">500</span>).setDuration(<span class="number">3000</span>).start();</div></pre></td></tr></table></figure>
</li>
<li><p>iii.采用ValueAnimator，监听动画过程，自己实现属性的改变；</p>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performAnimate</span><span class="params">(<span class="keyword">final</span> View target, <span class="keyword">final</span> <span class="keyword">int</span> start, <span class="keyword">final</span> <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">	ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class="number">1</span>, <span class="number">100</span>);</div><div class="line">	valueAnimator.addUpdateListener(<span class="keyword">new</span> AnimatorUpdateListener() &#123;</div><div class="line">		<span class="comment">// 持有一个IntEvaluator对象，方便下面估值的时候使用</span></div><div class="line">		<span class="keyword">private</span> IntEvaluator mEvaluator = <span class="keyword">new</span> IntEvaluator();</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animator)</span> </span>&#123;</div><div class="line">			<span class="comment">// 获得当前动画的进度值，整型，1-100之间</span></div><div class="line">			<span class="keyword">int</span> currentValue = (Integer) animator.getAnimatedValue();</div><div class="line">			Log.d(TAG, <span class="string">"current value: "</span> + currentValue);</div><div class="line">			<span class="comment">// 获得当前进度占整个动画过程的比例，浮点型，0-1之间</span></div><div class="line">			<span class="keyword">float</span> fraction = animator.getAnimatedFraction();</div><div class="line">			<span class="comment">// 直接调用整型估值器通过比例计算出宽度，然后再设给Button</span></div><div class="line">			target.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);</div><div class="line">			target.requestLayout();</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	valueAnimator.setDuration(<span class="number">5000</span>).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="属性动画的工作原理"><a href="#属性动画的工作原理" class="headerlink" title="属性动画的工作原理"></a>属性动画的工作原理</h4><p>属性动画需要运行在有Looper的线程中，系统通过反射调用被作用对象get/set方法。</p>
<h3 id="使用动画的注意事项"><a href="#使用动画的注意事项" class="headerlink" title="使用动画的注意事项"></a>使用动画的注意事项</h3><ul>
<li>1.使用帧动画时，当图片数量较多且图片分辨率较大的时候容易出现OOM，需注意，尽量<br>避免使用帧动画。</li>
<li>2.使用无限循环的属性动画时，在Activity退出时即使停止，否则将导致Activity无法释放从而造成内存泄露。</li>
<li>3.动画在3.0以下的系统存在兼容性问题，特殊场景可能无法正常工作，需做好适配工作。</li>
<li>4.View动画是对View的影像做动画，并不是真正的改变了View的状态，因此有时候会出现动画完成后View无法隐藏（ setVisibility(View.GONE） 失效）,这时候调用 view.clearAnimation() 清理View动画即可解决。</li>
<li>5.不要使用px，使用px会导致不同设备上有不同的效果。</li>
<li>6.View动画是对View的影像做动画，View的真实位置没有变动，动画完成后的新位置是无法触发点击事件的。属性动画是真实改变了View的属性，所以动画完成后的位置可以接受触摸事件。</li>
<li>7.使用动画的过程中，使用硬件加速可以提高动画的流畅度。</li>
</ul>
<hr>
<h2 id="Android的线程和线程池"><a href="#Android的线程和线程池" class="headerlink" title="Android的线程和线程池"></a>Android的线程和线程池</h2><ul>
<li>1.在Android系统，线程主要分为主线程和子线程，主线程处理和界面相关的事情，而子线程一般用于执行耗时操作。</li>
<li>2.在Android中，线程的形态有很多种：<ul>
<li>i.AsyncTask封装了线程池和Handler。</li>
<li>ii.HandlerThread是具有消息循环的线程，内部可以使用handler</li>
<li>iii.IntentService是一种Service，内部采用HandlerThread来执行任务，当任务执行完毕后IntentService会自动退出。由于它是一种Service，所以不容易被系统杀死</li>
</ul>
</li>
<li>3.操作系统中，线程是操作系统调度的最小单元，同时线程又是一种受限的系统资源，其创建和销毁都会有相应的开销。同时当系统存在大量线程时，系统会通过时间片轮转的方式调度每个线程，因此线程不可能做到绝对的并发，除非线程数量小于等于CPU的核心数。</li>
<li>4.频繁创建销毁线程不明智，使用线程池是正确的做法。线程池会缓存一定数量的线程，通过线程池就可以避免因为频繁创建和销毁线程所带来的系统开销。</li>
</ul>
<h3 id="主线程和子线程"><a href="#主线程和子线程" class="headerlink" title="主线程和子线程"></a>主线程和子线程</h3><ul>
<li>1.主线程主要处理界面交互逻辑，由于用户随时会和界面交互，所以主线程在任何时候都需要有较高响应速度，则不能执行耗时的任务；</li>
<li>2.android3.0开始，网络访问将会失败并抛出NetworkOnMainThreadException这个异常，这样做是为了避免主线程由于被耗时操作所阻塞从而现ANR现象。</li>
</ul>
<h3 id="Android中的线程形态"><a href="#Android中的线程形态" class="headerlink" title="Android中的线程形态"></a>Android中的线程形态</h3><h4 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h4><p>1.三个参数（都可为Void)：</p>
<ul>
<li>i. Params：参数</li>
<li>ii. Progress：执行进度</li>
<li>iii. Result：返回值</li>
</ul>
<p>2.四个方法 ：</p>
<ul>
<li>i. onPreExecute() 主线程执行，异步方法执行前调用。</li>
<li>ii. doInBackground(Params…params) 线程池中执行，用于执行异步任务；在方法内部用publishProgress 来更新任务进度。</li>
<li>iii. onProgressUpdate(Progress…value) 主线程执行，后台任务进度状态改变时被调用。</li>
<li>iv. onPostExecute(Result result) 主线程执行，异步任务执行之后被调用执行顺序： onPreExecute-&gt;doInBackground-&gt;onPostExecute 如果取消了异步任务，会回调onCancelled()，onPostExecute则不会被调用。</li>
</ul>
<p>AsyncTask的类必须在主线程加载，Android4.1及以上已经被系统自动完成了；AsyncTask对象必须在主线程创建；execute方法需要在UI线程调用；一个AsyncTask对象只能调用一次；Android1.6之前串行执行，Android1.6采用线程池并行处理任务，Android3.0开始，又采用一个线程来串行执行任务，但也可以通过 executeOnExecutor() 方法来并行执行任务。</p>
<h4 id="AsyncTask的工作原理"><a href="#AsyncTask的工作原理" class="headerlink" title="AsyncTask的工作原理"></a>AsyncTask的工作原理</h4><ul>
<li>1.AsyncTask中有两个线程池（ SerialExecutor 和 THREAD_POOL_EXECUTOR ）和一个 InternalHandler ，其中线程池SerialExecutor用于任务排队，THREAD_POOL_EXECUTOR用于真正执行任务，InternalHandler用于将执行环境切换到主线程。</li>
<li>2.AsyncTask的排队过程：系统首先会把AsyncTask的Params参数封装成FutureTask对象，它充当Runnable的作用，接下来这个FutureTask会交给SerialExecutor的 execute() 方法处理，execute()方法首先会把FutereTask对象插入到任务队列 mTasks 中去；如果没有正在活动的AsyncTask任务，就会执行下一个AsyncTask任务；同时当一个AsyncTask任务执行完成后，AsyncTask会继续执行其他任务直到所有任务都执行为止，可以看出默认情况，AsyncTask是串行执行的（Android3.0后）。</li>
</ul>
<h4 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h4><ul>
<li>1.HandlerThread继承了Thread,是一种可以使用Handler的Thread</li>
<li>2.在run方法中通过 looper.prepare() 来开启消息循环，这样就可以在HandlerThread中创建Handler了</li>
<li>3.外界可以通过一个Handler的消息方式来通知HandlerThread来执行具体任务；确定不使用之后，可以通过 quit 或 quitSafely 方法来终止线程执行</li>
<li>4.具体使用场景是IntentService</li>
</ul>
<h4 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h4><p>IntentSercie是一种特殊的Service，继承了Service并且是抽象类，任务执行完成后会自动停止，优先级远高于普通线程，适合执行一些高优先级的后台任务； IntentService封装了 HandlerThread 和 Handler。</p>
<ul>
<li>1.onCreate 方法自动创建一个HandlerThread</li>
<li>2.然后用它的Looper构造了一个Handler对象 mServiceHandler ，这样通过mServiceHandlerAndroid的线程和线程池发送的消息都会在HandlerThread执行；</li>
<li>3.IntentServiced的 onHandlerIntent 方法是一个抽象方法，需要在子类实现，onHandlerIntent方法执行后，stopSelt(int startId)就会停止服务，如果存在多个后台任务，执行完最后一个stopSelf(int startId)才会停止服务。</li>
</ul>
<h3 id="Android线程池"><a href="#Android线程池" class="headerlink" title="Android线程池"></a>Android线程池</h3><p>优点：</p>
<ol>
<li>重用线程池的线程，减少线程创建和销毁带来的性能开销</li>
<li>控制线程池的最大并发数，避免大量线程互相抢系统资源导致阻塞</li>
<li>提供定时执行和间隔循环执行功能</li>
</ol>
<h4 id="ThreadPoolExecutor（熟悉后可自定义线程池）"><a href="#ThreadPoolExecutor（熟悉后可自定义线程池）" class="headerlink" title="ThreadPoolExecutor（熟悉后可自定义线程池）"></a>ThreadPoolExecutor（熟悉后可自定义线程池）</h4><p>Executor是一个接口，线程池的具体实现在ThreadPoolExecutor；它提供了一系列的参数来配置线程池；Android的线程池 大部分都是通 过Executor提供的工厂方法创建的。</p>
<h5 id="ThreadPoolExecutor常见构造参数"><a href="#ThreadPoolExecutor常见构造参数" class="headerlink" title="ThreadPoolExecutor常见构造参数"></a>ThreadPoolExecutor常见构造参数</h5><ol>
<li>corePoolSize： 线程池的核心线程数，默认情况下，核心线程会一直存活(设置了超时机制除外， allowCoreThreadTimeOut属性为true时开启）</li>
<li>maxinmumPoolSize： 线程池能容纳的最大线程数，当活动的线程达到这个数值之后，后续新任务会被阻塞</li>
<li>keepAliveTime： 非核心线程闲置的超时时长，超过这个时长，非核心线程就会被回收,当allowCoreThreadTimeOut为true时，keepAliveTime同样作用于核心线程。</li>
<li>unit：keepAliveTime的时间单位，这是一个枚举，常用TimeUnit.MILLISECONDS(毫秒)、TimeUnit.SECONDS（秒）、TimeUnit.MINUTES(分钟)</li>
<li>workQueue： 线程池中的任务队列，通过execute方法提交的Runnable对象会存储在这个参数中</li>
<li>threadFactory： 线程工厂，为线程池提供创建线程的功能，是个接口，提供ThreadnewThread(Runnable r)方法</li>
<li>RejectedExecutionHandle：当线程池无法执行新任务时，可能由于线程队列已满或无法成功执行任务，这时候 ThreadPoolExecutor会调用handler的 rejectedExecution的方法，默认会抛出RejectedExecutionException</li>
</ol>
<h5 id="ThreadPoolExecutor执行任务大致遵循如下规则"><a href="#ThreadPoolExecutor执行任务大致遵循如下规则" class="headerlink" title="ThreadPoolExecutor执行任务大致遵循如下规则:"></a>ThreadPoolExecutor执行任务大致遵循如下规则:</h5><ol>
<li>如果线程池中的线程数量未达到核心线程的数量，那么会直接启动一个核心线程来执行任务Android的线程和线程池</li>
<li>如果线程池中的线程数量已经达到或超过核心线程数量，那么任务会被插入到任务队列中排队等待执行</li>
<li>如果步骤2中无法将任务插入到任务队列中，往往是因为任务队列已满，这个时候如果线程数量未达到线程池规定的最大值，那么会立刻启动一个非核心线程来执行任务</li>
<li>如果步骤3中线程数量达到线程池规定的最大值，线程池会拒绝执行任务，并会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者</li>
</ol>
<h5 id="AsyncTask的THREAD-POOL-EXECUTOR线程池配置"><a href="#AsyncTask的THREAD-POOL-EXECUTOR线程池配置" class="headerlink" title="AsyncTask的THREAD_POOL_EXECUTOR线程池配置:"></a>AsyncTask的THREAD_POOL_EXECUTOR线程池配置:</h5><ol>
<li>核心线程数等于CPU核心数+1</li>
<li>线程池最大线程数为CPU核心数的2倍+1</li>
<li>核心线程无超时机制，非核心线程的闲置超时时间为1秒</li>
<li>任务队列容量是128</li>
</ol>
<h4 id="常见的4个线程池"><a href="#常见的4个线程池" class="headerlink" title="常见的4个线程池"></a>常见的4个线程池</h4><ul>
<li>1、FixedThreadPool ：线程数量固定的线程池，当所有线程都处于活动状态时，新任务会处于等待状态，只有核心线程并且不会回收（无超时机制），能快速的响应外界请求。</li>
<li>2、CachedThreadPool ：线程数量不定的线程池，最大线程数Integer.MAX_VALUE(相当于任意大),当所有线程都处于活动状态时，会创建新线程来处理任务；线程池的空闲进程超时时长为60秒，超过就会被回收；任何任务都会被立即执行，适合执行大量的耗时较少的任务。</li>
<li>3、ScheduledThreadPool ：核心线程数量固定，非核心线程数量无限制，非核心线程闲置时会被立刻回收，用于执行定时任务和具有固定周期的重复任务。</li>
<li>4、SingleThreadExecutor ：只有一个核心线程，所有任务都在这个线程中串行执行，不需要处理线程同步问题。</li>
</ul>
<hr>
<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul>
<li><a href="https://github.com/zhuyongit/AndroidDevelopmentArt" target="_blank" rel="external">Android开发艺术探索，脑图笔记</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26599538/&quot;&gt;《Android开发艺术探索》&lt;/a&gt; - 一本Android进阶类书籍，采用理论、源码和实践相结合的方式来阐述高水准的Android应用开发要点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="Books" scheme="http://jingbin.me/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>《Android群英传 神兵利器》读书笔记</title>
    <link href="http://jingbin.me/2018/02/04/%E3%80%8AAndroid%E7%BE%A4%E8%8B%B1%E4%BC%A0-%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://jingbin.me/2018/02/04/《Android群英传-神兵利器》读书笔记/</id>
    <published>2018-02-04T15:16:31.000Z</published>
    <updated>2018-06-06T16:22:22.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://book.douban.com/subject/26855851/" target="_blank" rel="external">《Android群英传 神兵利器》</a> - Android开发的工具使用</p>
</blockquote>
<a id="more"></a>
<p>这是一本Android开发的工具书，里面的提到的工具基本上是每个Android开发者必备的技能，买这本书的起因是看到有介绍Gradle和性能优化。里面提到的很多工具之前都是用过，所以看得很快，只care自己不熟知的，所以这篇读书笔记是对自己不熟的地方的整理和摘录。</p>
<h2 id="与Gradle的爱恨情仇"><a href="#与Gradle的爱恨情仇" class="headerlink" title="与Gradle的爱恨情仇"></a>与Gradle的爱恨情仇</h2><h3 id="配置全局参数"><a href="#配置全局参数" class="headerlink" title="配置全局参数"></a>配置全局参数</h3><blockquote>
<p>配置后就可以统一管理<code>com.android.support:design</code>版本号了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">根目录的build.gradle中</div><div class="line">ext &#123;</div><div class="line">    <span class="comment">// Support library and architecture components support minSdk 19 and above.</span></div><div class="line">    minSdkVersion = <span class="number">19</span></div><div class="line">    targetSdkVersion = <span class="number">26</span></div><div class="line">    compileSdkVersion = <span class="number">26</span></div><div class="line">    buildToolsVersion = <span class="string">'26.0.2'</span></div><div class="line"></div><div class="line">    <span class="comment">// App dependencies</span></div><div class="line">    supportLibraryVersion = <span class="string">'27.0.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.example.jingbin.cloudreader"</span></div><div class="line">        minSdkVersion rootProject.ext.minSdkVersion</div><div class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">compile <span class="string">"com.android.support:design:$rootProject.supportLibraryVersion"</span></div></pre></td></tr></table></figure>
<h3 id="构建defaultConfig"><a href="#构建defaultConfig" class="headerlink" title="构建defaultConfig"></a>构建defaultConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">defaultConfig&#123;</div><div class="line">  <span class="function">versionName <span class="title">getCustomVersionName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// build.gradle定义方法：</span></div><div class="line">def getCustomVersionName&#123;</div><div class="line"> ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构建buildTypes"><a href="#构建buildTypes" class="headerlink" title="构建buildTypes"></a>构建buildTypes</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">buildTypes&#123;</div><div class="line">  <span class="comment">// xys.initWith(buildTypes.debug) 也可以继承其他的构建类型</span></div><div class="line">  xys&#123;</div><div class="line">     applicationIdSuffix <span class="string">".xys"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>gradle assembleDebug / assembleRelease / <code>assembleXys</code></p>
<p>生成另一个包，在包名后加上”.xys”，这样就可以双开了，不用手动更改包名！</p>
<h3 id="关于签名"><a href="#关于签名" class="headerlink" title="关于签名"></a>关于签名</h3><p>签名文件保存在住module的根目录下。<br>系统有一个默认的debug签名</p>
<p>Android Studio中签名文件是“.jks”文件<br>Eclipse中签名文件是”.keystore”文件</p>
<p>配置签名：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">signingConfigs&#123;</div><div class="line">  xys&#123;</div><div class="line">  		...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CompileOptions : 配置编译的选项 JDK</div><div class="line"><span class="comment">// 使用lint检查代码时错误的话停止，加上这个之后就会继续，但是一般不启动lint，因为启动后会编译很慢</span></div><div class="line">lintOptions&#123;</div><div class="line">	abortOnError <span class="keyword">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构建Proguard-混淆"><a href="#构建Proguard-混淆" class="headerlink" title="构建Proguard 混淆"></a>构建Proguard 混淆</h3><blockquote>
<p>混淆能精简代码、资源、优化代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="comment">// 混淆</span></div><div class="line">            minifyEnabled <span class="keyword">true</span></div><div class="line">            <span class="comment">// Zipalign优化</span></div><div class="line">            zipAlignEnabled <span class="keyword">true</span></div><div class="line">            <span class="comment">// 移除无用的resource文件</span></div><div class="line">            shrinkResources <span class="keyword">true</span></div><div class="line">            <span class="comment">// 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件</span></div><div class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span></div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="动态设置参数"><a href="#动态设置参数" class="headerlink" title="动态设置参数"></a>动态设置参数</h3><p>使用key/value的方式，引入签名的配置，而不是直接写入，这样会增强安全性，特别是对于开源项目</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//配置签名文件</span></div><div class="line">    signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(pStoreFile)</span></span></div><div class="line">            storePassword pStorePassword</div><div class="line">            keyAlias pKeyAlias</div><div class="line">            keyPassword pKeyPassword</div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(pStoreFile)</span></span></div><div class="line">            storePassword pStorePassword</div><div class="line">            keyAlias pKeyAlias</div><div class="line">            keyPassword pKeyPassword</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>然后在<code>gradle.properties</code>中配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 签名信息</div><div class="line">pStoreFile = ./xxxxx.keystore</div><div class="line">pStorePassword = xxxxx</div><div class="line">pKeyAlias = xxxxx</div><div class="line">pKeyPassword = xxxxx</div></pre></td></tr></table></figure>
<h3 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h3><blockquote>
<p>过程相对比较复杂，且网上很多教程，AS3.0和以上的版本略有不同就不列出详细信息</p>
</blockquote>
<p>在清单文件创建占位符 -&gt; 配脚本 -&gt; 生成重命名包(注意AS3.0变化)</p>
<p><strong><em>系统有一个BuildConfig类文件，是无法改变值的。</em></strong>里面有一些常用的配置参数，比如版本号什么的，我们可以手动配置，然后从这个类里面取值。<br>手动配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">buildTypes&#123;</div><div class="line">  xys&#123;</div><div class="line">     buildConfigField <span class="string">"boolean"</span>,<span class="string">"testFlag"</span>,<span class="string">"false"</span></div><div class="line">     signingConfig signingConfig.xys</div><div class="line">     applicaitonIdSuffix <span class="string">".xys"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildConfig</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = Boolean.parseBoolean(<span class="string">"true"</span>);</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APPLICATION_ID = <span class="string">"com.example.jingbin.cloudreader"</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUILD_TYPE = <span class="string">"debug"</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLAVOR = <span class="string">""</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION_CODE = <span class="number">14</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERSION_NAME = <span class="string">"2.0.0"</span>;</div><div class="line">  <span class="comment">// Fields from build type: xys 额外生成了这个</span></div><div class="line">  pubic <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> testFlag = <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>引用Maven中央库：</p>
<ul>
<li><a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a> 上传和使用</li>
<li>使用Gradle上传aar到Maven库</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//    gradle编译加速</span></div><div class="line">    dexOptions &#123;</div><div class="line">        incremental <span class="keyword">true</span></div><div class="line">        javaMaxHeapSize <span class="string">"4g"</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>不同包或相同包下，最好不要出现相同的文件，Merge到一起时，相同的资源名就会发生冲突！</p>
</blockquote>
<h3 id="Grovvy"><a href="#Grovvy" class="headerlink" title="Grovvy"></a>Grovvy</h3><blockquote>
<p>Grovvy(语言)对于Gradle(脚本)，好比于Java对于Android。</p>
</blockquote>
<p>Grovvy核心是Task。<br>Task依赖：增加一个依赖方法，连接起来，让不在一起的Task能够有一个先后执行的关系。</p>
<table>
<thead>
<tr>
<th style="text-align:center">三个阶段</th>
<th style="text-align:center">do Something</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Initiliacation</td>
<td style="text-align:center">初始化阶段，执行项目中的setting.gradle脚本</td>
</tr>
<tr>
<td style="text-align:center">Configration</td>
<td style="text-align:center">解析每个Profect中的build.gradle脚本，生成有向关系图–tashgrash</td>
</tr>
<tr>
<td style="text-align:center">Build</td>
<td style="text-align:center">编译运行阶段，按照tashgraph执行编译</td>
</tr>
</tbody>
</table>
<h2 id="深藏功与名的开发者工具"><a href="#深藏功与名的开发者工具" class="headerlink" title="深藏功与名的开发者工具"></a>深藏功与名的开发者工具</h2><h3 id="AAPT"><a href="#AAPT" class="headerlink" title="AAPT"></a>AAPT</h3><blockquote>
<p>Android Asset Packaging Tool  -&gt; SDK - build-tools</p>
</blockquote>
<p>可以查看，创建，修改压缩文件(Zip、jar、APK),也可将资源编译成二进制文件。<br>查看报信息，资源目录等。</p>
<h3 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h3><p>用于检测各项目中(包含库)中的一些错误问题，比如资源未用或过时的api等。<br>在AS命令行使用<code>gradle lint</code>。(如果gradle版本更新则要更改配置)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用lint检查代码时错误的话停止，加上这个之后就会继续，但是一般不启动lint，因为启动后会编译很慢</span></div><div class="line">lintOptions&#123;</div><div class="line">	abortOnError <span class="keyword">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="无线调试"><a href="#无线调试" class="headerlink" title="无线调试"></a>无线调试</h3><p>基于ADB的TCP/IP模式 - 《图解TCP/IP》</p>
<h3 id="9Patch工具"><a href="#9Patch工具" class="headerlink" title="9Patch工具"></a>9Patch工具</h3><p>SDK -&gt; tools -&gt; draw9patch(画单边就行)<br>在AS中点击鼠标右键生成9patch图</p>
<h3 id="Hierarchy-viewer"><a href="#Hierarchy-viewer" class="headerlink" title="Hierarchy viewer"></a>Hierarchy viewer</h3><p>检测UI性能的工具<br>testCompile 只有Debug生效，Release解除</p>
<h3 id="查看UI"><a href="#查看UI" class="headerlink" title="查看UI"></a>查看UI</h3><blockquote>
<p>iautomatorviewer</p>
</blockquote>
<h3 id="开发者模式"><a href="#开发者模式" class="headerlink" title="开发者模式"></a>开发者模式</h3><blockquote>
<p>调试GPU过渡绘制</p>
</blockquote>
<h2 id="App背后的故事-性能检测与分析工具"><a href="#App背后的故事-性能检测与分析工具" class="headerlink" title="App背后的故事 - 性能检测与分析工具"></a>App背后的故事 - 性能检测与分析工具</h2><h3 id="UI性能分析"><a href="#UI性能分析" class="headerlink" title="UI性能分析"></a>UI性能分析</h3><ul>
<li>调试GPU过渡绘制</li>
<li>16ms黄金准则</li>
<li>布局核心准则：<ul>
<li>尽量使布局的view树扁平，降低布局的层次</li>
<li><strong>Google建议View不宜超过8层</strong></li>
<li>使用组合控件</li>
</ul>
</li>
<li>LinearLayout与RelativeLayout<ul>
<li>使用LinearLayout：保证层级不深</li>
<li>使用RelativeLayout：避免嵌套</li>
</ul>
</li>
</ul>
<ul>
<li>Hierarchy viewer：检测UI性能的工具</li>
<li>Merge与Viewstub  布局懒加载</li>
<li>图片重绘 Overdraw<ul>
<li>Debug Gpu Overdraw查看重绘界面</li>
<li>1、改善布局，避免重叠</li>
<li>2、控件与主背景颜色相同：可移除控件背景</li>
<li>3、自定义view背景，使用dipRect属性减少重绘区域</li>
</ul>
</li>
<li>Profile Gpu rendering<ul>
<li>在开发者模式中，GPU呈现模式分析 -&gt; 在屏幕上显示条形图</li>
</ul>
</li>
</ul>
<h3 id="内存区分"><a href="#内存区分" class="headerlink" title="内存区分"></a>内存区分</h3><blockquote>
<ul>
<li>寄存器 Registers：用于存储指令、地址、数据。</li>
<li>栈 Stack：存放基本类型的数据、对象的引用和函数地址等，由系统控制。</li>
<li>堆 Heap：存放对象本身和数组，由开发者控制。</li>
<li>静态域 static field：存储静态变量。</li>
<li>常量池 constant pool：存储常量。</li>
</ul>
</blockquote>
<p>开发者能够控制的内存，基本在于堆和栈区域，他们的区别如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">堆/栈</th>
<th style="text-align:center">GC管理</th>
<th style="text-align:center">存取速度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">推</td>
<td style="text-align:center">由GC系统控制。变量生命周期结束后，由GC系统决定何时回收</td>
<td style="text-align:center">慢</td>
</tr>
<tr>
<td style="text-align:center">栈</td>
<td style="text-align:center">由虚拟机控制。变量生命周期结束后，由虚拟机释放该变量占用的内存空间</td>
<td style="text-align:center">快</td>
</tr>
</tbody>
</table>
<p>常用的内存类型：</p>
<ul>
<li>VSS - Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）。</li>
<li>RSS - Resident Set Size 实际使用物理内存（包含共享库占用的内存）。</li>
<li>PSS - Proportinal Set size 实际使用的物理内存（比例分配共享库占用的内存）。</li>
<li>USS - Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）。</li>
</ul>
<p>一般来说内存占用大小有如下规律：VSS≥RSS≥PSS≥USS</p>
<h3 id="GC系统"><a href="#GC系统" class="headerlink" title="GC系统"></a>GC系统</h3><p>GC系统遵循GC Root搜索算法，根据是否包含其他对象的引用来判断是否需要进行GC。在Android2.3之后，系统修改了GC，将GC作为并发线程，同时每次GC并不会遍历整个Heap，而是只遍历一部分内存。</p>
<p>GC系统根据GC Root算法进行GC工作，该算法会以一个GC Root对象为起点，搜索与之相关联的对象。如果某个对象与GC Root对象没有找到引用链，则表示該对象需要进行回收，常见的GCRoot对象有以下几种。</p>
<ul>
<li>class：由System class loader 加载的对象。</li>
<li>JNI：jni相关调用的引用、变量、参数。</li>
<li>Thread：活着的线程。</li>
<li>Stack：栈中的对象。</li>
<li>静态：方法区类的静态属性引用的对象。</li>
<li>常量：方法区中的常量引用的对象（final类型）。</li>
</ul>
<h3 id="获取更多内存"><a href="#获取更多内存" class="headerlink" title="获取更多内存"></a>获取更多内存</h3><h4 id="通过子线程"><a href="#通过子线程" class="headerlink" title="通过子线程"></a>通过子线程</h4><blockquote>
<p>安卓系统的内存分配通过进程分配。</p>
</blockquote>
<p>WebView内存回收非常麻烦，需要运行在单独进程中(android:process)。<br>然后通过kill process回收内存。</p>
<h4 id="Native-Heap"><a href="#Native-Heap" class="headerlink" title="Native Heap"></a>Native Heap</h4><blockquote>
<p>安卓系统限制的是JavaHeap的内存大小。</p>
</blockquote>
<p>系统控制的，不受大小限制  -&gt; Fresco.</p>
<h4 id="openGL"><a href="#openGL" class="headerlink" title="openGL"></a>openGL</h4><blockquote>
<p>图像处理</p>
</blockquote>
<h4 id="LargeHeap"><a href="#LargeHeap" class="headerlink" title="LargeHeap"></a>LargeHeap</h4><p>通过清单文件配置<br>加大GC难度，使GC变慢，退到后台时，很容易被回收。</p>
<h4 id="系统内存警告"><a href="#系统内存警告" class="headerlink" title="系统内存警告"></a>系统内存警告</h4><blockquote>
<p>根据情况释放内存</p>
</blockquote>
<ul>
<li>onLowMemory</li>
<li>onTrimMemory</li>
</ul>
<h4 id="检测内存泄漏工具"><a href="#检测内存泄漏工具" class="headerlink" title="检测内存泄漏工具"></a>检测内存泄漏工具</h4><ul>
<li>MAT - Memory Analysis Tool</li>
<li>LeakCanary</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26855851/&quot;&gt;《Android群英传 神兵利器》&lt;/a&gt; - Android开发的工具使用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="Books" scheme="http://jingbin.me/tags/Books/"/>
    
      <category term="工具" scheme="http://jingbin.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>京东CPS商品推广接入流程</title>
    <link href="http://jingbin.me/2018/02/02/%E4%BA%AC%E4%B8%9CCPS%E5%95%86%E5%93%81%E6%8E%A8%E5%B9%BF%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/"/>
    <id>http://jingbin.me/2018/02/02/京东CPS商品推广接入流程/</id>
    <published>2018-02-02T09:55:11.000Z</published>
    <updated>2018-06-06T15:56:51.966Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>京东CPS与阿里百川CPS有很大不同，认清基本概念后集成时就容易的多。</p>
</blockquote>
<a id="more"></a>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>京东CPS，只需要一个链接足以，这条链接放在自身的WebViewActivity中，如果设置了唤起App，则链接会返回一个打开京东App的规则字符串，我们获取到后跳转到京东App就可以了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-3e1438db83abe8c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="京东cps，设置推广位"></p>
<p>设置后得到一个链接，然后用自身的<code>WebView</code>请求，当然也可以用系统自带的浏览器打开，可以直接唤起App。有时候我们不想用户离开自己的应用，使用自身的App的<code>WebView</code>控件打开就成了首选，这里就需要配置一些参数。</p>
<p><a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebViewClient.java" target="_blank" rel="external">继承<code>WebViewClient</code>复写里面的<code>shouldOverrideUrlLoading</code>方法：</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line"><span class="comment">//        DebugUtil.error("----url:"+url);</span></div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(url)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"http:"</span>) || url.startsWith(<span class="string">"https:"</span>)) &#123;</div><div class="line">            <span class="comment">// 可能有提示下载Apk文件</span></div><div class="line">            <span class="keyword">if</span> (url.contains(<span class="string">".apk"</span>)) &#123;</div><div class="line">                startActivity(url);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        startActivity(url);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Intent intent1 = <span class="keyword">new</span> Intent();</div><div class="line">            intent1.setAction(<span class="string">"android.intent.action.VIEW"</span>);</div><div class="line">            Uri uri = Uri.parse(url);</div><div class="line">            intent1.setData(uri);</div><div class="line">            intent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">            mActivity.startActivity(intent1);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>请求京东的推广url后，会返回一串这样的URL SCHEME：<code>openApp.jdMobile://virtual?params={参数}</code><br>这就是跳转京东页面的SCHEME</p>
<h4 id="另外其他App的URL-SCHEME"><a href="#另外其他App的URL-SCHEME" class="headerlink" title="另外其他App的URL SCHEME"></a>另外其他App的URL SCHEME</h4><blockquote>
<p>淘宝： taobao://<br>微博： weibo://qrcode<br>微信： weixin://scanqrcode<br>支付宝： alipayqr://platformapi/startapp?saId=10000007<br>豆瓣： douban://<br>京东： openApp.jdMobile://virtual?params={参数}<br>电话： mobilephone://<br>备忘录： mobilenotes://<br>Chrome谷歌浏览器： googlechrome://<br>12306订票助手： trainassist://<br>飞信： fetion://<br>豆瓣FM： doubanradio://<br>爱奇艺PPS： ppstream://<br>哔哩哔哩动画： bilibili://<br>56视频： com.56Video://<br>365日历： rili365://<br>58同城： wbmain://<br>遇见： iaround://<br>陌陌： momochat://<br>有道词典： yddict://<br>优酷： youku://<br>掌阅iReader： iReader://<br>天涯社区： tianya://<br>天气通Pro： sinaweatherpro://<br>天气通： sinaweather://<br>墨迹天气： rm434209233MojiWeather://<br>腾讯新闻： qqnews://<br>腾讯微云： weiyun://<br>腾讯地图： sosomap://<br>淘宝旅行： taobaotravel://<br>人人： renrenios://</p>
</blockquote>
<h4 id="阿里百川CPS与京东CPS两者对比："><a href="#阿里百川CPS与京东CPS两者对比：" class="headerlink" title="阿里百川CPS与京东CPS两者对比："></a>阿里百川CPS与京东CPS两者对比：</h4><table>
<thead>
<tr>
<th style="text-align:center">CPS类别</th>
<th style="text-align:center">是否需要SDK</th>
<th style="text-align:center">WebView处理</th>
<th style="text-align:center">打开App方式</th>
<th style="text-align:center">App左侧是否有标识</th>
<th style="text-align:center">接入复杂程度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">阿里百川</td>
<td style="text-align:center">是</td>
<td style="text-align:center">无需处理</td>
<td style="text-align:center">通过SDK打开</td>
<td style="text-align:center">有</td>
<td style="text-align:center">相对复杂</td>
</tr>
<tr>
<td style="text-align:center">京东</td>
<td style="text-align:center">否</td>
<td style="text-align:center">要处理</td>
<td style="text-align:center">使用规则协议打开</td>
<td style="text-align:center">无</td>
<td style="text-align:center">简单</td>
</tr>
</tbody>
</table>
<blockquote>
<p>联系我：<a href="https://github.com/youlookwhat" target="_blank" rel="external">GitHub</a>、<a href="https://www.jianshu.com/u/e43c6e979831" target="_blank" rel="external">简书</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;京东CPS与阿里百川CPS有很大不同，认清基本概念后集成时就容易的多。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Toolbar去除标题与返回键间的间距</title>
    <link href="http://jingbin.me/2018/01/22/Toolbar%E5%8E%BB%E9%99%A4%E6%A0%87%E9%A2%98%E4%B8%8E%E8%BF%94%E5%9B%9E%E9%94%AE%E9%97%B4%E7%9A%84%E9%97%B4%E8%B7%9D/"/>
    <id>http://jingbin.me/2018/01/22/Toolbar去除标题与返回键间的间距/</id>
    <published>2018-01-21T18:36:44.000Z</published>
    <updated>2018-06-06T15:53:33.336Z</updated>
    
    <content type="html"><![CDATA[<p>很早就遇到一个问题，如下图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-13ece64c14c7ace4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="间距过大"></p>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/1354448-72bee3d8782a0948.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="间距正常"></p>
<p>标题和左侧的返回键间距过大，之前在做<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a>的时候就遇到了，一直没有解决，由于自身强迫症，心里始终和这个过不去，就研究了很久终于解决了。</p>
<p>之前在网上找了各种解决方法，比如给ToolBar设置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app:contentInsetLeft=<span class="string">"0dp"</span></div><div class="line">app:contentInsetStart=<span class="string">"0dp"</span></div></pre></td></tr></table></figure></p>
<p>不直接给ToolBar设置字体，在ToolBar里面包裹TextView，还是不行。<br>等等…</p>
<p>最后：<br>将<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mTitleToolBar.setNavigationIcon(R.drawable.icon_back);</div></pre></td></tr></table></figure></p>
<p>去掉后，发现标题顶格了，于是怀疑是NavigationIcon的问题。将<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:navigationIcon=<span class="string">"@drawable/icon_back"</span></div></pre></td></tr></table></figure></p>
<p>设置在ToolBar属性上后可以直接看到效果，开始考虑是不是有一个属性是设置NavigationIcon与title之间的间距，果然发现了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:contentInsetStartWithNavigation=<span class="string">"0dp"</span></div></pre></td></tr></table></figure></p>
<p>附上完整代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.Toolbar xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">            android:id=<span class="string">"@+id/title_tool_bar"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            android:background=<span class="string">"@color/colorTheme"</span></div><div class="line">            app:contentInsetLeft=<span class="string">"0dp"</span></div><div class="line">            app:contentInsetStart=<span class="string">"0dp"</span></div><div class="line">            app:contentInsetStartWithNavigation=<span class="string">"0dp"</span></div><div class="line">            app:layout_scrollFlags=<span class="string">"enterAlways|scroll"</span></div><div class="line">            app:navigationIcon=<span class="string">"@drawable/icon_back"</span></div><div class="line">            app:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></div><div class="line">            app:theme=<span class="string">"@style/ToolbarStyle"</span></div><div class="line">            app:title=<span class="string">"标题"</span></div><div class="line">            app:titleTextColor=<span class="string">"@color/colorWhite"</span>&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p>后来直接搜了这个属性查了一下，发现之前还是有很多人遇到过，只不过我没检索出来，推荐一个分析的很好的：</p>
<ul>
<li><a href="http://blog.qiji.tech/archives/15899" target="_blank" rel="external">关于Toolbar中navigationIcon和title之间距离及展开</a></li>
<li><a href="https://stackoverflow.com/questions/40155239/appcontentinsetstartwithnavigation-0dp-isnt-working-in-toolbar" target="_blank" rel="external">app:contentInsetStartWithNavigation=“0dp” isn’t working in ToolBar</a> - 在外面包裹<code>AppBarLayout</code>应该也能达到效果</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早就遇到一个问题，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-13ece64c14c7ace4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;间距过大&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 阿里百川cps SDK接入流程</title>
    <link href="http://jingbin.me/2018/01/19/Android-%E9%98%BF%E9%87%8C%E7%99%BE%E5%B7%9Dcps-SDK%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/"/>
    <id>http://jingbin.me/2018/01/19/Android-阿里百川cps-SDK接入流程/</id>
    <published>2018-01-18T16:41:32.000Z</published>
    <updated>2018-06-06T16:21:45.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因公司业务需求，需接入阿里百川SDK和京东联盟cps相关服务，为了跳到淘宝和京东，用户购买后得到佣金。接入过程中遇到很多坑，网上相关资料也甚少，虽然东西不算多，但花了不少时间，在此记录下来，为了以后的人能有个参考。<br>这里只跳转到天猫，淘宝的产品详情页，京东产品详情会另作文章分享。</p>
<a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote>
<p><a href="http://console.baichuan.taobao.com/applications.htm?spm=a3c0d.8115327.0.0" target="_blank" rel="external">阿里百川 开发者控制台</a></p>
</blockquote>
<h4 id="1-申请百川无线应用"><a href="#1-申请百川无线应用" class="headerlink" title="1.申请百川无线应用"></a>1.申请百川无线应用</h4><p><img src="http://upload-images.jianshu.io/upload_images/1354448-ad909bb9727b6ca0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开发者控制台 应用管理"></p>
<p>注意：Android端和IOS端各申请一个应用，虽然会提示名字不能重复但不影响，也是可以正常使用的。</p>
<h4 id="2-开通业务产品的使用权限"><a href="#2-开通业务产品的使用权限" class="headerlink" title="2.开通业务产品的使用权限"></a>2.开通业务产品的使用权限</h4><p><img src="http://upload-images.jianshu.io/upload_images/1354448-32afda3a479b56e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="业务产品的使用权限"></p>
<h4 id="3-获取安全图片"><a href="#3-获取安全图片" class="headerlink" title="3.获取安全图片"></a>3.获取安全图片</h4><p><img src="http://upload-images.jianshu.io/upload_images/1354448-a03a525632aaa5f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="获取安全图片"></p>
<p><strong>注意：<br>1.一定要使用gradle3.0以下的编译环境的包，不然会提示“上传失败”(这个坑了我好长时间)。<br>2.对应的keystore要一致，虽然我没有遇到问题，但看到其他人反馈过，小心为妙。</strong></p>
<h3 id="接入"><a href="#接入" class="headerlink" title="接入"></a>接入</h3><hr>
<p><a href="http://console.baichuan.taobao.com/sdkdownload.htm?spm=a3c0d.8115327.0.0&amp;appId=71718" target="_blank" rel="external">下载百川电商SDK</a><br>里面会有很详细的说明，这里只快速的过一遍，总结一下自己遇到的坑及解决方法。</p>
<h4 id="添加安全图片-yw1222-jpg"><a href="#添加安全图片-yw1222-jpg" class="headerlink" title="添加安全图片 yw1222.jpg"></a>添加安全图片 yw1222.jpg</h4><p>获得安全图片，并放在/res/drawable目录下，如果已经有安全图片，需要替换。</p>
<h4 id="项目中的build-gradle文件"><a href="#项目中的build-gradle文件" class="headerlink" title="项目中的build.gradle文件"></a>项目中的build.gradle文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  maven &#123;</div><div class="line">            url <span class="string">'http://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/'</span></div><div class="line">        &#125;</div><div class="line">classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span><span class="comment">//Added line</span></div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line">            url <span class="string">'https://maven.google.com/'</span></div><div class="line">            name <span class="string">'Google'</span></div><div class="line">        &#125;</div><div class="line">        maven &#123;</div><div class="line">            url <span class="string">'http://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="modle的build-gradle文件"><a href="#modle的build-gradle文件" class="headerlink" title="modle的build.gradle文件"></a>modle的build.gradle文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line"></div><div class="line">    maven &#123;</div><div class="line">        url <span class="string">"http://mvnrepo.alibaba-inc.com/mvn/repository"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flatDir &#123;</div><div class="line">        dirs <span class="string">'libs'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">//fastjson</span></div><div class="line">    compile <span class="string">'com.alibaba:fastjson:1.2.9'</span></div><div class="line">    <span class="comment">//支付</span></div><div class="line">    compile <span class="string">'com.alibaba.alipay:alipaySingle:20160825@jar'</span></div><div class="line">    <span class="comment">//登陆</span></div><div class="line">    compile <span class="string">'com.ali.auth.sdk:alibabauth_core:1.4.3@jar'</span></div><div class="line">    compile <span class="string">'com.ali.auth.sdk:alibabauth_ui:1.4.3@aar'</span></div><div class="line">    compile <span class="string">'com.ali.auth.sdk:alibabauth_ext:1.4.3@jar'</span></div><div class="line">    <span class="comment">//安全基础</span></div><div class="line">    compile <span class="string">'com.taobao.android:securityguardaar3:5.1.81@aar'</span></div><div class="line">    <span class="comment">//Mtop网关</span></div><div class="line">    compile <span class="string">'com.taobao.android:mtopsdk_allinone_open:1.2.2.4@jar'</span></div><div class="line">    <span class="comment">//applink</span></div><div class="line">    compile <span class="string">'com.alibaba.sdk.android:alibc_link_partner:1.1.0.0'</span></div><div class="line"></div><div class="line">    <span class="comment">//UT (因为和友盟推送的jar重复，所以去掉，不然会报错！！！)</span></div><div class="line">    <span class="comment">//compile 'com.taobao.android:utdid4all:1.1.5.3_proguard@jar'</span></div><div class="line">    compile <span class="string">'com.alibaba.mtl:app-monitor-sdk:2.5.1.3_for_bc_proguard@jar'</span></div><div class="line"></div><div class="line">    <span class="comment">//联盟SDK</span></div><div class="line">    compile <span class="string">'com.alimama.tunion.sdk:tuniontradesdk:0.3.2'</span></div><div class="line">    <span class="comment">//电商SDK</span></div><div class="line">    compile <span class="string">'com.alibaba.sdk.android:alibc_trade_common:3.1.1.206'</span></div><div class="line">    compile <span class="string">'com.alibaba.sdk.android:alibc_trade_biz:3.1.1.206'</span></div><div class="line">    compile <span class="string">'com.alibaba.sdk.android:alibc_trade_sdk:3.1.1.206'</span></div></pre></td></tr></table></figure>
<h4 id="Proguard-规则"><a href="#Proguard-规则" class="headerlink" title="Proguard 规则"></a>Proguard 规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-keepattributes Signature</div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">sun</span>.<span class="title">misc</span>.<span class="title">Unsafe</span> </span>&#123; *; &#125;</div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">taobao</span>.** </span>&#123;*;&#125;</div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">alibaba</span>.** </span>&#123;*;&#125;</div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">alipay</span>.** </span>&#123;*;&#125;</div><div class="line">-dontwarn com.taobao.**</div><div class="line">-dontwarn com.alibaba.**</div><div class="line">-dontwarn com.alipay.**</div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">ut</span>.** </span>&#123;*;&#125;</div><div class="line">-dontwarn com.ut.**</div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">ta</span>.** </span>&#123;*;&#125;</div><div class="line">-dontwarn com.ta.**</div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">json</span>.** </span>&#123;*;&#125;</div><div class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">ali</span>.<span class="title">auth</span>.**  </span>&#123;*;&#125;</div></pre></td></tr></table></figure>
<h4 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--cps--&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span> /&gt;</div><div class="line">tools:replace=<span class="string">"android:allowBackup"</span></div></pre></td></tr></table></figure>
<h4 id="Application初始化"><a href="#Application初始化" class="headerlink" title="Application初始化"></a>Application初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AlibcTradeCommon.turnOnDebug();</span></div><div class="line"><span class="comment">// AlibcTradeBiz.turnOnDebug();</span></div><div class="line"><span class="comment">//电商SDK初始化</span></div><div class="line">AlibcTradeSDK.asyncInit(app, <span class="keyword">new</span> AlibcTradeInitCallback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(app, <span class="string">"初始化成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</div><div class="line">        Toast.makeText(app, <span class="string">"初始化失败,错误码="</span>+code+<span class="string">" / 错误消息="</span>+msg, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String H5 = <span class="string">"H5"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAOBAO = <span class="string">"taobao"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TMALL = <span class="string">"tmall"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String AUTO = <span class="string">"auto"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showDetailPage</span><span class="params">(Activity activity, String id, String type)</span> </span>&#123;</div><div class="line">        AlibcShowParams alibcShowParams;</div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> H5:</div><div class="line">                alibcShowParams = <span class="keyword">new</span> AlibcShowParams(OpenType.H5, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> TAOBAO:</div><div class="line">                alibcShowParams = <span class="keyword">new</span> AlibcShowParams(OpenType.Native, <span class="keyword">false</span>);</div><div class="line">                alibcShowParams.setClientType(<span class="string">"taobao_scheme"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> TMALL:</div><div class="line">                alibcShowParams = <span class="keyword">new</span> AlibcShowParams(OpenType.Native, <span class="keyword">false</span>);</div><div class="line">                alibcShowParams.setClientType(<span class="string">"tmall_scheme"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> AUTO:</div><div class="line">                alibcShowParams = <span class="keyword">new</span> AlibcShowParams(OpenType.Auto, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                alibcShowParams = <span class="keyword">new</span> AlibcShowParams(OpenType.Auto, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        AlibcBasePage alibcBasePage = <span class="keyword">new</span> AlibcDetailPage(id);</div><div class="line">        HashMap&lt;String, String&gt; exParams = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="comment">// 固定写法</span></div><div class="line">        exParams.put(AlibcConstants.ISV_CODE, <span class="string">"appisvcode"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 若非淘客taokeParams设置为null即可   mm_memberId_siteId_adzoneId</span></div><div class="line">        <span class="comment">// pid:广告位id</span></div><div class="line">        AlibcTaokeParams alibcTaokeParams = <span class="keyword">new</span> AlibcTaokeParams();</div><div class="line">        <span class="comment">// adzoneid 为mm_memberId_siteId_adzoneId最后一位</span></div><div class="line">        alibcTaokeParams.adzoneid = <span class="string">"33333"</span>;</div><div class="line">        alibcTaokeParams.pid = <span class="string">"mm_11111_22222_33333"</span>;</div><div class="line">        alibcTaokeParams.subPid = <span class="string">"mm_11111_22222_33333"</span>;</div><div class="line">        alibcTaokeParams.extraParams = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        alibcTaokeParams.extraParams.put(<span class="string">"taokeAppkey"</span>, <span class="string">"xxxxxxx"</span>);</div><div class="line"></div><div class="line">        AlibcTrade.show(activity, alibcBasePage, alibcShowParams, alibcTaokeParams, exParams, <span class="keyword">new</span> AlibcTradeCallback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTradeSuccess</span><span class="params">(AlibcTradeResult alibcTradeResult)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">int</span> i, String s)</span> </span>&#123;</div><div class="line"><span class="comment">//                Toast.makeText(App.getInstance(), "初始化失败,错误码=" + i + " / 错误消息=" + s, Toast.LENGTH_SHORT).show();</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 跳淘宝详情</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showTaobaoDetail</span><span class="params">(Activity activity, String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Tools.isApplicationAvilible(activity, <span class="string">"com.taobao.taobao"</span>)) &#123;</div><div class="line">            showDetailPage(activity, id, TAOBAO);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            showDetailPage(activity, id, AUTO);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 跳天猫详情</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showTmallDetail</span><span class="params">(Activity activity, String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Tools.isApplicationAvilible(activity, <span class="string">"com.tmall.wireless"</span>)) &#123;</div><div class="line">            showDetailPage(activity, id, TMALL);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            showDetailPage(activity, id, AUTO);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="资源销毁"><a href="#资源销毁" class="headerlink" title="资源销毁"></a>资源销毁</h4><p>在使用完成后，可以调用destroy方法，释放百川相应的资源引用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlibcTradeSDK.destroy();</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.jianshu.com/p/e8d1fad84d3f" target="_blank" rel="external">阿里百川电商SDK(3.1)接入与使用</a></li>
<li><a href="http://baichuan.taobao.com/doc2/detail.htm?spm=a3c0d.7629140.0.0.KgnVV1&amp;treeId=129&amp;articleId=104306&amp;docType=1" target="_blank" rel="external">电商交易功能详解－Android</a></li>
<li><a href="http://bigdata.taobao.com/docs/doc.htm?spm=a219a.7629140.0.0.L8mb8G&amp;treeId=129&amp;articleId=106491&amp;docType=1" target="_blank" rel="external">百川电商SDK接入Android常见问题</a></li>
<li><a href="http://bigdata.taobao.com/docs/api.htm?scopeId=11655&amp;apiId=26616" target="_blank" rel="external"> 淘宝客基础API</a></li>
</ul>
<blockquote>
<p>联系我：<a href="https://github.com/youlookwhat" target="_blank" rel="external">GitHub</a>、<a href="https://www.jianshu.com/u/e43c6e979831" target="_blank" rel="external">简书</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;因公司业务需求，需接入阿里百川SDK和京东联盟cps相关服务，为了跳到淘宝和京东，用户购买后得到佣金。接入过程中遇到很多坑，网上相关资料也甚少，虽然东西不算多，但花了不少时间，在此记录下来，为了以后的人能有个参考。&lt;br&gt;这里只跳转到天猫，淘宝的产品详情页，京东产品详情会另作文章分享。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《非暴力沟通》读书笔记</title>
    <link href="http://jingbin.me/2018/01/07/%E3%80%8A%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://jingbin.me/2018/01/07/《非暴力沟通》读书笔记/</id>
    <published>2018-01-07T14:24:00.000Z</published>
    <updated>2018-06-06T16:01:05.437Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/3533221/" target="_blank" rel="external">《非暴力沟通》</a>是2009年1月华夏出版社出版的图书，作者是马歇尔·卢森堡。著名的马歇尔·卢森堡博士发现了一种沟通方式，依照它来谈话和聆听，能使人们情意相通，和谐相处，这就是”非暴力沟通”。<br><strong><em>非暴力最重要的应用也许是培养对自己的爱。</em></strong><br><a id="more"></a></p>
<blockquote>
<p>很早之前就看了，大约大半年了，之前记录日记本上，现在整理出来。</p>
</blockquote>
<h3 id="听到不中听的话时，我们有四种选择："><a href="#听到不中听的话时，我们有四种选择：" class="headerlink" title="听到不中听的话时，我们有四种选择："></a>听到不中听的话时，我们有四种选择：</h3><ul>
<li>责备自己</li>
<li>指责他人</li>
<li>体会自己的感受和需要 √</li>
<li>体会他人的感受和需要 √</li>
</ul>
<blockquote>
<p><strong>观察 - 感受 - 需要 - 请求</strong></p>
</blockquote>
<h3 id="需要的三个阶段"><a href="#需要的三个阶段" class="headerlink" title="需要的三个阶段:"></a>需要的三个阶段:</h3><table>
<thead>
<tr>
<th>“情感的奴隶”</th>
<th>“面部可憎”</th>
<th>“生活的主人”</th>
</tr>
</thead>
<tbody>
<tr>
<td>委曲求全</td>
<td>说出心里话</td>
<td>尊重他人的需要</td>
</tr>
</tbody>
</table>
<blockquote>
<p>既表达自己，又关心他人</p>
</blockquote>
<p>我希望你告诉我，即使不喜欢我做的一些事情，你仍然会和我在一起，<strong><em>请让我成为我自己</em></strong>的明确要求。</p>
<p>如果一个人想要别人了解他的处境，听到的却是安慰和建议，那么，他就有可能觉得不太舒服。</p>
<p>沟通可以是一扇窗，也可以是一面墙。</p>
<p>我们无法给别人我们自己都没做的东西。</p>
<ul>
<li>1.体会自己的感受和需要。</li>
<li>2.大声地提出请求。</li>
<li>3.换一个环境。</li>
</ul>
<h3 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h3><p>我们仔细观察正在发生的事情，并清楚地说出观察结果<br>注意观察和评论的区别。<br><strong>不带评论的观察是人类智力的最高形式</strong></p>
<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><h4 id="需要得到满足时的感受"><a href="#需要得到满足时的感受" class="headerlink" title="需要得到满足时的感受"></a>需要得到满足时的感受</h4><table>
<thead>
<tr>
<th style="text-align:center">兴奋</th>
<th style="text-align:center">喜悦</th>
<th style="text-align:center">欣喜</th>
<th style="text-align:center">甜蜜</th>
<th style="text-align:center">精力充沛</th>
<th style="text-align:center">兴高采烈</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">感激</td>
<td style="text-align:center">感动</td>
<td style="text-align:center">乐观</td>
<td style="text-align:center">自信</td>
<td style="text-align:center">振作</td>
<td style="text-align:center">开心</td>
</tr>
<tr>
<td style="text-align:center">高兴</td>
<td style="text-align:center">快乐</td>
<td style="text-align:center">愉快</td>
<td style="text-align:center">幸福</td>
<td style="text-align:center">陶醉</td>
<td style="text-align:center">满足</td>
</tr>
<tr>
<td style="text-align:center">平静</td>
<td style="text-align:center">自在</td>
<td style="text-align:center">舒适</td>
<td style="text-align:center">放松</td>
<td style="text-align:center">踏实</td>
<td style="text-align:center">安全</td>
</tr>
<tr>
<td style="text-align:center">温暖</td>
<td style="text-align:center">放心</td>
<td style="text-align:center">心旷神怡</td>
<td style="text-align:center">喜出望外</td>
<td style="text-align:center">无忧无虑</td>
<td style="text-align:center">安心</td>
</tr>
</tbody>
</table>
<h4 id="需要没有得到满足时的感受"><a href="#需要没有得到满足时的感受" class="headerlink" title="需要没有得到满足时的感受"></a>需要没有得到满足时的感受</h4><table>
<thead>
<tr>
<th style="text-align:center">害怕</th>
<th style="text-align:center">担心</th>
<th style="text-align:center">焦虑</th>
<th style="text-align:center">着急</th>
<th style="text-align:center">紧张</th>
<th style="text-align:center">心神不灵</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">心烦意乱</td>
<td style="text-align:center">忧伤</td>
<td style="text-align:center">沮丧</td>
<td style="text-align:center">灰心</td>
<td style="text-align:center">气馁</td>
<td style="text-align:center">泄气</td>
</tr>
<tr>
<td style="text-align:center">绝望</td>
<td style="text-align:center">伤感</td>
<td style="text-align:center">凄凉</td>
<td style="text-align:center">悲伤</td>
<td style="text-align:center">恼怒</td>
<td style="text-align:center">愤怒</td>
</tr>
<tr>
<td style="text-align:center">烦恼</td>
<td style="text-align:center">苦恼</td>
<td style="text-align:center">生气</td>
<td style="text-align:center">厌烦</td>
<td style="text-align:center">不满</td>
<td style="text-align:center">不快</td>
</tr>
<tr>
<td style="text-align:center">不耐烦</td>
<td style="text-align:center">不高兴</td>
<td style="text-align:center">震惊</td>
<td style="text-align:center">失望</td>
<td style="text-align:center">困惑</td>
<td style="text-align:center">茫然</td>
</tr>
<tr>
<td style="text-align:center">寂寞</td>
<td style="text-align:center">孤独</td>
<td style="text-align:center">郁闷</td>
<td style="text-align:center">难过</td>
<td style="text-align:center">悲观</td>
<td style="text-align:center">沉重</td>
</tr>
<tr>
<td style="text-align:center">麻木</td>
<td style="text-align:center">精疲力竭</td>
<td style="text-align:center">萎靡不振</td>
<td style="text-align:center">疲惫不堪</td>
<td style="text-align:center">昏昏欲睡</td>
<td style="text-align:center">不舒服</td>
</tr>
<tr>
<td style="text-align:center">无精打采</td>
<td style="text-align:center">尴尬</td>
<td style="text-align:center">惭愧</td>
<td style="text-align:center">内疚</td>
<td style="text-align:center">嫉妒</td>
<td style="text-align:center">遗憾</td>
</tr>
</tbody>
</table>
<h3 id="基本需要"><a href="#基本需要" class="headerlink" title="基本需要"></a>基本需要</h3><p>非暴力沟通把需要看作是有助于生命健康成长的要素。</p>
<h4 id="1-自由选择"><a href="#1-自由选择" class="headerlink" title="1.自由选择"></a>1.自由选择</h4><p>选择梦想/目标/方向<br>自由制定计划来实现这些梦想、目标和方向</p>
<h4 id="2-庆祝"><a href="#2-庆祝" class="headerlink" title="2.庆祝"></a>2.庆祝</h4><p>庆祝生命的创造力以及梦想的实现<br>纪念人生的失落：亲人的去世或梦想的破灭等(表达悲伤)</p>
<h4 id="3-言行一致"><a href="#3-言行一致" class="headerlink" title="3.言行一致"></a>3.言行一致</h4><p>真诚  创造   意义  自我肯定</p>
<h4 id="4-滋养身体"><a href="#4-滋养身体" class="headerlink" title="4.滋养身体"></a>4.滋养身体</h4><p>空气  食物  运动<br>免于病毒、细菌、昆虫及肉食性动物的伤害。<br>休息  住所  触摸 水</p>
<h4 id="5-玩耍"><a href="#5-玩耍" class="headerlink" title="5.玩耍"></a>5.玩耍</h4><p>乐趣  欢笑</p>
<h4 id="6-情意想通"><a href="#6-情意想通" class="headerlink" title="6.情意想通"></a>6.情意想通</h4><p>美 和谐 激励 秩序 平静</p>
<h4 id="7-相互依存"><a href="#7-相互依存" class="headerlink" title="7.相互依存"></a>7.相互依存</h4><table>
<thead>
<tr>
<th style="text-align:center">接纳</th>
<th style="text-align:center">欣赏</th>
<th style="text-align:center">亲密关系</th>
<th style="text-align:center">社区</th>
<th style="text-align:center">体贴</th>
<th style="text-align:center">成长</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">安全感</td>
<td style="text-align:center">倾听</td>
<td style="text-align:center">诚实</td>
<td style="text-align:center">爱</td>
<td style="text-align:center">信心</td>
<td style="text-align:center">尊重</td>
</tr>
<tr>
<td style="text-align:center">支持</td>
<td style="text-align:center">信任</td>
<td style="text-align:center">理解</td>
</tr>
</tbody>
</table>
<blockquote>
<p>诚实使我们能够认识和超越自己的局限性。</p>
</blockquote>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>我们告诉人们，为了改善生活，我们希望他们做什么。<br>我们避免使用抽象的语言，而借助具体的描述，来提出要求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/3533221/&quot;&gt;《非暴力沟通》&lt;/a&gt;是2009年1月华夏出版社出版的图书，作者是马歇尔·卢森堡。著名的马歇尔·卢森堡博士发现了一种沟通方式，依照它来谈话和聆听，能使人们情意相通，和谐相处，这就是”非暴力沟通”。&lt;br&gt;&lt;strong&gt;&lt;em&gt;非暴力最重要的应用也许是培养对自己的爱。&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Books" scheme="http://jingbin.me/categories/Books/"/>
    
    
      <category term="Books" scheme="http://jingbin.me/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>《前任3:再见前任》观后感</title>
    <link href="http://jingbin.me/2018/01/07/%E3%80%8A%E5%89%8D%E4%BB%BB3%EF%BC%9A%E5%86%8D%E8%A7%81%E5%89%8D%E4%BB%BB%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://jingbin.me/2018/01/07/《前任3：再见前任》观后感/</id>
    <published>2018-01-06T18:01:43.000Z</published>
    <updated>2018-06-06T16:20:55.917Z</updated>
    
    <content type="html"><![CDATA[<object width="340" height="86" data="https://music.163.com/style/swf/widget.swf?sid= 528209740&type=2&auto=0&width=320&height=66" type="application/x-shockwave-flash"></object>

<a id="more"></a>
<h3 id="多余的话"><a href="#多余的话" class="headerlink" title="多余的话"></a>多余的话</h3><p>本来定位的是个人博客，无非是自己生活所感所想发泄之所。因为不想一个人写了自己锁起来，想有些人看见有个倾述，又有些东西不想发出来给人看，心理有时候会很矛盾。不像很多人那么有才华，写的幽默并有内涵，自持喜欢读书，看着书架很舒服，但感觉也没有读多少书。</p>
<p>以前的很多博客都是凌晨之后更新的，我看有很多作品也是，也许经过了一天的事务，凌晨是沉淀的最佳时刻。自从健身以后凌晨就很少进行剧烈的脑力运动了，很担心会失去了健身效果，今天是健身后的第一天晚睡，就放肆一回。</p>
<p>今天和一个高中同学的初中女同学去看了《前任3:再见前任》，第二次见面第一次约出去看电影，至于什么关系我也搞不清楚。看了之后心情很沉重，送别人回去后，回来又把《前任攻略》、《前任2:备胎大作战》刷了，看完后就很想理清楚什么。</p>
<h3 id="曾经的感情"><a href="#曾经的感情" class="headerlink" title="曾经的感情"></a>曾经的感情</h3><blockquote>
<p>这是一段很长的故事，之前已经写了很多很多，后来隔了一夜看了觉得好幼稚，所以这里只写重点吧。</p>
</blockquote>
<p>之后看了《前任2》，我觉得我错太多了。<br>女主当初那么单纯的感受就是我最初恋爱的感受。因为当时我是一个弱鸡，我觉得自己还没有能力说那句话，我给自己的定位就是我来好好努力让你接受我，和我结婚。而这就是导致我们分手的罪魁祸首。</p>
<p>搞清自己的定位非常关键，两个人在一起不是谁对谁的好是理所当然的，我喜欢你所以我对你这么好，我愿意付出，愿意花心思在你身上。当然两个人在一起的技巧也就是套路非常重要，直白点就是会撩，可惜的是我不是这块料，不会说特好听的话，做一些暖心的事，曾经以为每个人不一样，有些人不用说很好听得话就能在一起，后来知道这样想就太错了，这是懒惰的借口。</p>
<p>开始想改善自己的这方面的缺点，我不会演讲所以我报了专门改善演讲的课程，而两个人之间的相处天天发生，我却对这没有足够的重视。之前买了这类型的书籍，也没有看完，现在准备慢慢看这方面的，心理学，沟通类及收集一些情话。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-97088ce4c69c7daa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="心理学系列">   </p>
<h3 id="结"><a href="#结" class="headerlink" title="结"></a>结</h3><p>今年除了Android方面的书籍外，开始慢慢看心理学相关的书籍。很早之前就有这个打算，今年定为学习的一年，技术和心理学，如果有时间再扩展其他的学科。</p>
]]></content>
    
    <summary type="html">
    
      &lt;object width=&quot;340&quot; height=&quot;86&quot; data=&quot;https://music.163.com/style/swf/widget.swf?sid= 528209740&amp;type=2&amp;auto=0&amp;width=320&amp;height=66&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/object&gt;
    
    </summary>
    
      <category term="life" scheme="http://jingbin.me/categories/life/"/>
    
    
      <category term="life" scheme="http://jingbin.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>云阅：一个基于网易云音乐UI，使用Gank.Io及豆瓣Api开发的开源项目</title>
    <link href="http://jingbin.me/2018/01/03/%E4%BA%91%E9%98%85%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90UI%EF%BC%8C%E4%BD%BF%E7%94%A8Gank-Io%E5%8F%8A%E8%B1%86%E7%93%A3Api%E5%BC%80%E5%8F%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>http://jingbin.me/2018/01/03/云阅：一个基于网易云音乐UI，使用Gank-Io及豆瓣Api开发的开源项目/</id>
    <published>2018-01-03T10:33:07.000Z</published>
    <updated>2018-06-06T16:19:59.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CloudReader"><a href="#CloudReader" class="headerlink" title="CloudReader"></a>CloudReader</h2><p>一款基于网易云音乐UI，使用GankIo及豆瓣api开发的符合Google Material Desgin阅读类的开源项目。项目采取的是Retrofit + RxJava + MVVM-DataBinding架构开发。开发中所遇到的各种问题已归纳在<a href="http://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/">这里</a>。</p>
<p>github地址：<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a></p>
<blockquote>
<p><a href="http://jingbin.me/2016/12/30/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97-%E4%BA%91%E9%98%85/">版本更新日志</a></p>
</blockquote>
<a id="more"></a>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><ul>
<li>部分效果图</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-6d119cdf55036fce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cloudreader.png"></p>
<ul>
<li>gif演示</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-d3c4ed3d57d58db7.gif?imageMogr2/auto-orient/strip" alt="cloudreader.gif"></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>网易云音乐于2013年4月23日正式发布，是一款主打发现和分享，带有浓厚社交基因的网络音乐产品。相信用过的人都知道它给人的体验是极好的，我看过了绝大多数仿写的案例，基本UI都不够细致，于是决定自己动手写一个，起初也不知道具体它是怎么布局的，后来使用SDK提供的工具<code>uiautomatorviewer</code>慢慢分析后再逐渐完善的，争取效果一致~ </p>
<h2 id="模块分析"><a href="#模块分析" class="headerlink" title="模块分析"></a>模块分析</h2><h3 id="干货（gank-io）"><a href="#干货（gank-io）" class="headerlink" title="干货（gank.io）"></a>干货（gank.io）</h3><blockquote>
<p>API使用的是动听（轮播图）和代码家的Gank.Io。</p>
</blockquote>
<ul>
<li><p><strong>每日推荐：</strong> 干货集中营推送的每日内容，包括每天一个妹子图，相关Android、IOS等其他干货。每天第12：30之后更新，因为双休不更新所以内容缓存三天网络取不到就取缓存。</p>
</li>
<li><p><strong>福利：</strong> Glide加载图片，点击查看大图，支持双指缩放，一下可查看列表的所有图片，再也不用逐个点击每张图啦。</p>
</li>
<li><p><strong>干货订制：</strong> 可以筛选自己喜欢干货的类别，有全部、IOS、App、前端、休息视频和拓展资源。</p>
</li>
<li><p><strong>大安卓：</strong> 显示安卓的全部资讯。支持下拉刷新方便查看最新的资源。</p>
</li>
</ul>
<h3 id="电影（豆瓣）"><a href="#电影（豆瓣）" class="headerlink" title="电影（豆瓣）"></a>电影（豆瓣）</h3><blockquote>
<p>API是豆瓣提供的，因为限制了每个ip每分钟请求的次数，所以请酌情使用，由此带来的不便请见谅。</p>
</blockquote>
<ul>
<li><strong>电影热映区：</strong> 每日更新，展示最新上映的电影热度排行榜。</li>
<li><strong>豆瓣电影Top250：</strong> 豆瓣高分电影集锦，让你放心找好片~</li>
</ul>
<h3 id="书籍（豆瓣）"><a href="#书籍（豆瓣）" class="headerlink" title="书籍（豆瓣）"></a>书籍（豆瓣）</h3><blockquote>
<p>使用的是豆瓣的搜索API。更多订制内容由于时间原因第一版还未添加，第二版会加上。</p>
</blockquote>
<ul>
<li><strong>综合：</strong> 检索豆瓣综合类的书籍并展示。</li>
<li><strong>文学：</strong> 检索豆瓣文学类的书籍并展示。</li>
<li><strong>生活：</strong> 检索豆瓣生活类的书籍并展示。</li>
</ul>
<h3 id="抽屉界面"><a href="#抽屉界面" class="headerlink" title="抽屉界面"></a>抽屉界面</h3><blockquote>
<p>完全仿网易云音乐抽屉界面，包括诸多细节如透明标题栏，背景透明度，水波纹颜色等。</p>
</blockquote>
<ul>
<li><strong>项目主页：</strong>展示项目介绍信息，及内容说明，可以分享给你的好友哦。</li>
<li><strong>扫码下载：</strong>扫码即可下载App，帮助您快速试用~</li>
<li><strong>问题反馈：</strong>常见问题归纳，反馈地方，联系方式都在这里哦！</li>
<li><strong>关于云阅：</strong>更新日志在这里可见，主人是利用工作外时间做的，周期较长，满意的小伙伴给个Star吧，这将是我继续迭代的动力，谢谢~</li>
</ul>
<h2 id="Features-特性"><a href="#Features-特性" class="headerlink" title="Features 特性"></a>Features 特性</h2><ul>
<li>1、干货集中营内容与豆瓣电影书籍内容。</li>
<li>2、高仿网易云音乐歌单详情页。</li>
<li>3、<code>NavigationView</code>搭配<code>DrawerLayout</code>的具体使用。</li>
<li>4、MvvM-DataBing的项目应用。</li>
<li>5、RxBus代替EventBus进行组件之间通讯。</li>
<li>6、<code>ToolBar</code>及<code>TabLayout</code>的使用姿势。</li>
<li>7、<code>Glide</code>加载监听，获取缓存，圆角图片，高斯模糊。</li>
<li>8、水波纹点击效果详细使用与适配。</li>
<li>9、<code>RecyclerView</code>下拉刷新上拉加载。</li>
<li>10、基于<code>DataBinding</code>的<code>ViewHolder</code>。</li>
<li>11、基于<code>DataBinding</code>的<code>BaseActivity</code>和<code>BaseFragment</code>。</li>
<li>12、<code>Fragment</code>懒加载模式。</li>
<li>13、透明状态栏使用与版本适配。</li>
<li>14、<code>SwipeRefreshLayout</code>结合<code>RecyclerView</code>下拉刷新上拉加载。</li>
<li>15、<code>CoordinatorLayout + Behavior</code>实现标题栏渐变。</li>
<li>16、<code>NestedScrollView</code>嵌套<code>RecyclerView</code>的使用。</li>
</ul>
<h2 id="细节分析-ToolBar-上的按钮点击效果"><a href="#细节分析-ToolBar-上的按钮点击效果" class="headerlink" title="细节分析 - ToolBar 上的按钮点击效果"></a>细节分析 - ToolBar 上的按钮点击效果</h2><p>仔细研究的人知道，网易云音乐的UI做的很精致，就拿一个<code>ToolBar</code>为例，上面的每个按钮的点击操作都有各自的效果。这给了用户一个很好的反馈，就是如下的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-71e53682c8ce9706.gif?imageMogr2/auto-orient/strip" alt="toolbar_click.gif"></p>
<p>上图是在android 5.1系统下的效果图。在6.0上搜索的点击效果有些许改变，其他基本类似；5.0以下点击则都表现出一般选择器的效果。</p>
<p>然而做到以上的效果并不容易，需要你对<code>ToolBar</code>有深入的了解；不仅如此，水波纹的点击效果在不同的主题下是有不同的表现。下面一起来谈谈如何达到以上的效果。</p>
<h3 id="关于ToolBar的布局"><a href="#关于ToolBar的布局" class="headerlink" title="关于ToolBar的布局"></a>关于ToolBar的布局</h3><p>看到上图我们了解到一个<code>ToolBar</code>上有三种点击效果..</p>
<p>这就有点尴尬了..不急，我们慢慢来分析。利用SDK下的工具<code>uiautomatorviewer</code>可得知：左边的<strong>菜单</strong>按钮是<code>ToolBar</code>内部包裹的一个<code>Fragment</code>,其中是一个<code>ImageView</code>和一个小红点；然后中间是<code>HorizontalScrollView</code>，其中是三个<code>ImageView</code>；右边的搜索键则是通过设置<code>Menu</code>菜单而来，这样会有长按弹出“搜索”二字的提示。</p>
<p>现总结出两个问题：1、<code>ToolBar</code>上按钮的设置；2、不同按钮点击的水波纹效果</p>
<p><strong>对于1：</strong> <code>ToolBar</code>上按钮的设置</p>
<p>些许研究了<code>ToolBar</code>的使用后得知，可以直接在其内部包裹<code>Imageview</code>外，还可以通过菜单文件设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">    getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，<code>main.xml</code>内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"&gt;</div><div class="line">    &lt;item</div><div class="line">        android:id="@+id/action_search"</div><div class="line">        android:icon="@drawable/actionbar_search"// 显示图标</div><div class="line">        android:orderInCategory="100"// 菜单显示优先级</div><div class="line">        android:title="@string/actionbar_search"// Toast文字“搜索”</div><div class="line">        app:showAsAction="always" /&gt;// 总是显示，其中还有"never"点击后弹出显示；``ifRoom``根据空间判断是否显示</div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure>
<p>然后再找到菜单相应的<code>id</code>处理点击事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.action_search:</div><div class="line"><span class="comment">//                Toast.makeText(this, "打开搜索页面", Toast.LENGTH_SHORT).show();</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">        &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这样就完成了两者点击效果不同的处理。</p>
<p><strong>对于2：</strong>不同按钮点击的水波纹效果</p>
<p>这里不是使用<code>ripple</code>属性了，而是使用系统自带的点击水波纹选择器，给要产生点击效果的控件设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background=<span class="string">"?attr/selectableItemBackgroundBorderless"</span></div></pre></td></tr></table></figure>
<p>然而设置后你会发现所有点击的颜色都是一致的，如果你使用主题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span></div></pre></td></tr></table></figure></p>
<p>点击效果就会全部是黑灰的，就是中间三个按钮的那种效果，如果想要点击效果是白色的话，需要设置主题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div></pre></td></tr></table></figure></p>
<p>知道这样后我们给不同的布局设置不同的主题就解决了这个问题。最终布局文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.Toolbar</div><div class="line">	    android:id="@+id/toolbar"</div><div class="line">	    android:layout_width="match_parent"</div><div class="line">	    android:layout_height="?attr/actionBarSize"</div><div class="line">	    android:background="@color/colorTheme"</div><div class="line">	    app:contentInsetStart="0.0dp"</div><div class="line">	    app:popupTheme="@style/ThemeOverlay.AppCompat.Light"</div><div class="line">	    app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"&gt;</div><div class="line">	</div><div class="line">	    &lt;FrameLayout</div><div class="line">	        android:id="@+id/ll_title_menu"</div><div class="line">	        android:layout_width="wrap_content"</div><div class="line">	        android:layout_height="match_parent"</div><div class="line">	        android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	        android:paddingLeft="15dp"</div><div class="line">	        android:paddingRight="15dp"&gt;</div><div class="line">	</div><div class="line">	        &lt;ImageView</div><div class="line">	            android:id="@+id/iv_title_menu"</div><div class="line">	            android:layout_width="23dp"</div><div class="line">	            android:layout_height="wrap_content"</div><div class="line">	            android:layout_gravity="center"</div><div class="line">	            android:src="@drawable/titlebar_menu" /&gt;</div><div class="line">	    &lt;/FrameLayout&gt;</div><div class="line">	</div><div class="line">	    &lt;HorizontalScrollView</div><div class="line">	        android:layout_width="wrap_content"</div><div class="line">	        android:layout_height="match_parent"</div><div class="line">	        android:layout_gravity="center"&gt;</div><div class="line">	</div><div class="line">	        &lt;LinearLayout</div><div class="line">	            android:layout_width="wrap_content"</div><div class="line">	            android:layout_height="match_parent"</div><div class="line">	            android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	            app:theme="@style/Theme.AppCompat.Light.NoActionBar"&gt;</div><div class="line">	</div><div class="line">	            &lt;ImageView</div><div class="line">	                android:id="@+id/iv_title_gank"</div><div class="line">	                android:layout_width="55dp"</div><div class="line">	                android:layout_height="wrap_content"</div><div class="line">	                android:layout_gravity="center"</div><div class="line">	                android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	                android:src="@drawable/titlebar_disco" /&gt;</div><div class="line">	</div><div class="line">	            &lt;ImageView</div><div class="line">	                android:id="@+id/iv_title_one"</div><div class="line">	                android:layout_width="55dp"</div><div class="line">	                android:layout_height="match_parent"</div><div class="line">	                android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	                android:src="@drawable/titlebar_music" /&gt;</div><div class="line">	</div><div class="line">	            &lt;ImageView</div><div class="line">	                android:id="@+id/iv_title_dou"</div><div class="line">	                android:layout_width="55dp"</div><div class="line">	                android:layout_height="match_parent"</div><div class="line">	                android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	                android:src="@drawable/titlebar_friends" /&gt;</div><div class="line">	</div><div class="line">	        &lt;/LinearLayout&gt;</div><div class="line">	</div><div class="line">	    &lt;/HorizontalScrollView&gt;</div><div class="line"></div><div class="line"> &lt;/android.support.v7.widget.Toolbar&gt;</div></pre></td></tr></table></figure>
<p>这样就得到了我们想要的效果~<br>更多细节优化我会慢慢整理在<a href="https://github.com/youlookwhat/CloudReader/wiki" target="_blank" rel="external">Wiki文档</a>，或你也可以直接查看源代码。</p>
<h2 id="DownLoad"><a href="#DownLoad" class="headerlink" title="DownLoad"></a>DownLoad</h2><p>　<a href="https://fir.im/cloudreader" target="_blank" rel="external">火速跳转</a><br><img src="http://upload-images.jianshu.io/upload_images/1354448-502cceae1674e70a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="download.png"></p>
<h2 id="宝贵意见"><a href="#宝贵意见" class="headerlink" title="宝贵意见"></a>宝贵意见</h2><p>如果有任何问题，请到github的<a href="https://github.com/youlookwhat/CloudReader/issues" target="_blank" rel="external">issue处</a>写上你不明白的地方，也可以通过下面提供的方式联系我，我会及时给予帮助。另外常见的问题已总结在<a href="http://jingbin.me/2016/12/25/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-%E4%BA%91%E9%98%85/">这里</a>。</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li><p>图片来源：<a href="http://www.iconfont.cn/plus" target="_blank" rel="external">iconfont</a>、UI工程师<a href="https://github.com/Sandawang" target="_blank" rel="external">Sandawang</a>和网易云音乐App。</p>
</li>
<li><p>参考项目：<a href="https://github.com/GiitSmile/ImitateNetEasyCloud" target="_blank" rel="external">ImitateNetEasyCloud</a>、<a href="https://github.com/forezp/banya" target="_blank" rel="external">banya</a>；主要数据来源：<a href="https://gank.io/api" target="_blank" rel="external">Gank.Io</a>、<a href="https://developers.douban.com/wiki/?title=terms" target="_blank" rel="external">豆瓣Api</a>。</p>
</li>
<li><p>使用到的开源库：<a href="https://github.com/bumptech/glide" target="_blank" rel="external">glide</a>、<a href="https://github.com/Flipboard/bottomsheet" target="_blank" rel="external">bottomsheet</a>、<a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">nineoldandroids</a>、<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">rxandroid</a>等等。</p>
</li>
<li><p>感谢<a href="https://github.com/daimajia" target="_blank" rel="external">代码家</a>、<a href="https://github.com/hongyangAndroid" target="_blank" rel="external">张鸿洋</a>、<a href="https://github.com/drakeet" target="_blank" rel="external">drakeet</a>、<a href="https://github.com/yang747046912" target="_blank" rel="external">yang747046912</a>、<a href="https://github.com/GiitSmile" target="_blank" rel="external">GiitSmile</a>、<a href="https://github.com/forezp" target="_blank" rel="external">forezp</a>等众多开发者贡献的开源项目，让我从中学到了很多!</p>
</li>
</ul>
<h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>感谢<a href="https://play.google.com/store/apps/details?id=com.netease.cloudmusic" target="_blank" rel="external">网易云音乐App</a>提供参考，附上<a href="http://www.25xt.com/appdesign/12385.html" target="_blank" rel="external">《网易云音乐Android 3.0视觉设计规范文档》</a>。本人是网易云音乐的粉丝，使用了其中的部分素材，并非攻击，如构成侵权请及时通知我修改或删除。大部分数据来自于干货集中营和豆瓣APIV2.0，一切数据解释权都归代码家和豆瓣所有。</p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>如果你觉得不错，对你有帮助，可以帮忙分享给你更多的朋友，这是给我们最大的动力与支持，同时希望你多多fork，star，follow，我将贡献更多的开源项目O(∩_∩)O~。开源使生活更美好！</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><ul>
<li><strong>CSDN：</strong><a href="http://blog.csdn.net/jingbin_" target="_blank" rel="external">Jingbin_</a></li>
<li><strong>Blog：</strong><a href="http://jingbin.me">http://jingbin.me</a></li>
<li><strong>Email：</strong>jingbin127@163.com</li>
<li><strong>GitHub：</strong><a href="https://github.com/youlookwhat" target="_blank" rel="external">https://github.com/youlookwhat</a></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-c282b9a84637ea73.gif?imageMogr2/auto-orient/strip" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CloudReader&quot;&gt;&lt;a href=&quot;#CloudReader&quot; class=&quot;headerlink&quot; title=&quot;CloudReader&quot;&gt;&lt;/a&gt;CloudReader&lt;/h2&gt;&lt;p&gt;一款基于网易云音乐UI，使用GankIo及豆瓣api开发的符合Google Material Desgin阅读类的开源项目。项目采取的是Retrofit + RxJava + MVVM-DataBinding架构开发。开发中所遇到的各种问题已归纳在&lt;a href=&quot;http://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/youlookwhat/CloudReader&quot;&gt;CloudReader&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://jingbin.me/2016/12/30/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97-%E4%BA%91%E9%98%85/&quot;&gt;版本更新日志&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开源项目" scheme="http://jingbin.me/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="cloudreader" scheme="http://jingbin.me/tags/cloudreader/"/>
    
      <category term="开源项目" scheme="http://jingbin.me/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>2018不畏将来 | 2017不念过往</title>
    <link href="http://jingbin.me/2018/01/02/2018%E4%B8%8D%E7%95%8F%E5%B0%86%E6%9D%A5%20%7C%202017%E4%B8%8D%E5%BF%B5%E8%BF%87%E5%BE%80/"/>
    <id>http://jingbin.me/2018/01/02/2018不畏将来 | 2017不念过往/</id>
    <published>2018-01-02T12:48:09.000Z</published>
    <updated>2018-06-06T15:52:06.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2017年终总结"><a href="#2017年终总结" class="headerlink" title="2017年终总结"></a>2017年终总结</h3><p>2016年也准备写年终总结，忙着写云阅就没有写，之后写了<a href="http://jingbin.me/2017/02/27/%E5%9C%A8%E5%B8%9D%E9%83%BD%E7%8B%AC%E5%B1%85%E4%B8%80%E5%B9%B4%E5%A4%9A%EF%BC%8C%E8%AE%A9%E6%88%91%E4%BD%93%E4%BC%9A%E5%88%B0%E4%BB%80%E4%B9%88/">《在帝都独居一年多，让我体会到什么<br>》</a>,算了离开和年终总结一起了。<br>2017年发生太多的事，真的需要好好的回想梳理一下。工作，身体都有很大的改变。<br>本打算在2018年之前，将CloudReader架构规范一下，看来要延期了，不过也是最近一端时间的事。<br>很庆幸自己当初选择这份职业，工作了近三年，现在依然对它非常热爱，前面的路也越来越清晰。</p>
<a id="more"></a>
<h3 id="深圳找工作的两个月"><a href="#深圳找工作的两个月" class="headerlink" title="深圳找工作的两个月"></a>深圳找工作的两个月</h3><p>自从三月份离职去了深圳，在那找了大约两个月的工作，现将能记得的归纳于此。</p>
<p>3月份去了之后住在我一个叔叔那里，在龙华区，记得大二暑假打完暑期工后去那里玩了两天，现在还在那一块但是搬了一点距离，感觉没有多大的变化，他在那边已经住了四年左右。</p>
<!-- 
**起初打算是这样的：**去深圳找前女友的，在那边找一份工作，尽量在她工作的周围（后来由于没有预想的那么好找和她马上要换工作的原因就开始没有考虑地区的投简历了），然后每周去找她希望能复合，在一起后在那边工作然后有时间一起去香港澳门旅游，在武汉买一套房付个首付，在那边挣钱还这边的房贷也基本不会吃力。


**然而现实是这样的：**她准备马上换工作的，我找的工作也不是很顺利就开始不考虑地区，没有复合也没有去香港澳门旅游，在武汉看了房子因为隔主城区很远就放弃了在那边买房子(因为限购的原因只能在不限购的地方买)，做了一个决定就是回武汉，然后分道扬镳。

-->
<h4 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h4><blockquote>
<p>直接进入找工作吧，<br>刚开始在拉钩上投简历，但基本上没有面试的，有时候真怀疑那个平台有问题，投了将近百来份邀请面试的差不多3家。在智联投的最多，也邀请面试的最多。前程无忧投了很多但没有一次邀请面试的。</p>
</blockquote>
<p>最初面试的一家是一家做智能硬件的，深圳有很多做智能硬件的，面试了好几家都是。他们的需求很简单，就是一个智能摄像头，厂家给了开发这个摄像头的SDK文档，然后你用它的文档开发一个Android上运行的软件，在上面操作摄像头的上下左右旋转来达到监控的作用。<br>公司是一层大厅是办公区域，其中隔了一部分，那一部分应该是车间，里面有很多设备。过去后老板直接给了一个软件和文档给我看，软件是厂家提供的但是没有源码，公司之前也没有开发类似的软件，因为自己也没有这方面的经验而且公司也不适合长期发展随便聊了一下就走了。</p>
<p>因为面的太多，之后的就不记录顺序了。</p>
<p>有一家是在关内 南山区，关内的规划很好，道路，环境，建筑都和关外有很大差别。面试是在一家高楼里，里面的人都穿西服打领带很正式，但一家互联网公司一般不会穿如此。进去是CTO接待的我，因为公司想出了一个idea，就差程序员了。这仿佛是一个段子，哈哈哈。<br>CTO是做全栈的，Android端的基本实现了功能，只是UI和性能需要重新优化，各方面都问了，当然基本没有问题，谈薪资时发现公司是初创公司，正在招人而且是独立开发，就叫的16K，处于两点考虑，第一自己不是很想进这家公司，说不定公司马上就没了，第二这活很麻烦而且得不到多大的提升，不适合长待。公司招聘上面写的是10-15k，叫16k也不过分，多了可以要求降低嘛。<br>事实并非如此，过了大约十天，没有联系我，我再次看了一个招聘信息，薪资改为8-10k了…之后面了很多公司，他们都写的10-15k，然而他们根本不能给这个范围的工资，关外的基本是这样。</p>
<p>期间面试，遇到各种奇葩公司，当然也有几家很好的。</p>
<p>有一家位置有点偏，那个地方是个科技园，楼栋编排的很好，而且每一栋都有它的别名，很文艺。进去后，那家公司有自己的Android团队，公司是一整层楼，布局很优雅，还带有一个大的阳台，面试我的是一个小组组长，问了一些工作中的遇到的问题和内存优化方面的问题，他表示很满意，只是那时候已经是午饭时间，人事和CTO去吃饭了就把简历留下了说会通知下一轮面试，但是也是没有结果了。</p>
<p>有一家是做订制外包的，在猪八戒网有店铺。地方在稍微中心一点的一个科技园，在那个科技园面试了三家，这个还算靠谱，面试了估计有一个小时左右，知道了我的能力范围，觉得可以，然后让我和人事沟通，本以为到这一轮很稳了，但没想到的是居然被人事pass了，不知道是不是工资要高了，后来问了一个做ios的，他的工资是8-9k，我要的是12k，当然还可能是其他的原因，具体也不清楚。<br>那地方有一个公司刚成立，公司还没有10个人，正在组建团队，面试的是老板也没有技术面，也是无果。<br>还有一个更奇葩了，去了以后让我在茶水室坐了一会儿，然后过来跟我说今天面试技术的没有来，让我回去，WTF，跑了几个小时过来得到这句话，真TM有病的公司。</p>
<h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><ul>
<li>一家做摄像头智能硬件的，由于没有相关经验和公司没有人带无果。</li>
<li>一家关内的做<strong>手画板</strong>的，就是聊天的时候可以自己画东西发给对方的那种。</li>
<li>一家做订制外包的，被人事Pass了。</li>
<li>一家公司刚起步，忘了做什么的了，10人以内。</li>
<li>一家去了后，说面技术的没来，呵呵🙂</li>
<li>一家不知道做什么的，应该不止一个App，无果。</li>
<li>一家做语音的，差不多和科大讯飞业务一致，得到阿里的投资。两个人问了几个问题就让我走了(是不是人事为了kpi？)。</li>
<li>一家集团的分公司，做智能硬件的，不过之前有人做了接着优化，面了满意，工资最高给的是10k，我只能要10K那就10k，公司条件也很差。无果。</li>
<li>一家去了后有大约7个人左右一起笔试，android端估计爆了，招了这么多人来面。</li>
<li>还有一家还可以，不过公司的位置不大，但人员很多，比较拥挤，面试了以后我之后很明确的问了她有没有录用的可能，那边说工资给不了那么高，我当时要的12K，她说最多只能给到7K。</li>
<li>之前可能还有忘记写的，说最后一个吧。最后一个在龙岗，一家自己在家开的公司…位置不大，招了二十个左右的人，聊了很长时间，想了想还是拿一份offer吧，就答应了。</li>
</ul>
<p>面试资料：<a href="http://jingbin.me/2017/02/20/Android%20%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99%E9%9B%86%E9%94%A6/">Android 面试资料集锦</a></p>
<h3 id="武汉房价"><a href="#武汉房价" class="headerlink" title="武汉房价"></a>武汉房价</h3><blockquote>
<p>2015年没买，2016年涨疯，2017年持续。</p>
</blockquote>
<p>本打算在武汉远城区买套房，深圳工作还房贷，可事实是残酷的。远城区太远以后居住根本不现实，买了也不会增值多少，深圳工作工资也比预想中的少很多，看了一下武汉的Android开发工资和深圳差不多。于是思考后觉得最靠谱的是，马上回武汉。</p>
<ul>
<li>远城区房价也不便宜，平均1w一平，本来不贵，因为限购所以涨了起来。反而主城区的价格还不是很贵，但是就是限购。于是当时想的是工作两年，然后转为武汉户口再在主城区买。</li>
<li>工资差不多，关键是离家近，而且弟弟马上来武汉读书，可以有个照顾。</li>
<li>迟早会回武汉，如果以后回武汉，那在深圳积累的人脉关系就又断了，在武汉还得重新开始。<!-- 既然在那边两个月 感情的起色也不大，再下去作用感觉也就那样了。-->
</li>
</ul>
<p>后来出乎意料的是，武汉出台了300万大学生留汉的政策，放宽了落户标准，很快就落户武汉了。然后经过一些波折看中了武昌理工学院的一套房子，虽说交通现在不太方便，但距离光谷，软件园和金融港不远，价格相对不贵性价比很高，但很难买到，武汉现在楼市万象，各种内定的，不给茶水费基本拿不到房子。刚好有一个同学再做个，找了帮了个忙，但由于出了点问题，现在还是没有没有拿到房子，开盘秒，内定的也都没有拿到，现在等待后续的预留房源在。</p>
<p>那边房子出了问题，房子暂时没看到合适的，看了年后的几个盘，等年后再考虑了。</p>
<h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p>自己的身材一直是偏瘦型，身高177cm，体重基本没有突破60kg，今年是实在看不下去了，刚好看见住的附近有一家健身房，果断进去办了健身卡，并买了私教会员。花费的钱是在不少，有2W左右，因为实在想改变。<br>之后锻炼基本每周三四次，工作日晚上九点过去，周末抽时间去上两节课，从以前的57kg，到现在68kg，今天是02月03日，体重基本在70kg左右，很喜欢那种有肉的感觉，哈哈！健身真的很需要坚持，生活作息，饮食和锻炼是一体的。</p>
<p>锻炼这么久深有感触的是：</p>
<ul>
<li>1.每天12点左右休息(根据每个人生活习惯了)。因为我是10点上班起床较晚，所以睡的相对较晚。不休息好会影响食欲和精神，这是个恶性循环，可个人感觉很难坚持，坚持了四个月还是开始晚睡了，总感觉时间不够用。现在开始慢慢调整。</li>
<li>2.早餐一定要吃，而且最好是上午8-9点吃。吃晚了就没有食欲吃午饭了。</li>
<li>3.锻炼频率每周3次足矣，每次一个小时左右，强度尽量每次比上次重点，有所突破，有氧和无氧合理把握。(这个看个人的，因为我们时间不多，这个时间已经比较难坚持了，相对于锻炼后期我个人来说)</li>
<li>4.饮食很重要，尽量吃高蛋白的食物，用于肌肉生长，买鸡胸肉自己在家做最好了。没有条件买蛋白粉也可以，在锻炼完之后喝一勺，多了吸收不了对身体是个负担。多吃鸡蛋，前四个月我每天早餐四个鸡蛋，一杯豆浆，一个馒头。</li>
</ul>
<p>基本做到上面四点，自己坚持几个月基本就会有效果，健身前期进度很快，从57涨到65用了2个月，但从65涨到69用了5个多月。</p>
<p>这会另外写一个健身记录，用于记录锻炼哪个部位做的什么动作等，肌肉有记忆力，尽量前几次动作做规范，做错误动作有时候不但没锻炼好，而且会对身体不好，产生形体错位。</p>
<h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p>今年定的目标是<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a>达到2000start，算是超额完成了，帮助了很多人感到非常高兴，但发现MVVM架构不规范，只是使用了databinding而已，与之前自己理解的有出入，于是决定结合官方的demo规范一下，现在正在进行中。</p>
<p>现在已经基本完成了，参考了官方的Demo，但是Demo过于简单，没有使用到列表的情况，看了很多其他人写的也没有一个完善的解决方案，根据自己的理解重构了。感觉现在更多的像是MVP-databing，P–VM，写的VM像P层，由于列表刷新不好和数据联动，还是要通过Adapter，而设置Adapter还是要使用那部分设置逻辑，将数据显示到UI上则使用了databinding。</p>
<h3 id="2018学习计划"><a href="#2018学习计划" class="headerlink" title="2018学习计划"></a>2018学习计划</h3><p>今年的计划主要是深耕Android和Java类知识，然后浅尝Kotlin，部分时间看心理学相关知识。</p>
<p>现在在看《Effective Java中文版》、《Android群英传 神兵利器》<br>《Effective Java中文版》：记录的java一些重要的知识点，很值得学习。如果想要更系统的了解java还是推荐《Java编程思想》。<br>《Android群英传 神兵利器》：一本工具书，里面的提到的每个点，几乎都需要掌握，很多之前都用到过，现在在看gradle部分。</p>
<blockquote>
<p> 2018.01.02 23:53  ——–   2018.02.02 续</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2017年终总结&quot;&gt;&lt;a href=&quot;#2017年终总结&quot; class=&quot;headerlink&quot; title=&quot;2017年终总结&quot;&gt;&lt;/a&gt;2017年终总结&lt;/h3&gt;&lt;p&gt;2016年也准备写年终总结，忙着写云阅就没有写，之后写了&lt;a href=&quot;http://jingbin.me/2017/02/27/%E5%9C%A8%E5%B8%9D%E9%83%BD%E7%8B%AC%E5%B1%85%E4%B8%80%E5%B9%B4%E5%A4%9A%EF%BC%8C%E8%AE%A9%E6%88%91%E4%BD%93%E4%BC%9A%E5%88%B0%E4%BB%80%E4%B9%88/&quot;&gt;《在帝都独居一年多，让我体会到什么&lt;br&gt;》&lt;/a&gt;,算了离开和年终总结一起了。&lt;br&gt;2017年发生太多的事，真的需要好好的回想梳理一下。工作，身体都有很大的改变。&lt;br&gt;本打算在2018年之前，将CloudReader架构规范一下，看来要延期了，不过也是最近一端时间的事。&lt;br&gt;很庆幸自己当初选择这份职业，工作了近三年，现在依然对它非常热爱，前面的路也越来越清晰。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://jingbin.me/categories/life/"/>
    
    
      <category term="life" scheme="http://jingbin.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Android 记一次清除缓存所导致的bug</title>
    <link href="http://jingbin.me/2017/12/21/Android-%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84bug/"/>
    <id>http://jingbin.me/2017/12/21/Android-记一次清除缓存所导致的bug/</id>
    <published>2017-12-21T07:45:10.000Z</published>
    <updated>2018-06-06T16:18:07.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>Android五种数据存储方式：</p>
<ol>
<li>使用SharedPreferences存储数据</li>
<li>文件存储数据</li>
<li>SQLite存储数据</li>
<li>ContentProvider</li>
<li>网络存储</li>
</ol>
<p><a href="http://blog.csdn.net/zhangxichao100/article/details/52123396" target="_blank" rel="external">Android几种数据存储方式的应用场景</a></p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>前段时间由于很多人反馈页面无数据的bug，对此考究了一段时间，遂将结果记录于此。</p>
<p><strong>之前：</strong><br>设计的是，一个存储在SharedPreferences的状态值，控制页面是否取本地页面缓存，本地页面缓存也存储在SharedPreferences里。</p>
<p>这样如果用户清除了SharedPreferences的状态值，那就会请求网络数据，如果没有清除状态值，就会取本地页面缓存数据，也是取保存在SharedPreferences里的数据，这样是没有问题的。</p>
<p><strong>之后：</strong><br>由于可能页面缓存数据有点多，将存储方式改为了<strong>文件存储</strong>方式，而没有做取不到缓存数据的措施。误认为用户清空本地页面缓存数据的同时也清空了SharedPreferences里的数据，而没有采取取不到数据时的措施。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-1b5c3ed2b91bebb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="应用信息"><br><strong>清除数据：</strong><br>清除数据主要是清除用户配置，比如SharedPreferences、数据库、文件储存等等，这些数据都是在程序运行过程中保存的用户配置信息，清除数据后，下次进入程序就和第一次进入程序时一样；</p>
<p><strong>清除缓存：</strong><br>缓存是程序运行时的临时存储空间，只会清空文件存储数据。</p>
<blockquote>
<p><strong>文件缓存</strong>是不稳定的，手机存储空间不足时，可能会删除文件缓存中的内容。</p>
</blockquote>
<p>另外，如果需要持久化数据到本地且不可轻易更改的，还是使用数据库储存为宜。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.jianshu.com/p/536ca489a7f4" target="_blank" rel="external">Android五种数据存储方式</a></li>
<li><a href="https://zmywly8866.github.io/2015/03/22/difference-between-clear-data-clear-cache-clean-up.html" target="_blank" rel="external">Android清除数据、清除缓存、一键清理的区别</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;Android五种数据存储方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用SharedPreferences存储数据&lt;/li&gt;
&lt;li&gt;文件存储数据&lt;/li&gt;
&lt;li&gt;SQLite存储数据&lt;/li&gt;
&lt;li&gt;ContentProvider&lt;/li&gt;
&lt;li&gt;网络存储&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zhangxichao100/article/details/52123396&quot;&gt;Android几种数据存储方式的应用场景&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>开发中所遇问题归纳</title>
    <link href="http://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/"/>
    <id>http://jingbin.me/2017/11/23/开发中所遇问题归纳/</id>
    <published>2017-11-23T14:36:23.000Z</published>
    <updated>2018-06-06T15:49:17.317Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>持续更新，主要记录<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a>及工作上所遇到的问题。</p>
</blockquote>
<h2 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h2><ul>
<li><p><strong>DataBindingHelper.jar</strong>的使用：作为<a href="http://blog.csdn.net/yy1300326388/article/details/46409637" target="_blank" rel="external">插件导入</a>后，和生成<code>Get、Set方法</code>的使用类似。在对应的<code>Bean</code>里，可自动生成<code>@Bindable</code>和<code>notifyPropertyChanged(BR.title);</code>。此杰作是同事做的。网上也有类似的插件可以使用。</p>
</li>
<li><p><strong>神坑！windows下<a href="http://www.th7.cn/Program/Android/201608/944362.shtml" target="_blank" rel="external">databinding引入文字</a>会有问题，而mac上没有！使用<code>@string/string_type</code>引入字符串！</strong></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>layout</code>节点写了<code>xmlns:android=&quot;http://schemas.android.com/apk/res/android</code>后，子布局不能写.</p>
</li>
<li><p>include 子布局时子布局根节点也要声明id，不然引用不到子布局id</p>
</li>
<li><p><strong>内部类加”private”,导致编译不通过,DataBinding出问题的bug。</strong>Adapter里有多个Holder，Holder类前加<code>private</code>后编译不通过，去掉就好了。暂时不清楚具体原因！</p>
</li>
<li><p>databinding 绑定子布局。先绑定,后父布局再<code>addView()</code></p>
</li>
<li><p>注入 databinding 后，AndriodStudio包结构变乱。解决：Android Studio2.2会出现此情况，升级到2.2.2就可以了。</p>
</li>
<li><p>databinding绑定<code>bean</code>时，里面的子类也需要继承<code>BaseObservable</code>,否则会报错。</p>
</li>
<li><p>recyclerview 的viewhodler 里，获得绑定 view 的databinding:<code>DataBindingUtil.getBinding(this.itemView);</code>。</p>
</li>
<li><p>布局里没有声明<code>id</code>,则对应的 ItemEverydayBinding 无法生成。</p>
</li>
<li><p>更改包名之后（rename – gradle.applicationId）， databinding 相关文件会报错，进入<code>Build --&gt; Rebuild Project</code>就好了！</p>
</li>
<li><p><a href="http://blog.csdn.net/zuiwuyuan/article/details/48201171" target="_blank" rel="external"><strong>AS里更改包名</strong></a>：保险的方法(费了几个小时的时间的总结)：在目录下新建想要的工程目录，把<code>activity</code>等包拖到新建的目录底下，然后修改<code>gradle</code>下的<code>applicationId</code>。这时候已经好了，可以跑起来了。但是<code>AndroidManifest.xml</code>未更改<code>package</code>，更改后你会发现项目中的<code>databinding</code>会报错，需要使用全局替换，将之前的包名替换成想要的包名，然后进入<code>Build --&gt; Rebuild Project</code>就好了！</p>
</li>
<li><p>注意：引用如：android:showImg=’@{bean.images.large}’时，里面的<code>bean</code>写错会造成编译错误！</p>
</li>
<li><p>注意：<code>text=&#39;@{xx}&#39;</code>里面的值应为<code>String</code>类型。引用方法里的参数类型应一致。报错是不告诉具体的哪行代码，写多了只能自己一个个地方找。</p>
</li>
<li><p>android:showImg=’@{bean.images.large}’这样设置图片会闪一下！尤其是在recyclerview里面，效果很不好，如果是写在 adapter里就好了：ImgLoadUtil.displayEspImage(bean.getImages().getLarge(), binding.ivTopPhoto, 0);。不仅仅图片，文字也会闪。加上这句就好了：<code>binding.executePendingBindings();</code>，意思是：<strong>当数据改变时，binding会在下一帧去改变数据，如果我们需要立即改变，就去调用executePendingBindings方法。</strong></p>
</li>
<li><p>布局里面的子布局里引用的bean可以一样（type一样），但是最好name不一样，不然可能会导致<code>setBean()</code>无效。改变name名就好了。</p>
</li>
<li><p>布局里使用了引用方法，一定要生成该布局的databinding类，不然方法会失效。</p>
</li>
</ul>
<ol>
<li><p>文件里引用bean:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;variable</div><div class="line">       name=<span class="string">"subjectsBean"</span></div><div class="line">	    type=<span class="string">"com.example.jingbin.bean.moviechild.SubjectsBean"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>文件里调用静态方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">import</span> type=<span class="string">"com.example.yunyue.utils.StringFormatUtil"</span>/&gt;</div><div class="line"><span class="comment">// 布局调用</span></div><div class="line">android:text=<span class="string">"@&#123;StringFormatUtil.formatName(subjectsBean.directors)&#125;"</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串和静态方法拼接(注意外层引号的区别，里面没有字符串时任意都行，有则使用单引号)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">'@&#123;"类型："+StringFormatUtil.formatGenres(subjectsBean.genres)&#125;'</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@BindingAdapter()</code>，自定义loader用来异步载入图像：</p>
<ul>
<li>一个参数时：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 任意类里声明</span></div><div class="line"> <span class="meta">@BindingAdapter</span>(<span class="string">"android:showImgBg"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showImgBg</span><span class="params">(ImageView imageView,String url)</span> </span>&#123;</div><div class="line">        displayGaussian(imageView.getContext(),url,imageView);</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 布局调用</span></div><div class="line">android:showImgBg=<span class="string">'@&#123;subjectsBean.images.large&#125;'</span></div></pre></td></tr></table></figure>
<ul>
<li>两个或多个参数时：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 妹子，电影列表图</div><div class="line"> * <span class="doctag">@param</span> defaultPicType 妹子：1 电影：0</div><div class="line"> */</div><div class="line"><span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:displayFadeImage"</span>,<span class="string">"android:defaultPicType"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayFadeImage</span><span class="params">(ImageView imageView, String url,<span class="keyword">int</span> defaultPicType)</span> </span>&#123;</div><div class="line">    displayEspImage(url, imageView, defaultPicType);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// XML里使用：</span></div><div class="line">android:defaultPicType=<span class="string">"@&#123;1&#125;"</span></div><div class="line">android:displayFadeImage=<span class="string">"@&#123;bean.url&#125;"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：</p>
<ul>
<li><strong>1.</strong> 方法参数第一个是控件声明,放在第二位不可以！</li>
<li><strong>2.</strong> 布局调用时，命名空间可自动生成。</li>
</ul>
<p>建议：</p>
<ul>
<li><strong>1.</strong> <code>android:showImgBg</code>可任意写，但是项目里不能出现相同的命名，否则会被后来的覆盖掉！</li>
<li><strong>2.</strong> 如果 imgload:showImgBg 这样写,第一次编译会提示找不到该命名空间，跳到声明处。建议写成 android:showImgBg。</li>
</ul>
</blockquote>
<ul>
<li><p>三元运算法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">导入：&lt;<span class="keyword">import</span> type=<span class="string">"android.text.TextUtils"</span> /&gt;</div><div class="line">使用：android:text=<span class="string">'@&#123;TextUtils.isEmpty(resultsBean.who)?"佚名":resultsBean.who&#125;'</span></div><div class="line">也可以直接使用这时返回为<span class="keyword">null</span>会不显示。</div></pre></td></tr></table></figure>
</li>
<li><p>若在EditText中使用双向绑定，则设置值的时候要使用<code>android:text=&quot;@={viewmodel.username}&quot;</code>,注意中间的<code>=</code>不然会达不到双向绑定的效果。</p>
</li>
</ul>
<hr>
<h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><ul>
<li><p>✔️ <code>NestedScrollView</code>里嵌套 RecyclerView 官方后期已经解决了显示不全问题！看引用的包是什么版本的！还需要加上这两行代码：(<strong>这样不推荐，会把内容全部一次性的加载进内存，造成卡顿</strong>)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">recyclerView.setNestedScrollingEnabled(<span class="keyword">false</span>);</div><div class="line">recyclerView.setHasFixedSize(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>❌ NestedScrollView里嵌套 RecyclerView ,在<code>recyclerView.setLayoutManager(new FullyLinearLayoutManager(getActivity()));</code>之后，需要加上,不然滑动不流畅: </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">recyclerView.setNestedScrollingEnabled(<span class="keyword">false</span>);</div><div class="line">recyclerView.setHasFixedSize(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>以上切换还是会卡顿，原因是角标越界，虽然<code>try</code>了，还是会卡。使用<code>MyScrollView</code>也不可以。显示不全！<a href="http://blog.csdn.net/fangchao3652/article/details/46914987" target="_blank" rel="external">FullyLinearLayoutManager&amp; MyScrollView</a></p>
</li>
<li>RecyclerView 的item显示出现控件显示不全,item只显示一部分，非常怪异！在adapter中的onCreateViewHolder()中<br><code>View inflate = layoutInflater.inflate(R.layout.xxx, parent, false);</code>注意要依附于parent。这样就好了！</li>
</ul>
<ul>
<li>RecyclerView: No adapter attached; skipping layout 没有数据时，<code>gone</code>掉，不然一直会提示这个！</li>
<li><p><code>addFooterView</code>时，使用LinearLayout 包裹时会显示部分，改为RelativeLayout或FrameLayout正常。</p>
</li>
<li><p><code>NestedScrollView</code>包裹<code>RecyclerView</code>如果没关联下面design包会显示不出，加了就好了！</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:design:24.2.1'</span></div></pre></td></tr></table></figure>
<p>同时此包里还含有<code>Toolbar</code>的属性：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app:layout_collapseMode=<span class="string">"pin"</span></div><div class="line">  app:layout_scrollFlags=<span class="string">"enterAlways|scroll"</span></div></pre></td></tr></table></figure>
</li>
<li><p>NestedScrollView里嵌套 RecyclerView 需要在<code>onResume</code>里加上<code>.setFocusable(false)</code>，不然进入页面会定位到列表第一条或其他问题。</p>
</li>
<li><p>添加<code>headerview</code>后，隐藏显示，进度条不会到达屏幕顶端。</p>
</li>
<li><p><a href="http://www.voidcn.com/blog/ming2316780/article/p-5999345.html" target="_blank" rel="external">完美解决隐藏Listview和RecyclerView去掉滚动条和滑动到边界阴影的方案</a></p>
</li>
<li><p>把WebView做为headerview添加，会有很多问题：</p>
<ul>
<li>1.有时候webview底部会显示会出现一大片的空白区域：把WebView的<code>layout_height</code>设置为<code>wrap_content</code>。</li>
<li>2.加载完成后，点击webview区域，会滚动到webview的顶部：使其失去焦点，在headerview的根布局里加上：<code>android:descendantFocusability=&quot;blocksDescendants&quot;</code></li>
<li>3.点击item进入详情后返回，会自动滚动到webview的顶部，在activity里加上：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onResume();</div><div class="line">    <span class="keyword">if</span> (detailBinding!=<span class="keyword">null</span>) &#123;</div><div class="line">        detailBinding.getRoot().setFocusable(<span class="keyword">false</span>);</div><div class="line">        detailBinding.getRoot().setFocusableInTouchMode(<span class="keyword">false</span>);</div><div class="line">        detailBinding.wvDetail.setFocusable(<span class="keyword">false</span>);</div><div class="line">        detailBinding.wvDetail.setFocusableInTouchMode(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="ViewPager-与-Fragment"><a href="#ViewPager-与-Fragment" class="headerlink" title="ViewPager 与 Fragment"></a>ViewPager 与 Fragment</h2><ul>
<li><p>父布局使用<code>FrameLayout</code>或<code>Scrollview</code>下拉会有阴影效果，颜色是你配置的主题上指定的颜色。</p>
</li>
<li><p>viewpager左右预加载页面的个数设置：<code>setOffscreenPageLimit(3);</code>,设置后保证页面不被销毁，切换时就不会卡顿了（显示时加载数据）。注意，如果是这个viewpager本身就在父一个viewpager的一个页面里，则设置adapter时，应传<code>getChildFragmentManager()</code>,不然以上会设置不上，非法状态异常！</p>
</li>
<li><p>Fragment 和当前自身所在的Activity 走一套生命周期，意思就是<code>Activity</code>走了<code>onResume()</code>,<code>fragment</code>才会走自身的<code>onResume()</code>，多个Fragment 相互切换是不走onResume()和onDestroy()的。</p>
</li>
<li><p>如果listview 里<code>addHeaderView()</code>添加轮播图，则轮播图滚动时会调用 listview 的滚动监听，且返回的<code>firstVisiblePosition = 0</code>。</p>
</li>
<li><p>Activity 里放多个fragment，当加载过其中一个<code>fragment A</code>后，切到其他的fragment，直至销毁fragment A后,再直接切到fragment A，这时<code>fragmentA.getUserVisibleHint() = false</code>。所以依赖getUserVisibleHint() = true的逻辑要注意了！最好的方式是在 viewpager 的监听里，手动<code>fragment.setUserVisibleHint(true)</code>。</p>
</li>
<li><p>根据<code>setUserVisibleHint()</code>方法的调用时间，来实现 fragment 的懒加载。setUserVisibleHint() 会在<code>onActivityCreated()</code>之前调用，所以可以在onActivityCreated() 进行一系列初始化的操作，然后在 setUserVisibleHint() 里请求数据。具体请见<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1021/1813.html" target="_blank" rel="external">这里</a>。</p>
</li>
<li><p>如从子页面回到主页面并切到对应type的fragment里，这里的<code>.commit()</code>要改为<code>.commitAllowingStateLoss()</code>，不然会出现<code>Can not perform this action after onSaveInstanceState</code>错误。</p>
</li>
</ul>
<hr>
<h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2><ul>
<li><p>使用<code>retrofit</code>请求时，Bean里如有<code>Drawable</code>字段，而且没有赋值，会数据解析异常，出现<code>StackOverflowError</code>错误。</p>
</li>
<li><p>使用<code>retrofit</code>请求时，若请求成功且有数据返回还报错，看<code>Bean</code>里字段或字段类型是否写错。</p>
</li>
<li><p><code>retrofit</code>设置<code>post</code>请求时，传数组时使用<code>image_ids[]</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"/vip/diagnostic_explains"</span>)</div><div class="line"><span class="function">Observable&lt;ErrorBean&gt; <span class="title">postDiagnosticExplains</span><span class="params">(@Header(<span class="string">"a"</span>)</span> String a, </span></div><div class="line">		@<span class="title">Field</span><span class="params">(<span class="string">"userkey"</span>)</span> String userkey, @<span class="title">Field</span><span class="params">(<span class="string">"comment"</span>)</span> String comment,  </div><div class="line">		@<span class="title">Field</span><span class="params">(<span class="string">"image_ids[]"</span>)</span> List&lt;Integer&gt; image_ids);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>自己搭建服务端，<a href="http://blog.csdn.net/wangzhen19891010/article/details/52368396" target="_blank" rel="external">Post传值出现中文乱码问题</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"&#123;user&#125;/setDeviceName"</span>)</div><div class="line"><span class="meta">@Headers</span>(<span class="string">"Content-Type:application/x-www-form-urlencoded; charset=utf-8"</span>) <span class="comment">//添加</span></div><div class="line"><span class="function">Observable&lt;String&gt; <span class="title">updateName</span><span class="params">(@Header(<span class="string">"Authorization"</span>)</span> String header,@<span class="title">Path</span><span class="params">(<span class="string">"user"</span>)</span> String user</span></div><div class="line">, @<span class="title">Field</span><span class="params">(<span class="string">"deviceMac"</span>)</span> String mac, @<span class="title">Field</span><span class="params">(<span class="string">"type"</span>)</span> String type, @<span class="title">Field</span><span class="params">(<span class="string">"name"</span>)</span> String name);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="ACache"><a href="#ACache" class="headerlink" title="ACache"></a>ACache</h2><ul>
<li><p>使用<code>ACache</code>工具缓存时，如果缓存的<code>bean</code>类名一致，或类里面的内部类一致，这时logcat会提示有两个相同bean的id，就是<strong>无效的类</strong>，或<strong>找不到该类</strong>。所以：<strong><em>缓存的文件里的类名最好不要一样！</em></strong></p>
</li>
<li><p>使用<code>ACache</code>工具缓存时，subList没有实现序列化！缓存<code>List</code>时会出错！<a href="http://liyin-rookie.iteye.com/blog/1147284" target="_blank" rel="external">详情</a></p>
</li>
</ul>
<hr>
<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><ul>
<li><p>使<code>TextView</code>实现长按复制文本的功能，加上属性：<code>android:textIsSelectable=&quot;true&quot;</code></p>
</li>
<li><p><code>textView</code>中间加横线:<code>textView .getPaint().setFlags(Paint. STRIKE_THRU_TEXT_FLAG );</code></p>
</li>
<li><p><code>EditText</code>如设置搜索模式，还要加上单行显示，不然可以一直换行。</p>
</li>
<li><p><code>TextView</code>增加属性<code>maxEms、maxLines=1、ellipsize</code>这样会出现”…”。</p>
</li>
</ul>
<hr>
<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><ul>
<li><p>给域名加上https,有的页面没有显示【安全】的绿色标识，是因为页面内有“http”的链接，给相关链接全改为https就好了！</p>
</li>
<li><p><code>[Jingbin_](http://blog.csdn.net/jingbin_)</code> 用<code>hexo d</code>上传时会报错，因为中间的<code>_</code>原因。</p>
</li>
<li><p>用markdown写文章时，想要呈现多级关系，比如<strong>在引用代码时</strong>，要注意格式，清除最后残留的空格，不然会出现错乱的情况。</p>
</li>
</ul>
<hr>
<h2 id="Material-Desgin"><a href="#Material-Desgin" class="headerlink" title="Material Desgin"></a>Material Desgin</h2><ul>
<li><p>兼容5.0以下水波纹效果：新建drawable-21文件，里面放ripple文件，其他正常，<a href="http://blog.csdn.net/u012156512/article/details/50585193" target="_blank" rel="external">详情</a>。</p>
</li>
<li><p>Android 5.1的SDK把<code>Button</code>的默认Style改了，使Button上显示因为全为大写，加上属性<code>android:textAllCaps=&quot;false&quot;</code>就好了,<a href="http://blog.csdn.net/u010746364/article/details/50378056" target="_blank" rel="external">详情</a>。</p>
</li>
<li><p><code>toolbar</code>中设置标题和副标题文字颜色和大小时，在<strong>xml</strong>文件配置<code>app:titleTextAppearance=&quot;@style/ToolBar.Title&quot;</code>可以，其中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name="ToolBar.Title" parent="@style/TextAppearance.Widget.AppCompat.Toolbar.Title"&gt;</div><div class="line">      &lt;item name="android:textSize"&gt;18.0sp&lt;/item&gt;</div><div class="line">      &lt;item name="android:textColor"&gt;@color/colorWhite&lt;/item&gt;</div><div class="line">  &lt;/style&gt;</div></pre></td></tr></table></figure>
<p>也可以在activity中设置：<br><code>binding.titleToolBar.setTitleTextAppearance(this, R.style.ToolBar_Title);</code></p>
</li>
<li><p>如何删除默认 button 中的样式android? 加上属性：<code>style=&quot;?android:attr/borderlessButtonStyle&quot;</code></p>
</li>
</ul>
<hr>
<h2 id="Android7-0"><a href="#Android7-0" class="headerlink" title="Android7.0"></a>Android7.0</h2><ul>
<li><p>WebView在Android7.0中会显示不全，这是WebView本身的控件大小应<code>wrap_content</code>，父布局为<code>match_parent</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span></div><div class="line">        android:descendantFocusability=<span class="string">"blocksDescendants"</span></div><div class="line">        android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        &lt;WebView</div><div class="line">            android:id=<span class="string">"@+id/wv_apply"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>太大的数据不要通过Intent之间传递，传递的数据最好不要超过1M,不然会报错，报错的地方不一定是当前传值的地方，可能是下一个页面。<code>Do not exchange huge data (&gt;1MB) between services and application</code>，可以通过<code>SharedPreferences</code>转json转bean来解决。</p>
</li>
<li><p>popuwindow显示有两个方法，每个方法只能在Android7.0之前或之后适应，需要辨别版本使用两和方法。<a href="https://www.oschina.net/question/588216_2210921" target="_blank" rel="external">链接</a></p>
</li>
</ul>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><code>listview</code>某图标显示亮或不亮的问题：先全部不亮，再根据条件变亮。</li>
<li>当ScrollView里的元素想填满ScrollView时，使用 fill_parent 是不管用的，必需为ScrollView设置：<code>android:fillViewport=&quot;true&quot;</code>。</li>
</ul>
<ul>
<li><p>设置透明状态栏时，布局根节点不要设置<code>android:fitsSystemWindows=&quot;true&quot;</code>否则状态栏会一直存在，被这个问题坑了一整天！！还有整块布局也不要给设置颜色。 </p>
</li>
<li><p><code>ImageView</code>图片直接<code>src</code>会内存泄漏，图片宽高大时会很严重，建议代码设置。</p>
</li>
<li><p>1920*1080(1080p) 小米3，小米5等，属于xxhdpi，将图片放在这个文件夹内，这个分辨率的手机显示图片会很清晰，放在xhdpi清晰度会降低。</p>
</li>
<li><p>1.文字颜色选择器：里面的根节点应为<code>color</code>且最好放在新建<code>color</code>文件下。2.作为背景选择器来说，根节点应该是<code>drawble</code>，最好放在<code>drawble</code>文件夹下。</p>
</li>
<li><p><code>Glide</code>加载图片：自动缓存当前图片的尺寸，如果其他地方取这个比例的图片则取的是缓存。不缓存等比例的图片！如果其他地方想要取当前图片的缓存，可加载时设置当前图片的宽高，用这个方法：<code>override(300,400)</code>,值在<code>dimens</code>里取，直接设置会损失清晰度。</p>
</li>
<li><p>引用的库文件里，关于gradle配置<code>compileSdkVersion</code>,<code>buildToolsVersion</code>需和主工程配置一致，不然可能还会出现无法编译及点击xml文件失效等问题。</p>
</li>
<li><p>adapter使用多种类别的item时，<code>getItemViewType</code>要从0开始，不然会出现<a href="http://www.jianshu.com/p/e441c0362364" target="_blank" rel="external">角标越界异常</a>。</p>
</li>
<li><p><code>RatingBar</code>不设置半星:<code>android:stepSize=&quot;1&quot;</code>,不可滑动:<code>android:isIndicator=&quot;true&quot;</code></p>
</li>
<li><p>后台返回值为<code>Integer</code>类型的话，不能直接以<code>!=0</code>判断，而是以<code>!=null</code>判断，不然会调用请求失败的方法<code>showErr()</code>。</p>
</li>
<li><p>Postman请求出现<code>Invalid CORS request</code>，解决方法：<code>Then add a header to your request. The header Key should be &quot;Origin&quot; and the header Value should be the full URL of your server (Do not forget the http:// or https://).</code></p>
</li>
<li><p>sourcetree “重置”是丢弃所有修改。</p>
</li>
<li><p>webview与js交互中，“遍历所有的a节点,将节点里的属性传递过去(属性自定义,用于页面跳转) ”，如果遍历两次a节点，最后一次的会覆盖前面的。</p>
</li>
</ul>
<ul>
<li><p>mac更新后git出错<strong>can’t start git:usr/bin/git</strong>（Android Studio2.3.3版本）出现这个问题是因为该目录下的git无法执行，解决方法：在终端界面输入<code>sudo /usr/bin/git</code>这个命令，时候会提示<code>invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</code>,然后再输入<code>xcode-select --install</code>就解决了！</p>
</li>
<li><p>阿里百川CPS上传apk包，只能使用编译环境为gradle3.0以下的包</p>
</li>
<li><p>selector 里 <code>android:drawable=&quot;@color/color_theme&quot;</code>这样使用可能导致颜色变色，应使用<code>android:color=&quot;@color/color_theme&quot;</code>。</p>
</li>
<li><p>Mac下使用 <code>java -jar cracker2017.jar</code>打开jar包</p>
</li>
<li><p>打开cmd命令界面，输入ping www.baidu.com,查询网站ip</p>
</li>
</ul>
<hr>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><ul>
<li>Blog：<a href="http://jingbin.me">http://jingbin.me</a></li>
<li>GitHub：<a href="https://github.com/youlookwhat" target="_blank" rel="external">https://github.com/youlookwhat</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;持续更新，主要记录&lt;a href=&quot;https://github.com/youlookwhat/CloudReader&quot;&gt;CloudReader&lt;/a&gt;及工作上所遇到的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;DataBinding&quot;&gt;&lt;a href=&quot;#DataBinding&quot; class=&quot;headerlink&quot; title=&quot;DataBinding&quot;&gt;&lt;/a&gt;DataBinding&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DataBindingHelper.jar&lt;/strong&gt;的使用：作为&lt;a href=&quot;http://blog.csdn.net/yy1300326388/article/details/46409637&quot;&gt;插件导入&lt;/a&gt;后，和生成&lt;code&gt;Get、Set方法&lt;/code&gt;的使用类似。在对应的&lt;code&gt;Bean&lt;/code&gt;里，可自动生成&lt;code&gt;@Bindable&lt;/code&gt;和&lt;code&gt;notifyPropertyChanged(BR.title);&lt;/code&gt;。此杰作是同事做的。网上也有类似的插件可以使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;神坑！windows下&lt;a href=&quot;http://www.th7.cn/Program/Android/201608/944362.shtml&quot;&gt;databinding引入文字&lt;/a&gt;会有问题，而mac上没有！使用&lt;code&gt;@string/string_type&lt;/code&gt;引入字符串！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="databinding" scheme="http://jingbin.me/tags/databinding/"/>
    
  </entry>
  
</feed>
