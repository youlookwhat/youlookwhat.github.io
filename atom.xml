<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JinBeen&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jinbeen.com/"/>
  <updated>2022-05-29T14:09:14.241Z</updated>
  <id>http://jinbeen.com/</id>
  
  <author>
    <name>JinBeen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022年中复盘</title>
    <link href="http://jinbeen.com/2022/05/29/analyse2022/"/>
    <id>http://jinbeen.com/2022/05/29/analyse2022/</id>
    <published>2022-05-29T12:19:00.000Z</published>
    <updated>2022-05-29T14:09:14.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2022的flag"><a href="#2022的flag" class="headerlink" title="2022的flag"></a>2022的flag</h3><ol>
<li>中级软件设计</li>
<li>高级项目管理</li>
<li>阅读20本书，平均2周一本</li>
<li>上班空闲时间精进源码</li>
<li>开发工具类或其他种类小程序</li>
</ol>
<p><code>有计划但要及时调整计划。</code></p>
<p>随着公司的发展和公司对我的期望，2022年调整了目标，主要是契合自己在公司的发展。</p>
<p>今年公司请外面的培训讲师针对于基层领导做了授课，使我们有更专业的管理能力，例如管理者该有哪些意识和一些计划手段等。</p>
<p>公司对我也有一些期望，例如更全方面的技术思维和管理能力。所以今年主要集中在这方面的计划。</p>
<p>深刻理解到：<strong>个人定的发展目标要紧跟在公司的发展</strong>。</p>
<h3 id="2022的计划"><a href="#2022的计划" class="headerlink" title="2022的计划"></a>2022的计划</h3><ol>
<li><p>学会iOS开发，并发布一个开源项目，上架一个iOS App 到App Store。</p>
<ul>
<li>目前已经学完iOS开发基础：<a href="https://github.com/youlookwhat/iOS-learning" target="_blank" rel="external">iOS-learning</a></li>
<li>关于每日一句的开源App正在开发中，现在私有：ByQuoteAppSwift</li>
<li>正在跑通公司的项目，利用公司项目中的三方SDK开发App，过程中遇到点问题正在解决</li>
</ul>
</li>
<li><p>学习管理类视频或书籍</p>
<ul>
<li>公司的培训课程</li>
<li>麦朵里的管理课程</li>
<li>书籍：《卓有成效的管理者》</li>
</ul>
</li>
<li><p>阅读10本书<br> <code>学习实用类的书籍特别耗时间，例如iOS技术，涉及到具体的实践，不然就吸收不了</code></p>
<ul>
<li>《Swift5 从零到精通iOS开发训练营》已完成</li>
<li>《做点事》已完成</li>
<li>《原则》</li>
<li>《被讨厌的勇气》</li>
<li>《卓有成效的管理者》</li>
<li>…</li>
</ul>
</li>
<li><p>软考高级：高级项目管理</p>
<ul>
<li>11月份开考，计划在学完iOS之后进行</li>
</ul>
</li>
</ol>
<p>总结：今年上半年iOS学习，下半年高级项目管理。持续提升管理能力和阅读书籍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2022的flag&quot;&gt;&lt;a href=&quot;#2022的flag&quot; class=&quot;headerlink&quot; title=&quot;2022的flag&quot;&gt;&lt;/a&gt;2022的flag&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;中级软件设计&lt;/li&gt;
&lt;li&gt;高级项目管理&lt;/li&gt;
&lt;li&gt;阅读20
    
    </summary>
    
      <category term="life" scheme="http://jinbeen.com/categories/life/"/>
    
    
      <category term="life" scheme="http://jinbeen.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="http://jinbeen.com/2022/01/05/summary2021/"/>
    <id>http://jinbeen.com/2022/01/05/summary2021/</id>
    <published>2022-01-05T14:00:00.000Z</published>
    <updated>2022-01-05T14:50:02.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>家里的抽屉大概会一年整理一次，人也应如此。</p>
</blockquote>
<p>今年的收获：</p>
<ol>
<li><p><strong>读书</strong>。今年大概读了10本书。去年定的今年的关键词主要是读书，但是没有定几本。这是一个失误，<code>计划今年要读书不是战略，计划要读几本书，每月完成多少，才是战略</code>。所以2022年的计划要更具体才行，例如具体到两周看一本。</p>
</li>
<li><p><strong>沟通能力</strong>。这算是一个计划之外的收获，由于公司的人才培养计划，今年上半年在公司进行了中层员工培训；然后部门总监拉Android/iOS的负责人去进行每天的例会，虽然每天基本没有汇报什么，但是确实提高了表达能力。之前说事情情绪起伏挺多，现在虽然也有点但是和以前比好很多了，尤其是和其他人沟融能很平稳的将事情表达清楚，也基本能达成共赢。</p>
</li>
<li><p><strong>鸿蒙卡片开发</strong>。这个也是计划之外的收获，公司和华为合作开发一款查成分的鸿蒙卡片，然后自己一个人完成了开发，和产品/UI/测试沟通的很好，以及发布到应用市场和华为新折叠屏手机(<a href="https://consumer.huawei.com/cn/phones/p50-pocket/" target="_blank" rel="external">HUAWEI P50 Pocket</a>)的外屏适配，去了3次武汉的华为研究所。在公司分享了鸿蒙卡片开发的基础知识，达到可以快速上手的目的，小组成员也进行了尝试。另外还分享了App的启动流程。</p>
</li>
<li><p><strong>结婚</strong>。今年5月1日举行的婚礼，得到了很多亲朋好友的帮助和祝福，最感谢的是我弟，忙了很长时间。办酒席真的不容易，需要很多的协调工作，两家的相互包容很重要，曾老先生说为什么中华有办酒席的风俗，美国都是两个人直接过日子甚至不接自己的爸妈，因为我们办酒席很复杂，办了一次后绝对不想办第二次，这样对于婚姻就很谨慎，不想再进行第二次婚礼，而且很多人见证了，离婚后感觉会很丢脸。</p>
</li>
<li><p><strong>飞碟</strong>。今年最大的幸福感还来自于飞碟，差不多6月份买过来的，花的价格还不少，媳妇很想养一只，买了后看着他长大了，差不多6月多月时间，已经离不开他了，也为他找好了对象。很乖很粘人，由于我们白天上班一直把他关笼子里，晚上和我们一起在睡。</p>
</li>
<li><p><strong>技术文章和GitHub维护</strong>。今年参加了掘金的技术征文，在繁重的工作任务中抽时间出来写博客是有点艰难，不过还是达到了基础标准，得到了一个马克杯和一个徽章。GitHub也在维护，将所有的项目基本统一成Androidx了，升级了各个依赖库的版本，云阅也加上了深色模式，由于时光网api和干货集中营api失效都去掉了然后换成了玩安卓的内容。今年总体的star数也涨了不少。</p>
</li>
</ol>
<p>总结：</p>
<ul>
<li><p>今年收获了两项不在计划之中的能力，软实力沟通和技术方面鸿蒙开发，都是由于公司安排产生的，也是因为大部分的时间在工作上面，所以这方面的提升较多。</p>
</li>
<li><p>计划之中的读书比预期的数量要少很多，明年要减少这方面的任务量并做好时间规划。</p>
</li>
<li><p>GitHub方面在预期之中，因为短期不会有新项目的开源，主要还是要集中在硬实力的增强，例如源码和数据结构算法之类的学习，而不是追求star数。计划将鸿蒙基础架构开源，实现鸿蒙的快速开发。</p>
</li>
<li><p>家庭方面和以前比好了很多，也增加了一个新的成员。</p>
</li>
</ul>
<p>回想2020给自己定的目标，只提到了关键词，没有具体的时间计划。2021大概也是围绕着这些在做，但是整体的达标率还是差了些。</p>
<hr>
<p>2022的flag：</p>
<ol>
<li><p>中级软件设计</p>
<p> 本身自己是非科班出生，虽然有工作经验和GitHub做背书，但是考这个证不是个形式上的东西，第一确实可以让我全方面了解软件开发，里面有常用的数据结构算法等，如果这个都达不到，进大厂就不可能了。第二媳妇也在进行备考，可以一起学习。计划时间1234月份。</p>
</li>
<li><p>高级项目管理</p>
<p> 同事考的这个，感觉自己也可以考个，比较符合自己的职业规划。每年有两次考试，5月份和11月份，计划是5月份考中级11月份考高级，然后自己非科班也有中级高级的证书也利于自己的职业发展。计划时间8910月份。</p>
</li>
<li><p>阅读20本书，平均2周一本</p>
<p> 看书是必不可少的，甚至可以加到和吃饭上厕所同一级别，今年计划每两周一本书，写读书笔记，先把自己买的书看完。</p>
</li>
<li><p>上班空闲时间精进源码</p>
<p> 做重要不紧急的事情。有计划的深入学习源码知识。做每周计划。</p>
</li>
<li><p>开发工具类或其他种类小程序</p>
<p> 今年学了小程序开发，但是一直没有实践过，想开发出一款小程序出来，想好了内容，缺的还是UI和后台接口，如果有合适的会执行，需要的时间大概在连续一个月左右。</p>
</li>
</ol>
<p>刻意休息，将可支配时间做好规划，投资在重要不紧急的事情中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;家里的抽屉大概会一年整理一次，人也应如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今年的收获：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;读书&lt;/strong&gt;。今年大概读了10本书。去年定的今年的关键词主要是读书，但是没有定几本。这是一
    
    </summary>
    
      <category term="life" scheme="http://jinbeen.com/categories/life/"/>
    
    
      <category term="life" scheme="http://jinbeen.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>云阅迭代历程20211108</title>
    <link href="http://jinbeen.com/2021/11/08/cloudreader-development-process/"/>
    <id>http://jinbeen.com/2021/11/08/cloudreader-development-process/</id>
    <published>2021-11-08T13:47:31.000Z</published>
    <updated>2021-11-13T13:46:04.716Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://jinbeen.com/images/2021/cloudreader-370-screenshots.jpg" alt="云阅3.7.0"></p>
<p>因为干货集中营服务器不维护了，QQ用户交流群也解散了，于是今天把干货集中营模块从云阅里移除了。</p>
<p>云阅这几年迭代历程仿佛是安卓这几年的发展历程。</p>
<p>云阅从2017年元旦第一版开始到现在2021年11月8日，将近四年的时间了。</p>
<p><strong>使用过的Api：豆瓣、干货集中营、时光网、玩安卓</strong></p>
<p>最早的是豆瓣，之前豆瓣提供了音乐，书籍，电影的数据，还有社区的数据，不过要授权得到，碍于前端程序员没有多少公共的Api，这些数据帮助很多开发者完成了他们自己的App，包括之前的豆芽等。记得之前它的star是四千多，那时候云阅还没开发出来，不知道能到多少，看了好多开源App，四千多几乎是极限了，现在云阅也到了这个数，增长的很缓慢了。</p>
<p>但是豆瓣的开源api慢慢在消失，从书籍开始，当时还做了一版书籍的页面，但是还没等发布就失效了，然后我将一个模块拿出来做了干货集中营。干货集中营那时候异常火热，是代码家开源出来的，也有很多开发者接入，感觉和现在玩安卓差不多，于是我将干货集中营也接入了，首页做成和以前的网易云音乐一样的形式，不过图片的高度是写死的，不是比例的，当时还废了一点时间，哈哈</p>
<p>书籍之后就是玩安卓，当时只接入了部分的功能，变成了：干货集中营，玩安卓，电影<br>这个是云阅2.0的版本：<a href="https://jinbeen.com/2018/11/06/cloudreader-app-introduce/">《云阅2.0》一款同时看玩安卓和干货集中营资讯的App</a></p>
<p><img src="https://jinbeen.com/images/2018/cloudreader-2-screenshots.png" alt="云阅2.0"></p>
<p>后来豆瓣电影的数据失效了，改成了时光网的电影数据，但是不太稳定，期间也有几次修改，后来就完全不能用了，然后换成了玩安卓其他的页面。</p>
<p>玩安卓两个模块，干货集中营一个模块这样维持了很久，之前干货集中营也进行了 一次接口升级维持了一段时间。</p>
<p>现在也失效了，没有报酬的服务难以持久，抹泪。然后换成了玩安卓的项目类别页面。</p>
<p>至此云阅基本都是玩安卓的内容，也感谢鸿洋给了我们开发者公共的Api。</p>
<p><strong>代码方面：</strong><br>最早做的时候，MVVM才出来不久，自己研究了一段时间，第一版的云阅其实不是真正的MVVM模式，ViewModel里还是放的接口请求然后使用Presenter将方法在外面使用。然后别人指出了，后来就改成了这样纯粹的MVVM模式，然后慢慢的加入了Room，升级成了Retrofit2，使用了AndroidX，最后慢慢使用Koltin，还实现了四年前用户要求的深色模式。</p>
<p>写云阅目的是练新技术，例如AndroidX和Retrofit2等都是在云阅上实践后再慢慢放在公司的项目中，现在也是的，搜索里的流式布局和深色模式都会先在云阅里实现。还有就是确实可以看到成体系的技术文章，我基本每天都会看。</p>
<p>云阅就还会一直更新，目的是做出最好的技术实践和使用体验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jinbeen.com/images/2021/cloudreader-370-screenshots.jpg&quot; alt=&quot;云阅3.7.0&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为干货集中营服务器不维护了，QQ用户交流群也解散了，于是今天把干货集中营模块从
    
    </summary>
    
      <category term="开源项目" scheme="http://jinbeen.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="cloudreader" scheme="http://jinbeen.com/tags/cloudreader/"/>
    
      <category term="开源项目" scheme="http://jinbeen.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android SMB 简单几步实现手机给电脑传输数据</title>
    <link href="http://jinbeen.com/2021/10/25/android-smb/"/>
    <id>http://jinbeen.com/2021/10/25/android-smb/</id>
    <published>2021-10-25T14:00:00.000Z</published>
    <updated>2021-10-28T15:20:59.064Z</updated>
    
    <content type="html"><![CDATA[<!--早在四年前就准备做深色模式的，当时用的三方的SDK，但是SDK上还有bug，现在使用官方给出的深色模式Api，实现起来比较简单，但是也有一些注意项和优化点。-->
<a id="more"></a>
<h2 id="SMB是什么"><a href="#SMB是什么" class="headerlink" title="SMB是什么"></a>SMB是什么</h2><p>SMB，即”Server Message Block” 服务器信息块，是一个网络文件共享协议，它能被用于Web连接和客户端与服务器之间的信息沟通，允许应用程序和终端用户从远端的文件服务器访问文件资源。</p>
<p>SMB通信协议是微软（Microsoft）和英特尔(Intel)在1987年制定的协议，主要是作为Microsoft网络的通讯协议。SMB 是在会话层（session layer）和<a href="https://baike.baidu.com/item/%E8%A1%A8%E7%A4%BA%E5%B1%82/4329716" target="_blank" rel="external">表示层</a>（presentation layer）以及小部分<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82/4329788" target="_blank" rel="external">应用层</a>（application layer）的协议。</p>
<p>通过它可以简单的给电脑传输文件，不过SMB不太安全：<br><code>SMB协议中采用控制文件安全传输的机制是使用客户身份验证的方式，该方式通过客户端向服务器端发送验证密码来获取文件传输的权限，不过针对该机制的网络攻击相对严重，攻击程序通过对验证密码的截获来窃取文件的访问权限，局域网下文件传输的安全性得不到保障。</code></p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>一般不会采用这种方式来实现具体的功能需求，有一些特殊的场景会用到，例如：</p>
<ol>
<li><p>一些手机上的壁纸软件，有横屏的壁纸，但是横屏的壁纸一般在电脑上使用，如果用SMB技术就可以直接将图片传到电脑的文件夹内，不用下载在本地后再通过微信/QQ传给电脑，方便很多。</p>
</li>
<li><p>再如我们有时候有一个很大的apk包，通过微信传给电脑会改后缀名，QQ可能还有大文件限制，这时候也可以考虑使用SMB来解决，毕竟自己写的传输代码，逼格直接拉满🤡。</p>
</li>
<li><p>再者想要直接将设备中操作的数据反应在电脑上查看，例如一个平板端的视力检测工具，检测后直接将数据反应在电脑上供工作人员使用。</p>
</li>
</ol>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="1-前提条件"><a href="#1-前提条件" class="headerlink" title="1.前提条件"></a>1.前提条件</h3><ul>
<li>手机和电脑连接到同一局域网</li>
<li>电脑需要设置用户名和密码</li>
<li>设置共享文件夹 (smb://username:password@ip/folder。（登录鉴权）)<ul>
<li>Mac设置：系统偏好设置-共享-文件共享-添加共享文件夹</li>
<li>Windows设置：文件夹-共享-高级共享-权限-打开更改权限<ul>
<li>电脑不能息屏</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>设置共享文件夹:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Mac设置</th>
<th style="text-align:center">Windows设置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://jinbeen.com/images/2021/android-smb-mac.png" alt="Mac设置"></td>
<td style="text-align:center"><img src="https://jinbeen.com/images/2021/android-smb-windows.png" alt="Windows设置"></td>
</tr>
</tbody>
</table>
<h3 id="2-代码配置"><a href="#2-代码配置" class="headerlink" title="2.代码配置"></a>2.代码配置</h3><blockquote>
<p>具体源码见GitHub：<a href="https://github.com/youlookwhat/BySMB" target="_blank" rel="external">BySMB</a></p>
</blockquote>
<p><img src="https://jinbeen.com/images/2021/android-smb-demo.jpg" alt="Demo使用"></p>
<p>1).代码引入<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">	repositories &#123;</div><div class="line">		...</div><div class="line">		maven &#123; url <span class="string">'https://jitpack.io'</span> &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    implementation <span class="string">'com.github.youlookwhat:BySMB:1.1.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2).开启联网权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>3).在<code>Application</code>初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BySMB.initProperty()</div></pre></td></tr></table></figure></p>
<p>4).得到SMB实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">val bySmb = BySMB.with()</div><div class="line">        .setConfig(</div><div class="line">                et_ip.text.toString(),       <span class="comment">// ip</span></div><div class="line">                et_username.text.toString(),<span class="comment">// 用户名</span></div><div class="line">                et_password.text.toString(),<span class="comment">// 密码</span></div><div class="line">                et_foldName.text.toString()<span class="comment">// 共享文件夹名</span></div><div class="line">        )</div><div class="line">        .setReadTimeOut(<span class="number">60</span>)</div><div class="line">        .setSoTimeOut(<span class="number">180</span>)</div><div class="line">        .build()</div></pre></td></tr></table></figure></p>
<p>查看ip:</p>
<ul>
<li>Mac上查看ip：<code>ifconfig | grep &quot;inet&quot;</code></li>
<li>Windows上查看ip：<code>ipconfig</code></li>
</ul>
<h3 id="3-上传文件到电脑"><a href="#3-上传文件到电脑" class="headerlink" title="3.上传文件到电脑"></a>3.上传文件到电脑</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">upload</span><span class="params">(bySmb: <span class="type">BySMB</span>)</span></span> &#123;</div><div class="line">    <span class="comment">// 生成文件 File</span></div><div class="line">    <span class="keyword">val</span> writeStringToFile = writeStringToFile(</div><div class="line">            instance,</div><div class="line">            et_content.text.toString(), <span class="comment">// 文本内容</span></div><div class="line">            et_fileName.text.toString()<span class="comment">// 文件名，例如:随感笔记.txt</span></div><div class="line">    )</div><div class="line">    <span class="comment">// 上传</span></div><div class="line">    bySmb.writeToFile(writeStringToFile, <span class="keyword">object</span> : OnOperationFileCallback &#123;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">()</span></span> &#123;</div><div class="line">            <span class="comment">// 成功</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</div><div class="line">            <span class="comment">// 失败</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：如上传相同文件名的文件，会覆盖之前文件的内容。</p>
<h3 id="4-查找电脑上的文件列表"><a href="#4-查找电脑上的文件列表" class="headerlink" title="4.查找电脑上的文件列表"></a>4.查找电脑上的文件列表</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">listFile</span><span class="params">(bySmb: <span class="type">BySMB</span>)</span></span>&#123;</div><div class="line">    <span class="comment">// 读取根目录下的所有文件，重载方法("", "*.txt", callback)</span></div><div class="line">    bySmb.listShareFileName(<span class="keyword">object</span> : OnReadFileListNameCallback &#123;</div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(fileNameList: <span class="type">List</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">            <span class="comment">// 读取成功 fileNameList文件名列表</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</div><div class="line">             <span class="comment">// 失败</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-删除电脑上的文件"><a href="#5-删除电脑上的文件" class="headerlink" title="5.删除电脑上的文件"></a>5.删除电脑上的文件</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">deleteFile</span><span class="params">(bySmb: <span class="type">BySMB</span>)</span></span>&#123;</div><div class="line">    bySmb.deleteFile(et_fileName.text.toString(), <span class="keyword">object</span> : OnOperationFileCallback &#123;</div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">()</span></span> &#123;</div><div class="line">	    <span class="comment">// 删除成功</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</div><div class="line">            <span class="comment">// 失败</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>SMB一般用不到，但是也有部分有需求的用户，之前做的时候遇到很多摸不着头脑的地方，而且很多的资料是外文的，希望此篇文章对部分人有所帮助。附上源码地址，<a href="https://github.com/youlookwhat/BySMB" target="_blank" rel="external">GitHub：BySMB</a>。</p>
<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul>
<li><a href="https://github.com/hierynomus/smbj" target="_blank" rel="external">hierynomus/smbj</a></li>
<li><a href="https://www.notion.so/Android-SMB-8b0e2f78551140ea80d9620af4f442aa#52b03a47f37a4227b8266abff5a05ac3" target="_blank" rel="external">iPad/iPhone通过smb与Windows互传文件</a></li>
<li><a href="https://blog.csdn.net/securitit/article/details/107534895" target="_blank" rel="external">SMB 2.0和3.0协议 Java应用</a></li>
<li><a href="https://os.51cto.com/art/202009/627615.htm" target="_blank" rel="external">不用QQ微信，简单几步让电脑手机快速互传共享文件！</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!--早在四年前就准备做深色模式的，当时用的三方的SDK，但是SDK上还有bug，现在使用官方给出的深色模式Api，实现起来比较简单，但是也有一些注意项和优化点。--&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 深色模式的项目应用</title>
    <link href="http://jinbeen.com/2021/10/23/android-dark-mode/"/>
    <id>http://jinbeen.com/2021/10/23/android-dark-mode/</id>
    <published>2021-10-23T14:00:00.000Z</published>
    <updated>2021-10-24T14:56:24.543Z</updated>
    
    <content type="html"><![CDATA[<!--早在四年前就准备做深色模式的，当时用的三方的SDK，但是SDK上还有bug，现在使用官方给出的深色模式Api，实现起来比较简单，但是也有一些注意项和优化点。-->
<a id="more"></a>
<p><img src="https://jinbeen.com/images/2021/android-dark-mode-header.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>早在四年前就准备做深色模式的，当时用的三方的SDK，但是SDK上还有bug，不能适配RecyclerView，用上后会很卡，然后就一直放着了，有些用户一直催着要深色模式：</p>
<p><img src="https://jinbeen.com/images/2021/android-dark-mode-feedback.jpg" alt=""></p>
<p>然后这段期间给整上，本以为现在深色模式应用的挺广泛的，在项目中实践了一下还是躺了很多坑，梳理一下实践过程及遇到的问题。</p>
<p>所有代码实践在云阅里可以看到：</p>
<ul>
<li>下载App体验，<a href="https://www.coolapk.com/apk/com.example.jingbin.cloudreader" target="_blank" rel="external">酷安：云阅</a></li>
<li>直接查看源码，<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">GitHub：CloudReader</a></li>
</ul>
<h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h2><h3 id="1-选定原生Api实现"><a href="#1-选定原生Api实现" class="headerlink" title="1.选定原生Api实现"></a>1.选定原生Api实现</h3><blockquote>
<p>Android官方<a href="https://developer.android.com/guide/topics/ui/look-and-feel/darktheme?hl=zh-cn#kotlin" target="_blank" rel="external">深色主题背景开发文档</a>(需科学上网)。</p>
</blockquote>
<p>原生Api简单稳定但是就是要重启App，不过看掘金以及微信都是这样实现的。</p>
<p>于是参考了微信和掘金的操作，总有三种状态，跟随系统，普通模式，深色模式。</p>
<p><img src="https://jinbeen.com/images/2021/android-dark-mode-setting.jpg" alt="设置深色模式"></p>
<h3 id="2-关键的工具类"><a href="#2-关键的工具类" class="headerlink" title="2.关键的工具类"></a>2.关键的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NightModeUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前系统是否是深色模式</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNightMode</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> uiMode = context.getResources().getConfiguration().uiMode &amp; Configuration.UI_MODE_NIGHT_MASK;</div><div class="line">        <span class="keyword">return</span> uiMode == Configuration.UI_MODE_NIGHT_YES;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取是否跟随系统，默认true</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getSystemMode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SPUtils.getBoolean(Constants.KEY_MODE_SYSTEM, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSystemMode</span><span class="params">(<span class="keyword">boolean</span> nightMode)</span> </span>&#123;</div><div class="line">        SPUtils.putBoolean(Constants.KEY_MODE_SYSTEM, nightMode);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取是否设置深色模式，默认false</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getNightMode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SPUtils.getBoolean(Constants.KEY_MODE_NIGHT, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNightMode</span><span class="params">(<span class="keyword">boolean</span> nightMode)</span> </span>&#123;</div><div class="line">        SPUtils.putBoolean(Constants.KEY_MODE_NIGHT, nightMode);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initNightMode</span><span class="params">()</span> </span>&#123;</div><div class="line">        initNightMode(getSystemMode(), getNightMode());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化App深色模式</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> systemMode 是否是跟随系统</div><div class="line">     * <span class="doctag">@param</span> nightMode  是否是深色模式</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initNightMode</span><span class="params">(<span class="keyword">boolean</span> systemMode, <span class="keyword">boolean</span> nightMode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (systemMode) &#123;</div><div class="line">            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (nightMode) &#123;</div><div class="line">                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重启App</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">restartApp</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Intent intent = App.getInstance().getPackageManager().getLaunchIntentForPackage(App.getInstance().getPackageName());</div><div class="line">        <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</div><div class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</div><div class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);</div><div class="line">            activity.startActivity(intent);</div><div class="line">            android.os.Process.killProcess(android.os.Process.myPid());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-在Application里初始化"><a href="#3-在Application里初始化" class="headerlink" title="3.在Application里初始化"></a>3.在Application里初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NightModeUtil.initNightMode();</div></pre></td></tr></table></figure>
<h3 id="4-切换状态后重启App"><a href="#4-切换状态后重启App" class="headerlink" title="4.切换状态后重启App"></a>4.切换状态后重启App</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NightModeUtil.initNightMode(dayNightSwitch.isChecked, ctvCheckNight.isChecked)</div><div class="line">NightModeUtil.restartApp(activity)</div></pre></td></tr></table></figure>
<p>其中还要保存是否跟随系统或指定深色模式的状态，具体逻辑细节可见:<a href="https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/menu/NavNightModeActivity.kt" target="_blank" rel="external">NavNightModeActivity.kt</a></p>
<h3 id="5-Application下的主题设置"><a href="#5-Application下的主题设置" class="headerlink" title="5.Application下的主题设置"></a>5.Application下的主题设置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;style name="AppTheme" parent="Theme.AppCompat.DayNight.NoActionBar"&gt;</div><div class="line"></div><div class="line">    &lt;!--选中状态icon的颜色和字体颜色--&gt;</div><div class="line">    &lt;item name="colorPrimary"&gt;@color/colorTheme&lt;/item&gt;</div><div class="line">    &lt;item name="colorPrimaryDark"&gt;@color/colorTheme&lt;/item&gt;</div><div class="line">    &lt;item name="colorAccent"&gt;@color/colorTheme&lt;/item&gt;</div><div class="line">    &lt;item name="android:windowAnimationStyle"&gt;@style/default_animation&lt;/item&gt;</div><div class="line">    &lt;item name="android:listDivider"&gt;@drawable/shape_line&lt;/item&gt;</div><div class="line">    &lt;!--默认状态下页面的背景色--&gt;</div><div class="line">    &lt;item name="android:windowBackground"&gt;@color/color_page_bg&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>同时还要注意如果单个Activity有自己的主题，也需要设置parent主题为<code>Theme.AppCompat.DayNight.NoActionBar</code>。</p>
<p>ToolBar也有自己的主题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;androidx.appcompat.widget.Toolbar xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    android:id=<span class="string">"@+id/tool_bar"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">    android:background=<span class="string">"@color/colorToolBar"</span></div><div class="line">    app:contentInsetStart=<span class="string">"0.0dp"</span></div><div class="line">    app:contentInsetStartWithNavigation=<span class="string">"0dp"</span></div><div class="line">    app:layout_scrollFlags=<span class="string">"enterAlways|scroll"</span></div><div class="line">    app:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.ActionBar"</span></div><div class="line">    app:subtitleTextAppearance=<span class="string">"@style/Toolbar.SubTitle"</span></div><div class="line">    app:theme=<span class="string">"@style/ToolbarStyle"</span></div><div class="line">    app:titleMarginStart=<span class="string">"0dp"</span></div><div class="line">    app:titleTextAppearance=<span class="string">"@style/ToolBar.Title"</span></div><div class="line">    tools:layout_height=<span class="string">"50dp"</span></div><div class="line">    tools:title=<span class="string">"云阅"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>其中</p>
<ul>
<li><code>theme</code>为：<code>&lt;style name=&quot;ToolbarStyle&quot;  parent=&quot;@style/ThemeOverlay.AppCompat.ActionBar&quot;/&gt;</code>，</li>
<li><code>popupTheme</code>也不能设置单个的<code>Light</code>或<code>Dark</code>主题，不然切换深色模式的时候也不会改变效果。</li>
</ul>
<h3 id="6-WebView的深色模式设置"><a href="#6-WebView的深色模式设置" class="headerlink" title="6.WebView的深色模式设置"></a>6.WebView的深色模式设置</h3><p>引入<code>implementation &#39;androidx.webkit:webkit:1.2.0&#39;</code>后可轻易的实现WebView的深色模式，不过有兼容问题，这和WebView的版本有关，WebView版本独立于Android版本。(亲测在系统6.0和7.1上无效。)</p>
<p>在有WebView的Activity的onCarete里加上如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">WebSettings webSetting = webView.getSettings();</div><div class="line"><span class="comment">// 检查是否支持暗模式</span></div><div class="line"><span class="keyword">if</span> (WebViewFeature.isFeatureSupported(WebViewFeature.FORCE_DARK)) &#123;</div><div class="line">    <span class="keyword">boolean</span> isAppDarkMode;</div><div class="line">    <span class="keyword">if</span> (NightModeUtil.getSystemMode()) &#123;</div><div class="line">        <span class="comment">// 是否是跟随系统</span></div><div class="line">        isAppDarkMode = NightModeUtil.isNightMode(<span class="keyword">this</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        isAppDarkMode = NightModeUtil.getNightMode();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (isAppDarkMode) &#123;</div><div class="line">        WebSettingsCompat.setForceDark(webSetting, WebSettingsCompat.FORCE_DARK_ON);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        WebSettingsCompat.setForceDark(webSetting, WebSettingsCompat.FORCE_DARK_OFF);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="7-配置项"><a href="#7-配置项" class="headerlink" title="7.配置项"></a>7.配置项</h3><p>1).接下来就是一些配色和部分深色模式下的图片处理问题。</p>
<ul>
<li>颜色：新建<code>values-night</code>文件夹，里面是深色模式下的<code>colors.xml</code>文件</li>
<li>图片：新建<code>drawable-night-xxhdpi</code>图片文件夹</li>
</ul>
<p>2).启动页我们经常会放品牌图，页面的深色模式可以通过 改变普通/深色模式文件夹下的图来实现</p>
<p>3).也可以自己处理配置变更，不重建Activity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">".NavNightModeActivity"</span></div><div class="line">    android:configChanges=<span class="string">"uiMode"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>当某个 Activity 声明它会处理配置变更时，系统会在出现主题背景变更时调用该 Activity 的 <code>onConfigurationChanged()</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">val currentNightMode = configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK</div><div class="line">when (currentNightMode) &#123;</div><div class="line">    Configuration.UI_MODE_NIGHT_NO -&gt; &#123;&#125; // Night mode is not active, we&apos;re using the light theme</div><div class="line">    Configuration.UI_MODE_NIGHT_YES -&gt; &#123;&#125; // Night mode is active, we&apos;re using dark theme</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1).获取颜色<code>ContextCompat.getColor(context, resId)</code>，需要加<code>Activity</code>的context，如果是<code>Application</code>的context会变不了色，这个和切换语言是一样的，获取String也不能用全局的context。</p>
<p>2).之前使用了关闭应用时杀掉进程的代码，导致不能重建Activity，找了好长时间问题。杀掉进程代码：<code>android.os.Process.killProcess(android.os.Process.myPid());</code></p>
<p>3).如果代码需要单独动态设置ToolBar的主题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置toolbar的dark模式，为了使"完成"文字颜色显示白色</span></div><div class="line">supportActionBar?.themedContext?.setTheme(R.style.ToolBarDarkActionBar)</div></pre></td></tr></table></figure>
<p>4).可以使用系统自己的颜色值：</p>
<ul>
<li><code>?android:attr/textColorPrimary</code> 这是一种通用型文本颜色。它在浅色主题背景下接近于黑色，在深色主题背景下接近于白色。</li>
<li><code>?android:attr/textColorSecondary</code>可作为第二文本颜色，相对于上面的颜色较浅。</li>
</ul>
<p>5).在dialog打开后，再切换系统的深色模式，这时使用系统的颜色会不生效，需要使用自己的color文件里的颜色。具体出现在首次打开应用时，弹出的隐私弹框。</p>
<p>6).需要使用png后缀的图，最好别直接将jpg改为png，可以打开图片后将图片另存为png格式。我做时候debug模式下没问题，打release包的时候就提示了这个问题。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用官方给出的深色模式Api，实现起来比较简单，但是也有一些注意项和优化点，如有需要可自取代码 GitHub：<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a>，如有其他问题，欢迎留言骚扰~</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--早在四年前就准备做深色模式的，当时用的三方的SDK，但是SDK上还有bug，现在使用官方给出的深色模式Api，实现起来比较简单，但是也有一些注意项和优化点。--&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>这段期间的一些事</title>
    <link href="http://jinbeen.com/2021/07/19/recent-things/"/>
    <id>http://jinbeen.com/2021/07/19/recent-things/</id>
    <published>2021-07-19T15:28:42.000Z</published>
    <updated>2021-07-19T15:40:32.043Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2021年7月18日，上半年发生了很多事，简单记录下。</p>
<h3 id="1-今年计划"><a href="#1-今年计划" class="headerlink" title="1.今年计划"></a>1.今年计划</h3><p>基本上每年都会有自己的大概计划，每年有几个关键词概括。去年是私活、技术深入学习。前年是开源库。今年的关键词应该是<code>读书</code>了。</p>
<p>其实最开始不是这样打算的，最开始是准备做视频号或者是抖音号，还买了相关的课程，做了一段时间发现不太适合，视频号发了几个视频基本没有数据，抖音号发了几个数据还可以，但是基本是搬运和简单的修改，很多时候是在上班找素材然后回家了剪辑。起初公司的事情还不是很多，后来越来越忙后就不太适合了。</p>
<p>每年的读书节都会在当当上买很多的书，刚开始没有把读书列为这么优先级，是因为看了《绝非偶然》这件事，和身边的很多厉害的人的经历，告诉我读书非常重要，刚好趁这个时间把屯下来的一些书今年读完，然后做好读书笔记加深印象。</p>
<p>现阶段的<a href="https://screeching-allium-a1b.notion.site/5ceebc90da874d7295aa5b785c44c657?v=ebcde82d26904c8da17fb55223fc7435" target="_blank" rel="external">书籍列表</a>。</p>
<h3 id="2-结婚"><a href="#2-结婚" class="headerlink" title="2.结婚"></a>2.结婚</h3><p>第二大的事情就是结婚。</p>
<p>很早定的2020年1月30日结婚，但是由于疫情一直延后，最终订到了今年的5月1日。前后经过了太长的时间，过程还算顺利，主要还是家里人和亲戚朋友的帮忙，还有媳妇那边的宽容。这期间的经过我写了很多，具体到每天做了什么事情，很多细节，这里就不详细说了。</p>
<h3 id="3-才结婚没多久的亲戚去世了"><a href="#3-才结婚没多久的亲戚去世了" class="headerlink" title="3.才结婚没多久的亲戚去世了"></a>3.才结婚没多久的亲戚去世了</h3><p>吃年饭的时候餐桌上奶奶还说不要和 灿 搞在同一天了，听说他定的是五一，在正月初几的时候当面问他说具体时间还没确定，中间才知道定在了三月底，弟还一起去上头/娶亲了。五一我结婚的时候，我还请教了他几个问题，当时很正常。然后一个月后看姑姑发的水滴筹说是急性心梗，导致多器官衰竭，再一个月后就去世了。</p>
<p>小时候我们还一起打一晚上小霸王，在我家睡觉，前段时间还好好的，大概医治了80w，感到非常可惜。然后我联系了我一前同事买了泰康的重疾险，今天合同拿到手了。</p>
<p>生命很脆弱。</p>
<h3 id="4-工作现状"><a href="#4-工作现状" class="headerlink" title="4.工作现状"></a>4.工作现状</h3><p>这两三个月很忙，主要有两个原因，其一是一个同事离职了，很多活被分配到了我和另一个安卓同事身上。 其二是被叫去每天和技术总监汇报进度，因为每天要汇报任务进度，所以做任务都比较紧，不然延期了不好交代，而且不仅是技术中的，还有很多产品上的事要沟通交流，很多的时间用在了交流上。</p>
<p>不得不说，这两个月在工作中收获很大，多是沟通和产品上的。虽然技术没什么太大的进步，因为很多时候没有时间来学习，以前还有时间看点书和学点新技术，比如之前还学了小程序，后面想自己做个小程序现在在上班的时间是难以实现了。</p>
<p>最近招聘了两个多月了，面试了很多做安卓的，大多工作年限在5年以上，其中很多人都在沟通上挂了，如果沟通好的话技术是可以放低点要求的，当然技术不太好的话薪资也低点，现在还在招聘中，总的来说：</p>
<ul>
<li><p>1.技术可以过关，这对于5年以上经验来说难度不高；</p>
</li>
<li><p>2.沟通友好，别不懂扯其他的，微笑，表现稍微活泼一点，这对于程序员是不是有点难？</p>
</li>
<li><p>3.对产品有点见解，这主要是技术总监考察的，因为技术总监也管产品部门，程序员有点产品思维做需求时更好沟通，不仅仅是埋头写代码。</p>
</li>
</ul>
<p>当然有全部通过的，但是别人有了更好的选择，或者是觉得不适合我们业务的。现在应该是发了两个offer，但是都没有来，一个是之前在烽火，应该找到了更好的。另一个是之前做车载应用的，沟通很好，很想要他，后来也过了，但是也没过来。</p>
<p>招个合适的人确实不容易。</p>
<h3 id="5-买了一只雪纳瑞，取名飞碟"><a href="#5-买了一只雪纳瑞，取名飞碟" class="headerlink" title="5.买了一只雪纳瑞，取名飞碟"></a>5.买了一只雪纳瑞，取名飞碟</h3><p>程序员这行加班挺多，我们是一周6小时加班时间，基本是周二和周四加班2小时，忙的话再选一天，不忙就两天。媳妇是5:30下班，回来很多时候要过几个小时我才回来，然后媳妇家之前有条很乖的小狗叫小黄，后来被人抓走了，媳妇就想买一条狗回来，后来买了一只迷你版雪纳瑞，不会长的很大。</p>
<p>取名飞碟是我们相信有外星人，恰好买的时间距离6月25号美国公布UFO附近，为了不重名就取名飞碟了。前几天我们回想起飞碟来家里多长时间了，感觉有很久了，后来想才才15天不到，但是和我们已经有很深的感情。</p>
<p>有段时间还梦到他是一只军犬，在战争中被敌方毒死了，然后很伤心。</p>
<h3 id="6-昨天-7月17日-在教育商店买了iPad-Pro"><a href="#6-昨天-7月17日-在教育商店买了iPad-Pro" class="headerlink" title="6.昨天(7月17日)在教育商店买了iPad Pro"></a>6.昨天(7月17日)在教育商店买了iPad Pro</h3><p>利用Apple每年的买苹果设备送耳机的活动在教育商店买了iPad Pro。计划了很久，消费欲望太强烈，家里已经有两个iPad了，但是有个是5年前买的，想卖给岳母了回点血😄，当然是媳妇卖。</p>
<p>之前不太忙的时候每天回来都会用平板写点东西，不得不说是写东西是很有必要的，现在很忙但仍然也会写，只是频次少了些。希望能发挥它生产力的用处。其他时间基本都是看youtobe，每天用它看不到一小时的时间。</p>
<h3 id="7-一些想法"><a href="#7-一些想法" class="headerlink" title="7.一些想法"></a>7.一些想法</h3><ul>
<li><p>1.通过面试认识到：<code>写博客很重要</code>。基本每个写博客的人都通过了初试，而且大部分都通过了复试。因为写博客一方面是技术总结，善于总结的人技术不会太差，另一方面是写博客会有自己的想法，再是多给面试官一种了解你的途径。</p>
</li>
<li><p>2.这段时间频繁沟通理解到：有一个level很高的人点拨你，对你影响很大。前段时间算是我们的技术部中层管理之一说了一句：技术总监的意思是<code>你做到对应职位的工作了，你就是那个职位的人。</code> 例如你现在是一个小技术员，你慢慢开始做你那个小组领导的事，等你做的差不多的时候，你就可以做小组领导。起初经常听到这个观点，当结合实际场景说的时候才深有感触的意识到。我现在是安卓的小组长，如果做到前端组长就需要开始做一些前端组长的工作，等公司需要一个前端组长的时候就可以水到渠成。能管理人感觉主要是人格魅力，会沟通、能使团队高效的做事、激励团队、当然技术好是基础、还有必备的产品意识毕竟我们主要工作是做产品。</p>
</li>
<li><p>3.<code>阅读、探索新事物</code>。每年应该接触点新东西，例如安卓新技术，产品知识，后台，小程序等。如果只在技术舒适区，5年后面试将会毫无亮点直接被pass。最好是学的新东西能拿出成果，我学习了小程序，自己写了一个小程序发布了，学了新技术写了技术博客或开源了等等。今天看到吴军提到的学校里的好学生不一定出社会就发展的很好，因为很多是不尝试新东西在自己的圈子里，给自己生活注入新鲜血液，这也和《了不起的我》提到的一样。</p>
</li>
</ul>
<p>感谢你能看到这里，祝你身体健康，克服生活的难关，步步向上。</p>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2021年7月18日，上半年发生了很多事，简单记录下。&lt;/p&gt;
&lt;h3 id=&quot;1-今年计划&quot;&gt;&lt;a href=&quot;#1-今年计划&quot; class=&quot;headerlink&quot; title=&quot;1.今年计划&quot;&gt;&lt;/a&gt;1.今年计划&lt;/h3&gt;&lt;p&gt;基本上每年都会有自己的大概计划，
    
    </summary>
    
      <category term="life" scheme="http://jinbeen.com/categories/life/"/>
    
    
      <category term="life" scheme="http://jinbeen.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>《小狗钱钱2》| 养成优秀品格的7条准则</title>
    <link href="http://jinbeen.com/2021/06/06/puppy-money2/"/>
    <id>http://jinbeen.com/2021/06/06/puppy-money2/</id>
    <published>2021-06-06T13:43:32.000Z</published>
    <updated>2021-06-06T13:48:43.817Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://jinbeen.com/images/2021/book-puppy-money2.png" alt="小狗钱钱2"></p>
<p>大家好，我是景彬，你所有的问题都有答案。今天给大家介绍的是《小狗钱钱2》。</p>
<p>将《小狗钱钱》看完马上就看了《小狗钱钱2》，没几天就看完了，故事性的情节很好阅读。</p>
<p>《小狗钱钱2》里一直提到了一个“甜甜圈理论”，就像书的封面那样，甜甜圈有外面的巧克力圈和里面的圆孔。外面的圆圈代表的是物质，里面的圈孔代表的是品格，很多人有些相似的圆圈，但圆孔却各不相同。这本书通过各种事件来描述圆孔的重要性。</p>
<p>第二部明显比第一部的评分低很多，我理解可能是第二部更关键的介绍“品格”这个看起来没那么实用的东西，而且用了很多奇幻的情节，当然作为给小盆友讲应该很有趣，给我们这些成年人看感觉略显幼稚，而且有些老套的情节，比如钞票的价值，“关系账户”，给我们看到后感觉相对于第一部收获并不是那么大。</p>
<p>圆孔即：优秀品格的七条准则：</p>
<h3 id="1-友好亲和"><a href="#1-友好亲和" class="headerlink" title="1.友好亲和"></a>1.友好亲和</h3><ul>
<li><code>永远不要在背后不要说别人坏话</code>。因为你和A说别人的坏话，那么你也有机会和其他人说A的坏话，那么A就会不信任你。</li>
<li>只称赞对方的优点。书中的反例是：吉娅嘲笑胖女士，和指点胡伯特的头发，结果给了她很大的阻碍，虽然后面都得到了原谅。</li>
<li>一个老学者被挑衅的故事。</li>
</ul>
<h3 id="2-勇于承担"><a href="#2-勇于承担" class="headerlink" title="2.勇于承担"></a>2.勇于承担</h3><ul>
<li><code>你不能总是抱怨命运的不公</code>。在我们的生活中不是所有的事情都是公平的，不公平的事很常见。我们对待这些事的方式是做好自己的事，这又和《了不起的我》提到的相似，我们对于自己改变不了的事能做是做好自己的事。</li>
<li>不被不公平的事所困扰。为什么叫勇于承担，是因为我们如果太在意不公平的事相当于把事情的决定权给了别人。例子是在演讲时胡伯特利用特权使用了影片，如果吉娅特别在意这个，利用这个借口放弃演讲，那么就把决定权给了胡伯特。</li>
<li>橘子不论我们怎么挤压，它都能得到橘子汁。</li>
</ul>
<h3 id="3-善待他人"><a href="#3-善待他人" class="headerlink" title="3.善待他人"></a>3.善待他人</h3><ul>
<li><code>我们应该首先看到积极的方面</code>。吉娅抱怨爱娜姑妈对自己很坏，金先生提到：不友善一直就是缺乏教养的和内心脆弱的标志，而且也显得很愚蠢。尊重和对人有礼貌是成功的重要因素，如果有人不喜欢你，很大程度上是因为你表现的不够好。爱娜姑妈这个是个例外，后面故意扔掉了吉娅的论文。</li>
<li>当吉娅带着写硬币为主题的论文和各种问题去找金先生，金先生告诉她这件事也有积极的一面，那就是你又有机会学习一些很重要的东西，那就是优秀品格的七条准则。</li>
<li>尊敬他人并对他人友好。</li>
<li>当你看到光明的时候，你就会成为光明；而当你只看到垃圾的时候，你就会成为垃圾。</li>
<li>当我们不确定怎么做的时候，我们想想我们的榜样。</li>
</ul>
<h3 id="4-帮助给予"><a href="#4-帮助给予" class="headerlink" title="4.帮助给予"></a>4.帮助给予</h3><ul>
<li>给予他人快乐，在他们遇到困难时帮助他们。就像吉娅给予彼得帮助一样。</li>
<li>当心情不好的时候，想一下看我们能帮助谁，我们带给人快乐自己也会好一些。于是帮好老师打扫了房间，并一起制作了卡片。还帮助安娜去迪士尼乐园游玩。</li>
</ul>
<h3 id="5-感恩之心"><a href="#5-感恩之心" class="headerlink" title="5.感恩之心"></a>5.感恩之心</h3><ul>
<li>好老师的感恩是在学校教书很高兴，和学生们谈话感觉也很棒。</li>
<li>当我们失去某项能力时我们才发现可贵之处。比如让马塞尔每天拔草，然后想到现在可以每天做自己的事，这样就会对现在的生活感恩。我们对自己拥有的东西感恩，比如眼睛看得见、一份不错的工作。当吉娅他们看见安娜的病情，都感恩自己能有健康的身体。</li>
</ul>
<h3 id="6-勤学不辍"><a href="#6-勤学不辍" class="headerlink" title="6.勤学不辍"></a>6.勤学不辍</h3><ul>
<li>我总是不断学习，是因为我要成为我有能力成为的那种人。好老师说：要是有一天我没有学到什么，那么对我来说那天是不完整的。</li>
</ul>
<h3 id="7-值得信赖"><a href="#7-值得信赖" class="headerlink" title="7.值得信赖"></a>7.值得信赖</h3><ul>
<li>这里提到了一个比喻：在我们的头脑中有两个人，其中一个侏儒想引诱你打破原先的计划，而另一个巨人则要求我们信守自己做出的承诺。</li>
<li>当吉娅不想为演讲训练时，她想到了这个比喻，应该听巨人的话。</li>
</ul>
<p>前三点是金先生提到的，后四点是老妇人沙妮娅·怀斯提到的，其中金先生也得到了老妇人的点拨。<br>金先生的话：</p>
<ul>
<li>只想一味尝试的人终归一事无成。</li>
<li>有时候我们觉得一个人高傲，但这只不过是他缺乏安全感的表现罢了。</li>
<li>与银行账户相似，世间还有一种叫做“关系账户”的东西。维持一份良好关系的成功秘诀就在于要先往这个账户里“存钱”，因为没有任何人能够在长时间内不去“取钱”。</li>
</ul>
<h3 id="养成优秀品格的7条准则"><a href="#养成优秀品格的7条准则" class="headerlink" title="养成优秀品格的7条准则"></a>养成优秀品格的7条准则</h3><ol>
<li>友好亲和<ul>
<li>我有一个强烈的愿望，希望其他人能够像我一样生活美好而幸福。</li>
<li>我不会伤害任何人。我克制自己，不介入任何争端。</li>
<li>我谦虚有礼，尊重他人。我并不是永远正确。</li>
</ul>
</li>
<li>勇于承担<ul>
<li>遇事我能自我抉择。我能自行判断对某种情况应该作何反应。</li>
<li>我不受不公平之事的影响，而是将注意力集中在我能做的事情、我知道的知识和我拥有的东西之上。</li>
<li>我把责任推脱给别人的同时，也把相应的权利也转交给了对方。</li>
</ul>
</li>
<li>善待他人<ul>
<li>我只称赞他人。如果确实无法称赞他人，那就最好什么都不说。</li>
<li>我尽量不批评他人。如果不得不批评，也要用非常礼貌和友善的方式。</li>
<li>我将注意力集中在他人的优点和闪光点上。</li>
</ul>
</li>
<li>帮助给予<ul>
<li>我祝愿自己遇到过的所有人都能一切顺利。</li>
<li>我送给某人礼物，因为我想表达自己对他的好感。</li>
<li>最美好的事情莫过于帮助他人。我总是在想自己能够帮助谁，没有什么比这更令人快乐。</li>
</ul>
</li>
<li>感恩之心<ul>
<li>我总是心怀感恩，哪怕是对看似寻常的事情。</li>
<li>即便是遇到了困难，我还是会关注值得感激的事物。</li>
<li>我对身边的人都充满感激之情，并非常享受和他们共度的美好时光。</li>
</ul>
</li>
<li>勤学不辍<ul>
<li>如果我骄傲自满，那无异于是说自己不用学任何东西了。因此我应该保持谦恭好学的态度。</li>
<li>我不仅要阅读好的书籍、写成功日记和知识笔记，还要尽可能多地向他人学习。</li>
<li>我不拿自己和别人比较，而是尽我所能做到最好。</li>
</ul>
</li>
<li>值得信赖<ul>
<li>我能够成功总是取决于自身培养出的习惯。</li>
<li>如果我是一个非常自律的人，我就能比那些虽有天赋但却懒惰散漫的人获得更多的成功。</li>
<li>我总是很守时。我信守对他人作出的承诺。</li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>现实里更多的人谈的是物质，就是圆圈，但这本书是谈品格的，这个东西很虚且不能很好的量化，而且人是复杂的，有的时候你觉得某一个人不好，但是在其他人心中又觉得他挺好的。这七条准则应该贯彻我们的一生，用此来规范我们的行为。</p>
<p>小时候的我比较天真，认为那些结过婚的“大人”，都是品格优秀的人，如果要有一个规范的话就是遵守上面的7条准则，后来长大了发现大部分的人都达不到。这样的准则每天执行确实很难，但这也是我们和那些普通人的区别。</p>
<p>这本书讲的是圆孔，上一部讲的是圆圈。需要格外注意的是，没有圆圈就没有圆孔。</p>
<p>纸上得来终觉浅，绝知此事要躬行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jinbeen.com/images/2021/book-puppy-money2.png&quot; alt=&quot;小狗钱钱2&quot;&gt;&lt;/p&gt;
&lt;p&gt;大家好，我是景彬，你所有的问题都有答案。今天给大家介绍的是《小狗钱钱2》。&lt;/p&gt;
&lt;p&gt;将《小狗钱钱》
    
    </summary>
    
      <category term="Books" scheme="http://jinbeen.com/categories/Books/"/>
    
    
      <category term="Books" scheme="http://jinbeen.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>《小狗钱钱》| 我的第一本理财书</title>
    <link href="http://jinbeen.com/2021/05/25/puppy-money/"/>
    <id>http://jinbeen.com/2021/05/25/puppy-money/</id>
    <published>2021-05-25T15:06:00.000Z</published>
    <updated>2021-05-26T14:47:58.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://jinbeen.com/images/2021/book-puppy-money.png" alt="小狗钱钱"></p>
<p>《小狗钱钱》大概内容是：小女孩吉娅希望家里养一条狗，有一天在路上遇到一只受伤的狗于是把它带回了家取名为钱钱，后来发现这条狗会说话，并且之前是在一个富翁家里，然后钱钱教会了吉娅一些成功人士的习惯和理财技巧。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年决定将以前囤的书看完，其中《小狗钱钱》就是其中一本，看豆瓣评分就知道这是一本学习理财必备书籍了，原本是写给孩子看的，但基于我国基本没教育孩子怎么看待钱和科学的赚钱，所以这本书对很多成年人都有用，我理解的话这本书应该基本适合于从小孩到刚工作一两年的这段期间，因为这段期间很多人都没有认真思考过赚钱这回事(不知道是不是只有我是这样的[逃]👻)。</p>
<p>关于钱我们需要系统的学习理财的观念，其中《小狗钱钱》和《穷爸爸富爸爸》应该是属于必读书籍了，这是本故事性的书，很好读，作者写过《财务自由之路》一书，里面的方法被编在了《小狗钱钱》这本书里。</p>
<p>非常推荐读这本书，越早读越好。</p>
<p>接下来我分享几点关于我读此书的收获：</p>
<p>我认为钱钱教给吉娅主要有两个，第一个是写成功日记，第二个是找到自己的三个愿望并分别制作梦想相册和设立梦想储蓄罐。</p>
<h2 id="一-建立自信：写成功日记"><a href="#一-建立自信：写成功日记" class="headerlink" title="一.建立自信：写成功日记"></a>一.建立自信：写成功日记</h2><blockquote>
<p>你是否能挣到钱，最关键的并不是你有没有好点子，也不是你有多聪明，而是你的自信程度。</p>
</blockquote>
<p>你的自信程度决定了你是否相信自己的能力，是否相信你自己。假如你根本不相信你能做到的话，那么你就根本不会动手去做，而假如你不开始去做，那么你就什么也得不到了。</p>
<p>自信是一切梦想实现的基石。每天将所有做成功的事情记录进去，任何小事都可以，这样做的作用是树立自信，过于自信比不够自信要好很多。</p>
<p>每当吉娅遇到自己觉得解决不了的事情时，钱钱就让她翻看成功日记，比如要演讲时，这样的目的是将使我们不要考虑那些还未发生的事情，<code>把精力集中在你知道的、能做的和拥有的东西上。</code></p>
<p>这也和之前看过的《了不起的我》提到的观点有点类似，我们只能改变我们自己，不能想着去改变别人。</p>
<h2 id="二-明确方向：找出你想变得富有的原因"><a href="#二-明确方向：找出你想变得富有的原因" class="headerlink" title="二.明确方向：找出你想变得富有的原因"></a>二.明确方向：找出你想变得富有的原因</h2><blockquote>
<p>中国智者老子说过：天下难事，必作于易；天下大事，必作于细。</p>
</blockquote>
<p>在第一章，钱钱就让吉娅做了这件事，找出10个我想变得富有的原因，也就是10个愿望。</p>
<p>其次，从10个愿望中，选择最想实现的3个。人往往想要的太多，能做的太少。选择3个的目的是，让你<code>专注</code>，<code>聚焦</code>。</p>
<p>不要抱着试一试的心态，要么做要么不做，试一试也是一种选择。</p>
<h2 id="二-专注方向：制作梦想相册和梦想储蓄罐"><a href="#二-专注方向：制作梦想相册和梦想储蓄罐" class="headerlink" title="二.专注方向：制作梦想相册和梦想储蓄罐"></a>二.专注方向：制作梦想相册和梦想储蓄罐</h2><h3 id="1-制作梦想相册"><a href="#1-制作梦想相册" class="headerlink" title="1.制作梦想相册"></a>1.制作梦想相册</h3><p>收集一些与自己愿望相关的照片，贴在相册里，通过图片思考。每天看几遍相册，然后想象实现后的样子。</p>
<blockquote>
<p>人们把这种行为称为’视觉化’。成功的人之所以成功，就是因为他们一直梦想者自己成功的那一天，不停地想象着自己实现了理想时的情形。</p>
</blockquote>
<p>为什么有用？讲个玄乎点的东西，人与自然宇宙之间有某种能量存在，当你想要的东西越清晰明确，宇宙就越能接受到你信息。</p>
<p>宇宙知道你想要的是什么，就会把你想要的东西送到你面前。</p>
<h3 id="2-制作梦想储存罐"><a href="#2-制作梦想储存罐" class="headerlink" title="2.制作梦想储存罐"></a>2.制作梦想储存罐</h3><p>前面说到钱钱让吉娅先写出十个愿望，然后定出了三个愿望：</p>
<ul>
<li>1.参加交换学生项目去美国</li>
<li>2.一台笔记本电脑</li>
<li>3.帮爸爸妈妈还清债务</li>
</ul>
<p>第三个暂时还无能为力，所以吉娅先为前两个做了梦想储蓄罐，刚开始的金钱当然非常少，被妈妈发现后嘲笑了一番，为此使吉娅更加坚定她的做法，并写进了她的成功日记里。储蓄罐需要放入非常多的钱才能实现目标，仅仅靠每个月的零花钱显然不能达到。所以她想办法靠其他的途径自己挣钱，钱钱给她讲了一个小男孩靠自己的能力挣了很多钱的事迹，起初是清晨帮每户人拿报纸然后业务逐渐增大最后出版书籍等。</p>
<p>于是她想到了给自家的花园除草但是这样不适合，后来打电话她堂哥，堂哥说他是喜欢骑自行车然后顺便双休给别人送面包，于是她自己想到了自己喜欢狗，然后就找附近有遛狗需求的家，于是找到了一个赚钱的门路。然后过了不久这个人介绍另一个很有钱的老太太，刚好那个老太太需要出门一段时间，这段时间她家遇到了小偷，她们一伙人保护了老太太的财产，然后得到了每人5000马克的奖励，作为投资俱乐部使用，投资俱乐部的名字为金钱魔法师。</p>
<p>然后吉娅由于救的这只狗是一个富翁的，富翁为报答她也给了很多钱作为报酬。</p>
<p>所以吉娅钱的来源是：</p>
<ul>
<li>1.帮邻居遛狗的收益，后来照顾了很多狗也请了很多小朋友帮忙</li>
<li>2.给老太太保护财产得来的奖励，得到的奖励用来投资(买基金，放5-10年)，72公式：资金翻一倍需要的时间</li>
<li>3.富翁给的照顾钱钱的报酬</li>
<li>4.给小孩演讲怎么理财(鹅的故事)后，富翁决定和她一起开一家公司</li>
</ul>
<p>而<strong>3.帮爸爸妈妈还清债务</strong>，是富翁为报答吉娅给他父母也讲了鹅的故事，并降低了月供让他们有足够的缓冲，之后爸爸也雇了人，做自己拿手核心的事情。</p>
<p>金钱分配：50%用来储蓄理财养鹅，40%用来梦想储存罐，10%用来消费。</p>
<p>至此为止，吉娅的梦想也实现了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>每本书都会解决一个问题，这本书我们可以实践的是，定好自己的三个愿望和制作梦想相册和梦想储蓄罐，写成功日记，以及金钱分配参考。养自己的鹅，如果有一天利息能支撑自己的生活开支就差不多了，加油，嘎巴得。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jinbeen.com/images/2021/book-puppy-money.png&quot; alt=&quot;小狗钱钱&quot;&gt;&lt;/p&gt;
&lt;p&gt;《小狗钱钱》大概内容是：小女孩吉娅希望家里养一条狗，有一天在路上遇到一只受伤的狗于是把它带回了家取名为钱钱，
    
    </summary>
    
      <category term="Books" scheme="http://jinbeen.com/categories/Books/"/>
    
    
      <category term="Books" scheme="http://jinbeen.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>梦境：回到过去（你能创造什么?）</title>
    <link href="http://jinbeen.com/2021/04/18/dream-back-to-the-past/"/>
    <id>http://jinbeen.com/2021/04/18/dream-back-to-the-past/</id>
    <published>2021-04-18T12:13:50.000Z</published>
    <updated>2021-04-18T12:22:16.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记：2021.04.17 09.28</p>
</blockquote>
<p>刚做梦梦到我回到了过去，回到了初三快要上高中那会儿，我在一个高台疯狂的弹跳后飞上了很高的天空，以至于都有点失重的感觉。</p>
<p>当我落回地面的时候，我听说英语考试快要开始了，催着同学A快点去教室，他说你知道“XX”没，他瞎蒙都能大部分做对。</p>
<p>我说那是小概率事件，我们赌一下，你连续蒙对8个我就给你100块，然后我又说，你连续蒙对7个我就给你，他想了会说好，我说你蒙不对的，他一副不服气的样子。</p>
<p>我深刻的想了想，我回到初中，到底和那些初中生有什么不同，智力上差不多，英语水平也差，我能和他们拉开差距的到底是什么？</p>
<p>然后我就醒了。</p>
<hr>
<p>我想起那些穿越剧，那些穿越过去的男主，他们的过人之处是什么。</p>
<p>《石纪元》男主是一个科学家，他什么都能制作，电话，发电站，唱片各种现代的东西，人们都追随他。</p>
<p>《赘婿》男主发明了团购，各个价位的衣服，划停车位，知道滴血认亲不符合科学然后自己也作假，开课，和别人说各种现代的一些玩意，利用现代的知识在商业上取得成功。</p>
<p>《寻秦记》古天乐穿越回去一心想和现代的女友在一起，他以他知道的秦国的历史辅佐秦始皇一步步登上王位并隐退和两个老婆生活的故事。</p>
<p>他们的能力莫过于在现代学的东西，能在古代有一番作为，不管是信息差还是思维上的提升，能在一个新的地方能快速成长起来。富人你剥夺他们的金钱他们过了几年照样是富人。</p>
<p>富人与穷人不只是财富的区别(《稀缺》有提过美国精英阶层和普通家庭的区别)，我觉得我应该找出来并实践，吸收知识，使用知识，创造知识，创造知识才能起飞，先吸收和使用，最后创造。</p>
<p>创造：几种知识组合，一种一类的知识优化组合成可以让自己或他们使用。</p>
<p>创造电话，创造停车位，创造人物的发展。</p>
<p>我能创造什么？</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记：2021.04.17 09.28&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚做梦梦到我回到了过去，回到了初三快要上高中那会儿，我在一个高台疯狂的弹跳后飞上了很高的天空，以至于都有点失重的感觉。&lt;/p&gt;
&lt;p&gt;当我落回地面的时候，我听说英语考试
    
    </summary>
    
      <category term="梦境" scheme="http://jinbeen.com/categories/%E6%A2%A6%E5%A2%83/"/>
    
    
      <category term="梦境" scheme="http://jinbeen.com/tags/%E6%A2%A6%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>《绝非偶然》| 21位星主都有这些共同点</title>
    <link href="http://jinbeen.com/2021/04/12/not-by-chance/"/>
    <id>http://jinbeen.com/2021/04/12/not-by-chance/</id>
    <published>2021-04-12T14:26:37.000Z</published>
    <updated>2021-04-12T15:30:25.348Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://jinbeen.com/images/2021/book-not-by-chance.png" alt="绝非偶然"></p>
<p>《绝非偶然》是知识星球出的一本书籍，里面整理了21个星主的一些发展历程以及他们的观点，均是由他们自己书写。里面每个星主都有他们独特的发展历程，但也有很多相似的地方。</p>
<h2 id="1-大量阅读"><a href="#1-大量阅读" class="headerlink" title="1.大量阅读"></a>1.大量阅读</h2><p>每一个星主几乎都有大量阅读的经历，这是最基础的要求。</p>
<ul>
<li>齐俊杰：感受到梦想与现实的差距后，疯狂买书学习，报培训班，2000月薪全用在学习上。制定量化指标：没读完一本书，工资涨40元，实际发现每读完100本书，收入至少翻一番，后来建立公众号“老齐的读书圈”。</li>
<li>池建强：有意识地读一些关于写作的书，看文学作品更关注结构、文法、用词和节奏。</li>
<li>亦仁：多接收一手信息，少触碰碎片化信息</li>
<li>邱岳：运营公众号8年多的时间里读了近千本书，写下了数百篇阅读笔记</li>
<li>邵云蛟：为了提高运营能力，学习了大量运营方法的文章</li>
<li>粥左罗：整个大学期间，拼命的阅读图书，增长见识、丰富阅历</li>
<li>Sky盖哥：订制一个1000小时计划——每天疯狂练习，研究和分析大量设计作品，参加各种设计师聚会。</li>
<li>阳志平：大学期间终日穿梭于中国国家图书馆各个阅览室</li>
<li>钱钰：知识本身不具备力量，是持续的学习和运用让我们进步</li>
<li>鉴锋：读书是提升结构性认知最高效的方法。</li>
<li>吴鲁加：买大量书，全部速度一遍，留下几本最好的，精读三五遍。</li>
</ul>
<h2 id="2-写作-公众号或其他"><a href="#2-写作-公众号或其他" class="headerlink" title="2.写作(公众号或其他)"></a>2.写作(公众号或其他)</h2><ul>
<li>冯大辉：几乎每天都有更新内容，有时候是周末一口气写几篇，然后一周每天放一篇。从推特到新浪然后到公众号，小道消息创建于2012.11.08。</li>
<li>齐俊杰：通过5年日复一日的日播，使其能数年每天分享、持续输出，“齐俊杰看财经”。</li>
<li>池建强：学完之后再输出，能够以教代学最好。从2012年12月至今，公众号推送了1600多条消息。每周更新三四篇。</li>
<li>刘鹏：班主任天天让写检查，开辟黑板报“忏悔录”，写作热情被唤醒。</li>
<li>张千里：出版《旅行摄影圣经》、《旅行摄影圣经2：实战为王》、至2020年10月微博粉丝数近160万</li>
<li>Stromzhang：每周都会坚持在公众号上发布文章，持续了7年</li>
<li>韩叙：一直每周1~2篇的文章输出频率，将自己在工作中的思考和经验发布在公众号“运营狗工作日记”上。</li>
<li>张伟华：亲自打理不间断更新的公众号“unclehome”</li>
<li>邱岳：写作最大的好处是倒逼自己的大脑，把意识里的东西线条化、结构化和系统化</li>
<li>邵云蛟：边学习边输出，白天上班晚上学完当天的内容后文章分享，坚持了近6个月</li>
<li>吴思涵：想做杰出的科学家，不仅要很会想，还要很会写，很会讲</li>
<li>粥左罗：人在默默无闻的时候，很难积累代表作，但可以用海量输入来自我滋润。一旦时机成熟就能一剑封喉，输出代表作。</li>
<li>Sky盖哥：阅读大量业内文章，在分析、总结其核心要点后输出报告，每周三篇。</li>
<li>钱钰：长期保持高频输出，运营着两个公众号基本保持日更。</li>
<li>Kris：孩子一睡着，就躲进书房构思选题、找素材、写文章</li>
<li>松爷：2013年7月16日，在公众号“装修33天”发布第一篇文章，后来从未断过</li>
<li>吴鲁加：写下心得体会并发出去，看懂和能写是两回事。前期的读、写必不可少</li>
</ul>
<h2 id="3-坚持的价值观：极致利他，投资自己"><a href="#3-坚持的价值观：极致利他，投资自己" class="headerlink" title="3.坚持的价值观：极致利他，投资自己"></a>3.坚持的价值观：极致利他，投资自己</h2><ul>
<li>冯大辉：不定期“公众号推荐”活动，被称为“送粉观音”</li>
<li>齐俊杰：自我投资才是增值最快的投资</li>
<li>刘鹏：集中精力于有社会增量价值的事，“但行好事，必有前程”</li>
<li>亦仁：自身利益后置，他人利益前置</li>
<li>Stromzhang：投资自己永远是最划算的项目</li>
<li>邵云蛟：坚持长期学习，才能避免内容枯竭</li>
<li>Sky盖哥：把用户当朋友，把自己当产品</li>
<li>钱钰：利他就是最好的利己</li>
<li>Kris：从单纯想赚钱的自媒体，到现在践行“以生命影响生命”，追求极致利他的公司</li>
<li>鉴锋：帮客户完成目标或赚更多的钱</li>
</ul>
<p>书里面有除了上述外还有很多星主的金句及一些启发：</p>
<ul>
<li>亦仁：赚钱，绝非偶然，它不是一种天赋技能，而是在环境、认知、能力、思维、经验、性格、文化等多种因素之前的必然结果。</li>
<li>屠龙的胭脂井：倾听：聪明人擅长学习间接经验，如果倾听就能避免大坑，那么通过栽跟头来学习就显得成本太高。</li>
<li>Kris：星球运营：周一到周日分别是：启动日、读书日、观影日、认知日、生活日、读者问答、周记分享。</li>
<li>鉴锋：班主任说：“你在虚拟世界里再厉害又怎样，一堆虚拟的数值并不能对这个世界产生影响。现实世界是一个大型斗兽场，是一场最值得玩的游戏。如果你能在这里取得成就，才算得上是真正的高手。”</li>
</ul>
<p>邱岳写书评的三种方式：<br>1.总结：尽可能的将书中的观点和结构整理出来，让读者不用看书就能知道此书具体表达了什么<br>2.引荐：主要说此书能给我们带来什么启发，引导读者去读此书<br>3.读后感：主要介绍阅读完这本书之后的感受和启发</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　这里面不少清北毕业的大咖，部分还是还出国深造很久的科学家，让我们普通人觉得距离很远，但近期4月1日在深圳举行球友见面会的“普通人”Stromzhang，确实是很多人的榜样，特别是程序员届。他们大部分人的经历是，前期大量阅读，一直有写作输出的习惯，基本是在一个垂直领域持续输出，要么是自己专业方向，要么是个人成长类方向，先积累自己的影响力，最后横向拓展。以前是T型人才，现在是H型了，即两三个方向上达到专业前20%的能力水平。共勉！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jinbeen.com/images/2021/book-not-by-chance.png&quot; alt=&quot;绝非偶然&quot;&gt;&lt;/p&gt;
&lt;p&gt;《绝非偶然》是知识星球出的一本书籍，里面整理了21个星主的一些发展历程以及他们的观点，均是由他们自己书写
    
    </summary>
    
      <category term="Books" scheme="http://jinbeen.com/categories/Books/"/>
    
    
      <category term="Books" scheme="http://jinbeen.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>《副业赚钱》| 想做副业了？看看哪些观点能帮助到你</title>
    <link href="http://jinbeen.com/2021/04/04/make-money/"/>
    <id>http://jinbeen.com/2021/04/04/make-money/</id>
    <published>2021-04-04T09:16:09.000Z</published>
    <updated>2021-04-10T13:07:19.106Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://jinbeen.com/images/2021/book-money.png" alt="副业赚钱"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>要说给去年的业余时间打个标签的话，应该是<strong>私活</strong>、<strong>学习实践Kotlin</strong>，但是私活是一个出卖自己额外时间的活，没有复利特别辛苦，如果可以的话还是把这个时间用来投资自己最合适，所以今年主要是用来看书学习，大量阅读，然后可以的话发展出一个副业。</p>
<p>希望在这本书中得到一些做副业的方法与实操。</p>
<h3 id="书中所述"><a href="#书中所述" class="headerlink" title="书中所述"></a>书中所述</h3><h4 id="思维认知"><a href="#思维认知" class="headerlink" title="思维认知"></a>思维认知</h4><p><strong>探索副业的五种形式</strong><br>1.铁饭碗＋兴趣爱好组合，适合工作稳定、内心有想法的你；<br>2.左右脑组合，适合理性与感性思维并存的你；<br>3.脑力＋体力组合，适合爱运动的上班族；<br>4.写作+教学+咨询组合，适合从事培训、销售、高校老师等岗位的你；<br>5.一岗多职能，适合想深挖自己职业生涯的你</p>
<p><strong>三类身份升级你的副业赚钱效益</strong><br>1.资源者：有意识地积累你的副业能力和资源；<br>2.配置者：盘活自身资源，做好副业身份探索最佳配比；<br>3.资本家：盘活并孵化身边的资源。</p>
<p><strong>三种复利思维</strong><br>产品复利：持续分享知行合一的产品。<br>能力复利：技多不压身，掌握真正有用的技能。<br>“成就套路”复利：找到做成一件事的底层逻辑。</p>
<p><strong>思维&gt;注意力&gt;时间&gt;金钱</strong></p>
<ul>
<li>在时间&gt;金钱这个公式里，每个人都要试着去算出自己的时薪。</li>
<li>在注意力&gt;时间这个公式里，时间是珍贵的，但如果不加上自己的注意力，时间再多也无意义。</li>
<li>思维&gt;注意力是指，我们无法时刻保持注意力，还是要通过自己的思维的提升去抓住更多重要的事。</li>
</ul>
<p><strong>先天+后天</strong><br>先天：</p>
<ul>
<li>第一个维度，回忆我们从小就喜欢做的一件事</li>
<li>第二个维度，想想我们做起来最开心、最享受的一件事</li>
<li>第三个维度，我们最擅长做的事</li>
</ul>
<p>后天：</p>
<ul>
<li>通过环境参与法，多去直接参与线上线下的社群和活动，看到优秀的人做到了，你也会更容易相信并且做到。</li>
</ul>
<p><strong>三大优势标签</strong><br>身份标签，从职场、生活、专业三个维度包装自己的身份标签；<br>能力标签，亮相自己身上具备的能力；<br>市场标签，通过产品链接资源和人脉</p>
<hr>
<h4 id="副业能力"><a href="#副业能力" class="headerlink" title="副业能力"></a>副业能力</h4><p><strong>副业赚钱的三种能力</strong></p>
<ul>
<li>第一种能力，目标达成能力。有考核，才能有完成目标的动力。</li>
<li>第二种能力，营销能力。真正的价值提升=向内的能力+向外的能力集合，在职场时就开始树立自我营销意识吧。</li>
<li>第三种能力，管理能力。一个人走得快，但一群人才能走得更远，把握住职场上一切可以提升管理能力的机会。</li>
</ul>
<p><strong>三个方法，拥有持续写出好文章的能力</strong><br>第一，先设定合理的写作目标，给自己动力持续写下去。<br>第二，从身边挖掘我们的写作素材，并建立清单库。<br>第三，主题搜索型写作法：一边学习，一边写出一篇好的文章。</p>
<p>写作的三步：</p>
<ul>
<li>第一步，要求自己每天写500个字，如果实在写不出来，可以抄一些优美的句子，或者试着用文字描述下自己当天的行程。</li>
<li>第二步，要求自己每天写1000字的命题文章，可以从你喜欢的公众号或者书里，挑选出一篇文章，看完后自己也照着试写一篇，再进行对比，找出自己的不足。</li>
<li>第三步，试着每周写3篇1500字—2500字的文章，可以是关于某个话题的写作，也可以是关于某本书的书评。由于前面两个阶段的练习已经为你积累了经验，这个阶段的你，写出一篇文章的问题不会太大。如果还是写不出来，就回到第二步继续练习。</li>
</ul>
<p><strong>提升表达力</strong><br>第一，从表达的套路、逻辑性、状态三个维度去拆分表达力，才能更好地提升表达力。<br>第二，每天向自己发问，用一分钟的时间，轻松提升表达力。<br>第三，自建表达力反馈机制，让自己越来越会表达</p>
<p><strong>人脉力量</strong><br>赚钱关系网的第一个维度是，清晰地知道自己具备什么样的能力，带着这个能力去链接需要这个能力的人，并把对方作为自己重点经营的赚钱关系网。<br>可交换价值最重要的不是一定要比对方优秀，而是你要有自己擅长的点，而这个擅长的点，正好是对方需要的</p>
<p>搭建人脉关系网的框架:</p>
<ul>
<li>第一，列出人脉渠道的类别。比如职场、生活、互联网、榜样等</li>
<li>第二，每类人脉都可以分别从基础信息、优势、最近动态、互动四个维度去记录和梳理你和对方之间的链接。</li>
<li>第三步，定期去更新我们的人脉关系网。</li>
</ul>
<p><strong>四步将重复的项目流程化和模板化</strong></p>
<ul>
<li>第一步，每一次接到一个项目之后，快速确定是否有固定模板可以参考；</li>
<li>第二步，有固定模板可以参考的，需要有意识地从固定模板里面找到模板或者流程进行参考；</li>
<li>第三步，那些不可控的部分，一定要建立进度表来跟进，因为不可控也就意味着难度会相对比较大；</li>
<li>第四步，项目结束后，梳理出可以流程化、模板化的部分，为下一次的项目做好充分的准备</li>
</ul>
<p><strong>朋友圈引流</strong><br>跟大家分享一组对比数据，如果说我们在个人公众号和个人微信里都有1万个粉丝，个人微信的粉丝价值是个人公众号的3到5倍，那么，朋友圈只需要有两三千个好友就抵得上公众号1万个粉丝的效果。<br>所以，我身边很多探索副业的好朋友们，都会花很多心思去经营自己的朋友圈，并且把朋友圈作为最重要的流量池。为什么是最重要的流量池？因为所有的外部流量都要集中引流到朋友圈这个池子里面。</p>
<ul>
<li><p>我在主动添加对方为好友之后，通常会发一段简短有力的自我介绍给对方。<br>模板可以是：我是谁+我可以为你提供什么资源</p>
</li>
<li><p>在公众号开通之前，可以先写几篇文章作为储备。</p>
</li>
</ul>
<p>主次平台生态圈是指在我们所经营的平台中，只有一两个平台是最重要的，其他的平台都可以作为次要平台。<br>次要平台的全部流量，都要有意识地引入到主平台里。主平台：公众号。</p>
<ul>
<li>所有平台的名字、个人标签形象照的统一</li>
</ul>
<hr>
<h4 id="主副业平衡"><a href="#主副业平衡" class="headerlink" title="主副业平衡"></a>主副业平衡</h4><p><strong>故事影响力</strong></p>
<ul>
<li>三年前一个周六的下午，贾伟和不到两岁的小女儿以及女儿的爷爷在家看电视。女儿突然说想喝水，爷爷主动去倒了一杯水，但由于水刚烧开，水温接近100℃，爷爷害怕孙女儿碰到，就将水杯放到了桌子的中间。<br>事故之所以称之为事故，是因为它的发生超乎你的预料，且往往是一瞬间。贾伟万万没有想到，盛水的杯子上有一根绳子，还不到桌子高的女儿跳起来抓住了那根绳子。水杯倒了，热水洒在女儿的脸部和胸口。<br>小孩子的皮肤最是娇嫩，立马就红肿起来了，烫伤很严重。<br>贾伟决定要为自己的女儿，或者说要为全天下可能和他女儿一样遭受此不幸的孩子们设计一个“降温神杯”。经过三年时间的努力，他终于找到了一种可以让液体瞬间降温的材料。贾伟用这个材料做了一款杯子，给它取名叫“55度杯”。100℃的热水倒入杯中，只需摇晃10下就能变成55℃，女儿以后喝水就再也不会被烫到了。<br>这个故事在互联网上非常火，让产品的销量也变得异常火爆，不到一年的时间，就卖了50亿元。这就是故事生产力。</li>
</ul>
<p><strong>副业的多维收入渠道</strong><br>1.做代购：在淘宝、朋友圈销售海外买回来的产品；<br>2.写育儿文章得到的稿费；<br>3.做一对一的付费咨询；<br>4.平台邀请我去做分享的课酬费；<br>5.时间管理等多个训练营的收入；<br>6.分销别人的课程的分销收入；<br>7.会员课程的收入；<br>8.半年制“价值变现研习社”的收入；<br>9.企业内训的收入；<br>10.公众号接广告的收入；<br>11.公众号流量的广告收入；<br>12.公众号打赏的收入；<br>13.和其他平台合作开课的收入；<br>14.分销天猫上一些品牌用品的收入（这个属于社交电商的范畴）；<br>15.我的孵化平台上其他老师开课的分成收入。</p>
<p>当你发现自己的副业收入渠道超过五个，副业收入破五万的时候，就可以开始考虑做减法和聚焦了</p>
<p><strong>锻炼自己的通用能力</strong></p>
<ul>
<li>第一步，找到自己主副业都能用得到的通用能力；</li>
<li>第二步，利用上班空余时间进行通用能力的锻炼；</li>
<li>第三步，向公司的上司和老板学习，让自己具备比自己的岗位所要求的更高的能力</li>
</ul>
<p>外出学习，读书，与人交流：</p>
<ul>
<li>第一，每个季度一定要外出学习一次，这样既能更新自己的认知，又可以通过线下学习去链接不同的人脉。</li>
<li>第二，每天至少要花两个小时的时间去看书、听课和梳理自己的知识框架。</li>
<li>第三，与人交流，这个人可能是我的学员，可能是我的合作伙伴，也可能是其他领域里的专家。一定要保持跟人多交流的习惯，因为，在跟别人交谈的过程中，可以得到很多很重要的信息</li>
</ul>
<h3 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h3><ul>
<li><strong>副业前期</strong>：起初这些时间几乎是完全被浪费的，经历了一段迷茫期后，在完成工作之余，我开始了大量阅读、学习的自我提升阶段，几乎每天要阅读一两本书。书读得多了后，我发现自己渐渐有了分享的渴望，最初的分享方式是对自己学习后的阶段性梳理：分享给自己看。<br>这就是稳定收入+探索兴趣爱好的阶段，在这个阶段，我的兴趣爱好没有给自己带来任何的收入，但却为之后的副业赚钱之旅打下了坚实的基础。</li>
</ul>
<ul>
<li><p><strong>该学习什么技能</strong>，建议大家从这三个维度进行考虑：<br>一个是你目前正在从事的工作需要用到的技能，如客服所需要的沟通能力，销售所需要的营销能力等。<br>第二种是一些底层技能，如时间管理能力、阅读能力等。<br>第三种是副业赚钱比较常用到的技能，如文案、写作、演讲等技能。</p>
</li>
<li><p><strong>总结归纳</strong>：当你做成功了一件事后，要养成去归纳、总结出套路的习惯，下一次做另外一件事时，也别忘了从之前的成就套路里找些通用的方法。<br>被誉为“管理大师”的德鲁克先生，他坚持每三年就要学习一门新学科，这样的习惯使他学习了经济学、心理学、数学、政治理论、历史及哲学等众多知识领域。新的知识一开始对任何人来说都很陌生，和所熟悉的知识、专业相隔很远，甚至有点风马牛不相及，很多时候我们还会抵触。但这种带着以前的学习方法，重新清零吸收新知识的思考状态，会让我们的眼界越来越开阔、思路越来越宽广。</p>
</li>
<li><p><strong>时间观念</strong>：想象有一家银行每天早上都在你的账户里存入86400元，可是每天的账户余额都不能结转到明天，一到结算时间，银行就会把你当日未用尽的款项全数删除。这种情况下你会怎么做？<br>当然是每天不留分文地全数取出！<br>其实我们每个人都有这样的一个银行，它的名字叫时间。<br>每天早上时间银行总会为你在账户里自动存入86400秒，一到晚上，它也会自动地把你当日虚掷掉的光阴全数注销，没有分秒可以结转到明天，你也不能提前预支片刻。<br>简单来说，就是时间是不可逆的，如果你浪费掉了，也就没有了，所以要学会带着专注力去做事情，尤其是做重要的事情。<br>这也是为什么很多人在30岁、毕业10年这些人生的关键节点突然想明白一些问题时，会觉得恐慌。我们身边有太多的朋友，时间是很多，但是注意力不够，一天到晚只是虚度光阴而已。</p>
</li>
<li><p><strong>坚持输出</strong>：学习了之后，一定要有输出。这个“输出”可以是写一篇完整的学习笔记，分享给别人听，也可以是，把课上的方法用起来。比如我今天回答的第一个问题，提到了“同样的工作量，降低完成的时间”这个提升时薪的方法，你是不是应该花时间去看看自己工作当中有哪些事情可以去建立模板，从而降低完成的时间呢？<br>最怕的是你惊呼一声“哇，这个方法好棒，好有用！”却没有后续的行动。</p>
</li>
</ul>
<h3 id="读书四问"><a href="#读书四问" class="headerlink" title="读书四问"></a>读书四问</h3><p><strong>1.这本书的主题？</strong><br>主要讲了关于副业的三个方面：思维认知、所需要的能力、与主业的关系和结合。<br><strong>2.作者细说了什么，怎么说的？</strong><br>三个方面都讲的差不多，知识也没那么深入，属于那种知识你基本知道，只是做了归纳式总结。<br><strong>3.这本书说得有道理吗？</strong><br>基本有道理，没有做到很深入，能在这本书里找到一两点触发自己的地方就不错了。<br><strong>4.这本书与自己的关系？</strong><br>让自己明白了自己处理发展副业的什么阶段，该怎么入手，目前自己还是适合做好自己主业的同时，发展一个其他的技能，并且这个技能能帮助公司发展，而且长期的坚持阅读写作持续探索。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jinbeen.com/images/2021/book-money.png&quot; alt=&quot;副业赚钱&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;
    
    </summary>
    
      <category term="Books" scheme="http://jinbeen.com/categories/Books/"/>
    
    
      <category term="Books" scheme="http://jinbeen.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>博客装修了，欢迎来坐</title>
    <link href="http://jinbeen.com/2021/04/03/welcome-bolg/"/>
    <id>http://jinbeen.com/2021/04/03/welcome-bolg/</id>
    <published>2021-04-03T09:38:29.000Z</published>
    <updated>2021-04-12T15:05:27.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装修效果-主题"><a href="#装修效果-主题" class="headerlink" title="装修效果(主题)"></a>装修效果(主题)</h2><ul>
<li><a href="https://jinbeen.com/2016/11/19/Mac搭建Hexo博客流程记录，排雷完成/">Mac搭建Hexo博客流程记录</a></li>
<li><a href="http://forsigner.com/2016/03/10/fexo-doc-zh-cn/#%E5%BC%80%E5%A7%8B" target="_blank" rel="external">主题配置</a></li>
</ul>
<p>因为之前搭建过所以更换起来相对比较简单，需要注意的地方：</p>
<ol>
<li><p>没设置标题的时候会出现<code>(no title)</code>的情况，可自定义，我设置为空串了，在这里设置：<code>theme</code>/<code>fexo</code>/<code>layout</code>/<code>partial</code>/<code>article.ejs</code>里的<code>&lt;h1 class=&quot;post-title&quot;&gt;&lt;%= post.title || &#39;&#39; %&gt;&lt;/h1&gt;</code></p>
</li>
<li><p>博客里的音乐的iframe，之前宽度是固定的，可设置为自适应：width=”100%”</p>
</li>
<li><p>评论改为了<a href="https://github.com/gitalk/gitalk#usage" target="_blank" rel="external">gitalk</a>，在主题下的<code>_config.yml</code>配置即可。需要注意的是<code>Authorization callback URL</code>使用的就是网站的域名，例如<code>https://jinbeen.com</code>。配置错误也可以到<a href="https://github.com/settings/applications/1551717" target="_blank" rel="external">此处</a>更改。</p>
</li>
<li><p>分类和标签页面配置的是<code>/categories/Android</code>、<code>tags/Android</code>。感觉应该是<code>categories</code>，但是不行还不知道为啥。</p>
</li>
<li><p>友链的介绍如果太长，在手机上样式会变型，最好是能一行显示完</p>
</li>
<li><p>语言不生效，经常变为英文：站点下的配置为<code>language: zh-Hans</code>，但是fexo下的languages下只有<code>zh-CN.yml</code>文件，改为：<code>language: zh-CN</code>就好。</p>
</li>
</ol>
<p>常用的Hexo命令：</p>
<ol>
<li><code>hexo generate (hexo g)</code>　生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>
<li><code>hexo server (hexo s --debug)</code>　启动本地web服务，用于博客的预览</li>
<li><code>hexo deploy (hexo d)</code> 　部署播客到远端</li>
<li><code>hexo new &quot;postName&quot;</code> 　新建文章</li>
<li><code>hexo new page &quot;pageName&quot;</code> 　新建页面</li>
</ol>
<h2 id="各大文章发布平台"><a href="#各大文章发布平台" class="headerlink" title="各大文章发布平台"></a>各大文章发布平台</h2><p>距离之前的 <code>next</code> 主题已经快五年了，这期间维护花了老大的劲，评论阅读数，访问人数统计，https，域名，图片防盗链等。之前使用github pages搭建博客可是有一大波人，现在留下的估计就那么几个了，奉劝大家还是找一个合适的技术平台，把文章放那里。</p>
<ul>
<li>个人博客：适合装X，一个人的空间，做一些定制化的样式还挺不错</li>
<li>掘金：高质量的技术文章平台，有能力的技术人员推荐在这里发展</li>
<li>CSDN：水文比较多，很多重复文章，但是能发展起来也非常厉害</li>
<li>简书：以前还可以，自从饱醉豚事件后就没落了，现在技术人员基本不在里面活动了</li>
</ul>
<p> 欢迎关注我的<a href="https://github.com/youlookwhat" target="_blank" rel="external">GitHub账号</a>，或<a href="https://juejin.cn/user/201965867640862/posts" target="_blank" rel="external">掘金号</a>，有事没事留个言👋</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;装修效果-主题&quot;&gt;&lt;a href=&quot;#装修效果-主题&quot; class=&quot;headerlink&quot; title=&quot;装修效果(主题)&quot;&gt;&lt;/a&gt;装修效果(主题)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jinbeen.com/2016/11/19/Ma
    
    </summary>
    
      <category term="hexo" scheme="http://jinbeen.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://jinbeen.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>《如何阅读一本书》| 拿到一本书该怎么开始读</title>
    <link href="http://jinbeen.com/2021/03/27/how-to-read-book/"/>
    <id>http://jinbeen.com/2021/03/27/how-to-read-book/</id>
    <published>2021-03-27T09:37:06.000Z</published>
    <updated>2021-04-10T13:06:07.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://jinbeen.com/images/2021/book-how-to-read-book.png" alt="如何阅读一本书"></p>
<p>这是本实用性的书籍，豆瓣评分也很高，很多人写过了这本书的读书笔记，对于写读书笔记不久的我来说有点自惭形秽了，但是笔记有时候不光是给别人看的，很多也是给自己以后能回顾，自己总结出来的东西才是自己的。</p>
<h3 id="书中所述"><a href="#书中所述" class="headerlink" title="书中所述"></a>书中所述</h3><p>由于篇幅有限，这里只是总结一些核心的内容。<br>作者提到了阅读的四个层次：基础阅读、检视阅读、分析阅读、主题阅读。这四个层次是依次递进且读一本书不局限于使用哪一种固定的方式，一般是几种方式一起使用。</p>
<h4 id="一、基础阅读"><a href="#一、基础阅读" class="headerlink" title="一、基础阅读"></a>一、基础阅读</h4><ul>
<li>第一阶段：阅读准备阶段，相当于学前教育或幼稚园的学习经验。从出生开始，直到六七岁为止。</li>
<li>第二阶段：识字，相当于一年级学生典型的学习经验。孩子会学习读一些简单的读物。</li>
<li>第三阶段：字汇的增长及课文的运用，通常是在四年级结束时就会的方法。特征是快速建立字汇的能力，所用的方法是从上下文所提供的线索，“揭发”不熟悉的字眼。</li>
<li>第四阶段：几乎可以阅读所有的读物了，这个时期学生要从小学或初中毕业了。特征是精炼与增进前面所学的技巧，几乎可以阅读所有的读物了，但是还不够老练。</li>
</ul>
<h4 id="二、检视阅读"><a href="#二、检视阅读" class="headerlink" title="二、检视阅读"></a>二、检视阅读</h4><p>检视阅读才算是真正进入阅读的层次，检视阅读又包含在分析阅读中，分析阅读则包含在主题阅读中。</p>
<h5 id="检视阅读一：有系统的略读或粗读"><a href="#检视阅读一：有系统的略读或粗读" class="headerlink" title="检视阅读一：有系统的略读或粗读"></a>检视阅读一：有系统的略读或粗读</h5><ul>
<li>1.先看书名页，然后如果有序就看序</li>
<li>2.研究目录页，对这本书的基本架构做概括性的理解。</li>
<li>3.如果书中附有索引，也要检阅一下</li>
<li>4.如果那是本包着书衣的新书，不妨读一下出版者的介绍。</li>
<li>5.开始挑几个看起来跟主题息息相关的篇章来看</li>
<li>6.最后一步，把书打开来，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多。</li>
</ul>
<h5 id="检视阅读二：粗浅的阅读"><a href="#检视阅读二：粗浅的阅读" class="headerlink" title="检视阅读二：粗浅的阅读"></a>检视阅读二：粗浅的阅读</h5><ul>
<li>一个重要的阅读规则：头一次面对一本难度的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或思索。</li>
</ul>
<h4 id="三、分析阅读"><a href="#三、分析阅读" class="headerlink" title="三、分析阅读"></a>三、分析阅读</h4><h5 id="第一阶段：找出一本书在谈些什么的规则"><a href="#第一阶段：找出一本书在谈些什么的规则" class="headerlink" title="第一阶段：找出一本书在谈些什么的规则"></a>第一阶段：找出一本书在谈些什么的规则</h5><ul>
<li>（1）：依照书本的种类与主题做分类</li>
<li>（2）：用简短的句子说出整本书在谈些什么</li>
<li>（3）：按照顺序与关系，列出全书的重要部分。将全书的纲要拟出来之后，再将各个部分的纲要也一一列出<ul>
<li>（4）：找出作者在问的问题，或作者想要解决的问题</li>
</ul>
</li>
</ul>
<h5 id="第二阶段：诠释一本书的内容规则"><a href="#第二阶段：诠释一本书的内容规则" class="headerlink" title="第二阶段：诠释一本书的内容规则"></a>第二阶段：诠释一本书的内容规则</h5><ul>
<li>（5）：诠释作者使用的关键字，与作者达成共识</li>
<li>（6）：从最重要的句子中找出作者的重要主旨</li>
<li>（7）：找出作者的论述，重新架构这些论述的前因后果，以明白作者的主张</li>
<li>（8）：确定作者已经解决了哪些问题，还有哪些是未解决的。在未解决的问题中，确定哪些是作者认为自己无法解决的问题</li>
</ul>
<h5 id="第三阶段：像是沟通知识一样地评论一本书的规则"><a href="#第三阶段：像是沟通知识一样地评论一本书的规则" class="headerlink" title="第三阶段：像是沟通知识一样地评论一本书的规则"></a>第三阶段：像是沟通知识一样地评论一本书的规则</h5><ul>
<li>（9）：除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评。</li>
<li>（10）：不要争强好胜，非辩到底不可。</li>
<li>（11）：在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同</li>
<li>（12）：证明作者的知识不足</li>
<li>（13）：证明作者的知识错误</li>
<li>（14）：证明作者不合逻辑</li>
<li>（15）：证明作者的分析与理由是不完整的</li>
</ul>
<h4 id="四、主题阅读"><a href="#四、主题阅读" class="headerlink" title="四、主题阅读"></a>四、主题阅读</h4><h5 id="第一阶段：观察研究范围，准备阶段"><a href="#第一阶段：观察研究范围，准备阶段" class="headerlink" title="第一阶段：观察研究范围，准备阶段"></a>第一阶段：观察研究范围，准备阶段</h5><ul>
<li>（1）：针对你要研究的主题，设计一份试验性的书目。你可以参考图书馆目录、专家的建议与书中的书目索引。</li>
<li>（2）：浏览这份书目上所有的书，确定哪些与你的主题相关，并就你的主题建立起清楚的概念。</li>
</ul>
<h5 id="第二阶段：阅读所有第一阶段收集到的书籍"><a href="#第二阶段：阅读所有第一阶段收集到的书籍" class="headerlink" title="第二阶段：阅读所有第一阶段收集到的书籍"></a>第二阶段：阅读所有第一阶段收集到的书籍</h5><ul>
<li>（3）：浏览所有在第一阶段被认定与你主题有关的书，找出最相关的章节。</li>
<li>（4）：根据主题创造出一套中立的词汇，带引作者与你达成共识—-无论作者是否实际用到这些词汇，所有的作者，或至少绝大部分的作者都可以用这套词汇来诠释。</li>
<li>（5）：建立一个中立的主旨，列出一连串的问题—-无论作者是否明白谈过这些问题，所有的作者，或者至少大多数的作者都要能解读为针对这些问题提供了他们的回答。</li>
<li>（6）：界定主要及次要的议题。然后将作者针对各个问题的不同意见整理陈列的各个议题之旁。你要记住，各个作者之间或之中，不见得一定存在着某个议题。有时候，你需要针对一些不是作者主要关心范围的事情，把他的观点解读，才能建构出这种议题。</li>
<li>（7）：分析这些讨论。这得把问题和议题按顺序排列，以求突显主题。比较有共通性的议题，要放在比较没有共通性的议题之前。各个议题之间的关系也要清楚地界定出来。解读某个作家对一个议题的观点时，必须从他自己的文章中引一段话来并列。</li>
</ul>
<h4 id="五、做读书笔记的方法"><a href="#五、做读书笔记的方法" class="headerlink" title="五、做读书笔记的方法"></a>五、做读书笔记的方法</h4><ul>
<li>（1）画底线——在主要的重点，或重要又有力量的句子下画线。</li>
<li>（2）在画底线处的栏外再加画一道线——把你已经画线的部分再强调一遍，或是某一段很重要，但要画底线太长了，便在这一整段外加上一个记号。</li>
<li>（3）在空白处做星号或其他符号——要慎用，只用来强调书中十来个最重要的声明或段落即可。你可能想要将做过这样记号的地方每页折一个角，或是夹一张书签，这样你随时从书架上拿起这本书，打开你做记号的地方，就能唤醒你的记忆。</li>
<li>（4）在空白处编号——作者的某个论点发展出一连串的重要陈述时，可以做顺序编号。</li>
<li>（5）在空白处记下其他的页码——强调作者在书中其他部分也有过同样的论点，或相关的要点，或是与此处观点不同的地方。这样做能让散布全书的想法统一集中起来。许多读者会用Cf这样的记号，表示比较或参照的意思。</li>
<li>（6）将关键字或句子圈出来——这跟画底线是同样的功能。</li>
<li>（7）在书页的空白处做笔记——在阅读某一章节时，你可能会有些问题（或答案），在空白处记下来，这样可以帮你回想起你的问题或答案。你也可以将复杂的论点简化说明在书页的空白处。或是记下全书所有主要论点的发展顺序。书中最后一页可以用来作为个人的索引页，将作者的主要观点依序记下来。</li>
</ul>
<h4 id="六、一个阅读者要提出四个基本问题"><a href="#六、一个阅读者要提出四个基本问题" class="headerlink" title="六、一个阅读者要提出四个基本问题"></a>六、一个阅读者要提出四个基本问题</h4><p><strong>1.整体来说，这本书谈的是什么？</strong><br>本书讲述的是阅读的四个层次：基础阅读、检视阅读、分析阅读、主题阅读，以及不同类型的书该用什么阅读方式。</p>
<p><strong>2.作者细说了什么，怎么说的？</strong><br>作者花大篇幅通过三个阶段讲了怎么分析阅读，以及阅读不同读物的方法。</p>
<p><strong>3.这本书说得有道理吗？是全部有道理，还是部分有道理？</strong><br>对于现在的我来说，因为没有读过这类似的书，所以认为大部分都是有道理的。</p>
<p><strong>4.这本书跟你有什么关系？</strong><br>让我能比较系统的了解读书一些基本规则，正如书名《如何阅读一本书》，能给我一个阅读书的基本方向。其实很多时候我就在这样做，只是它给了一个系统的介绍，让我能找到自己身在其中，将各种点结合起来形成面。</p>
<h3 id="一点体会"><a href="#一点体会" class="headerlink" title="一点体会"></a>一点体会</h3><p>首先是易读性，这本书属于实用性书籍，很多理论，读起来比较枯燥，我看到好几个人说读了一会读不下去了，我自己最初也是，这本书买了很久最近才读完，而且要使用<code>分析阅读</code>，不然读着读着思绪就散了。但是是非常值得读的，基本大部分提到的阅读方法，这本书都有记录。</p>
<p>刘润的读书方式：<br>　　在没读这本书之前，刘润说过他自己读书的一种方式，比如说他想讲一个知识点: <code>量子纠缠</code>(不一定完全一样)，他就会打开得到和印象笔记，然后在得到里搜索<code>量子纠缠</code>，将提到的几本书找出来，然后分别用网页打开，放在显示屏的左右两侧，因为他用的两个显示器，将书本中提到<code>量子纠缠</code>的段落收集到印象笔记里，然后下次再从印象笔记里整理归纳。</p>
<p>最初我认为这样能得到书中精华吗，一本书就为了得到关于他想知道的知识点，就取那么少的内容会不会太浪费拿本书了。下面也有人评论说，”功利性阅读”，当看到这本书时就理解了，那叫<code>主题阅读</code>，是阅读的第四个层次，也就是最后一个层次。</p>
<p>《绝非偶然》里，邱岳说他8年大约阅读了近1000本书，他也提到“并行阅读最高效”，他有一个受益匪浅的习惯–针对同一个主题，同时阅读不同作者的书。这也是<code>主题阅读</code>的阅读方式。</p>
<p>最近刚阅读完的一本书《副业赚钱》，作者说她自己悟到的一种读书方式，就是读完了后将各个章节的标题用用自己的话写一遍等，用的就是<code>分析阅读</code>的方式。</p>
<p>当看了这本书后就意识到，大家的读书方式基本都在本书中提到过。</p>
<p><strong>任何实用性的书都不能解决该书所关心的实际问题，实际问题只能靠行动来解决。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jinbeen.com/images/2021/book-how-to-read-book.png&quot; alt=&quot;如何阅读一本书&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是本实用性的书籍，豆瓣评分也很高，很多人写过了这本书的读书笔记，对于写读书笔记不久的我来说
    
    </summary>
    
      <category term="Books" scheme="http://jinbeen.com/categories/Books/"/>
    
    
      <category term="Books" scheme="http://jinbeen.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>《读懂一本书》| 樊登读书创始人的选书读书方法</title>
    <link href="http://jinbeen.com/2021/02/21/understand-book/"/>
    <id>http://jinbeen.com/2021/02/21/understand-book/</id>
    <published>2021-02-21T09:43:11.000Z</published>
    <updated>2021-04-10T14:18:36.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://jinbeen.com/images/2021/book-understand-book.png" alt="读懂一本书：樊登读书法"></p>
<p>樊登作为专业讲书的人，这本书基本上是以讲书的角度来说的，提到了该如何选书，怎么阅读抓住重点，提高理解力的基础，以及讲书的必备条件。<br>大部分读者读书基本不是为了讲给别人听的，但是这本书还有很多是值得我们学习的地方。</p>
<p><strong>书是绝大部分问题的出口</strong>。这是樊登在书的前部分讲读书的作用时说的，我和作者的想法如出一辙，记得刚毕业时我只身去北京，一个学弟问我，去那边一个朋友都没有感到孤独怎么办，我说可以看书呀，看书确实能解决问题。你遇到的绝大部分问题其他人都遇到过，而且基本都有解决方案，所以你只需要通过看书找到这些方案然后理解实践就好了。</p>
<p>扯的有点多了，开始进入主题吧。我们先讲怎么阅读及读懂一本书，然后再讲如果和别人讲书要注意什么。</p>
<p><img src="https://jinbeen.com/images/2021/book-understand-book-author.png" alt=""></p>
<h3 id="读懂一本书"><a href="#读懂一本书" class="headerlink" title="读懂一本书"></a>读懂一本书</h3><p>怎么才能快速阅读，读懂一本书？<br>1、阅读时不停顿做笔记，过了一周后忘记了一半的时候再做笔记，让大脑受折磨才能印象更深刻。且一定要做笔记。<br>2、提高自己的理解力， 你的理解力的池子有多大，你就能读懂多难的书。池子差不多有七个部分：经济学知识，心理学知识，国学知识，管理学知识，逻辑学知识，哲学知识，人生经验。</p>
<ul>
<li>经济学知识：《经济学的思维方式》、《薛兆丰的经济学通识》</li>
<li>心理学知识：《改变心理学的40项研究》</li>
<li>国学知识：《论语》、《道德经》、《庄子》、《孟子》</li>
<li>管理学知识：《非暴力沟通》、《关键对话》、《掌控谈话》、《可复制的领导力》</li>
<li>逻辑学知识</li>
<li>哲学知识：《生活的哲学》、《学会提问》、《思辨与立场》、《哲学起步》</li>
<li>人生经验：《人生海海》、《不是你的错》</li>
</ul>
<p>其他的 法学、伦理学、生物学、历史等</p>
<p>上面提到的各个部分的书籍基本都是作者推荐到的，当然我们不必一定看，如果我们有觉得有更好的书籍可以替代那也可以看其他的。</p>
<p>这个相当于一个知识体系，就是所谓的认知之树。我认为这是每个人都必须具有的基础知识，如果你想成为一个“高手”的话。就像从事计算机专业行业的人一样，不论你做的是Android/iOS/Java后端工程师，都要学到计算机的基础知识，比如HTTP请求原理，算法，数据结构，设计模式等，在计算机行业也有这个类似的知识体系，面试的时候这些都会问到。而我们理解力也应如此，我们应该具有全方位的认识，不论是看书还是和别人进行交流，我们知道的领域越多理解的越多，看书的时候盲区就会越少。</p>
<h3 id="讲书：从选书到怎么去讲"><a href="#讲书：从选书到怎么去讲" class="headerlink" title="讲书：从选书到怎么去讲"></a>讲书：从选书到怎么去讲</h3><p>文中大部分是在阐述关于讲书需要注意的地方。</p>
<h5 id="1、选书选择"><a href="#1、选书选择" class="headerlink" title="1、选书选择"></a>1、选书选择</h5><p>这里我认为是选要讲的书，因为它们的特点比较明显，樊登遵循的是TIPS原则。</p>
<ul>
<li>T（Tools）是工具。“樊登读书”讲的大部分书，基本上都能提炼出工具性的内容。换句话说，这些书都会教给听众一套方法。另外，能够提炼出有效的工具也意味着这本书建立在坚实的实践基础之上。</li>
<li>I（Ideas）是新的理念。图书的作者能够带来一些新的理念、新的发现、新的想法。</li>
<li>P（Practicability）是实用性。它能够给大家的生活带来改变，可以应用在日常生活中。<br>-S（Scientificity）是科学性。它不是凭空捏造，不是简单归纳，它一定经历了科学性的验证过程。</li>
</ul>
<p>他们通常会有以下三点之一的特性：</p>
<ul>
<li>给我们的生活带来新的意义。</li>
<li>使我们产生强烈的动力。</li>
<li>给我们的生活带来改变。</li>
</ul>
<p>例如：<br>《思辨与立场》：这本书开篇就给读者提出了一个假设——如果一个人没有批判性思维会怎样？这就是思维的三重境界：<br>1.底层的人从来不反思，永远觉得自己是对的。<br>2.中间那层人虽然反思，但老觉得是别人不对。<br>3.顶级的那层人会反思自己，让自己的思维不断进步。</p>
<p>《他人的力量》这本书解决了什么问题？人际关系的问题。<br>《反脆弱》在不确定中受益的能力。<br>《幸福的方法》一书，作者首先定义了不同的人会有不同的幸福观，一共有四类，即现在幸福未来也幸福，现在不幸福未来也不幸福，现在幸福未来不幸福，现在不幸福未来幸福。<br>《谷物大脑》一书。书里的一个观点是，面食吃得太多，就容易导致阿尔茨海默病。<br>《最好的告别》，上来说每个人人生的最后那一关是怎么过的，大部分的人都是因为摔了一跤，然后离开人世的，等等。</p>
<h5 id="2、阅读的过程中，时刻要思考的问题"><a href="#2、阅读的过程中，时刻要思考的问题" class="headerlink" title="2、阅读的过程中，时刻要思考的问题"></a>2、阅读的过程中，时刻要思考的问题</h5><ul>
<li>第一，我能不能准确地把握这本书真正的含义，理解这本书？</li>
<li>第二，我能不能用自己的语言表达出这本书真正的含义，且表达清楚？我的信息效度和信度如何？</li>
<li>第三，我表达出来的内容能不能让没有读过这本书的人无障碍地理解？我的语言风格是否通俗易懂，能否被二次传播？</li>
</ul>
<h5 id="3、讲书的五种必备能力"><a href="#3、讲书的五种必备能力" class="headerlink" title="3、讲书的五种必备能力"></a>3、讲书的五种必备能力</h5><blockquote>
<p>虽然说是讲书必备的，但是我认为逻辑思维能力/大局观是阅读书的也必须具备的基础能力。</p>
</blockquote>
<p>第一，逻辑思维能力<br>　　很多人读书抓不住重点，不知道一本书的主题是什么，不了解一本书的论证过程。什么是逻辑思维能力？就是要知道什么叫作前提，什么叫作假设，什么叫作论证，什么叫作论点，什么叫作论据，这些东西要搞明白。所有的论证，要么是用归纳法，要么是用演绎法。</p>
<p>第二，大局观<br>　　大局观就是你拿起一本书以后，首先要知道这本书的大框架。在看一本书的时候，你看的不是细枝末节。</p>
<p>　　大局观是说，你拿到一本书后，要一步步地分析：1. 这本书要解决什么问题？2. 它的使命到底是什么？3. 它是怎么论证这个使命的？4. 它提出了一个什么样的假设？5. 怎么验证这个假设？6. 推理的过程是什么？7. 怎么获得这个证据？8. 最后我们能得出一个什么样的结论？9. 这个结论对我们每个人有什么意义？这就是一本书的架构。如果你在脑海里清晰地梳理了这个架构，你读书的时候，就会非常省力。这就是拥有了大局观。</p>
<p>第三，语言能力<br>　　语言能力可以细分出很多部分，其中最重要的有三个：第一个是简洁，第二个是幽默，第三个是说服力。这三项能力都可以通过训练慢慢获得。</p>
<p>第四，同理心<br>　　越是优秀的老师，越有同理心。他能感受到别人的知识盲区，破除“知识的诅咒”。他能预判到别人可能听不懂某些知识点，于是用一种降维的方法讲给别人听，使其明白。</p>
<p>第五，爱<br>　　为什么爱很重要？我希望大家能感受到，我讲每一本书时都充满了热情。我爱我的听众。我觉得把这些内容讲出来，万一有一个有缘人听到了觉得特别好，从此他的生活可能发生改变，这是非常有成就感的。</p>
<p>最后总结一下，从读书的角度，建议先不要一直停顿做笔记，等过了一周再做；且读书时需要一定的理解力，而要达到这样的理解力需要有各个领域的基础知识。从讲书的角度，要先选好有建设性的书籍(TIPS原则)，读的时候要时刻思考书的意义及怎么讲能让听众简单理解作者的核心思想，以及讲书的一些技巧。</p>
<p>PS：这本书针对讲“读懂”感觉还是比较少，重点是讲书方面的，另一本《如何阅读一本书》讲述了阅读的几个层次和阅读不同读物的方法，下篇分享~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jinbeen.com/images/2021/book-understand-book.png&quot; alt=&quot;读懂一本书：樊登读书法&quot;&gt;&lt;/p&gt;
&lt;p&gt;樊登作为专业讲书的人，这本书基本上是以讲书的角度来说的，提到了该如何选书，怎么阅读抓住
    
    </summary>
    
      <category term="Books" scheme="http://jinbeen.com/categories/Books/"/>
    
    
      <category term="Books" scheme="http://jinbeen.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>support升级到28.0.0所遇问题</title>
    <link href="http://jinbeen.com/2019/05/23/android-support-update/"/>
    <id>http://jinbeen.com/2019/05/23/android-support-update/</id>
    <published>2019-05-23T10:42:00.000Z</published>
    <updated>2019-05-29T15:34:01.093Z</updated>
    
    <content type="html"><![CDATA[<p><em>com.android.support:support-v4:25.4.0</em> 升级为： <em>com.android.support:support-v4:28.0.0</em></p>
<a id="more"></a>
<h3 id="统一修改为-28-0-0-后编译报错"><a href="#统一修改为-28-0-0-后编译报错" class="headerlink" title="统一修改为 28.0.0 后编译报错"></a>统一修改为 28.0.0 后编译报错</h3><p>编译时各种稀奇古怪的错，如<code>org.gradle.tooling.BuildException: Failed to process resources, see aapt output above for details.</code><br>修改 <code>compileSdkVersion = 28</code>即可</p>
<h3 id="设置TabLayout点击无水波纹效果，失效"><a href="#设置TabLayout点击无水波纹效果，失效" class="headerlink" title="设置TabLayout点击无水波纹效果，失效"></a>设置TabLayout点击无水波纹效果，失效</h3><p>之前使用的属性为：<code>app:tabBackground=&quot;@android:color/transparent&quot;</code><br>现在需要使用属性：<code>app:tabRippleColor=&quot;@android:color/transparent&quot;</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tl_fenlei_type"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"73dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorWhite"</span></div><div class="line">    <span class="attr">android:visibility</span>=<span class="string">"gone"</span></div><div class="line">    <span class="attr">app:tabRippleColor</span>=<span class="string">"@android:color/transparent"</span></div><div class="line">    <span class="attr">app:tabIndicatorHeight</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="通过反射修改-TabLayout-下划线宽度，失效"><a href="#通过反射修改-TabLayout-下划线宽度，失效" class="headerlink" title="通过反射修改 TabLayout 下划线宽度，失效"></a>通过反射修改 TabLayout 下划线宽度，失效</h3><p>因新的api字段名和之前的不一致或没有该字段导致。<br> 28.0.0后，可通过api直接实现TabLayout固定宽度:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">size</span></span></div><div class="line">                <span class="attr">android:width</span>=<span class="string">"28dp"</span></div><div class="line">                <span class="attr">android:height</span>=<span class="string">"2dp"</span> /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"1dp"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/color_theme"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:tabIndicator="@drawable/shape_tab_indicator"</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：Android 6.0 以下版本此属性不生效，可以直接使用图片试试</p>
</blockquote>
<p>关键源码 DrawableCompat.java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Drawable <span class="title">wrap</span><span class="params">(@NonNull Drawable drawable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">        <span class="keyword">return</span> drawable;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (VERSION.SDK_INT &gt;= <span class="number">21</span>) &#123;</div><div class="line">        <span class="keyword">return</span> (Drawable)(!(drawable <span class="keyword">instanceof</span> TintAwareDrawable) ? <span class="keyword">new</span> WrappedDrawableApi21(drawable) : drawable);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> (Drawable)(!(drawable <span class="keyword">instanceof</span> TintAwareDrawable) ? <span class="keyword">new</span> WrappedDrawableApi14(drawable) : drawable);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过反射为单独TabLayout-Tab设置点击事件，失效"><a href="#通过反射为单独TabLayout-Tab设置点击事件，失效" class="headerlink" title="通过反射为单独TabLayout.Tab设置点击事件，失效"></a>通过反射为单独TabLayout.Tab设置点击事件，失效</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTabClick</span><span class="params">(TabLayout tabLayout)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tabLayout.getTabCount(); i++) &#123;</div><div class="line">            TabLayout.Tab tab = tabLayout.getTabAt(i);</div><div class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//这里使用到反射，拿到Tab对象后获取Class</span></div><div class="line">            Class c = tab.getClass();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//Filed “字段、属性”的意思,c.getDeclaredField 获取私有属性。</span></div><div class="line">                <span class="comment">//"mView"是Tab的私有属性名称(可查看TabLayout源码),类型是 TabView,TabLayout私有内部类。</span></div><div class="line">                <span class="comment">// 25.4.0</span></div><div class="line"><span class="comment">//                Field field = c.getDeclaredField("mView");</span></div><div class="line">                <span class="comment">// 28.0.0</span></div><div class="line">                Field field = c.getDeclaredField(<span class="string">"view"</span>);</div><div class="line">                <span class="comment">//值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查。值为 false 则指示反射的对象应该实施 Java 语言访问检查。</span></div><div class="line">                field.setAccessible(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">final</span> View view = (View) field.get(tab);</div><div class="line">                <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                view.setTag(i);</div><div class="line">                view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                          <span class="comment">//这里就可以根据业务需求处理点击事件了。</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="自己为了修改TabLayout的宽度的-MyTabLayout-，下划线没有了"><a href="#自己为了修改TabLayout的宽度的-MyTabLayout-，下划线没有了" class="headerlink" title="自己为了修改TabLayout的宽度的 MyTabLayout ，下划线没有了"></a>自己为了修改TabLayout的宽度的 MyTabLayout ，下划线没有了</h3><p>替换为最新的 <code>TabLayout</code>，增加属性即可</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:tabIndicator="@drawable/shape_tab_indicator"</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：Android 6.0 以下版本此属性不生效，可以直接使用图片试试</p>
</blockquote>
<h3 id="通过CollapsingToolbarLayout实现的滑动置顶"><a href="#通过CollapsingToolbarLayout实现的滑动置顶" class="headerlink" title="通过CollapsingToolbarLayout实现的滑动置顶"></a>通过CollapsingToolbarLayout实现的滑动置顶</h3><ul>
<li>上滑时，之前滑动一小段松手会快速置顶，速度快时会感觉到卡顿现象。最新的不会，滑动一点就是一点(可能不好表达😂)。</li>
<li>下滑时，之前惯性滑动后，置顶布局会定在那里，需要再次滑动才会下来。最新的直接会下来。</li>
</ul>
<p>更新后显然更好用了，😁</p>
<h3 id="通过反射得到CollapsingToolbarLayout中标题的画笔，失效"><a href="#通过反射得到CollapsingToolbarLayout中标题的画笔，失效" class="headerlink" title="通过反射得到CollapsingToolbarLayout中标题的画笔，失效"></a>通过反射得到CollapsingToolbarLayout中标题的画笔，失效</h3><p>之前反射得到的字段名更改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过反射得到CollapsingToolbarLayout中标题的画笔。通过它得到标题变化中的颜色</div><div class="line">     */</div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TextPaint <span class="title">getCollapsingTitlePaint</span><span class="params">(CollapsingToolbarLayout collapsing)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class clazz = Class.forName(<span class="string">"android.support.design.widget.CollapsingToolbarLayout"</span>);</div><div class="line">            <span class="comment">// 25.4.0</span></div><div class="line"><span class="comment">//            Field fieldTextHelper = clazz.getDeclaredField("mCollapsingTextHelper");</span></div><div class="line">            <span class="comment">// 28.0.0</span></div><div class="line">            Field fieldTextHelper = clazz.getDeclaredField(<span class="string">"collapsingTextHelper"</span>);</div><div class="line">            fieldTextHelper.setAccessible(<span class="keyword">true</span>);</div><div class="line">            Object obj = fieldTextHelper.get(collapsing);</div><div class="line"></div><div class="line">            Class clazzHelper = Class.forName(<span class="string">"android.support.design.widget.CollapsingTextHelper"</span>);</div><div class="line">            <span class="comment">// 25.4.0</span></div><div class="line"><span class="comment">//            Field fieldTextPaint = clazzHelper.getDeclaredField("mTextPaint");</span></div><div class="line">            <span class="comment">// 28.0.0</span></div><div class="line">            Field fieldTextPaint = clazzHelper.getDeclaredField(<span class="string">"textPaint"</span>);</div><div class="line">            fieldTextPaint.setAccessible(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">return</span> (TextPaint) fieldTextPaint.get(obj);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchFieldException | IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>引入的三方库可能不兼容 28.0.0</li>
<li>设置<code>TabLayout</code>的字体大小，对应的属性为<code>app:tabTextAppearance</code></li>
<li>使用style时，遇到<code>app:tabIndicator=&quot;@drawable/shape_tab_indicator&quot;</code>属性，可这样使用<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"tabLayoutStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>match_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>44dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"tabIndicator"</span>&gt;</span>@drawable/shape_tab_indicator<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"tabSelectedTextColor"</span>&gt;</span>@color/color_black_title<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"tabTextAppearance"</span>&gt;</span>@style/MyTabTextAppearance<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyTabTextAppearance"</span> <span class="attr">parent</span>=<span class="string">"TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;com.android.support:support-v4:25.4.0&lt;/em&gt; 升级为： &lt;em&gt;com.android.support:support-v4:28.0.0&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android gradle 命令行打包</title>
    <link href="http://jinbeen.com/2019/04/24/android-gradle-packaging/"/>
    <id>http://jinbeen.com/2019/04/24/android-gradle-packaging/</id>
    <published>2019-04-24T08:47:00.000Z</published>
    <updated>2021-04-03T08:29:29.468Z</updated>
    
    <content type="html"><![CDATA[<p>偶尔用一下，hhh(╯﹏╰)</p>
<a id="more"></a>
<h4 id="项目配置gradle环境"><a href="#项目配置gradle环境" class="headerlink" title="项目配置gradle环境"></a>项目配置gradle环境</h4><ul>
<li><a href="https://jinbeen.com/2016/10/13/Mac-Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE-java%E3%80%81sdk%E3%80%81ndk%E3%80%81gradle/">Mac Android开发环境变量的配置(java、sdk、ndk、gradle)</a></li>
<li><a href="https://blog.csdn.net/jingbin_/article/details/89491970" target="_blank" rel="external">gradle -version Permission denied - in mac terminal</a></li>
</ul>
<h4 id="build-gradle-配置"><a href="#build-gradle-配置" class="headerlink" title="build.gradle 配置"></a>build.gradle 配置</h4><p>在项目的<code>build.gradle</code>配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">	</div><div class="line">    signingConfigs &#123;</div><div class="line">        debug &#123;</div><div class="line">            storeFile file(pStoreFile)</div><div class="line">            storePassword pStorePassword</div><div class="line">            keyAlias pKeyAlias</div><div class="line">            keyPassword pKeyPassword</div><div class="line">            v1SigningEnabled true</div><div class="line">            v2SigningEnabled true</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        release &#123;</div><div class="line">            storeFile file(pStoreFile)</div><div class="line">            storePassword pStorePassword</div><div class="line">            keyAlias pKeyAlias</div><div class="line">            keyPassword pKeyPassword</div><div class="line">            v1SigningEnabled true</div><div class="line">            v2SigningEnabled true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">            signingConfig signingConfigs.debug</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>1.<code>signingConfigs</code>在<code>buildTypes</code>上面</li>
<li>2.<code>v1SigningEnabled</code>、<code>v2SigningEnabled</code> 设置是否包含v1和v2<ul>
<li>只勾选v1签名并不会影响什么，但是在7.0上不会使用更安全的验证方式<br>只勾选V2签名7.0以下会直接安装完显示未安装，7.0以上则使用了V2的方式验证<br>同时勾选V1和V2则所有机型都没问题</li>
</ul>
</li>
</ul>
<ul>
<li>3.里面的 <code>pStoreFile</code>、<code>pStorePassword</code>等属性在<code>gradle.properties</code>文件内：<br><img src="https://img-blog.csdnimg.cn/2021040316263383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70" alt="gradle.properties"></li>
</ul>
<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>在命令行里输入：</p>
<ul>
<li>gradle assembleDebug 只打debug</li>
<li>gradle assembleRelease 只打release</li>
</ul>
<p>要构建 APK，并立即在运行的模拟器或连接的设备上安装：</p>
<ul>
<li>gradle installDebug</li>
</ul>
<p>输出地址：<br><img src="https://img-blog.csdnimg.cn/20210403162649667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70" alt="apk"></p>
<p>参考文件：<a href="https://github.com/youlookwhat/CloudReader/blob/master/app/build.gradle" target="_blank" rel="external">CloudReader - build.gradle</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶尔用一下，hhh(╯﹏╰)&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
      <category term="gradle" scheme="http://jinbeen.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android 系统剪贴板的使用 - 复制、获取和清空</title>
    <link href="http://jinbeen.com/2019/04/23/android-clipboard/"/>
    <id>http://jinbeen.com/2019/04/23/android-clipboard/</id>
    <published>2019-04-23T06:56:00.000Z</published>
    <updated>2019-05-29T15:01:43.508Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>ClipboardManager： 表示一个剪贴板</li>
<li>ClipData： 剪贴板中保存的所有剪贴数据集（剪贴板可同时复制/保存多条多种数据条目）</li>
<li>ClipData.Item： 剪贴数据集中的一个数据条目</li>
</ul>
<a id="more"></a>
<h3 id="复制内容"><a href="#复制内容" class="headerlink" title="复制内容"></a>复制内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 实现文本复制功能</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> content 复制的文本</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(content)) &#123;</div><div class="line">        <span class="comment">// 得到剪贴板管理器</span></div><div class="line">        ClipboardManager cmb = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line">        cmb.setText(content.trim());</div><div class="line">        <span class="comment">// 创建一个剪贴数据集，包含一个普通文本数据条目（需要复制的数据）</span></div><div class="line">        ClipData clipData = ClipData.newPlainText(<span class="keyword">null</span>, content);</div><div class="line">        <span class="comment">// 把数据集设置（复制）到剪贴板</span></div><div class="line">        cmb.setPrimaryClip(clipData);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取系统剪贴板内容"><a href="#获取系统剪贴板内容" class="headerlink" title="获取系统剪贴板内容"></a>获取系统剪贴板内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取系统剪贴板内容</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getClipContent</span><span class="params">()</span> </span>&#123;</div><div class="line">    ClipboardManager manager = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line">    <span class="keyword">if</span> (manager != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (manager.hasPrimaryClip() &amp;&amp; manager.getPrimaryClip().getItemCount() &gt; <span class="number">0</span>) &#123;</div><div class="line">            CharSequence addedText = manager.getPrimaryClip().getItemAt(<span class="number">0</span>).getText();</div><div class="line">            String addedTextString = String.valueOf(addedText);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(addedTextString)) &#123;</div><div class="line">                <span class="keyword">return</span> addedTextString;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="清空剪贴板内容"><a href="#清空剪贴板内容" class="headerlink" title="清空剪贴板内容"></a>清空剪贴板内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 清空剪贴板内容</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearClipboard</span><span class="params">()</span> </span>&#123;</div><div class="line">    ClipboardManager manager = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line">    <span class="keyword">if</span> (manager != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            manager.setPrimaryClip(manager.getPrimaryClip());</div><div class="line">            manager.setText(<span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            DebugUtil.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="剪贴板的数据改变监听"><a href="#剪贴板的数据改变监听" class="headerlink" title="剪贴板的数据改变监听"></a>剪贴板的数据改变监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取系统剪贴板</span></div><div class="line">ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 添加剪贴板数据改变监听器</span></div><div class="line">clipboard.addPrimaryClipChangedListener(<span class="keyword">new</span> ClipboardManager.OnPrimaryClipChangedListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrimaryClipChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 剪贴板中的数据被改变，此方法将被回调</span></div><div class="line">        System.out.println(<span class="string">"onPrimaryClipChanged()"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 移除指定的剪贴板数据改变监听器</span></div><div class="line"><span class="comment">// clipboard.removePrimaryClipChangedListener(listener);</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ClipboardManager： 表示一个剪贴板&lt;/li&gt;
&lt;li&gt;ClipData： 剪贴板中保存的所有剪贴数据集（剪贴板可同时复制/保存多条多种数据条目）&lt;/li&gt;
&lt;li&gt;ClipData.Item： 剪贴数据集中的一个数据条目&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jinbeen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jinbeen.com/tags/Android/"/>
    
      <category term="clipboard" scheme="http://jinbeen.com/tags/clipboard/"/>
    
  </entry>
  
  <entry>
    <title>链表（上）：如何实现LRU缓存淘汰算法?</title>
    <link href="http://jinbeen.com/2019/04/13/list/"/>
    <id>http://jinbeen.com/2019/04/13/list/</id>
    <published>2019-04-13T06:30:00.000Z</published>
    <updated>2019-05-29T14:58:59.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1354448-9df053cef236aff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<a id="more"></a>
<p>经典的链表应用场景，那就是 LRU 缓存淘汰算法</p>
<p>常见的缓存淘汰策略：</p>
<ul>
<li>先进先出策略 FIFO（First In，First Out）</li>
<li>最少使用策略 LFU（Least Frequently Used）</li>
<li>最近最少使用策略 LRU（Least Recently Used）</li>
</ul>
<blockquote>
<p>这些策略你不用死记，我打个比方你很容易就明白了。假如说，你买了很多本技术书，但有一天你发现，这些书太多了，太占书房空间了，你要做个大扫除，扔掉一些书籍。那这个时候，你会选择扔掉哪些书呢？对应一下，你的选择标准是不是和上面的三种策略神似呢？</p>
</blockquote>
<p>五花八门的链表结构(不止这四种链表结构)</p>
<h2 id="从底层的存储结构看"><a href="#从底层的存储结构看" class="headerlink" title="从底层的存储结构看"></a>从底层的存储结构看</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。</p>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。<br><img src="http://upload-images.jianshu.io/upload_images/1354448-48f37c5fa5a90667.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>三种最常见的链表结构</p>
<ul>
<li>单链表</li>
<li>双向链表</li>
<li>循环链表</li>
</ul>
<h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><blockquote>
<p>链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“<strong>结点</strong>”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。如图所示，我们把这个记录下个结点地址的指针叫作<strong>后继指针 next</strong>。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-9df053cef236aff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>从单链表图中，你应该可以发现，其中有两个结点是比较特殊的，它们分别是第一个结点和最后一个结点。我们习惯性地把第一个结点叫作<strong>头结点</strong>，把最后一个结点叫作<strong>尾结点</strong>。其中，头结点用来记录链表的基地址。有了它，我们就可以遍历得到整条链表。而尾结点特殊的地方是：指针不是指向下一个结点，而是指向一个<strong>空地址 NULL</strong>，表示这是链表上最后一个结点。</p>
<p>插入和删除：</p>
<ul>
<li>数组：插入和删除时，为了保持内存数据的连续性，需要做大量的数据搬移，时间复杂度为O(n)。</li>
<li>链表：链表的插入和删除操作，我们只需要考虑相邻节点的指针改变，时间复杂度为O(1)。</li>
</ul>
<p>查找：</p>
<ul>
<li>链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点，时间复杂度为O(n)。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-6c2972ee0d91f454.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><blockquote>
<p>循环链表是一种特殊的单链表。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-1ded6687d1ba3c51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>与单链表唯一的区别在尾节点：</p>
<ul>
<li>单链表的尾节点指针指向<em>空指针</em>，表示这是最后的节点。</li>
<li>循环链表的尾节点指针指向链表的<em>头结点</em>，</li>
</ul>
<p>与单链表比优点：从链尾到链头比较方便。</p>
<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><blockquote>
<p>单链表只有一个方向，节点只有一个后继指针 next 指向后面的节点。<br>而双向链表，它支持两个方向，每个节点不止有一个后继指针 next 指向后面的节点，还有一个前驱指针 prev 指向前面的节点。(LinkedHashMap)</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-b538df27f89e9ee3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>从图中可以看出来，双向链表需要额外的两个空间来存储前继节点和前驱节点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。<br>虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性。</p>
<p>从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。</p>
<h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><p>在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：</p>
<ul>
<li>1.删除结点中“值等于某个给定值”的结点；</li>
<li>2.删除给定指针指向的结点。</li>
</ul>
<h6 id="1-删除结点中“值等于某个给定值”的结点"><a href="#1-删除结点中“值等于某个给定值”的结点" class="headerlink" title="1. 删除结点中“值等于某个给定值”的结点"></a>1. 删除结点中“值等于某个给定值”的结点</h6><p>不管是单链表还是双向链表，为了查找到值等于给定值的结点，都需要从头结点开始一个一个依次遍历对比，直到找到值等于给定值的结点，然后再通过我前面讲的指针操作将其删除。</p>
<p>尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 O(n)。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 O(n)。</p>
<h6 id="2-删除给定指针指向的结点"><a href="#2-删除给定指针指向的结点" class="headerlink" title="2.删除给定指针指向的结点"></a>2.删除给定指针指向的结点</h6><p>我们已经找到了要删除的结点，但是删除某个结点 q 需要知道其前驱结点，而单链表并不支持直接获取前驱结点，所以，为了找到前驱结点，我们还是要从头结点开始遍历链表，直到 p-&gt;next=q，说明 p 是 q 的前驱结点。</p>
<p>双向链表这种情况比较有优势。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以，针对第二种情况，单链表删除操作需要 O(n) 的时间复杂度，而双向链表只需要在 O(1) 的时间复杂度内就搞定了！</p>
<p>如果我们希望在链表的某个指定结点前面<em>插入</em>一个结点，双向链表比单链表有很大的优势。双向链表可以在 O(1) 时间复杂度搞定，而单向链表需要 O(n) 的时间复杂度。</p>
<p>查询：<br>除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查询的效率也要比单链表高一些。因为，我们可以记录上次查找的位置 p，每次查询时，根据要查找的值与 p 的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。</p>
<ul>
<li>对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；</li>
<li>而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。</li>
</ul>
<h4 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h4><p><img src="http://upload-images.jianshu.io/upload_images/1354448-35804af4bafa5670.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<h2 id="链表-VS-数组性能大比拼"><a href="#链表-VS-数组性能大比拼" class="headerlink" title="链表 VS 数组性能大比拼"></a>链表 VS 数组性能大比拼</h2><p>数组和链表是两种截然不同的内存组织方式。正是因为内存存储的区别，它们插入、删除、随机访问操作的时间复杂度正好相反。</p>
<table>
<thead>
<tr>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">数组</th>
<th style="text-align:center">链表</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">插入删除</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">随机访问</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">O(n)</td>
</tr>
</tbody>
</table>
<ul>
<li>数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。<ul>
<li>链表在内存中并不是连续存储，所以对CPU缓存不友好，没办法有效预读。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。</li>
<li>链表本身没有大小的限制，天然地支持动态扩容，这也是它与数组最大的区别。</li>
</ul>
<p>你可能会说，我们 Java 中的 ArrayList 容器，也可以支持动态扩容啊？我们上一节课讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将数据拷贝过去，而数据拷贝的操作是非常耗时的。</p>
<p>我举一个稍微极端的例子。如果我们用 ArrayList 存储了了 1GB 大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList 会申请一个 1.5GB 大小的存储空间，并且把原来那 1GB 的数据拷贝到新申请的空间上。听起来是不是就很耗时？</p>
<p>除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的存储空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是 Java 语言，就有可能会导致频繁的 GC（Garbage Collection，垃圾回收）。</p>
<p>所以，在我们实际的开发中，针对不同类型的项目，要根据具体情况，权衡究竟是选择数组还是链表。</p>
<h2 id="如何基于链表实现-LRU-缓存淘汰算法？"><a href="#如何基于链表实现-LRU-缓存淘汰算法？" class="headerlink" title="如何基于链表实现 LRU 缓存淘汰算法？"></a>如何基于链表实现 LRU 缓存淘汰算法？</h2><p>我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p>
<ol>
<li><p>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</p>
</li>
<li><p>如果此数据没有在缓存链表中，又可以分为两种情况：</p>
<ul>
<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>
<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>
</ul>
</li>
</ol>
<p>这样我们就用链表实现了一个 LRU 缓存，是不是很简单？</p>
<p>现在我们来看下 m 缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为 O(n)。</p>
<p>实际上，我们可以继续优化这个实现思路，比如引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。因为要涉及我们还没有讲到的数据结构，所以这个优化方案，我现在就不详细说了，等讲到散列表的时候，我会再拿出来讲。</p>
<h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ul>
<li>数组需要一块连续的内存空间来存储。</li>
<li>链表是通过“指针”将一组零散的内存块串联起来使用。</li>
</ul>
<p>单链表的第一个结点叫头结点，最后一个结点叫作尾结点，尾结点指向一个空指针NULL。插入和删除的时间复杂度为O(1)，查找的时间复杂度为O(n)。</p>
<p>循环链表的最后一个结点指向链表头结点，适合处理环形数据结构。</p>
<p>双向链表不止有一个后继指针 next 还有一个前驱指针 prev ，同样的数据双向链表比单链表占更多的内存空间。<br>删除给定的结点，双向链表时间复杂度为O(1)，单链表的时间复杂度为O(n)。</p>
<p>ArrayList：支持动态扩容的数组，但当没有空闲空间了，就会申请一个更大的空间，将数据拷贝过去，而数据拷贝是非常耗时的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1354448-9df053cef236aff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>数组：为什么很多编程语言中数组都从0开始编号？</title>
    <link href="http://jinbeen.com/2019/04/12/array/"/>
    <id>http://jinbeen.com/2019/04/12/array/</id>
    <published>2019-04-12T04:43:00.000Z</published>
    <updated>2019-05-29T14:49:47.154Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1354448-076bc675dd272e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="image"></p>
<a id="more"></a>
<h3 id="如何实现随机访问？"><a href="#如何实现随机访问？" class="headerlink" title="如何实现随机访问？"></a>如何实现随机访问？</h3><p><strong>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</strong></p>
<p>1.第一是<strong>线性表（Linear List）。</strong><br>顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。<br><img src="http://upload-images.jianshu.io/upload_images/1354448-fac4ea94046a2e8c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>而与它相对立的概念是<strong>非线性表</strong>，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-c1edf8fc505e56c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>2.第二个是<strong>连续的内存空间和相同类型的数据。</strong><br>正是因为这两个限制，它才有了一个堪称“杀手锏”的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p>
<h3 id="数组是如何实现根据下标随机访问数组元素的"><a href="#数组是如何实现根据下标随机访问数组元素的" class="headerlink" title="数组是如何实现根据下标随机访问数组元素的?"></a>数组是如何实现根据下标随机访问数组元素的?</h3><p>我们拿一个长度为 10 的 int 类型的数组 int[] a = new int[10] 来举例。在我画的这个图中，计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 base_address = 1000。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-076bc675dd272e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>我们知道，计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</p>
<p><code>a[i]_address = base_address + i * data_type_size</code></p>
<p>其中 data_type_size 表示数组中每个元素的大小。我们举的这个例子里，数组中存储的是 int 类型数据，所以 data_type_size 就为 4 个字节。</p>
<blockquote>
<ul>
<li>这里我要特别纠正一个“错误”。我在面试的时候，常常会问数组和链表的区别，很多人都回答说，“链表适合插入、删除，时间复杂度 O(1)；数组适合查找，查找时间复杂度为 O(1)”。</li>
<li>实际上，这种表述是不准确的。数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，<strong><em>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。</em></strong></li>
</ul>
</blockquote>
<h3 id="低效的“插入”和“删除”"><a href="#低效的“插入”和“删除”" class="headerlink" title="低效的“插入”和“删除”"></a>低效的“插入”和“删除”</h3><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。那插入操作的时间复杂度是多少呢？你可以自己先试着分析一下。</p>
<p>如果在数组的末尾插入元素，那就不需要移动数据了，这时的时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。 因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)/n=O(n)。</p>
<p>如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p>
<p>为了更好地理解，我们举一个例子。假设数组 a[10] 中存储了如下 5 个元素：a，b，c，d，e。</p>
<p>我们现在需要将元素 x 插入到第 3 个位置。我们只需要将 c 放入到 a[5]，将 a[2] 赋值为 x 即可。最后，数组中的元素如下： a，b，x，d，e，c。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-4a81eac6520048ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>利用这种处理技巧，在特定场景下，在第 k 个位置插入一个元素的时间复杂度就会降为 O(1)。这个处理思想在快排中也会用到，我会在排序那一节具体来讲，这里就说到这儿。</p>
<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</p>
<p>和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。</p>
<p>实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p>
<p>我们继续来看例子。数组 a[10] 中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-4ed4d751eb76c7c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p>
<p>如果你了解 JVM，你会发现，这不就是 JVM 标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<strong><em>很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的。</em></strong>如果你细心留意，不管是在软件开发还是架构设计中，总能找到某些算法和数据结构的影子。</p>
<blockquote>
<p>JVM标记清除算法：<br>大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存活。只有当标记工作完成后，清理工作才会开始。<br>不足：1.效率问题。标记和清理效率都不高，但是当知道只有少量垃圾产生时会很高效。2.空间问题。会产生不连续的内存空间碎片。</p>
</blockquote>
<h3 id="警惕数组的访问越界问题"><a href="#警惕数组的访问越界问题" class="headerlink" title="警惕数组的访问越界问题"></a>警惕数组的访问越界问题</h3><p>C语言代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(; i&lt;=<span class="number">3</span>; i++)&#123;</div><div class="line">        arr[i] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>问题：无限打印“hello world”</li>
<li>原因：数组大小为 3，a[0]，a[1]，a[2]，而我们的代码因为书写错误，导致 for 循环的结束条件错写为了 i&lt;=3 而非 i&lt;3，所以当 i=3 时，数组 a[3] 访问越界。</li>
</ul>
<p>我们知道，在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3] 也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。</p>
<p>数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理。因为，访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误。</p>
<h3 id="容器能否完全替代数组？"><a href="#容器能否完全替代数组？" class="headerlink" title="容器能否完全替代数组？"></a>容器能否完全替代数组？</h3><p>我个人觉得，ArrayList 最大的优势就是可以将很多数组操作的细节封装起来。比如前面提到的数组插入、删除数据时需要搬移其他数据等。另外，它还有一个优势，就是支持动态扩容。</p>
<p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</p>
<p>如果使用 ArrayList，我们就完全不需要关心底层的扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。</p>
<p>不过，这里需要注意一点，因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好在创建 ArrayList 的时候事先指定数据大小。</p>
<p>比如我们要从数据库中取出 10000 条数据放入 ArrayList。我们看下面这几行代码，你会发现，相比之下，事先指定数据大小可以省掉很多次内存申请和数据搬移操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList(<span class="number">10000</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</div><div class="line">  users.add(xxx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有些时候，用数组会更合适些，我总结了几点自己的经验。</p>
<ul>
<li><p>1.Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</p>
</li>
<li><p>2.如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</p>
</li>
<li><p>3.还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。比如 Object[][] array；而用容器的话则需要这样定义：ArrayList<arraylist> array。</arraylist></p>
</li>
</ul>
<p>我总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</p>
<h3 id="为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？"><a href="#为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？" class="headerlink" title="为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？"></a>为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？</h3><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。前面也讲到，如果用 a 来表示数组的首地址，a[0] 就是偏移为 0 的位置，也就是首地址，a[k] 就表示偏移 k 个 type_size 的位置，所以计算 a[k] 的内存地址只需要用这个公式：</p>
<p><code>a[k]_address = base_address + k * type_size</code></p>
<p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k] 的内存地址就会变为：</p>
<p><code>a[k]_address = base_address + (k-1)*type_size</code></p>
<p>对比两个公式，我们不难发现，从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。</p>
<p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。</p>
<p>不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非 0 开始不可。所以我觉得最主要的原因可能是历史原因。</p>
<p>C 语言设计者用 0 开始计数数组下标，之后的 Java、JavaScript 等高级语言都效仿了 C 语言，或者说，为了在一定程度上减少 C 语言程序员学习 Java 的学习成本，因此继续沿用了从 0 开始计数的习惯。实际上，很多语言中数组也并不是从 0 开始计数的，比如 Matlab。甚至还有一些语言支持负数下标，比如 Python。</p>
<h3 id="内容小节"><a href="#内容小节" class="headerlink" title="内容小节"></a>内容小节</h3><p>我们今天学习了数组。它可以说是最基础、最简单的数据结构了。数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p>
<blockquote>
<p>二维数组内存寻址：<br>对于m*n的数组，a[ i ][ j ](i &lt; m,j &lt; n)的地址为：<br><code>address = base_address + ( i * n + j) * type_size</code><br>另外，对于数组访问越界造成无限循环，我理解是编译器的问题，对于不同的编译器，在内存分配时，会按照内存地址递增或递减的方式进行分配。老师的程序，如果是内存地址递减的方式，就会造成无限循环。</p>
</blockquote>
<h3 id="个人小结"><a href="#个人小结" class="headerlink" title="个人小结"></a>个人小结</h3><p>数组用来储存相同类型的数据，且内存是连续的，线性表数据结构。<br>方便访问，但是对于删除和插入效果不好。</p>
<p>随机寻址：<br><code>a[i]_address = base_address + i * data_type_size</code></p>
<p>删除和插入要进行移位操作，可以优化的是，先处理完数据，最后再进行移位，和jvm垃圾回收机制类似。</p>
<p>一般情况可以用ArrayList来替代数组，它的好处是支持动态扩容和封装了插入删除等操作，没有空间时它都会将空间自动扩容为 1.5 倍大小。</p>
<p>至于为什么从0开始，猜想<br>一是因为C语言和很多语言都是从0开始，为了学习成本数组也从0开始。<br>二是如果从1开始，内存地址就会成为<code>a[k]_address = base_address + (k-1)*type_size</code>，则会多一次减法运算，为了CPU性能，则从0开始计数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1354448-076bc675dd272e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="http://jinbeen.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>为 GitHub 项目生成独立主页</title>
    <link href="http://jinbeen.com/2019/04/09/github-pages-readme/"/>
    <id>http://jinbeen.com/2019/04/09/github-pages-readme/</id>
    <published>2019-04-09T10:00:00.000Z</published>
    <updated>2021-04-03T08:29:31.997Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1354448-b66068bcf588c88a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<h4 id="生成主页"><a href="#生成主页" class="headerlink" title="生成主页"></a>生成主页</h4><p>步骤：</p>
<ol>
<li><p>进入项目的设置页 <code>Settings</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-acb452ee6cf3f1a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Settings.png"></p>
</li>
<li><p>选择 <code>GitHub Pages</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-5941f6d80b024d10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub Pages.png"></p>
</li>
</ol>
<ol>
<li><p>选择主题 <code>Change theme</code><br><img src="https://upload-images.jianshu.io/upload_images/1354448-d378ddf6260eaea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Change theme.png"></p>
</li>
<li><p>确定选择<br><img src="https://upload-images.jianshu.io/upload_images/1354448-efbcee3c18c2c798.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Select.png"></p>
</li>
</ol>
<p>效果页面：<a href="https://jinbeen.com/CloudReader">https://jinbeen.com/CloudReader</a></p>
<h4 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h4><ol>
<li><p>图片显示不出来？<br>使用<code>&lt;img /&gt;</code>标签失效，必须使用正规的引入图片的方式：<code>![]()</code><br>图片尺寸太大？ - 图片处理网站：<a href="https://www.fotor.com/create/design" target="_blank" rel="external">https://www.fotor.com/create/design</a></p>
</li>
<li><p>图片链接失效？<br>注意使用正确的图片链接，之前使用的是：<br><code>https://github.com/youlookwhat/CloudReader/blob/master/file/images.png</code><br>发现这个链接是有问题的，点击<code>download</code>进去，正确的链接应该是：<br><code>https://raw.githubusercontent.com/youlookwhat/CloudReader/master/file/images.png</code></p>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://www.jianshu.com/p/1b37016d8db6" target="_blank" rel="external">https://www.jianshu.com/p/1b37016d8db6</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1354448-b66068bcf588c88a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开源项目" scheme="http://jinbeen.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="开源项目" scheme="http://jinbeen.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="github" scheme="http://jinbeen.com/tags/github/"/>
    
  </entry>
  
</feed>
