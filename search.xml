[{"title":"2022年中复盘","url":"http://jinbeen.com/2022/05/29/analyse2022/","content":"<h3 id=\"2022的flag\"><a href=\"#2022的flag\" class=\"headerlink\" title=\"2022的flag\"></a>2022的flag</h3><ol>\n<li>中级软件设计</li>\n<li>高级项目管理</li>\n<li>阅读20本书，平均2周一本</li>\n<li>上班空闲时间精进源码</li>\n<li>开发工具类或其他种类小程序</li>\n</ol>\n<p><code>有计划但要及时调整计划。</code></p>\n<p>随着公司的发展和公司对我的期望，2022年调整了目标，主要是契合自己在公司的发展。</p>\n<p>今年公司请外面的培训讲师针对于基层领导做了授课，使我们有更专业的管理能力，例如管理者该有哪些意识和一些计划手段等。</p>\n<p>公司对我也有一些期望，例如更全方面的技术思维和管理能力。所以今年主要集中在这方面的计划。</p>\n<p>深刻理解到：<strong>个人定的发展目标要紧跟在公司的发展</strong>。</p>\n<h3 id=\"2022的计划\"><a href=\"#2022的计划\" class=\"headerlink\" title=\"2022的计划\"></a>2022的计划</h3><ol>\n<li><p>学会iOS开发，并发布一个开源项目，上架一个iOS App 到App Store。</p>\n<ul>\n<li>目前已经学完iOS开发基础：<a href=\"https://github.com/youlookwhat/iOS-learning\" target=\"_blank\" rel=\"external\">iOS-learning</a></li>\n<li>关于每日一句的开源App正在开发中，现在私有：ByQuoteAppSwift</li>\n<li>正在跑通公司的项目，利用公司项目中的三方SDK开发App，过程中遇到点问题正在解决</li>\n</ul>\n</li>\n<li><p>学习管理类视频或书籍</p>\n<ul>\n<li>公司的培训课程</li>\n<li>麦朵里的管理课程</li>\n<li>书籍：《卓有成效的管理者》</li>\n</ul>\n</li>\n<li><p>阅读10本书<br> <code>学习实用类的书籍特别耗时间，例如iOS技术，涉及到具体的实践，不然就吸收不了</code></p>\n<ul>\n<li>《Swift5 从零到精通iOS开发训练营》已完成</li>\n<li>《做点事》已完成</li>\n<li>《原则》</li>\n<li>《被讨厌的勇气》</li>\n<li>《卓有成效的管理者》</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>软考高级：高级项目管理</p>\n<ul>\n<li>11月份开考，计划在学完iOS之后进行</li>\n</ul>\n</li>\n</ol>\n<p>总结：今年上半年iOS学习，下半年高级项目管理。持续提升管理能力和阅读书籍。</p>\n","categories":["life"],"tags":["life"]},{"title":"2021年终总结","url":"http://jinbeen.com/2022/01/05/summary2021/","content":"<blockquote>\n<p>家里的抽屉大概会一年整理一次，人也应如此。</p>\n</blockquote>\n<p>今年的收获：</p>\n<ol>\n<li><p><strong>读书</strong>。今年大概读了10本书。去年定的今年的关键词主要是读书，但是没有定几本。这是一个失误，<code>计划今年要读书不是战略，计划要读几本书，每月完成多少，才是战略</code>。所以2022年的计划要更具体才行，例如具体到两周看一本。</p>\n</li>\n<li><p><strong>沟通能力</strong>。这算是一个计划之外的收获，由于公司的人才培养计划，今年上半年在公司进行了中层员工培训；然后部门总监拉Android/iOS的负责人去进行每天的例会，虽然每天基本没有汇报什么，但是确实提高了表达能力。之前说事情情绪起伏挺多，现在虽然也有点但是和以前比好很多了，尤其是和其他人沟融能很平稳的将事情表达清楚，也基本能达成共赢。</p>\n</li>\n<li><p><strong>鸿蒙卡片开发</strong>。这个也是计划之外的收获，公司和华为合作开发一款查成分的鸿蒙卡片，然后自己一个人完成了开发，和产品/UI/测试沟通的很好，以及发布到应用市场和华为新折叠屏手机(<a href=\"https://consumer.huawei.com/cn/phones/p50-pocket/\" target=\"_blank\" rel=\"external\">HUAWEI P50 Pocket</a>)的外屏适配，去了3次武汉的华为研究所。在公司分享了鸿蒙卡片开发的基础知识，达到可以快速上手的目的，小组成员也进行了尝试。另外还分享了App的启动流程。</p>\n</li>\n<li><p><strong>结婚</strong>。今年5月1日举行的婚礼，得到了很多亲朋好友的帮助和祝福，最感谢的是我弟，忙了很长时间。办酒席真的不容易，需要很多的协调工作，两家的相互包容很重要，曾老先生说为什么中华有办酒席的风俗，美国都是两个人直接过日子甚至不接自己的爸妈，因为我们办酒席很复杂，办了一次后绝对不想办第二次，这样对于婚姻就很谨慎，不想再进行第二次婚礼，而且很多人见证了，离婚后感觉会很丢脸。</p>\n</li>\n<li><p><strong>飞碟</strong>。今年最大的幸福感还来自于飞碟，差不多6月份买过来的，花的价格还不少，媳妇很想养一只，买了后看着他长大了，差不多6月多月时间，已经离不开他了，也为他找好了对象。很乖很粘人，由于我们白天上班一直把他关笼子里，晚上和我们一起在睡。</p>\n</li>\n<li><p><strong>技术文章和GitHub维护</strong>。今年参加了掘金的技术征文，在繁重的工作任务中抽时间出来写博客是有点艰难，不过还是达到了基础标准，得到了一个马克杯和一个徽章。GitHub也在维护，将所有的项目基本统一成Androidx了，升级了各个依赖库的版本，云阅也加上了深色模式，由于时光网api和干货集中营api失效都去掉了然后换成了玩安卓的内容。今年总体的star数也涨了不少。</p>\n</li>\n</ol>\n<p>总结：</p>\n<ul>\n<li><p>今年收获了两项不在计划之中的能力，软实力沟通和技术方面鸿蒙开发，都是由于公司安排产生的，也是因为大部分的时间在工作上面，所以这方面的提升较多。</p>\n</li>\n<li><p>计划之中的读书比预期的数量要少很多，明年要减少这方面的任务量并做好时间规划。</p>\n</li>\n<li><p>GitHub方面在预期之中，因为短期不会有新项目的开源，主要还是要集中在硬实力的增强，例如源码和数据结构算法之类的学习，而不是追求star数。计划将鸿蒙基础架构开源，实现鸿蒙的快速开发。</p>\n</li>\n<li><p>家庭方面和以前比好了很多，也增加了一个新的成员。</p>\n</li>\n</ul>\n<p>回想2020给自己定的目标，只提到了关键词，没有具体的时间计划。2021大概也是围绕着这些在做，但是整体的达标率还是差了些。</p>\n<hr>\n<p>2022的flag：</p>\n<ol>\n<li><p>中级软件设计</p>\n<p> 本身自己是非科班出生，虽然有工作经验和GitHub做背书，但是考这个证不是个形式上的东西，第一确实可以让我全方面了解软件开发，里面有常用的数据结构算法等，如果这个都达不到，进大厂就不可能了。第二媳妇也在进行备考，可以一起学习。计划时间1234月份。</p>\n</li>\n<li><p>高级项目管理</p>\n<p> 同事考的这个，感觉自己也可以考个，比较符合自己的职业规划。每年有两次考试，5月份和11月份，计划是5月份考中级11月份考高级，然后自己非科班也有中级高级的证书也利于自己的职业发展。计划时间8910月份。</p>\n</li>\n<li><p>阅读20本书，平均2周一本</p>\n<p> 看书是必不可少的，甚至可以加到和吃饭上厕所同一级别，今年计划每两周一本书，写读书笔记，先把自己买的书看完。</p>\n</li>\n<li><p>上班空闲时间精进源码</p>\n<p> 做重要不紧急的事情。有计划的深入学习源码知识。做每周计划。</p>\n</li>\n<li><p>开发工具类或其他种类小程序</p>\n<p> 今年学了小程序开发，但是一直没有实践过，想开发出一款小程序出来，想好了内容，缺的还是UI和后台接口，如果有合适的会执行，需要的时间大概在连续一个月左右。</p>\n</li>\n</ol>\n<p>刻意休息，将可支配时间做好规划，投资在重要不紧急的事情中。</p>\n","categories":["life"],"tags":["life"]},{"title":"云阅迭代历程20211108","url":"http://jinbeen.com/2021/11/08/cloudreader-development-process/","content":"<p><img src=\"https://jinbeen.com/images/2021/cloudreader-370-screenshots.jpg\" alt=\"云阅3.7.0\"></p>\n<p>因为干货集中营服务器不维护了，QQ用户交流群也解散了，于是今天把干货集中营模块从云阅里移除了。</p>\n<p>云阅这几年迭代历程仿佛是安卓这几年的发展历程。</p>\n<p>云阅从2017年元旦第一版开始到现在2021年11月8日，将近四年的时间了。</p>\n<p><strong>使用过的Api：豆瓣、干货集中营、时光网、玩安卓</strong></p>\n<p>最早的是豆瓣，之前豆瓣提供了音乐，书籍，电影的数据，还有社区的数据，不过要授权得到，碍于前端程序员没有多少公共的Api，这些数据帮助很多开发者完成了他们自己的App，包括之前的豆芽等。记得之前它的star是四千多，那时候云阅还没开发出来，不知道能到多少，看了好多开源App，四千多几乎是极限了，现在云阅也到了这个数，增长的很缓慢了。</p>\n<p>但是豆瓣的开源api慢慢在消失，从书籍开始，当时还做了一版书籍的页面，但是还没等发布就失效了，然后我将一个模块拿出来做了干货集中营。干货集中营那时候异常火热，是代码家开源出来的，也有很多开发者接入，感觉和现在玩安卓差不多，于是我将干货集中营也接入了，首页做成和以前的网易云音乐一样的形式，不过图片的高度是写死的，不是比例的，当时还废了一点时间，哈哈</p>\n<p>书籍之后就是玩安卓，当时只接入了部分的功能，变成了：干货集中营，玩安卓，电影<br>这个是云阅2.0的版本：<a href=\"https://jinbeen.com/2018/11/06/cloudreader-app-introduce/\">《云阅2.0》一款同时看玩安卓和干货集中营资讯的App</a></p>\n<p><img src=\"https://jinbeen.com/images/2018/cloudreader-2-screenshots.png\" alt=\"云阅2.0\"></p>\n<p>后来豆瓣电影的数据失效了，改成了时光网的电影数据，但是不太稳定，期间也有几次修改，后来就完全不能用了，然后换成了玩安卓其他的页面。</p>\n<p>玩安卓两个模块，干货集中营一个模块这样维持了很久，之前干货集中营也进行了 一次接口升级维持了一段时间。</p>\n<p>现在也失效了，没有报酬的服务难以持久，抹泪。然后换成了玩安卓的项目类别页面。</p>\n<p>至此云阅基本都是玩安卓的内容，也感谢鸿洋给了我们开发者公共的Api。</p>\n<p><strong>代码方面：</strong><br>最早做的时候，MVVM才出来不久，自己研究了一段时间，第一版的云阅其实不是真正的MVVM模式，ViewModel里还是放的接口请求然后使用Presenter将方法在外面使用。然后别人指出了，后来就改成了这样纯粹的MVVM模式，然后慢慢的加入了Room，升级成了Retrofit2，使用了AndroidX，最后慢慢使用Koltin，还实现了四年前用户要求的深色模式。</p>\n<p>写云阅目的是练新技术，例如AndroidX和Retrofit2等都是在云阅上实践后再慢慢放在公司的项目中，现在也是的，搜索里的流式布局和深色模式都会先在云阅里实现。还有就是确实可以看到成体系的技术文章，我基本每天都会看。</p>\n<p>云阅就还会一直更新，目的是做出最好的技术实践和使用体验。</p>\n","categories":["开源项目"],"tags":["cloudreader","开源项目"]},{"title":"Android SMB 简单几步实现手机给电脑传输数据","url":"http://jinbeen.com/2021/10/25/android-smb/","content":"<!--早在四年前就准备做深色模式的，当时用的三方的SDK，但是SDK上还有bug，现在使用官方给出的深色模式Api，实现起来比较简单，但是也有一些注意项和优化点。-->\n<a id=\"more\"></a>\n<h2 id=\"SMB是什么\"><a href=\"#SMB是什么\" class=\"headerlink\" title=\"SMB是什么\"></a>SMB是什么</h2><p>SMB，即”Server Message Block” 服务器信息块，是一个网络文件共享协议，它能被用于Web连接和客户端与服务器之间的信息沟通，允许应用程序和终端用户从远端的文件服务器访问文件资源。</p>\n<p>SMB通信协议是微软（Microsoft）和英特尔(Intel)在1987年制定的协议，主要是作为Microsoft网络的通讯协议。SMB 是在会话层（session layer）和<a href=\"https://baike.baidu.com/item/%E8%A1%A8%E7%A4%BA%E5%B1%82/4329716\" target=\"_blank\" rel=\"external\">表示层</a>（presentation layer）以及小部分<a href=\"https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82/4329788\" target=\"_blank\" rel=\"external\">应用层</a>（application layer）的协议。</p>\n<p>通过它可以简单的给电脑传输文件，不过SMB不太安全：<br><code>SMB协议中采用控制文件安全传输的机制是使用客户身份验证的方式，该方式通过客户端向服务器端发送验证密码来获取文件传输的权限，不过针对该机制的网络攻击相对严重，攻击程序通过对验证密码的截获来窃取文件的访问权限，局域网下文件传输的安全性得不到保障。</code></p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>一般不会采用这种方式来实现具体的功能需求，有一些特殊的场景会用到，例如：</p>\n<ol>\n<li><p>一些手机上的壁纸软件，有横屏的壁纸，但是横屏的壁纸一般在电脑上使用，如果用SMB技术就可以直接将图片传到电脑的文件夹内，不用下载在本地后再通过微信/QQ传给电脑，方便很多。</p>\n</li>\n<li><p>再如我们有时候有一个很大的apk包，通过微信传给电脑会改后缀名，QQ可能还有大文件限制，这时候也可以考虑使用SMB来解决，毕竟自己写的传输代码，逼格直接拉满🤡。</p>\n</li>\n<li><p>再者想要直接将设备中操作的数据反应在电脑上查看，例如一个平板端的视力检测工具，检测后直接将数据反应在电脑上供工作人员使用。</p>\n</li>\n</ol>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"1-前提条件\"><a href=\"#1-前提条件\" class=\"headerlink\" title=\"1.前提条件\"></a>1.前提条件</h3><ul>\n<li>手机和电脑连接到同一局域网</li>\n<li>电脑需要设置用户名和密码</li>\n<li>设置共享文件夹 (smb://username:password@ip/folder。（登录鉴权）)<ul>\n<li>Mac设置：系统偏好设置-共享-文件共享-添加共享文件夹</li>\n<li>Windows设置：文件夹-共享-高级共享-权限-打开更改权限<ul>\n<li>电脑不能息屏</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>设置共享文件夹:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Mac设置</th>\n<th style=\"text-align:center\">Windows设置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://jinbeen.com/images/2021/android-smb-mac.png\" alt=\"Mac设置\"></td>\n<td style=\"text-align:center\"><img src=\"https://jinbeen.com/images/2021/android-smb-windows.png\" alt=\"Windows设置\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-代码配置\"><a href=\"#2-代码配置\" class=\"headerlink\" title=\"2.代码配置\"></a>2.代码配置</h3><blockquote>\n<p>具体源码见GitHub：<a href=\"https://github.com/youlookwhat/BySMB\" target=\"_blank\" rel=\"external\">BySMB</a></p>\n</blockquote>\n<p><img src=\"https://jinbeen.com/images/2021/android-smb-demo.jpg\" alt=\"Demo使用\"></p>\n<p>1).代码引入<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects &#123;</div><div class=\"line\">\trepositories &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tmaven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    implementation <span class=\"string\">'com.github.youlookwhat:BySMB:1.1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2).开启联网权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div></pre></td></tr></table></figure></p>\n<p>3).在<code>Application</code>初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">BySMB.initProperty()</div></pre></td></tr></table></figure></p>\n<p>4).得到SMB实例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">val bySmb = BySMB.with()</div><div class=\"line\">        .setConfig(</div><div class=\"line\">                et_ip.text.toString(),       <span class=\"comment\">// ip</span></div><div class=\"line\">                et_username.text.toString(),<span class=\"comment\">// 用户名</span></div><div class=\"line\">                et_password.text.toString(),<span class=\"comment\">// 密码</span></div><div class=\"line\">                et_foldName.text.toString()<span class=\"comment\">// 共享文件夹名</span></div><div class=\"line\">        )</div><div class=\"line\">        .setReadTimeOut(<span class=\"number\">60</span>)</div><div class=\"line\">        .setSoTimeOut(<span class=\"number\">180</span>)</div><div class=\"line\">        .build()</div></pre></td></tr></table></figure></p>\n<p>查看ip:</p>\n<ul>\n<li>Mac上查看ip：<code>ifconfig | grep &quot;inet&quot;</code></li>\n<li>Windows上查看ip：<code>ipconfig</code></li>\n</ul>\n<h3 id=\"3-上传文件到电脑\"><a href=\"#3-上传文件到电脑\" class=\"headerlink\" title=\"3.上传文件到电脑\"></a>3.上传文件到电脑</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">upload</span><span class=\"params\">(bySmb: <span class=\"type\">BySMB</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 生成文件 File</span></div><div class=\"line\">    <span class=\"keyword\">val</span> writeStringToFile = writeStringToFile(</div><div class=\"line\">            instance,</div><div class=\"line\">            et_content.text.toString(), <span class=\"comment\">// 文本内容</span></div><div class=\"line\">            et_fileName.text.toString()<span class=\"comment\">// 文件名，例如:随感笔记.txt</span></div><div class=\"line\">    )</div><div class=\"line\">    <span class=\"comment\">// 上传</span></div><div class=\"line\">    bySmb.writeToFile(writeStringToFile, <span class=\"keyword\">object</span> : OnOperationFileCallback &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 成功</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(message: <span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 失败</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：如上传相同文件名的文件，会覆盖之前文件的内容。</p>\n<h3 id=\"4-查找电脑上的文件列表\"><a href=\"#4-查找电脑上的文件列表\" class=\"headerlink\" title=\"4.查找电脑上的文件列表\"></a>4.查找电脑上的文件列表</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">listFile</span><span class=\"params\">(bySmb: <span class=\"type\">BySMB</span>)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 读取根目录下的所有文件，重载方法(\"\", \"*.txt\", callback)</span></div><div class=\"line\">    bySmb.listShareFileName(<span class=\"keyword\">object</span> : OnReadFileListNameCallback &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSuccess</span><span class=\"params\">(fileNameList: <span class=\"type\">List</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 读取成功 fileNameList文件名列表</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(message: <span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">             <span class=\"comment\">// 失败</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-删除电脑上的文件\"><a href=\"#5-删除电脑上的文件\" class=\"headerlink\" title=\"5.删除电脑上的文件\"></a>5.删除电脑上的文件</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteFile</span><span class=\"params\">(bySmb: <span class=\"type\">BySMB</span>)</span></span>&#123;</div><div class=\"line\">    bySmb.deleteFile(et_fileName.text.toString(), <span class=\"keyword\">object</span> : OnOperationFileCallback &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t    <span class=\"comment\">// 删除成功</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(message: <span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 失败</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>SMB一般用不到，但是也有部分有需求的用户，之前做的时候遇到很多摸不着头脑的地方，而且很多的资料是外文的，希望此篇文章对部分人有所帮助。附上源码地址，<a href=\"https://github.com/youlookwhat/BySMB\" target=\"_blank\" rel=\"external\">GitHub：BySMB</a>。</p>\n<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ul>\n<li><a href=\"https://github.com/hierynomus/smbj\" target=\"_blank\" rel=\"external\">hierynomus/smbj</a></li>\n<li><a href=\"https://www.notion.so/Android-SMB-8b0e2f78551140ea80d9620af4f442aa#52b03a47f37a4227b8266abff5a05ac3\" target=\"_blank\" rel=\"external\">iPad/iPhone通过smb与Windows互传文件</a></li>\n<li><a href=\"https://blog.csdn.net/securitit/article/details/107534895\" target=\"_blank\" rel=\"external\">SMB 2.0和3.0协议 Java应用</a></li>\n<li><a href=\"https://os.51cto.com/art/202009/627615.htm\" target=\"_blank\" rel=\"external\">不用QQ微信，简单几步让电脑手机快速互传共享文件！</a></li>\n</ul>\n","categories":["Android"],"tags":["Android"]},{"title":"Android 深色模式的项目应用","url":"http://jinbeen.com/2021/10/23/android-dark-mode/","content":"<!--早在四年前就准备做深色模式的，当时用的三方的SDK，但是SDK上还有bug，现在使用官方给出的深色模式Api，实现起来比较简单，但是也有一些注意项和优化点。-->\n<a id=\"more\"></a>\n<p><img src=\"https://jinbeen.com/images/2021/android-dark-mode-header.jpg\" alt=\"\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>早在四年前就准备做深色模式的，当时用的三方的SDK，但是SDK上还有bug，不能适配RecyclerView，用上后会很卡，然后就一直放着了，有些用户一直催着要深色模式：</p>\n<p><img src=\"https://jinbeen.com/images/2021/android-dark-mode-feedback.jpg\" alt=\"\"></p>\n<p>然后这段期间给整上，本以为现在深色模式应用的挺广泛的，在项目中实践了一下还是躺了很多坑，梳理一下实践过程及遇到的问题。</p>\n<p>所有代码实践在云阅里可以看到：</p>\n<ul>\n<li>下载App体验，<a href=\"https://www.coolapk.com/apk/com.example.jingbin.cloudreader\" target=\"_blank\" rel=\"external\">酷安：云阅</a></li>\n<li>直接查看源码，<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">GitHub：CloudReader</a></li>\n</ul>\n<h2 id=\"项目实践\"><a href=\"#项目实践\" class=\"headerlink\" title=\"项目实践\"></a>项目实践</h2><h3 id=\"1-选定原生Api实现\"><a href=\"#1-选定原生Api实现\" class=\"headerlink\" title=\"1.选定原生Api实现\"></a>1.选定原生Api实现</h3><blockquote>\n<p>Android官方<a href=\"https://developer.android.com/guide/topics/ui/look-and-feel/darktheme?hl=zh-cn#kotlin\" target=\"_blank\" rel=\"external\">深色主题背景开发文档</a>(需科学上网)。</p>\n</blockquote>\n<p>原生Api简单稳定但是就是要重启App，不过看掘金以及微信都是这样实现的。</p>\n<p>于是参考了微信和掘金的操作，总有三种状态，跟随系统，普通模式，深色模式。</p>\n<p><img src=\"https://jinbeen.com/images/2021/android-dark-mode-setting.jpg\" alt=\"设置深色模式\"></p>\n<h3 id=\"2-关键的工具类\"><a href=\"#2-关键的工具类\" class=\"headerlink\" title=\"2.关键的工具类\"></a>2.关键的工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NightModeUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 当前系统是否是深色模式</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNightMode</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> uiMode = context.getResources().getConfiguration().uiMode &amp; Configuration.UI_MODE_NIGHT_MASK;</div><div class=\"line\">        <span class=\"keyword\">return</span> uiMode == Configuration.UI_MODE_NIGHT_YES;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取是否跟随系统，默认true</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getSystemMode</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SPUtils.getBoolean(Constants.KEY_MODE_SYSTEM, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setSystemMode</span><span class=\"params\">(<span class=\"keyword\">boolean</span> nightMode)</span> </span>&#123;</div><div class=\"line\">        SPUtils.putBoolean(Constants.KEY_MODE_SYSTEM, nightMode);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取是否设置深色模式，默认false</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getNightMode</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SPUtils.getBoolean(Constants.KEY_MODE_NIGHT, <span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setNightMode</span><span class=\"params\">(<span class=\"keyword\">boolean</span> nightMode)</span> </span>&#123;</div><div class=\"line\">        SPUtils.putBoolean(Constants.KEY_MODE_NIGHT, nightMode);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initNightMode</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        initNightMode(getSystemMode(), getNightMode());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化App深色模式</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> systemMode 是否是跟随系统</div><div class=\"line\">     * <span class=\"doctag\">@param</span> nightMode  是否是深色模式</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initNightMode</span><span class=\"params\">(<span class=\"keyword\">boolean</span> systemMode, <span class=\"keyword\">boolean</span> nightMode)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (systemMode) &#123;</div><div class=\"line\">            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nightMode) &#123;</div><div class=\"line\">                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 重启App</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">restartApp</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Intent intent = App.getInstance().getPackageManager().getLaunchIntentForPackage(App.getInstance().getPackageName());</div><div class=\"line\">        <span class=\"keyword\">if</span> (intent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</div><div class=\"line\">            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);</div><div class=\"line\">            activity.startActivity(intent);</div><div class=\"line\">            android.os.Process.killProcess(android.os.Process.myPid());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-在Application里初始化\"><a href=\"#3-在Application里初始化\" class=\"headerlink\" title=\"3.在Application里初始化\"></a>3.在Application里初始化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NightModeUtil.initNightMode();</div></pre></td></tr></table></figure>\n<h3 id=\"4-切换状态后重启App\"><a href=\"#4-切换状态后重启App\" class=\"headerlink\" title=\"4.切换状态后重启App\"></a>4.切换状态后重启App</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NightModeUtil.initNightMode(dayNightSwitch.isChecked, ctvCheckNight.isChecked)</div><div class=\"line\">NightModeUtil.restartApp(activity)</div></pre></td></tr></table></figure>\n<p>其中还要保存是否跟随系统或指定深色模式的状态，具体逻辑细节可见:<a href=\"https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/menu/NavNightModeActivity.kt\" target=\"_blank\" rel=\"external\">NavNightModeActivity.kt</a></p>\n<h3 id=\"5-Application下的主题设置\"><a href=\"#5-Application下的主题设置\" class=\"headerlink\" title=\"5.Application下的主题设置\"></a>5.Application下的主题设置</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.DayNight.NoActionBar\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!--选中状态icon的颜色和字体颜色--&gt;</div><div class=\"line\">    &lt;item name=\"colorPrimary\"&gt;@color/colorTheme&lt;/item&gt;</div><div class=\"line\">    &lt;item name=\"colorPrimaryDark\"&gt;@color/colorTheme&lt;/item&gt;</div><div class=\"line\">    &lt;item name=\"colorAccent\"&gt;@color/colorTheme&lt;/item&gt;</div><div class=\"line\">    &lt;item name=\"android:windowAnimationStyle\"&gt;@style/default_animation&lt;/item&gt;</div><div class=\"line\">    &lt;item name=\"android:listDivider\"&gt;@drawable/shape_line&lt;/item&gt;</div><div class=\"line\">    &lt;!--默认状态下页面的背景色--&gt;</div><div class=\"line\">    &lt;item name=\"android:windowBackground\"&gt;@color/color_page_bg&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>同时还要注意如果单个Activity有自己的主题，也需要设置parent主题为<code>Theme.AppCompat.DayNight.NoActionBar</code>。</p>\n<p>ToolBar也有自己的主题：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;androidx.appcompat.widget.Toolbar xmlns:app=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    android:id=<span class=\"string\">\"@+id/tool_bar\"</span></div><div class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    android:layout_height=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">    android:background=<span class=\"string\">\"@color/colorToolBar\"</span></div><div class=\"line\">    app:contentInsetStart=<span class=\"string\">\"0.0dp\"</span></div><div class=\"line\">    app:contentInsetStartWithNavigation=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    app:layout_scrollFlags=<span class=\"string\">\"enterAlways|scroll\"</span></div><div class=\"line\">    app:popupTheme=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.ActionBar\"</span></div><div class=\"line\">    app:subtitleTextAppearance=<span class=\"string\">\"@style/Toolbar.SubTitle\"</span></div><div class=\"line\">    app:theme=<span class=\"string\">\"@style/ToolbarStyle\"</span></div><div class=\"line\">    app:titleMarginStart=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    app:titleTextAppearance=<span class=\"string\">\"@style/ToolBar.Title\"</span></div><div class=\"line\">    tools:layout_height=<span class=\"string\">\"50dp\"</span></div><div class=\"line\">    tools:title=<span class=\"string\">\"云阅\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>其中</p>\n<ul>\n<li><code>theme</code>为：<code>&lt;style name=&quot;ToolbarStyle&quot;  parent=&quot;@style/ThemeOverlay.AppCompat.ActionBar&quot;/&gt;</code>，</li>\n<li><code>popupTheme</code>也不能设置单个的<code>Light</code>或<code>Dark</code>主题，不然切换深色模式的时候也不会改变效果。</li>\n</ul>\n<h3 id=\"6-WebView的深色模式设置\"><a href=\"#6-WebView的深色模式设置\" class=\"headerlink\" title=\"6.WebView的深色模式设置\"></a>6.WebView的深色模式设置</h3><p>引入<code>implementation &#39;androidx.webkit:webkit:1.2.0&#39;</code>后可轻易的实现WebView的深色模式，不过有兼容问题，这和WebView的版本有关，WebView版本独立于Android版本。(亲测在系统6.0和7.1上无效。)</p>\n<p>在有WebView的Activity的onCarete里加上如下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebSettings webSetting = webView.getSettings();</div><div class=\"line\"><span class=\"comment\">// 检查是否支持暗模式</span></div><div class=\"line\"><span class=\"keyword\">if</span> (WebViewFeature.isFeatureSupported(WebViewFeature.FORCE_DARK)) &#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> isAppDarkMode;</div><div class=\"line\">    <span class=\"keyword\">if</span> (NightModeUtil.getSystemMode()) &#123;</div><div class=\"line\">        <span class=\"comment\">// 是否是跟随系统</span></div><div class=\"line\">        isAppDarkMode = NightModeUtil.isNightMode(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        isAppDarkMode = NightModeUtil.getNightMode();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isAppDarkMode) &#123;</div><div class=\"line\">        WebSettingsCompat.setForceDark(webSetting, WebSettingsCompat.FORCE_DARK_ON);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        WebSettingsCompat.setForceDark(webSetting, WebSettingsCompat.FORCE_DARK_OFF);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"7-配置项\"><a href=\"#7-配置项\" class=\"headerlink\" title=\"7.配置项\"></a>7.配置项</h3><p>1).接下来就是一些配色和部分深色模式下的图片处理问题。</p>\n<ul>\n<li>颜色：新建<code>values-night</code>文件夹，里面是深色模式下的<code>colors.xml</code>文件</li>\n<li>图片：新建<code>drawable-night-xxhdpi</code>图片文件夹</li>\n</ul>\n<p>2).启动页我们经常会放品牌图，页面的深色模式可以通过 改变普通/深色模式文件夹下的图来实现</p>\n<p>3).也可以自己处理配置变更，不重建Activity：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity</div><div class=\"line\">    android:name=<span class=\"string\">\".NavNightModeActivity\"</span></div><div class=\"line\">    android:configChanges=<span class=\"string\">\"uiMode\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>当某个 Activity 声明它会处理配置变更时，系统会在出现主题背景变更时调用该 Activity 的 <code>onConfigurationChanged()</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">val currentNightMode = configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK</div><div class=\"line\">when (currentNightMode) &#123;</div><div class=\"line\">    Configuration.UI_MODE_NIGHT_NO -&gt; &#123;&#125; // Night mode is not active, we&apos;re using the light theme</div><div class=\"line\">    Configuration.UI_MODE_NIGHT_YES -&gt; &#123;&#125; // Night mode is active, we&apos;re using dark theme</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>1).获取颜色<code>ContextCompat.getColor(context, resId)</code>，需要加<code>Activity</code>的context，如果是<code>Application</code>的context会变不了色，这个和切换语言是一样的，获取String也不能用全局的context。</p>\n<p>2).之前使用了关闭应用时杀掉进程的代码，导致不能重建Activity，找了好长时间问题。杀掉进程代码：<code>android.os.Process.killProcess(android.os.Process.myPid());</code></p>\n<p>3).如果代码需要单独动态设置ToolBar的主题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置toolbar的dark模式，为了使\"完成\"文字颜色显示白色</span></div><div class=\"line\">supportActionBar?.themedContext?.setTheme(R.style.ToolBarDarkActionBar)</div></pre></td></tr></table></figure>\n<p>4).可以使用系统自己的颜色值：</p>\n<ul>\n<li><code>?android:attr/textColorPrimary</code> 这是一种通用型文本颜色。它在浅色主题背景下接近于黑色，在深色主题背景下接近于白色。</li>\n<li><code>?android:attr/textColorSecondary</code>可作为第二文本颜色，相对于上面的颜色较浅。</li>\n</ul>\n<p>5).在dialog打开后，再切换系统的深色模式，这时使用系统的颜色会不生效，需要使用自己的color文件里的颜色。具体出现在首次打开应用时，弹出的隐私弹框。</p>\n<p>6).需要使用png后缀的图，最好别直接将jpg改为png，可以打开图片后将图片另存为png格式。我做时候debug模式下没问题，打release包的时候就提示了这个问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用官方给出的深色模式Api，实现起来比较简单，但是也有一些注意项和优化点，如有需要可自取代码 GitHub：<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">CloudReader</a>，如有其他问题，欢迎留言骚扰~</p>\n","categories":["Android"],"tags":["Android"]},{"title":"这段期间的一些事","url":"http://jinbeen.com/2021/07/19/recent-things/","content":"<p>今天是2021年7月18日，上半年发生了很多事，简单记录下。</p>\n<h3 id=\"1-今年计划\"><a href=\"#1-今年计划\" class=\"headerlink\" title=\"1.今年计划\"></a>1.今年计划</h3><p>基本上每年都会有自己的大概计划，每年有几个关键词概括。去年是私活、技术深入学习。前年是开源库。今年的关键词应该是<code>读书</code>了。</p>\n<p>其实最开始不是这样打算的，最开始是准备做视频号或者是抖音号，还买了相关的课程，做了一段时间发现不太适合，视频号发了几个视频基本没有数据，抖音号发了几个数据还可以，但是基本是搬运和简单的修改，很多时候是在上班找素材然后回家了剪辑。起初公司的事情还不是很多，后来越来越忙后就不太适合了。</p>\n<p>每年的读书节都会在当当上买很多的书，刚开始没有把读书列为这么优先级，是因为看了《绝非偶然》这件事，和身边的很多厉害的人的经历，告诉我读书非常重要，刚好趁这个时间把屯下来的一些书今年读完，然后做好读书笔记加深印象。</p>\n<p>现阶段的<a href=\"https://screeching-allium-a1b.notion.site/5ceebc90da874d7295aa5b785c44c657?v=ebcde82d26904c8da17fb55223fc7435\" target=\"_blank\" rel=\"external\">书籍列表</a>。</p>\n<h3 id=\"2-结婚\"><a href=\"#2-结婚\" class=\"headerlink\" title=\"2.结婚\"></a>2.结婚</h3><p>第二大的事情就是结婚。</p>\n<p>很早定的2020年1月30日结婚，但是由于疫情一直延后，最终订到了今年的5月1日。前后经过了太长的时间，过程还算顺利，主要还是家里人和亲戚朋友的帮忙，还有媳妇那边的宽容。这期间的经过我写了很多，具体到每天做了什么事情，很多细节，这里就不详细说了。</p>\n<h3 id=\"3-才结婚没多久的亲戚去世了\"><a href=\"#3-才结婚没多久的亲戚去世了\" class=\"headerlink\" title=\"3.才结婚没多久的亲戚去世了\"></a>3.才结婚没多久的亲戚去世了</h3><p>吃年饭的时候餐桌上奶奶还说不要和 灿 搞在同一天了，听说他定的是五一，在正月初几的时候当面问他说具体时间还没确定，中间才知道定在了三月底，弟还一起去上头/娶亲了。五一我结婚的时候，我还请教了他几个问题，当时很正常。然后一个月后看姑姑发的水滴筹说是急性心梗，导致多器官衰竭，再一个月后就去世了。</p>\n<p>小时候我们还一起打一晚上小霸王，在我家睡觉，前段时间还好好的，大概医治了80w，感到非常可惜。然后我联系了我一前同事买了泰康的重疾险，今天合同拿到手了。</p>\n<p>生命很脆弱。</p>\n<h3 id=\"4-工作现状\"><a href=\"#4-工作现状\" class=\"headerlink\" title=\"4.工作现状\"></a>4.工作现状</h3><p>这两三个月很忙，主要有两个原因，其一是一个同事离职了，很多活被分配到了我和另一个安卓同事身上。 其二是被叫去每天和技术总监汇报进度，因为每天要汇报任务进度，所以做任务都比较紧，不然延期了不好交代，而且不仅是技术中的，还有很多产品上的事要沟通交流，很多的时间用在了交流上。</p>\n<p>不得不说，这两个月在工作中收获很大，多是沟通和产品上的。虽然技术没什么太大的进步，因为很多时候没有时间来学习，以前还有时间看点书和学点新技术，比如之前还学了小程序，后面想自己做个小程序现在在上班的时间是难以实现了。</p>\n<p>最近招聘了两个多月了，面试了很多做安卓的，大多工作年限在5年以上，其中很多人都在沟通上挂了，如果沟通好的话技术是可以放低点要求的，当然技术不太好的话薪资也低点，现在还在招聘中，总的来说：</p>\n<ul>\n<li><p>1.技术可以过关，这对于5年以上经验来说难度不高；</p>\n</li>\n<li><p>2.沟通友好，别不懂扯其他的，微笑，表现稍微活泼一点，这对于程序员是不是有点难？</p>\n</li>\n<li><p>3.对产品有点见解，这主要是技术总监考察的，因为技术总监也管产品部门，程序员有点产品思维做需求时更好沟通，不仅仅是埋头写代码。</p>\n</li>\n</ul>\n<p>当然有全部通过的，但是别人有了更好的选择，或者是觉得不适合我们业务的。现在应该是发了两个offer，但是都没有来，一个是之前在烽火，应该找到了更好的。另一个是之前做车载应用的，沟通很好，很想要他，后来也过了，但是也没过来。</p>\n<p>招个合适的人确实不容易。</p>\n<h3 id=\"5-买了一只雪纳瑞，取名飞碟\"><a href=\"#5-买了一只雪纳瑞，取名飞碟\" class=\"headerlink\" title=\"5.买了一只雪纳瑞，取名飞碟\"></a>5.买了一只雪纳瑞，取名飞碟</h3><p>程序员这行加班挺多，我们是一周6小时加班时间，基本是周二和周四加班2小时，忙的话再选一天，不忙就两天。媳妇是5:30下班，回来很多时候要过几个小时我才回来，然后媳妇家之前有条很乖的小狗叫小黄，后来被人抓走了，媳妇就想买一条狗回来，后来买了一只迷你版雪纳瑞，不会长的很大。</p>\n<p>取名飞碟是我们相信有外星人，恰好买的时间距离6月25号美国公布UFO附近，为了不重名就取名飞碟了。前几天我们回想起飞碟来家里多长时间了，感觉有很久了，后来想才才15天不到，但是和我们已经有很深的感情。</p>\n<p>有段时间还梦到他是一只军犬，在战争中被敌方毒死了，然后很伤心。</p>\n<h3 id=\"6-昨天-7月17日-在教育商店买了iPad-Pro\"><a href=\"#6-昨天-7月17日-在教育商店买了iPad-Pro\" class=\"headerlink\" title=\"6.昨天(7月17日)在教育商店买了iPad Pro\"></a>6.昨天(7月17日)在教育商店买了iPad Pro</h3><p>利用Apple每年的买苹果设备送耳机的活动在教育商店买了iPad Pro。计划了很久，消费欲望太强烈，家里已经有两个iPad了，但是有个是5年前买的，想卖给岳母了回点血😄，当然是媳妇卖。</p>\n<p>之前不太忙的时候每天回来都会用平板写点东西，不得不说是写东西是很有必要的，现在很忙但仍然也会写，只是频次少了些。希望能发挥它生产力的用处。其他时间基本都是看youtobe，每天用它看不到一小时的时间。</p>\n<h3 id=\"7-一些想法\"><a href=\"#7-一些想法\" class=\"headerlink\" title=\"7.一些想法\"></a>7.一些想法</h3><ul>\n<li><p>1.通过面试认识到：<code>写博客很重要</code>。基本每个写博客的人都通过了初试，而且大部分都通过了复试。因为写博客一方面是技术总结，善于总结的人技术不会太差，另一方面是写博客会有自己的想法，再是多给面试官一种了解你的途径。</p>\n</li>\n<li><p>2.这段时间频繁沟通理解到：有一个level很高的人点拨你，对你影响很大。前段时间算是我们的技术部中层管理之一说了一句：技术总监的意思是<code>你做到对应职位的工作了，你就是那个职位的人。</code> 例如你现在是一个小技术员，你慢慢开始做你那个小组领导的事，等你做的差不多的时候，你就可以做小组领导。起初经常听到这个观点，当结合实际场景说的时候才深有感触的意识到。我现在是安卓的小组长，如果做到前端组长就需要开始做一些前端组长的工作，等公司需要一个前端组长的时候就可以水到渠成。能管理人感觉主要是人格魅力，会沟通、能使团队高效的做事、激励团队、当然技术好是基础、还有必备的产品意识毕竟我们主要工作是做产品。</p>\n</li>\n<li><p>3.<code>阅读、探索新事物</code>。每年应该接触点新东西，例如安卓新技术，产品知识，后台，小程序等。如果只在技术舒适区，5年后面试将会毫无亮点直接被pass。最好是学的新东西能拿出成果，我学习了小程序，自己写了一个小程序发布了，学了新技术写了技术博客或开源了等等。今天看到吴军提到的学校里的好学生不一定出社会就发展的很好，因为很多是不尝试新东西在自己的圈子里，给自己生活注入新鲜血液，这也和《了不起的我》提到的一样。</p>\n</li>\n</ul>\n<p>感谢你能看到这里，祝你身体健康，克服生活的难关，步步向上。</p>\n<p>完。</p>\n","categories":["life"],"tags":["life"]},{"title":"《小狗钱钱2》| 养成优秀品格的7条准则","url":"http://jinbeen.com/2021/06/06/puppy-money2/","content":"<p><img src=\"https://jinbeen.com/images/2021/book-puppy-money2.png\" alt=\"小狗钱钱2\"></p>\n<p>大家好，我是景彬，你所有的问题都有答案。今天给大家介绍的是《小狗钱钱2》。</p>\n<p>将《小狗钱钱》看完马上就看了《小狗钱钱2》，没几天就看完了，故事性的情节很好阅读。</p>\n<p>《小狗钱钱2》里一直提到了一个“甜甜圈理论”，就像书的封面那样，甜甜圈有外面的巧克力圈和里面的圆孔。外面的圆圈代表的是物质，里面的圈孔代表的是品格，很多人有些相似的圆圈，但圆孔却各不相同。这本书通过各种事件来描述圆孔的重要性。</p>\n<p>第二部明显比第一部的评分低很多，我理解可能是第二部更关键的介绍“品格”这个看起来没那么实用的东西，而且用了很多奇幻的情节，当然作为给小盆友讲应该很有趣，给我们这些成年人看感觉略显幼稚，而且有些老套的情节，比如钞票的价值，“关系账户”，给我们看到后感觉相对于第一部收获并不是那么大。</p>\n<p>圆孔即：优秀品格的七条准则：</p>\n<h3 id=\"1-友好亲和\"><a href=\"#1-友好亲和\" class=\"headerlink\" title=\"1.友好亲和\"></a>1.友好亲和</h3><ul>\n<li><code>永远不要在背后不要说别人坏话</code>。因为你和A说别人的坏话，那么你也有机会和其他人说A的坏话，那么A就会不信任你。</li>\n<li>只称赞对方的优点。书中的反例是：吉娅嘲笑胖女士，和指点胡伯特的头发，结果给了她很大的阻碍，虽然后面都得到了原谅。</li>\n<li>一个老学者被挑衅的故事。</li>\n</ul>\n<h3 id=\"2-勇于承担\"><a href=\"#2-勇于承担\" class=\"headerlink\" title=\"2.勇于承担\"></a>2.勇于承担</h3><ul>\n<li><code>你不能总是抱怨命运的不公</code>。在我们的生活中不是所有的事情都是公平的，不公平的事很常见。我们对待这些事的方式是做好自己的事，这又和《了不起的我》提到的相似，我们对于自己改变不了的事能做是做好自己的事。</li>\n<li>不被不公平的事所困扰。为什么叫勇于承担，是因为我们如果太在意不公平的事相当于把事情的决定权给了别人。例子是在演讲时胡伯特利用特权使用了影片，如果吉娅特别在意这个，利用这个借口放弃演讲，那么就把决定权给了胡伯特。</li>\n<li>橘子不论我们怎么挤压，它都能得到橘子汁。</li>\n</ul>\n<h3 id=\"3-善待他人\"><a href=\"#3-善待他人\" class=\"headerlink\" title=\"3.善待他人\"></a>3.善待他人</h3><ul>\n<li><code>我们应该首先看到积极的方面</code>。吉娅抱怨爱娜姑妈对自己很坏，金先生提到：不友善一直就是缺乏教养的和内心脆弱的标志，而且也显得很愚蠢。尊重和对人有礼貌是成功的重要因素，如果有人不喜欢你，很大程度上是因为你表现的不够好。爱娜姑妈这个是个例外，后面故意扔掉了吉娅的论文。</li>\n<li>当吉娅带着写硬币为主题的论文和各种问题去找金先生，金先生告诉她这件事也有积极的一面，那就是你又有机会学习一些很重要的东西，那就是优秀品格的七条准则。</li>\n<li>尊敬他人并对他人友好。</li>\n<li>当你看到光明的时候，你就会成为光明；而当你只看到垃圾的时候，你就会成为垃圾。</li>\n<li>当我们不确定怎么做的时候，我们想想我们的榜样。</li>\n</ul>\n<h3 id=\"4-帮助给予\"><a href=\"#4-帮助给予\" class=\"headerlink\" title=\"4.帮助给予\"></a>4.帮助给予</h3><ul>\n<li>给予他人快乐，在他们遇到困难时帮助他们。就像吉娅给予彼得帮助一样。</li>\n<li>当心情不好的时候，想一下看我们能帮助谁，我们带给人快乐自己也会好一些。于是帮好老师打扫了房间，并一起制作了卡片。还帮助安娜去迪士尼乐园游玩。</li>\n</ul>\n<h3 id=\"5-感恩之心\"><a href=\"#5-感恩之心\" class=\"headerlink\" title=\"5.感恩之心\"></a>5.感恩之心</h3><ul>\n<li>好老师的感恩是在学校教书很高兴，和学生们谈话感觉也很棒。</li>\n<li>当我们失去某项能力时我们才发现可贵之处。比如让马塞尔每天拔草，然后想到现在可以每天做自己的事，这样就会对现在的生活感恩。我们对自己拥有的东西感恩，比如眼睛看得见、一份不错的工作。当吉娅他们看见安娜的病情，都感恩自己能有健康的身体。</li>\n</ul>\n<h3 id=\"6-勤学不辍\"><a href=\"#6-勤学不辍\" class=\"headerlink\" title=\"6.勤学不辍\"></a>6.勤学不辍</h3><ul>\n<li>我总是不断学习，是因为我要成为我有能力成为的那种人。好老师说：要是有一天我没有学到什么，那么对我来说那天是不完整的。</li>\n</ul>\n<h3 id=\"7-值得信赖\"><a href=\"#7-值得信赖\" class=\"headerlink\" title=\"7.值得信赖\"></a>7.值得信赖</h3><ul>\n<li>这里提到了一个比喻：在我们的头脑中有两个人，其中一个侏儒想引诱你打破原先的计划，而另一个巨人则要求我们信守自己做出的承诺。</li>\n<li>当吉娅不想为演讲训练时，她想到了这个比喻，应该听巨人的话。</li>\n</ul>\n<p>前三点是金先生提到的，后四点是老妇人沙妮娅·怀斯提到的，其中金先生也得到了老妇人的点拨。<br>金先生的话：</p>\n<ul>\n<li>只想一味尝试的人终归一事无成。</li>\n<li>有时候我们觉得一个人高傲，但这只不过是他缺乏安全感的表现罢了。</li>\n<li>与银行账户相似，世间还有一种叫做“关系账户”的东西。维持一份良好关系的成功秘诀就在于要先往这个账户里“存钱”，因为没有任何人能够在长时间内不去“取钱”。</li>\n</ul>\n<h3 id=\"养成优秀品格的7条准则\"><a href=\"#养成优秀品格的7条准则\" class=\"headerlink\" title=\"养成优秀品格的7条准则\"></a>养成优秀品格的7条准则</h3><ol>\n<li>友好亲和<ul>\n<li>我有一个强烈的愿望，希望其他人能够像我一样生活美好而幸福。</li>\n<li>我不会伤害任何人。我克制自己，不介入任何争端。</li>\n<li>我谦虚有礼，尊重他人。我并不是永远正确。</li>\n</ul>\n</li>\n<li>勇于承担<ul>\n<li>遇事我能自我抉择。我能自行判断对某种情况应该作何反应。</li>\n<li>我不受不公平之事的影响，而是将注意力集中在我能做的事情、我知道的知识和我拥有的东西之上。</li>\n<li>我把责任推脱给别人的同时，也把相应的权利也转交给了对方。</li>\n</ul>\n</li>\n<li>善待他人<ul>\n<li>我只称赞他人。如果确实无法称赞他人，那就最好什么都不说。</li>\n<li>我尽量不批评他人。如果不得不批评，也要用非常礼貌和友善的方式。</li>\n<li>我将注意力集中在他人的优点和闪光点上。</li>\n</ul>\n</li>\n<li>帮助给予<ul>\n<li>我祝愿自己遇到过的所有人都能一切顺利。</li>\n<li>我送给某人礼物，因为我想表达自己对他的好感。</li>\n<li>最美好的事情莫过于帮助他人。我总是在想自己能够帮助谁，没有什么比这更令人快乐。</li>\n</ul>\n</li>\n<li>感恩之心<ul>\n<li>我总是心怀感恩，哪怕是对看似寻常的事情。</li>\n<li>即便是遇到了困难，我还是会关注值得感激的事物。</li>\n<li>我对身边的人都充满感激之情，并非常享受和他们共度的美好时光。</li>\n</ul>\n</li>\n<li>勤学不辍<ul>\n<li>如果我骄傲自满，那无异于是说自己不用学任何东西了。因此我应该保持谦恭好学的态度。</li>\n<li>我不仅要阅读好的书籍、写成功日记和知识笔记，还要尽可能多地向他人学习。</li>\n<li>我不拿自己和别人比较，而是尽我所能做到最好。</li>\n</ul>\n</li>\n<li>值得信赖<ul>\n<li>我能够成功总是取决于自身培养出的习惯。</li>\n<li>如果我是一个非常自律的人，我就能比那些虽有天赋但却懒惰散漫的人获得更多的成功。</li>\n<li>我总是很守时。我信守对他人作出的承诺。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>现实里更多的人谈的是物质，就是圆圈，但这本书是谈品格的，这个东西很虚且不能很好的量化，而且人是复杂的，有的时候你觉得某一个人不好，但是在其他人心中又觉得他挺好的。这七条准则应该贯彻我们的一生，用此来规范我们的行为。</p>\n<p>小时候的我比较天真，认为那些结过婚的“大人”，都是品格优秀的人，如果要有一个规范的话就是遵守上面的7条准则，后来长大了发现大部分的人都达不到。这样的准则每天执行确实很难，但这也是我们和那些普通人的区别。</p>\n<p>这本书讲的是圆孔，上一部讲的是圆圈。需要格外注意的是，没有圆圈就没有圆孔。</p>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n","categories":["Books"],"tags":["Books"]},{"title":"《小狗钱钱》| 我的第一本理财书","url":"http://jinbeen.com/2021/05/25/puppy-money/","content":"<p><img src=\"https://jinbeen.com/images/2021/book-puppy-money.png\" alt=\"小狗钱钱\"></p>\n<p>《小狗钱钱》大概内容是：小女孩吉娅希望家里养一条狗，有一天在路上遇到一只受伤的狗于是把它带回了家取名为钱钱，后来发现这条狗会说话，并且之前是在一个富翁家里，然后钱钱教会了吉娅一些成功人士的习惯和理财技巧。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今年决定将以前囤的书看完，其中《小狗钱钱》就是其中一本，看豆瓣评分就知道这是一本学习理财必备书籍了，原本是写给孩子看的，但基于我国基本没教育孩子怎么看待钱和科学的赚钱，所以这本书对很多成年人都有用，我理解的话这本书应该基本适合于从小孩到刚工作一两年的这段期间，因为这段期间很多人都没有认真思考过赚钱这回事(不知道是不是只有我是这样的[逃]👻)。</p>\n<p>关于钱我们需要系统的学习理财的观念，其中《小狗钱钱》和《穷爸爸富爸爸》应该是属于必读书籍了，这是本故事性的书，很好读，作者写过《财务自由之路》一书，里面的方法被编在了《小狗钱钱》这本书里。</p>\n<p>非常推荐读这本书，越早读越好。</p>\n<p>接下来我分享几点关于我读此书的收获：</p>\n<p>我认为钱钱教给吉娅主要有两个，第一个是写成功日记，第二个是找到自己的三个愿望并分别制作梦想相册和设立梦想储蓄罐。</p>\n<h2 id=\"一-建立自信：写成功日记\"><a href=\"#一-建立自信：写成功日记\" class=\"headerlink\" title=\"一.建立自信：写成功日记\"></a>一.建立自信：写成功日记</h2><blockquote>\n<p>你是否能挣到钱，最关键的并不是你有没有好点子，也不是你有多聪明，而是你的自信程度。</p>\n</blockquote>\n<p>你的自信程度决定了你是否相信自己的能力，是否相信你自己。假如你根本不相信你能做到的话，那么你就根本不会动手去做，而假如你不开始去做，那么你就什么也得不到了。</p>\n<p>自信是一切梦想实现的基石。每天将所有做成功的事情记录进去，任何小事都可以，这样做的作用是树立自信，过于自信比不够自信要好很多。</p>\n<p>每当吉娅遇到自己觉得解决不了的事情时，钱钱就让她翻看成功日记，比如要演讲时，这样的目的是将使我们不要考虑那些还未发生的事情，<code>把精力集中在你知道的、能做的和拥有的东西上。</code></p>\n<p>这也和之前看过的《了不起的我》提到的观点有点类似，我们只能改变我们自己，不能想着去改变别人。</p>\n<h2 id=\"二-明确方向：找出你想变得富有的原因\"><a href=\"#二-明确方向：找出你想变得富有的原因\" class=\"headerlink\" title=\"二.明确方向：找出你想变得富有的原因\"></a>二.明确方向：找出你想变得富有的原因</h2><blockquote>\n<p>中国智者老子说过：天下难事，必作于易；天下大事，必作于细。</p>\n</blockquote>\n<p>在第一章，钱钱就让吉娅做了这件事，找出10个我想变得富有的原因，也就是10个愿望。</p>\n<p>其次，从10个愿望中，选择最想实现的3个。人往往想要的太多，能做的太少。选择3个的目的是，让你<code>专注</code>，<code>聚焦</code>。</p>\n<p>不要抱着试一试的心态，要么做要么不做，试一试也是一种选择。</p>\n<h2 id=\"二-专注方向：制作梦想相册和梦想储蓄罐\"><a href=\"#二-专注方向：制作梦想相册和梦想储蓄罐\" class=\"headerlink\" title=\"二.专注方向：制作梦想相册和梦想储蓄罐\"></a>二.专注方向：制作梦想相册和梦想储蓄罐</h2><h3 id=\"1-制作梦想相册\"><a href=\"#1-制作梦想相册\" class=\"headerlink\" title=\"1.制作梦想相册\"></a>1.制作梦想相册</h3><p>收集一些与自己愿望相关的照片，贴在相册里，通过图片思考。每天看几遍相册，然后想象实现后的样子。</p>\n<blockquote>\n<p>人们把这种行为称为’视觉化’。成功的人之所以成功，就是因为他们一直梦想者自己成功的那一天，不停地想象着自己实现了理想时的情形。</p>\n</blockquote>\n<p>为什么有用？讲个玄乎点的东西，人与自然宇宙之间有某种能量存在，当你想要的东西越清晰明确，宇宙就越能接受到你信息。</p>\n<p>宇宙知道你想要的是什么，就会把你想要的东西送到你面前。</p>\n<h3 id=\"2-制作梦想储存罐\"><a href=\"#2-制作梦想储存罐\" class=\"headerlink\" title=\"2.制作梦想储存罐\"></a>2.制作梦想储存罐</h3><p>前面说到钱钱让吉娅先写出十个愿望，然后定出了三个愿望：</p>\n<ul>\n<li>1.参加交换学生项目去美国</li>\n<li>2.一台笔记本电脑</li>\n<li>3.帮爸爸妈妈还清债务</li>\n</ul>\n<p>第三个暂时还无能为力，所以吉娅先为前两个做了梦想储蓄罐，刚开始的金钱当然非常少，被妈妈发现后嘲笑了一番，为此使吉娅更加坚定她的做法，并写进了她的成功日记里。储蓄罐需要放入非常多的钱才能实现目标，仅仅靠每个月的零花钱显然不能达到。所以她想办法靠其他的途径自己挣钱，钱钱给她讲了一个小男孩靠自己的能力挣了很多钱的事迹，起初是清晨帮每户人拿报纸然后业务逐渐增大最后出版书籍等。</p>\n<p>于是她想到了给自家的花园除草但是这样不适合，后来打电话她堂哥，堂哥说他是喜欢骑自行车然后顺便双休给别人送面包，于是她自己想到了自己喜欢狗，然后就找附近有遛狗需求的家，于是找到了一个赚钱的门路。然后过了不久这个人介绍另一个很有钱的老太太，刚好那个老太太需要出门一段时间，这段时间她家遇到了小偷，她们一伙人保护了老太太的财产，然后得到了每人5000马克的奖励，作为投资俱乐部使用，投资俱乐部的名字为金钱魔法师。</p>\n<p>然后吉娅由于救的这只狗是一个富翁的，富翁为报答她也给了很多钱作为报酬。</p>\n<p>所以吉娅钱的来源是：</p>\n<ul>\n<li>1.帮邻居遛狗的收益，后来照顾了很多狗也请了很多小朋友帮忙</li>\n<li>2.给老太太保护财产得来的奖励，得到的奖励用来投资(买基金，放5-10年)，72公式：资金翻一倍需要的时间</li>\n<li>3.富翁给的照顾钱钱的报酬</li>\n<li>4.给小孩演讲怎么理财(鹅的故事)后，富翁决定和她一起开一家公司</li>\n</ul>\n<p>而<strong>3.帮爸爸妈妈还清债务</strong>，是富翁为报答吉娅给他父母也讲了鹅的故事，并降低了月供让他们有足够的缓冲，之后爸爸也雇了人，做自己拿手核心的事情。</p>\n<p>金钱分配：50%用来储蓄理财养鹅，40%用来梦想储存罐，10%用来消费。</p>\n<p>至此为止，吉娅的梦想也实现了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>每本书都会解决一个问题，这本书我们可以实践的是，定好自己的三个愿望和制作梦想相册和梦想储蓄罐，写成功日记，以及金钱分配参考。养自己的鹅，如果有一天利息能支撑自己的生活开支就差不多了，加油，嘎巴得。</p>\n","categories":["Books"],"tags":["Books"]},{"title":"梦境：回到过去（你能创造什么?）","url":"http://jinbeen.com/2021/04/18/dream-back-to-the-past/","content":"<blockquote>\n<p>记：2021.04.17 09.28</p>\n</blockquote>\n<p>刚做梦梦到我回到了过去，回到了初三快要上高中那会儿，我在一个高台疯狂的弹跳后飞上了很高的天空，以至于都有点失重的感觉。</p>\n<p>当我落回地面的时候，我听说英语考试快要开始了，催着同学A快点去教室，他说你知道“XX”没，他瞎蒙都能大部分做对。</p>\n<p>我说那是小概率事件，我们赌一下，你连续蒙对8个我就给你100块，然后我又说，你连续蒙对7个我就给你，他想了会说好，我说你蒙不对的，他一副不服气的样子。</p>\n<p>我深刻的想了想，我回到初中，到底和那些初中生有什么不同，智力上差不多，英语水平也差，我能和他们拉开差距的到底是什么？</p>\n<p>然后我就醒了。</p>\n<hr>\n<p>我想起那些穿越剧，那些穿越过去的男主，他们的过人之处是什么。</p>\n<p>《石纪元》男主是一个科学家，他什么都能制作，电话，发电站，唱片各种现代的东西，人们都追随他。</p>\n<p>《赘婿》男主发明了团购，各个价位的衣服，划停车位，知道滴血认亲不符合科学然后自己也作假，开课，和别人说各种现代的一些玩意，利用现代的知识在商业上取得成功。</p>\n<p>《寻秦记》古天乐穿越回去一心想和现代的女友在一起，他以他知道的秦国的历史辅佐秦始皇一步步登上王位并隐退和两个老婆生活的故事。</p>\n<p>他们的能力莫过于在现代学的东西，能在古代有一番作为，不管是信息差还是思维上的提升，能在一个新的地方能快速成长起来。富人你剥夺他们的金钱他们过了几年照样是富人。</p>\n<p>富人与穷人不只是财富的区别(《稀缺》有提过美国精英阶层和普通家庭的区别)，我觉得我应该找出来并实践，吸收知识，使用知识，创造知识，创造知识才能起飞，先吸收和使用，最后创造。</p>\n<p>创造：几种知识组合，一种一类的知识优化组合成可以让自己或他们使用。</p>\n<p>创造电话，创造停车位，创造人物的发展。</p>\n<p>我能创造什么？</p>\n","categories":["梦境"],"tags":["梦境"]},{"title":"《绝非偶然》| 21位星主都有这些共同点","url":"http://jinbeen.com/2021/04/12/not-by-chance/","content":"<p><img src=\"https://jinbeen.com/images/2021/book-not-by-chance.png\" alt=\"绝非偶然\"></p>\n<p>《绝非偶然》是知识星球出的一本书籍，里面整理了21个星主的一些发展历程以及他们的观点，均是由他们自己书写。里面每个星主都有他们独特的发展历程，但也有很多相似的地方。</p>\n<h2 id=\"1-大量阅读\"><a href=\"#1-大量阅读\" class=\"headerlink\" title=\"1.大量阅读\"></a>1.大量阅读</h2><p>每一个星主几乎都有大量阅读的经历，这是最基础的要求。</p>\n<ul>\n<li>齐俊杰：感受到梦想与现实的差距后，疯狂买书学习，报培训班，2000月薪全用在学习上。制定量化指标：没读完一本书，工资涨40元，实际发现每读完100本书，收入至少翻一番，后来建立公众号“老齐的读书圈”。</li>\n<li>池建强：有意识地读一些关于写作的书，看文学作品更关注结构、文法、用词和节奏。</li>\n<li>亦仁：多接收一手信息，少触碰碎片化信息</li>\n<li>邱岳：运营公众号8年多的时间里读了近千本书，写下了数百篇阅读笔记</li>\n<li>邵云蛟：为了提高运营能力，学习了大量运营方法的文章</li>\n<li>粥左罗：整个大学期间，拼命的阅读图书，增长见识、丰富阅历</li>\n<li>Sky盖哥：订制一个1000小时计划——每天疯狂练习，研究和分析大量设计作品，参加各种设计师聚会。</li>\n<li>阳志平：大学期间终日穿梭于中国国家图书馆各个阅览室</li>\n<li>钱钰：知识本身不具备力量，是持续的学习和运用让我们进步</li>\n<li>鉴锋：读书是提升结构性认知最高效的方法。</li>\n<li>吴鲁加：买大量书，全部速度一遍，留下几本最好的，精读三五遍。</li>\n</ul>\n<h2 id=\"2-写作-公众号或其他\"><a href=\"#2-写作-公众号或其他\" class=\"headerlink\" title=\"2.写作(公众号或其他)\"></a>2.写作(公众号或其他)</h2><ul>\n<li>冯大辉：几乎每天都有更新内容，有时候是周末一口气写几篇，然后一周每天放一篇。从推特到新浪然后到公众号，小道消息创建于2012.11.08。</li>\n<li>齐俊杰：通过5年日复一日的日播，使其能数年每天分享、持续输出，“齐俊杰看财经”。</li>\n<li>池建强：学完之后再输出，能够以教代学最好。从2012年12月至今，公众号推送了1600多条消息。每周更新三四篇。</li>\n<li>刘鹏：班主任天天让写检查，开辟黑板报“忏悔录”，写作热情被唤醒。</li>\n<li>张千里：出版《旅行摄影圣经》、《旅行摄影圣经2：实战为王》、至2020年10月微博粉丝数近160万</li>\n<li>Stromzhang：每周都会坚持在公众号上发布文章，持续了7年</li>\n<li>韩叙：一直每周1~2篇的文章输出频率，将自己在工作中的思考和经验发布在公众号“运营狗工作日记”上。</li>\n<li>张伟华：亲自打理不间断更新的公众号“unclehome”</li>\n<li>邱岳：写作最大的好处是倒逼自己的大脑，把意识里的东西线条化、结构化和系统化</li>\n<li>邵云蛟：边学习边输出，白天上班晚上学完当天的内容后文章分享，坚持了近6个月</li>\n<li>吴思涵：想做杰出的科学家，不仅要很会想，还要很会写，很会讲</li>\n<li>粥左罗：人在默默无闻的时候，很难积累代表作，但可以用海量输入来自我滋润。一旦时机成熟就能一剑封喉，输出代表作。</li>\n<li>Sky盖哥：阅读大量业内文章，在分析、总结其核心要点后输出报告，每周三篇。</li>\n<li>钱钰：长期保持高频输出，运营着两个公众号基本保持日更。</li>\n<li>Kris：孩子一睡着，就躲进书房构思选题、找素材、写文章</li>\n<li>松爷：2013年7月16日，在公众号“装修33天”发布第一篇文章，后来从未断过</li>\n<li>吴鲁加：写下心得体会并发出去，看懂和能写是两回事。前期的读、写必不可少</li>\n</ul>\n<h2 id=\"3-坚持的价值观：极致利他，投资自己\"><a href=\"#3-坚持的价值观：极致利他，投资自己\" class=\"headerlink\" title=\"3.坚持的价值观：极致利他，投资自己\"></a>3.坚持的价值观：极致利他，投资自己</h2><ul>\n<li>冯大辉：不定期“公众号推荐”活动，被称为“送粉观音”</li>\n<li>齐俊杰：自我投资才是增值最快的投资</li>\n<li>刘鹏：集中精力于有社会增量价值的事，“但行好事，必有前程”</li>\n<li>亦仁：自身利益后置，他人利益前置</li>\n<li>Stromzhang：投资自己永远是最划算的项目</li>\n<li>邵云蛟：坚持长期学习，才能避免内容枯竭</li>\n<li>Sky盖哥：把用户当朋友，把自己当产品</li>\n<li>钱钰：利他就是最好的利己</li>\n<li>Kris：从单纯想赚钱的自媒体，到现在践行“以生命影响生命”，追求极致利他的公司</li>\n<li>鉴锋：帮客户完成目标或赚更多的钱</li>\n</ul>\n<p>书里面有除了上述外还有很多星主的金句及一些启发：</p>\n<ul>\n<li>亦仁：赚钱，绝非偶然，它不是一种天赋技能，而是在环境、认知、能力、思维、经验、性格、文化等多种因素之前的必然结果。</li>\n<li>屠龙的胭脂井：倾听：聪明人擅长学习间接经验，如果倾听就能避免大坑，那么通过栽跟头来学习就显得成本太高。</li>\n<li>Kris：星球运营：周一到周日分别是：启动日、读书日、观影日、认知日、生活日、读者问答、周记分享。</li>\n<li>鉴锋：班主任说：“你在虚拟世界里再厉害又怎样，一堆虚拟的数值并不能对这个世界产生影响。现实世界是一个大型斗兽场，是一场最值得玩的游戏。如果你能在这里取得成就，才算得上是真正的高手。”</li>\n</ul>\n<p>邱岳写书评的三种方式：<br>1.总结：尽可能的将书中的观点和结构整理出来，让读者不用看书就能知道此书具体表达了什么<br>2.引荐：主要说此书能给我们带来什么启发，引导读者去读此书<br>3.读后感：主要介绍阅读完这本书之后的感受和启发</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　这里面不少清北毕业的大咖，部分还是还出国深造很久的科学家，让我们普通人觉得距离很远，但近期4月1日在深圳举行球友见面会的“普通人”Stromzhang，确实是很多人的榜样，特别是程序员届。他们大部分人的经历是，前期大量阅读，一直有写作输出的习惯，基本是在一个垂直领域持续输出，要么是自己专业方向，要么是个人成长类方向，先积累自己的影响力，最后横向拓展。以前是T型人才，现在是H型了，即两三个方向上达到专业前20%的能力水平。共勉！</p>\n","categories":["Books"],"tags":["Books"]},{"title":"《副业赚钱》| 想做副业了？看看哪些观点能帮助到你","url":"http://jinbeen.com/2021/04/04/make-money/","content":"<p><img src=\"https://jinbeen.com/images/2021/book-money.png\" alt=\"副业赚钱\"></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>要说给去年的业余时间打个标签的话，应该是<strong>私活</strong>、<strong>学习实践Kotlin</strong>，但是私活是一个出卖自己额外时间的活，没有复利特别辛苦，如果可以的话还是把这个时间用来投资自己最合适，所以今年主要是用来看书学习，大量阅读，然后可以的话发展出一个副业。</p>\n<p>希望在这本书中得到一些做副业的方法与实操。</p>\n<h3 id=\"书中所述\"><a href=\"#书中所述\" class=\"headerlink\" title=\"书中所述\"></a>书中所述</h3><h4 id=\"思维认知\"><a href=\"#思维认知\" class=\"headerlink\" title=\"思维认知\"></a>思维认知</h4><p><strong>探索副业的五种形式</strong><br>1.铁饭碗＋兴趣爱好组合，适合工作稳定、内心有想法的你；<br>2.左右脑组合，适合理性与感性思维并存的你；<br>3.脑力＋体力组合，适合爱运动的上班族；<br>4.写作+教学+咨询组合，适合从事培训、销售、高校老师等岗位的你；<br>5.一岗多职能，适合想深挖自己职业生涯的你</p>\n<p><strong>三类身份升级你的副业赚钱效益</strong><br>1.资源者：有意识地积累你的副业能力和资源；<br>2.配置者：盘活自身资源，做好副业身份探索最佳配比；<br>3.资本家：盘活并孵化身边的资源。</p>\n<p><strong>三种复利思维</strong><br>产品复利：持续分享知行合一的产品。<br>能力复利：技多不压身，掌握真正有用的技能。<br>“成就套路”复利：找到做成一件事的底层逻辑。</p>\n<p><strong>思维&gt;注意力&gt;时间&gt;金钱</strong></p>\n<ul>\n<li>在时间&gt;金钱这个公式里，每个人都要试着去算出自己的时薪。</li>\n<li>在注意力&gt;时间这个公式里，时间是珍贵的，但如果不加上自己的注意力，时间再多也无意义。</li>\n<li>思维&gt;注意力是指，我们无法时刻保持注意力，还是要通过自己的思维的提升去抓住更多重要的事。</li>\n</ul>\n<p><strong>先天+后天</strong><br>先天：</p>\n<ul>\n<li>第一个维度，回忆我们从小就喜欢做的一件事</li>\n<li>第二个维度，想想我们做起来最开心、最享受的一件事</li>\n<li>第三个维度，我们最擅长做的事</li>\n</ul>\n<p>后天：</p>\n<ul>\n<li>通过环境参与法，多去直接参与线上线下的社群和活动，看到优秀的人做到了，你也会更容易相信并且做到。</li>\n</ul>\n<p><strong>三大优势标签</strong><br>身份标签，从职场、生活、专业三个维度包装自己的身份标签；<br>能力标签，亮相自己身上具备的能力；<br>市场标签，通过产品链接资源和人脉</p>\n<hr>\n<h4 id=\"副业能力\"><a href=\"#副业能力\" class=\"headerlink\" title=\"副业能力\"></a>副业能力</h4><p><strong>副业赚钱的三种能力</strong></p>\n<ul>\n<li>第一种能力，目标达成能力。有考核，才能有完成目标的动力。</li>\n<li>第二种能力，营销能力。真正的价值提升=向内的能力+向外的能力集合，在职场时就开始树立自我营销意识吧。</li>\n<li>第三种能力，管理能力。一个人走得快，但一群人才能走得更远，把握住职场上一切可以提升管理能力的机会。</li>\n</ul>\n<p><strong>三个方法，拥有持续写出好文章的能力</strong><br>第一，先设定合理的写作目标，给自己动力持续写下去。<br>第二，从身边挖掘我们的写作素材，并建立清单库。<br>第三，主题搜索型写作法：一边学习，一边写出一篇好的文章。</p>\n<p>写作的三步：</p>\n<ul>\n<li>第一步，要求自己每天写500个字，如果实在写不出来，可以抄一些优美的句子，或者试着用文字描述下自己当天的行程。</li>\n<li>第二步，要求自己每天写1000字的命题文章，可以从你喜欢的公众号或者书里，挑选出一篇文章，看完后自己也照着试写一篇，再进行对比，找出自己的不足。</li>\n<li>第三步，试着每周写3篇1500字—2500字的文章，可以是关于某个话题的写作，也可以是关于某本书的书评。由于前面两个阶段的练习已经为你积累了经验，这个阶段的你，写出一篇文章的问题不会太大。如果还是写不出来，就回到第二步继续练习。</li>\n</ul>\n<p><strong>提升表达力</strong><br>第一，从表达的套路、逻辑性、状态三个维度去拆分表达力，才能更好地提升表达力。<br>第二，每天向自己发问，用一分钟的时间，轻松提升表达力。<br>第三，自建表达力反馈机制，让自己越来越会表达</p>\n<p><strong>人脉力量</strong><br>赚钱关系网的第一个维度是，清晰地知道自己具备什么样的能力，带着这个能力去链接需要这个能力的人，并把对方作为自己重点经营的赚钱关系网。<br>可交换价值最重要的不是一定要比对方优秀，而是你要有自己擅长的点，而这个擅长的点，正好是对方需要的</p>\n<p>搭建人脉关系网的框架:</p>\n<ul>\n<li>第一，列出人脉渠道的类别。比如职场、生活、互联网、榜样等</li>\n<li>第二，每类人脉都可以分别从基础信息、优势、最近动态、互动四个维度去记录和梳理你和对方之间的链接。</li>\n<li>第三步，定期去更新我们的人脉关系网。</li>\n</ul>\n<p><strong>四步将重复的项目流程化和模板化</strong></p>\n<ul>\n<li>第一步，每一次接到一个项目之后，快速确定是否有固定模板可以参考；</li>\n<li>第二步，有固定模板可以参考的，需要有意识地从固定模板里面找到模板或者流程进行参考；</li>\n<li>第三步，那些不可控的部分，一定要建立进度表来跟进，因为不可控也就意味着难度会相对比较大；</li>\n<li>第四步，项目结束后，梳理出可以流程化、模板化的部分，为下一次的项目做好充分的准备</li>\n</ul>\n<p><strong>朋友圈引流</strong><br>跟大家分享一组对比数据，如果说我们在个人公众号和个人微信里都有1万个粉丝，个人微信的粉丝价值是个人公众号的3到5倍，那么，朋友圈只需要有两三千个好友就抵得上公众号1万个粉丝的效果。<br>所以，我身边很多探索副业的好朋友们，都会花很多心思去经营自己的朋友圈，并且把朋友圈作为最重要的流量池。为什么是最重要的流量池？因为所有的外部流量都要集中引流到朋友圈这个池子里面。</p>\n<ul>\n<li><p>我在主动添加对方为好友之后，通常会发一段简短有力的自我介绍给对方。<br>模板可以是：我是谁+我可以为你提供什么资源</p>\n</li>\n<li><p>在公众号开通之前，可以先写几篇文章作为储备。</p>\n</li>\n</ul>\n<p>主次平台生态圈是指在我们所经营的平台中，只有一两个平台是最重要的，其他的平台都可以作为次要平台。<br>次要平台的全部流量，都要有意识地引入到主平台里。主平台：公众号。</p>\n<ul>\n<li>所有平台的名字、个人标签形象照的统一</li>\n</ul>\n<hr>\n<h4 id=\"主副业平衡\"><a href=\"#主副业平衡\" class=\"headerlink\" title=\"主副业平衡\"></a>主副业平衡</h4><p><strong>故事影响力</strong></p>\n<ul>\n<li>三年前一个周六的下午，贾伟和不到两岁的小女儿以及女儿的爷爷在家看电视。女儿突然说想喝水，爷爷主动去倒了一杯水，但由于水刚烧开，水温接近100℃，爷爷害怕孙女儿碰到，就将水杯放到了桌子的中间。<br>事故之所以称之为事故，是因为它的发生超乎你的预料，且往往是一瞬间。贾伟万万没有想到，盛水的杯子上有一根绳子，还不到桌子高的女儿跳起来抓住了那根绳子。水杯倒了，热水洒在女儿的脸部和胸口。<br>小孩子的皮肤最是娇嫩，立马就红肿起来了，烫伤很严重。<br>贾伟决定要为自己的女儿，或者说要为全天下可能和他女儿一样遭受此不幸的孩子们设计一个“降温神杯”。经过三年时间的努力，他终于找到了一种可以让液体瞬间降温的材料。贾伟用这个材料做了一款杯子，给它取名叫“55度杯”。100℃的热水倒入杯中，只需摇晃10下就能变成55℃，女儿以后喝水就再也不会被烫到了。<br>这个故事在互联网上非常火，让产品的销量也变得异常火爆，不到一年的时间，就卖了50亿元。这就是故事生产力。</li>\n</ul>\n<p><strong>副业的多维收入渠道</strong><br>1.做代购：在淘宝、朋友圈销售海外买回来的产品；<br>2.写育儿文章得到的稿费；<br>3.做一对一的付费咨询；<br>4.平台邀请我去做分享的课酬费；<br>5.时间管理等多个训练营的收入；<br>6.分销别人的课程的分销收入；<br>7.会员课程的收入；<br>8.半年制“价值变现研习社”的收入；<br>9.企业内训的收入；<br>10.公众号接广告的收入；<br>11.公众号流量的广告收入；<br>12.公众号打赏的收入；<br>13.和其他平台合作开课的收入；<br>14.分销天猫上一些品牌用品的收入（这个属于社交电商的范畴）；<br>15.我的孵化平台上其他老师开课的分成收入。</p>\n<p>当你发现自己的副业收入渠道超过五个，副业收入破五万的时候，就可以开始考虑做减法和聚焦了</p>\n<p><strong>锻炼自己的通用能力</strong></p>\n<ul>\n<li>第一步，找到自己主副业都能用得到的通用能力；</li>\n<li>第二步，利用上班空余时间进行通用能力的锻炼；</li>\n<li>第三步，向公司的上司和老板学习，让自己具备比自己的岗位所要求的更高的能力</li>\n</ul>\n<p>外出学习，读书，与人交流：</p>\n<ul>\n<li>第一，每个季度一定要外出学习一次，这样既能更新自己的认知，又可以通过线下学习去链接不同的人脉。</li>\n<li>第二，每天至少要花两个小时的时间去看书、听课和梳理自己的知识框架。</li>\n<li>第三，与人交流，这个人可能是我的学员，可能是我的合作伙伴，也可能是其他领域里的专家。一定要保持跟人多交流的习惯，因为，在跟别人交谈的过程中，可以得到很多很重要的信息</li>\n</ul>\n<h3 id=\"摘录\"><a href=\"#摘录\" class=\"headerlink\" title=\"摘录\"></a>摘录</h3><ul>\n<li><strong>副业前期</strong>：起初这些时间几乎是完全被浪费的，经历了一段迷茫期后，在完成工作之余，我开始了大量阅读、学习的自我提升阶段，几乎每天要阅读一两本书。书读得多了后，我发现自己渐渐有了分享的渴望，最初的分享方式是对自己学习后的阶段性梳理：分享给自己看。<br>这就是稳定收入+探索兴趣爱好的阶段，在这个阶段，我的兴趣爱好没有给自己带来任何的收入，但却为之后的副业赚钱之旅打下了坚实的基础。</li>\n</ul>\n<ul>\n<li><p><strong>该学习什么技能</strong>，建议大家从这三个维度进行考虑：<br>一个是你目前正在从事的工作需要用到的技能，如客服所需要的沟通能力，销售所需要的营销能力等。<br>第二种是一些底层技能，如时间管理能力、阅读能力等。<br>第三种是副业赚钱比较常用到的技能，如文案、写作、演讲等技能。</p>\n</li>\n<li><p><strong>总结归纳</strong>：当你做成功了一件事后，要养成去归纳、总结出套路的习惯，下一次做另外一件事时，也别忘了从之前的成就套路里找些通用的方法。<br>被誉为“管理大师”的德鲁克先生，他坚持每三年就要学习一门新学科，这样的习惯使他学习了经济学、心理学、数学、政治理论、历史及哲学等众多知识领域。新的知识一开始对任何人来说都很陌生，和所熟悉的知识、专业相隔很远，甚至有点风马牛不相及，很多时候我们还会抵触。但这种带着以前的学习方法，重新清零吸收新知识的思考状态，会让我们的眼界越来越开阔、思路越来越宽广。</p>\n</li>\n<li><p><strong>时间观念</strong>：想象有一家银行每天早上都在你的账户里存入86400元，可是每天的账户余额都不能结转到明天，一到结算时间，银行就会把你当日未用尽的款项全数删除。这种情况下你会怎么做？<br>当然是每天不留分文地全数取出！<br>其实我们每个人都有这样的一个银行，它的名字叫时间。<br>每天早上时间银行总会为你在账户里自动存入86400秒，一到晚上，它也会自动地把你当日虚掷掉的光阴全数注销，没有分秒可以结转到明天，你也不能提前预支片刻。<br>简单来说，就是时间是不可逆的，如果你浪费掉了，也就没有了，所以要学会带着专注力去做事情，尤其是做重要的事情。<br>这也是为什么很多人在30岁、毕业10年这些人生的关键节点突然想明白一些问题时，会觉得恐慌。我们身边有太多的朋友，时间是很多，但是注意力不够，一天到晚只是虚度光阴而已。</p>\n</li>\n<li><p><strong>坚持输出</strong>：学习了之后，一定要有输出。这个“输出”可以是写一篇完整的学习笔记，分享给别人听，也可以是，把课上的方法用起来。比如我今天回答的第一个问题，提到了“同样的工作量，降低完成的时间”这个提升时薪的方法，你是不是应该花时间去看看自己工作当中有哪些事情可以去建立模板，从而降低完成的时间呢？<br>最怕的是你惊呼一声“哇，这个方法好棒，好有用！”却没有后续的行动。</p>\n</li>\n</ul>\n<h3 id=\"读书四问\"><a href=\"#读书四问\" class=\"headerlink\" title=\"读书四问\"></a>读书四问</h3><p><strong>1.这本书的主题？</strong><br>主要讲了关于副业的三个方面：思维认知、所需要的能力、与主业的关系和结合。<br><strong>2.作者细说了什么，怎么说的？</strong><br>三个方面都讲的差不多，知识也没那么深入，属于那种知识你基本知道，只是做了归纳式总结。<br><strong>3.这本书说得有道理吗？</strong><br>基本有道理，没有做到很深入，能在这本书里找到一两点触发自己的地方就不错了。<br><strong>4.这本书与自己的关系？</strong><br>让自己明白了自己处理发展副业的什么阶段，该怎么入手，目前自己还是适合做好自己主业的同时，发展一个其他的技能，并且这个技能能帮助公司发展，而且长期的坚持阅读写作持续探索。</p>\n","categories":["Books"],"tags":["Books"]},{"title":"博客装修了，欢迎来坐","url":"http://jinbeen.com/2021/04/03/welcome-bolg/","content":"<h2 id=\"装修效果-主题\"><a href=\"#装修效果-主题\" class=\"headerlink\" title=\"装修效果(主题)\"></a>装修效果(主题)</h2><ul>\n<li><a href=\"https://jinbeen.com/2016/11/19/Mac搭建Hexo博客流程记录，排雷完成/\">Mac搭建Hexo博客流程记录</a></li>\n<li><a href=\"http://forsigner.com/2016/03/10/fexo-doc-zh-cn/#%E5%BC%80%E5%A7%8B\" target=\"_blank\" rel=\"external\">主题配置</a></li>\n</ul>\n<p>因为之前搭建过所以更换起来相对比较简单，需要注意的地方：</p>\n<ol>\n<li><p>没设置标题的时候会出现<code>(no title)</code>的情况，可自定义，我设置为空串了，在这里设置：<code>theme</code>/<code>fexo</code>/<code>layout</code>/<code>partial</code>/<code>article.ejs</code>里的<code>&lt;h1 class=&quot;post-title&quot;&gt;&lt;%= post.title || &#39;&#39; %&gt;&lt;/h1&gt;</code></p>\n</li>\n<li><p>博客里的音乐的iframe，之前宽度是固定的，可设置为自适应：width=”100%”</p>\n</li>\n<li><p>评论改为了<a href=\"https://github.com/gitalk/gitalk#usage\" target=\"_blank\" rel=\"external\">gitalk</a>，在主题下的<code>_config.yml</code>配置即可。需要注意的是<code>Authorization callback URL</code>使用的就是网站的域名，例如<code>https://jinbeen.com</code>。配置错误也可以到<a href=\"https://github.com/settings/applications/1551717\" target=\"_blank\" rel=\"external\">此处</a>更改。</p>\n</li>\n<li><p>\b分类和标签页面配置的是<code>/categories/Android</code>、<code>tags/Android</code>。感觉应该是<code>categories</code>，但是不行还不知道为啥。</p>\n</li>\n<li><p>友链的介绍如果太长，在手机上样式会变型，最好是能一行显示完</p>\n</li>\n<li><p>语言不生效，经常变为英文：站点下的配置为<code>language: zh-Hans</code>，但是fexo下的languages下只有<code>zh-CN.yml</code>文件，改为：<code>language: zh-CN</code>就好。</p>\n</li>\n</ol>\n<p>常用的Hexo命令：</p>\n<ol>\n<li><code>hexo generate (hexo g)</code>　生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>\n<li><code>hexo server (hexo s --debug)</code>　启动本地web服务，用于博客的预览</li>\n<li><code>hexo deploy (hexo d)</code> 　部署播客到远端</li>\n<li><code>hexo new &quot;postName&quot;</code> 　新建文章</li>\n<li><code>hexo new page &quot;pageName&quot;</code> 　新建页面</li>\n</ol>\n<h2 id=\"各大文章发布平台\"><a href=\"#各大文章发布平台\" class=\"headerlink\" title=\"各大文章发布平台\"></a>各大文章发布平台</h2><p>距离之前的 <code>next</code> 主题已经快五年了，这期间维护花了老大的劲，评论阅读数，访问人数统计，https，域名，图片防盗链等。之前使用github pages搭建博客可是有一大波人，现在留下的估计就那么几个了，奉劝大家还是找一个合适的技术平台，把文章放那里。</p>\n<ul>\n<li>个人博客：适合装X，一个人的空间，做一些定制化的样式还挺不错</li>\n<li>掘金：高质量的技术文章平台，有能力的技术人员推荐在这里发展</li>\n<li>CSDN：水文比较多，很多重复文章，但是能发展起来也非常厉害</li>\n<li>简书：以前还可以，自从饱醉豚事件后就没落了，现在技术人员基本不在里面活动了</li>\n</ul>\n<p> 欢迎关注我的<a href=\"https://github.com/youlookwhat\" target=\"_blank\" rel=\"external\">GitHub账号</a>，或<a href=\"https://juejin.cn/user/201965867640862/posts\" target=\"_blank\" rel=\"external\">掘金号</a>，有事没事留个言👋</p>\n","categories":["hexo"],"tags":["hexo"]},{"title":"《如何阅读一本书》| 拿到一本书该怎么开始读","url":"http://jinbeen.com/2021/03/27/how-to-read-book/","content":"<p><img src=\"https://jinbeen.com/images/2021/book-how-to-read-book.png\" alt=\"如何阅读一本书\"></p>\n<p>这是本实用性的书籍，豆瓣评分也很高，很多人写过了这本书的读书笔记，对于写读书笔记不久的我来说有点自惭形秽了，但是笔记有时候不光是给别人看的，很多也是给自己以后能回顾，自己总结出来的东西才是自己的。</p>\n<h3 id=\"书中所述\"><a href=\"#书中所述\" class=\"headerlink\" title=\"书中所述\"></a>书中所述</h3><p>由于篇幅有限，这里只是总结一些核心的内容。<br>作者提到了阅读的四个层次：基础阅读、检视阅读、分析阅读、主题阅读。这四个层次是依次递进且读一本书不局限于使用哪一种固定的方式，一般是几种方式一起使用。</p>\n<h4 id=\"一、基础阅读\"><a href=\"#一、基础阅读\" class=\"headerlink\" title=\"一、基础阅读\"></a>一、基础阅读</h4><ul>\n<li>第一阶段：阅读准备阶段，相当于学前教育或幼稚园的学习经验。从出生开始，直到六七岁为止。</li>\n<li>第二阶段：识字，相当于一年级学生典型的学习经验。孩子会学习读一些简单的读物。</li>\n<li>第三阶段：字汇的增长及课文的运用，通常是在四年级结束时就会的方法。特征是快速建立字汇的能力，所用的方法是从上下文所提供的线索，“揭发”不熟悉的字眼。</li>\n<li>第四阶段：几乎可以阅读所有的读物了，这个时期学生要从小学或初中毕业了。特征是精炼与增进前面所学的技巧，几乎可以阅读所有的读物了，但是还不够老练。</li>\n</ul>\n<h4 id=\"二、检视阅读\"><a href=\"#二、检视阅读\" class=\"headerlink\" title=\"二、检视阅读\"></a>二、检视阅读</h4><p>检视阅读才算是真正进入阅读的层次，检视阅读又包含在分析阅读中，分析阅读则包含在主题阅读中。</p>\n<h5 id=\"检视阅读一：有系统的略读或粗读\"><a href=\"#检视阅读一：有系统的略读或粗读\" class=\"headerlink\" title=\"检视阅读一：有系统的略读或粗读\"></a>检视阅读一：有系统的略读或粗读</h5><ul>\n<li>1.先看书名页，然后如果有序就看序</li>\n<li>2.研究目录页，对这本书的基本架构做概括性的理解。</li>\n<li>3.如果书中附有索引，也要检阅一下</li>\n<li>4.如果那是本包着书衣的新书，不妨读一下出版者的介绍。</li>\n<li>5.开始挑几个看起来跟主题息息相关的篇章来看</li>\n<li>6.最后一步，把书打开来，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多。</li>\n</ul>\n<h5 id=\"检视阅读二：粗浅的阅读\"><a href=\"#检视阅读二：粗浅的阅读\" class=\"headerlink\" title=\"检视阅读二：粗浅的阅读\"></a>检视阅读二：粗浅的阅读</h5><ul>\n<li>一个重要的阅读规则：头一次面对一本难度的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或思索。</li>\n</ul>\n<h4 id=\"三、分析阅读\"><a href=\"#三、分析阅读\" class=\"headerlink\" title=\"三、分析阅读\"></a>三、分析阅读</h4><h5 id=\"第一阶段：找出一本书在谈些什么的规则\"><a href=\"#第一阶段：找出一本书在谈些什么的规则\" class=\"headerlink\" title=\"第一阶段：找出一本书在谈些什么的规则\"></a>第一阶段：找出一本书在谈些什么的规则</h5><ul>\n<li>（1）：依照书本的种类与主题做分类</li>\n<li>（2）：用简短的句子说出整本书在谈些什么</li>\n<li>（3）：按照顺序与关系，列出全书的重要部分。将全书的纲要拟出来之后，再将各个部分的纲要也一一列出<ul>\n<li>（4）：找出作者在问的问题，或作者想要解决的问题</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"第二阶段：诠释一本书的内容规则\"><a href=\"#第二阶段：诠释一本书的内容规则\" class=\"headerlink\" title=\"第二阶段：诠释一本书的内容规则\"></a>第二阶段：诠释一本书的内容规则</h5><ul>\n<li>（5）：诠释作者使用的关键字，与作者达成共识</li>\n<li>（6）：从最重要的句子中找出作者的重要主旨</li>\n<li>（7）：找出作者的论述，重新架构这些论述的前因后果，以明白作者的主张</li>\n<li>（8）：确定作者已经解决了哪些问题，还有哪些是未解决的。在未解决的问题中，确定哪些是作者认为自己无法解决的问题</li>\n</ul>\n<h5 id=\"第三阶段：像是沟通知识一样地评论一本书的规则\"><a href=\"#第三阶段：像是沟通知识一样地评论一本书的规则\" class=\"headerlink\" title=\"第三阶段：像是沟通知识一样地评论一本书的规则\"></a>第三阶段：像是沟通知识一样地评论一本书的规则</h5><ul>\n<li>（9）：除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评。</li>\n<li>（10）：不要争强好胜，非辩到底不可。</li>\n<li>（11）：在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同</li>\n<li>（12）：证明作者的知识不足</li>\n<li>（13）：证明作者的知识错误</li>\n<li>（14）：证明作者不合逻辑</li>\n<li>（15）：证明作者的分析与理由是不完整的</li>\n</ul>\n<h4 id=\"四、主题阅读\"><a href=\"#四、主题阅读\" class=\"headerlink\" title=\"四、主题阅读\"></a>四、主题阅读</h4><h5 id=\"第一阶段：观察研究范围，准备阶段\"><a href=\"#第一阶段：观察研究范围，准备阶段\" class=\"headerlink\" title=\"第一阶段：观察研究范围，准备阶段\"></a>第一阶段：观察研究范围，准备阶段</h5><ul>\n<li>（1）：针对你要研究的主题，设计一份试验性的书目。你可以参考图书馆目录、专家的建议与书中的书目索引。</li>\n<li>（2）：浏览这份书目上所有的书，确定哪些与你的主题相关，并就你的主题建立起清楚的概念。</li>\n</ul>\n<h5 id=\"第二阶段：阅读所有第一阶段收集到的书籍\"><a href=\"#第二阶段：阅读所有第一阶段收集到的书籍\" class=\"headerlink\" title=\"第二阶段：阅读所有第一阶段收集到的书籍\"></a>第二阶段：阅读所有第一阶段收集到的书籍</h5><ul>\n<li>（3）：浏览所有在第一阶段被认定与你主题有关的书，找出最相关的章节。</li>\n<li>（4）：根据主题创造出一套中立的词汇，带引作者与你达成共识—-无论作者是否实际用到这些词汇，所有的作者，或至少绝大部分的作者都可以用这套词汇来诠释。</li>\n<li>（5）：建立一个中立的主旨，列出一连串的问题—-无论作者是否明白谈过这些问题，所有的作者，或者至少大多数的作者都要能解读为针对这些问题提供了他们的回答。</li>\n<li>（6）：界定主要及次要的议题。然后将作者针对各个问题的不同意见整理陈列的各个议题之旁。你要记住，各个作者之间或之中，不见得一定存在着某个议题。有时候，你需要针对一些不是作者主要关心范围的事情，把他的观点解读，才能建构出这种议题。</li>\n<li>（7）：分析这些讨论。这得把问题和议题按顺序排列，以求突显主题。比较有共通性的议题，要放在比较没有共通性的议题之前。各个议题之间的关系也要清楚地界定出来。解读某个作家对一个议题的观点时，必须从他自己的文章中引一段话来并列。</li>\n</ul>\n<h4 id=\"五、做读书笔记的方法\"><a href=\"#五、做读书笔记的方法\" class=\"headerlink\" title=\"五、做读书笔记的方法\"></a>五、做读书笔记的方法</h4><ul>\n<li>（1）画底线——在主要的重点，或重要又有力量的句子下画线。</li>\n<li>（2）在画底线处的栏外再加画一道线——把你已经画线的部分再强调一遍，或是某一段很重要，但要画底线太长了，便在这一整段外加上一个记号。</li>\n<li>（3）在空白处做星号或其他符号——要慎用，只用来强调书中十来个最重要的声明或段落即可。你可能想要将做过这样记号的地方每页折一个角，或是夹一张书签，这样你随时从书架上拿起这本书，打开你做记号的地方，就能唤醒你的记忆。</li>\n<li>（4）在空白处编号——作者的某个论点发展出一连串的重要陈述时，可以做顺序编号。</li>\n<li>（5）在空白处记下其他的页码——强调作者在书中其他部分也有过同样的论点，或相关的要点，或是与此处观点不同的地方。这样做能让散布全书的想法统一集中起来。许多读者会用Cf这样的记号，表示比较或参照的意思。</li>\n<li>（6）将关键字或句子圈出来——这跟画底线是同样的功能。</li>\n<li>（7）在书页的空白处做笔记——在阅读某一章节时，你可能会有些问题（或答案），在空白处记下来，这样可以帮你回想起你的问题或答案。你也可以将复杂的论点简化说明在书页的空白处。或是记下全书所有主要论点的发展顺序。书中最后一页可以用来作为个人的索引页，将作者的主要观点依序记下来。</li>\n</ul>\n<h4 id=\"六、一个阅读者要提出四个基本问题\"><a href=\"#六、一个阅读者要提出四个基本问题\" class=\"headerlink\" title=\"六、一个阅读者要提出四个基本问题\"></a>六、一个阅读者要提出四个基本问题</h4><p><strong>1.整体来说，这本书谈的是什么？</strong><br>本书讲述的是阅读的四个层次：基础阅读、检视阅读、分析阅读、主题阅读，以及不同类型的书该用什么阅读方式。</p>\n<p><strong>2.作者细说了什么，怎么说的？</strong><br>作者花大篇幅通过三个阶段讲了怎么分析阅读，以及阅读不同读物的方法。</p>\n<p><strong>3.这本书说得有道理吗？是全部有道理，还是部分有道理？</strong><br>对于现在的我来说，因为没有读过这类似的书，所以认为大部分都是有道理的。</p>\n<p><strong>4.这本书跟你有什么关系？</strong><br>让我能比较系统的了解读书一些基本规则，正如书名《如何阅读一本书》，能给我一个阅读书的基本方向。其实很多时候我就在这样做，只是它给了一个系统的介绍，让我能找到自己身在其中，将各种点结合起来形成面。</p>\n<h3 id=\"一点体会\"><a href=\"#一点体会\" class=\"headerlink\" title=\"一点体会\"></a>一点体会</h3><p>首先是易读性，这本书属于实用性书籍，很多理论，读起来比较枯燥，我看到好几个人说读了一会读不下去了，我自己最初也是，这本书买了很久最近才读完，而且要使用<code>分析阅读</code>，不然读着读着思绪就散了。但是是非常值得读的，基本大部分提到的阅读方法，这本书都有记录。</p>\n<p>刘润的读书方式：<br>　　在没读这本书之前，刘润说过他自己读书的一种方式，比如说他想讲一个知识点: <code>量子纠缠</code>(不一定完全一样)，他就会打开得到和印象笔记，然后在得到里搜索<code>量子纠缠</code>，将提到的几本书找出来，然后分别用网页打开，放在显示屏的左右两侧，因为他用的两个显示器，将书本中提到<code>量子纠缠</code>的段落收集到印象笔记里，然后下次再从印象笔记里整理归纳。</p>\n<p>最初我认为这样能得到书中精华吗，一本书就为了得到关于他想知道的知识点，就取那么少的内容会不会太浪费拿本书了。下面也有人评论说，”功利性阅读”，当看到这本书时就理解了，那叫<code>主题阅读</code>，是阅读的第四个层次，也就是最后一个层次。</p>\n<p>《绝非偶然》里，邱岳说他8年大约阅读了近1000本书，他也提到“并行阅读最高效”，他有一个受益匪浅的习惯–针对同一个主题，同时阅读不同作者的书。这也是<code>主题阅读</code>的阅读方式。</p>\n<p>最近刚阅读完的一本书《副业赚钱》，作者说她自己悟到的一种读书方式，就是读完了后将各个章节的标题用用自己的话写一遍等，用的就是<code>分析阅读</code>的方式。</p>\n<p>当看了这本书后就意识到，大家的读书方式基本都在本书中提到过。</p>\n<p><strong>任何实用性的书都不能解决该书所关心的实际问题，实际问题只能靠行动来解决。</strong></p>\n","categories":["Books"],"tags":["Books"]},{"title":"《读懂一本书》| 樊登读书创始人的选书读书方法","url":"http://jinbeen.com/2021/02/21/understand-book/","content":"<p><img src=\"https://jinbeen.com/images/2021/book-understand-book.png\" alt=\"读懂一本书：樊登读书法\"></p>\n<p>樊登作为专业讲书的人，这本书基本上是以讲书的角度来说的，提到了该如何选书，怎么阅读抓住重点，提高理解力的基础，以及讲书的必备条件。<br>大部分读者读书基本不是为了讲给别人听的，但是这本书还有很多是值得我们学习的地方。</p>\n<p><strong>书是绝大部分问题的出口</strong>。这是樊登在书的前部分讲读书的作用时说的，我和作者的想法如出一辙，记得刚毕业时我只身去北京，一个学弟问我，去那边一个朋友都没有感到孤独怎么办，我说可以看书呀，看书确实能解决问题。你遇到的绝大部分问题其他人都遇到过，而且基本都有解决方案，所以你只需要通过看书找到这些方案然后理解实践就好了。</p>\n<p>扯的有点多了，开始进入主题吧。我们先讲怎么阅读及读懂一本书，然后再讲如果和别人讲书要注意什么。</p>\n<p><img src=\"https://jinbeen.com/images/2021/book-understand-book-author.png\" alt=\"\"></p>\n<h3 id=\"读懂一本书\"><a href=\"#读懂一本书\" class=\"headerlink\" title=\"读懂一本书\"></a>读懂一本书</h3><p>怎么才能快速阅读，读懂一本书？<br>1、阅读时不停顿做笔记，过了一周后忘记了一半的时候再做笔记，让大脑受折磨才能印象更深刻。且一定要做笔记。<br>2、提高自己的理解力， 你的理解力的池子有多大，你就能读懂多难的书。池子差不多有七个部分：经济学知识，心理学知识，国学知识，管理学知识，逻辑学知识，哲学知识，人生经验。</p>\n<ul>\n<li>经济学知识：《经济学的思维方式》、《薛兆丰的经济学通识》</li>\n<li>心理学知识：《改变心理学的40项研究》</li>\n<li>国学知识：《论语》、《道德经》、《庄子》、《孟子》</li>\n<li>管理学知识：《非暴力沟通》、《关键对话》、《掌控谈话》、《可复制的领导力》</li>\n<li>逻辑学知识</li>\n<li>哲学知识：《生活的哲学》、《学会提问》、《思辨与立场》、《哲学起步》</li>\n<li>人生经验：《人生海海》、《不是你的错》</li>\n</ul>\n<p>其他的 法学、伦理学、生物学、历史等</p>\n<p>上面提到的各个部分的书籍基本都是作者推荐到的，当然我们不必一定看，如果我们有觉得有更好的书籍可以替代那也可以看其他的。</p>\n<p>这个相当于一个知识体系，就是所谓的认知之树。我认为这是每个人都必须具有的基础知识，如果你想成为一个“高手”的话。就像从事计算机专业行业的人一样，不论你做的是Android/iOS/Java后端工程师，都要学到计算机的基础知识，比如HTTP请求原理，算法，数据结构，设计模式等，在计算机行业也有这个类似的知识体系，面试的时候这些都会问到。而我们理解力也应如此，我们应该具有全方位的认识，不论是看书还是和别人进行交流，我们知道的领域越多理解的越多，看书的时候盲区就会越少。</p>\n<h3 id=\"讲书：从选书到怎么去讲\"><a href=\"#讲书：从选书到怎么去讲\" class=\"headerlink\" title=\"讲书：从选书到怎么去讲\"></a>讲书：从选书到怎么去讲</h3><p>文中大部分是在阐述关于讲书需要注意的地方。</p>\n<h5 id=\"1、选书选择\"><a href=\"#1、选书选择\" class=\"headerlink\" title=\"1、选书选择\"></a>1、选书选择</h5><p>这里我认为是选要讲的书，因为它们的特点比较明显，樊登遵循的是TIPS原则。</p>\n<ul>\n<li>T（Tools）是工具。“樊登读书”讲的大部分书，基本上都能提炼出工具性的内容。换句话说，这些书都会教给听众一套方法。另外，能够提炼出有效的工具也意味着这本书建立在坚实的实践基础之上。</li>\n<li>I（Ideas）是新的理念。图书的作者能够带来一些新的理念、新的发现、新的想法。</li>\n<li>P（Practicability）是实用性。它能够给大家的生活带来改变，可以应用在日常生活中。<br>-S（Scientificity）是科学性。它不是凭空捏造，不是简单归纳，它一定经历了科学性的验证过程。</li>\n</ul>\n<p>他们通常会有以下三点之一的特性：</p>\n<ul>\n<li>给我们的生活带来新的意义。</li>\n<li>使我们产生强烈的动力。</li>\n<li>给我们的生活带来改变。</li>\n</ul>\n<p>例如：<br>《思辨与立场》：这本书开篇就给读者提出了一个假设——如果一个人没有批判性思维会怎样？这就是思维的三重境界：<br>1.底层的人从来不反思，永远觉得自己是对的。<br>2.中间那层人虽然反思，但老觉得是别人不对。<br>3.顶级的那层人会反思自己，让自己的思维不断进步。</p>\n<p>《他人的力量》这本书解决了什么问题？人际关系的问题。<br>《反脆弱》在不确定中受益的能力。<br>《幸福的方法》一书，作者首先定义了不同的人会有不同的幸福观，一共有四类，即现在幸福未来也幸福，现在不幸福未来也不幸福，现在幸福未来不幸福，现在不幸福未来幸福。<br>《谷物大脑》一书。书里的一个观点是，面食吃得太多，就容易导致阿尔茨海默病。<br>《最好的告别》，上来说每个人人生的最后那一关是怎么过的，大部分的人都是因为摔了一跤，然后离开人世的，等等。</p>\n<h5 id=\"2、阅读的过程中，时刻要思考的问题\"><a href=\"#2、阅读的过程中，时刻要思考的问题\" class=\"headerlink\" title=\"2、阅读的过程中，时刻要思考的问题\"></a>2、阅读的过程中，时刻要思考的问题</h5><ul>\n<li>第一，我能不能准确地把握这本书真正的含义，理解这本书？</li>\n<li>第二，我能不能用自己的语言表达出这本书真正的含义，且表达清楚？我的信息效度和信度如何？</li>\n<li>第三，我表达出来的内容能不能让没有读过这本书的人无障碍地理解？我的语言风格是否通俗易懂，能否被二次传播？</li>\n</ul>\n<h5 id=\"3、讲书的五种必备能力\"><a href=\"#3、讲书的五种必备能力\" class=\"headerlink\" title=\"3、讲书的五种必备能力\"></a>3、讲书的五种必备能力</h5><blockquote>\n<p>虽然说是讲书必备的，但是我认为逻辑思维能力/大局观是阅读书的也必须具备的基础能力。</p>\n</blockquote>\n<p>第一，逻辑思维能力<br>　　很多人读书抓不住重点，不知道一本书的主题是什么，不了解一本书的论证过程。什么是逻辑思维能力？就是要知道什么叫作前提，什么叫作假设，什么叫作论证，什么叫作论点，什么叫作论据，这些东西要搞明白。所有的论证，要么是用归纳法，要么是用演绎法。</p>\n<p>第二，大局观<br>　　大局观就是你拿起一本书以后，首先要知道这本书的大框架。在看一本书的时候，你看的不是细枝末节。</p>\n<p>　　大局观是说，你拿到一本书后，要一步步地分析：1. 这本书要解决什么问题？2. 它的使命到底是什么？3. 它是怎么论证这个使命的？4. 它提出了一个什么样的假设？5. 怎么验证这个假设？6. 推理的过程是什么？7. 怎么获得这个证据？8. 最后我们能得出一个什么样的结论？9. 这个结论对我们每个人有什么意义？这就是一本书的架构。如果你在脑海里清晰地梳理了这个架构，你读书的时候，就会非常省力。这就是拥有了大局观。</p>\n<p>第三，语言能力<br>　　语言能力可以细分出很多部分，其中最重要的有三个：第一个是简洁，第二个是幽默，第三个是说服力。这三项能力都可以通过训练慢慢获得。</p>\n<p>第四，同理心<br>　　越是优秀的老师，越有同理心。他能感受到别人的知识盲区，破除“知识的诅咒”。他能预判到别人可能听不懂某些知识点，于是用一种降维的方法讲给别人听，使其明白。</p>\n<p>第五，爱<br>　　为什么爱很重要？我希望大家能感受到，我讲每一本书时都充满了热情。我爱我的听众。我觉得把这些内容讲出来，万一有一个有缘人听到了觉得特别好，从此他的生活可能发生改变，这是非常有成就感的。</p>\n<p>最后总结一下，从读书的角度，建议先不要一直停顿做笔记，等过了一周再做；且读书时需要一定的理解力，而要达到这样的理解力需要有各个领域的基础知识。从讲书的角度，要先选好有建设性的书籍(TIPS原则)，读的时候要时刻思考书的意义及怎么讲能让听众简单理解作者的核心思想，以及讲书的一些技巧。</p>\n<p>PS：这本书针对讲“读懂”感觉还是比较少，重点是讲书方面的，另一本《如何阅读一本书》讲述了阅读的几个层次和阅读不同读物的方法，下篇分享~</p>\n","categories":["Books"],"tags":["Books"]},{"title":"support升级到28.0.0所遇问题","url":"http://jinbeen.com/2019/05/23/android-support-update/","content":"<p><em>com.android.support:support-v4:25.4.0</em> 升级为： <em>com.android.support:support-v4:28.0.0</em></p>\n<a id=\"more\"></a>\n<h3 id=\"统一修改为-28-0-0-后编译报错\"><a href=\"#统一修改为-28-0-0-后编译报错\" class=\"headerlink\" title=\"统一修改为 28.0.0 后编译报错\"></a>统一修改为 28.0.0 后编译报错</h3><p>编译时各种稀奇古怪的错，如<code>org.gradle.tooling.BuildException: Failed to process resources, see aapt output above for details.</code><br>修改 <code>compileSdkVersion = 28</code>即可</p>\n<h3 id=\"设置TabLayout点击无水波纹效果，失效\"><a href=\"#设置TabLayout点击无水波纹效果，失效\" class=\"headerlink\" title=\"设置TabLayout点击无水波纹效果，失效\"></a>设置TabLayout点击无水波纹效果，失效</h3><p>之前使用的属性为：<code>app:tabBackground=&quot;@android:color/transparent&quot;</code><br>现在需要使用属性：<code>app:tabRippleColor=&quot;@android:color/transparent&quot;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tl_fenlei_type\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"73dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorWhite\"</span></div><div class=\"line\">    <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"gone\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabRippleColor</span>=<span class=\"string\">\"@android:color/transparent\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabIndicatorHeight</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"scrollable\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"通过反射修改-TabLayout-下划线宽度，失效\"><a href=\"#通过反射修改-TabLayout-下划线宽度，失效\" class=\"headerlink\" title=\"通过反射修改 TabLayout 下划线宽度，失效\"></a>通过反射修改 TabLayout 下划线宽度，失效</h3><p>因新的api字段名和之前的不一致或没有该字段导致。<br> 28.0.0后，可通过api直接实现TabLayout固定宽度:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">size</span></span></div><div class=\"line\">                <span class=\"attr\">android:width</span>=<span class=\"string\">\"28dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:height</span>=<span class=\"string\">\"2dp\"</span> /&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">corners</span> <span class=\"attr\">android:radius</span>=<span class=\"string\">\"1dp\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/color_theme\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:tabIndicator=\"@drawable/shape_tab_indicator\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：Android 6.0 以下版本此属性不生效，可以直接使用图片试试</p>\n</blockquote>\n<p>关键源码 DrawableCompat.java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Drawable <span class=\"title\">wrap</span><span class=\"params\">(@NonNull Drawable drawable)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">23</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> drawable;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">21</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Drawable)(!(drawable <span class=\"keyword\">instanceof</span> TintAwareDrawable) ? <span class=\"keyword\">new</span> WrappedDrawableApi21(drawable) : drawable);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Drawable)(!(drawable <span class=\"keyword\">instanceof</span> TintAwareDrawable) ? <span class=\"keyword\">new</span> WrappedDrawableApi14(drawable) : drawable);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"通过反射为单独TabLayout-Tab设置点击事件，失效\"><a href=\"#通过反射为单独TabLayout-Tab设置点击事件，失效\" class=\"headerlink\" title=\"通过反射为单独TabLayout.Tab设置点击事件，失效\"></a>通过反射为单独TabLayout.Tab设置点击事件，失效</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTabClick</span><span class=\"params\">(TabLayout tabLayout)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tabLayout.getTabCount(); i++) &#123;</div><div class=\"line\">            TabLayout.Tab tab = tabLayout.getTabAt(i);</div><div class=\"line\">            <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//这里使用到反射，拿到Tab对象后获取Class</span></div><div class=\"line\">            Class c = tab.getClass();</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//Filed “字段、属性”的意思,c.getDeclaredField 获取私有属性。</span></div><div class=\"line\">                <span class=\"comment\">//\"mView\"是Tab的私有属性名称(可查看TabLayout源码),类型是 TabView,TabLayout私有内部类。</span></div><div class=\"line\">                <span class=\"comment\">// 25.4.0</span></div><div class=\"line\"><span class=\"comment\">//                Field field = c.getDeclaredField(\"mView\");</span></div><div class=\"line\">                <span class=\"comment\">// 28.0.0</span></div><div class=\"line\">                Field field = c.getDeclaredField(<span class=\"string\">\"view\"</span>);</div><div class=\"line\">                <span class=\"comment\">//值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查。值为 false 则指示反射的对象应该实施 Java 语言访问检查。</span></div><div class=\"line\">                field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">final</span> View view = (View) field.get(tab);</div><div class=\"line\">                <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                view.setTag(i);</div><div class=\"line\">                view.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                          <span class=\"comment\">//这里就可以根据业务需求处理点击事件了。</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"自己为了修改TabLayout的宽度的-MyTabLayout-，下划线没有了\"><a href=\"#自己为了修改TabLayout的宽度的-MyTabLayout-，下划线没有了\" class=\"headerlink\" title=\"自己为了修改TabLayout的宽度的 MyTabLayout ，下划线没有了\"></a>自己为了修改TabLayout的宽度的 MyTabLayout ，下划线没有了</h3><p>替换为最新的 <code>TabLayout</code>，增加属性即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:tabIndicator=\"@drawable/shape_tab_indicator\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：Android 6.0 以下版本此属性不生效，可以直接使用图片试试</p>\n</blockquote>\n<h3 id=\"通过CollapsingToolbarLayout实现的滑动置顶\"><a href=\"#通过CollapsingToolbarLayout实现的滑动置顶\" class=\"headerlink\" title=\"通过CollapsingToolbarLayout实现的滑动置顶\"></a>通过CollapsingToolbarLayout实现的滑动置顶</h3><ul>\n<li>上滑时，之前滑动一小段松手会快速置顶，速度快时会感觉到卡顿现象。最新的不会，滑动一点就是一点(可能不好表达😂)。</li>\n<li>下滑时，之前惯性滑动后，置顶布局会定在那里，需要再次滑动才会下来。最新的直接会下来。</li>\n</ul>\n<p>更新后显然更好用了，😁</p>\n<h3 id=\"通过反射得到CollapsingToolbarLayout中标题的画笔，失效\"><a href=\"#通过反射得到CollapsingToolbarLayout中标题的画笔，失效\" class=\"headerlink\" title=\"通过反射得到CollapsingToolbarLayout中标题的画笔，失效\"></a>通过反射得到CollapsingToolbarLayout中标题的画笔，失效</h3><p>之前反射得到的字段名更改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 通过反射得到CollapsingToolbarLayout中标题的画笔。通过它得到标题变化中的颜色</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TextPaint <span class=\"title\">getCollapsingTitlePaint</span><span class=\"params\">(CollapsingToolbarLayout collapsing)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Class clazz = Class.forName(<span class=\"string\">\"android.support.design.widget.CollapsingToolbarLayout\"</span>);</div><div class=\"line\">            <span class=\"comment\">// 25.4.0</span></div><div class=\"line\"><span class=\"comment\">//            Field fieldTextHelper = clazz.getDeclaredField(\"mCollapsingTextHelper\");</span></div><div class=\"line\">            <span class=\"comment\">// 28.0.0</span></div><div class=\"line\">            Field fieldTextHelper = clazz.getDeclaredField(<span class=\"string\">\"collapsingTextHelper\"</span>);</div><div class=\"line\">            fieldTextHelper.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            Object obj = fieldTextHelper.get(collapsing);</div><div class=\"line\"></div><div class=\"line\">            Class clazzHelper = Class.forName(<span class=\"string\">\"android.support.design.widget.CollapsingTextHelper\"</span>);</div><div class=\"line\">            <span class=\"comment\">// 25.4.0</span></div><div class=\"line\"><span class=\"comment\">//            Field fieldTextPaint = clazzHelper.getDeclaredField(\"mTextPaint\");</span></div><div class=\"line\">            <span class=\"comment\">// 28.0.0</span></div><div class=\"line\">            Field fieldTextPaint = clazzHelper.getDeclaredField(<span class=\"string\">\"textPaint\"</span>);</div><div class=\"line\">            fieldTextPaint.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> (TextPaint) fieldTextPaint.get(obj);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException | NoSuchFieldException | IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li>引入的三方库可能不兼容 28.0.0</li>\n<li>设置<code>TabLayout</code>的字体大小，对应的属性为<code>app:tabTextAppearance</code></li>\n<li>使用style时，遇到<code>app:tabIndicator=&quot;@drawable/shape_tab_indicator&quot;</code>属性，可这样使用<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tabLayoutStyle\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:layout_width\"</span>&gt;</span>match_parent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:layout_height\"</span>&gt;</span>44dp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tabIndicator\"</span>&gt;</span>@drawable/shape_tab_indicator<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tabSelectedTextColor\"</span>&gt;</span>@color/color_black_title<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tabTextAppearance\"</span>&gt;</span>@style/MyTabTextAppearance<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyTabTextAppearance\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textSize\"</span>&gt;</span>12sp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n","categories":["Android"],"tags":["Android"]},{"title":"Android gradle 命令行打包","url":"http://jinbeen.com/2019/04/24/android-gradle-packaging/","content":"<p>偶尔用一下，hhh(╯﹏╰)</p>\n<a id=\"more\"></a>\n<h4 id=\"项目配置gradle环境\"><a href=\"#项目配置gradle环境\" class=\"headerlink\" title=\"项目配置gradle环境\"></a>项目配置gradle环境</h4><ul>\n<li><a href=\"https://jinbeen.com/2016/10/13/Mac-Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE-java%E3%80%81sdk%E3%80%81ndk%E3%80%81gradle/\">Mac Android开发环境变量的配置(java、sdk、ndk、gradle)</a></li>\n<li><a href=\"https://blog.csdn.net/jingbin_/article/details/89491970\" target=\"_blank\" rel=\"external\">gradle -version Permission denied - in mac terminal</a></li>\n</ul>\n<h4 id=\"build-gradle-配置\"><a href=\"#build-gradle-配置\" class=\"headerlink\" title=\"build.gradle 配置\"></a>build.gradle 配置</h4><p>在项目的<code>build.gradle</code>配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">\t</div><div class=\"line\">    signingConfigs &#123;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            storeFile file(pStoreFile)</div><div class=\"line\">            storePassword pStorePassword</div><div class=\"line\">            keyAlias pKeyAlias</div><div class=\"line\">            keyPassword pKeyPassword</div><div class=\"line\">            v1SigningEnabled true</div><div class=\"line\">            v2SigningEnabled true</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        release &#123;</div><div class=\"line\">            storeFile file(pStoreFile)</div><div class=\"line\">            storePassword pStorePassword</div><div class=\"line\">            keyAlias pKeyAlias</div><div class=\"line\">            keyPassword pKeyPassword</div><div class=\"line\">            v1SigningEnabled true</div><div class=\"line\">            v2SigningEnabled true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            minifyEnabled false</div><div class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class=\"line\">            signingConfig signingConfigs.release</div><div class=\"line\">        &#125;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            minifyEnabled false</div><div class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class=\"line\">            signingConfig signingConfigs.debug</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>1.<code>signingConfigs</code>在<code>buildTypes</code>上面</li>\n<li>2.<code>v1SigningEnabled</code>、<code>v2SigningEnabled</code> 设置是否包含v1和v2<ul>\n<li>只勾选v1签名并不会影响什么，但是在7.0上不会使用更安全的验证方式<br>只勾选V2签名7.0以下会直接安装完显示未安装，7.0以上则使用了V2的方式验证<br>同时勾选V1和V2则所有机型都没问题</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>3.里面的 <code>pStoreFile</code>、<code>pStorePassword</code>等属性在<code>gradle.properties</code>文件内：<br><img src=\"https://img-blog.csdnimg.cn/2021040316263383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"gradle.properties\"></li>\n</ul>\n<h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><p>在命令行里输入：</p>\n<ul>\n<li>gradle assembleDebug 只打debug</li>\n<li>gradle assembleRelease 只打release</li>\n</ul>\n<p>要构建 APK，并立即在运行的模拟器或连接的设备上安装：</p>\n<ul>\n<li>gradle installDebug</li>\n</ul>\n<p>输出地址：<br><img src=\"https://img-blog.csdnimg.cn/20210403162649667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"apk\"></p>\n<p>参考文件：<a href=\"https://github.com/youlookwhat/CloudReader/blob/master/app/build.gradle\" target=\"_blank\" rel=\"external\">CloudReader - build.gradle</a></p>\n","categories":["Android"],"tags":["Android","gradle"]},{"title":"Android 系统剪贴板的使用 - 复制、获取和清空","url":"http://jinbeen.com/2019/04/23/android-clipboard/","content":"<ul>\n<li>ClipboardManager： 表示一个剪贴板</li>\n<li>ClipData： 剪贴板中保存的所有剪贴数据集（剪贴板可同时复制/保存多条多种数据条目）</li>\n<li>ClipData.Item： 剪贴数据集中的一个数据条目</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"复制内容\"><a href=\"#复制内容\" class=\"headerlink\" title=\"复制内容\"></a>复制内容</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 实现文本复制功能</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> content 复制的文本</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">copy</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!TextUtils.isEmpty(content)) &#123;</div><div class=\"line\">        <span class=\"comment\">// 得到剪贴板管理器</span></div><div class=\"line\">        ClipboardManager cmb = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class=\"line\">        cmb.setText(content.trim());</div><div class=\"line\">        <span class=\"comment\">// 创建一个剪贴数据集，包含一个普通文本数据条目（需要复制的数据）</span></div><div class=\"line\">        ClipData clipData = ClipData.newPlainText(<span class=\"keyword\">null</span>, content);</div><div class=\"line\">        <span class=\"comment\">// 把数据集设置（复制）到剪贴板</span></div><div class=\"line\">        cmb.setPrimaryClip(clipData);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"获取系统剪贴板内容\"><a href=\"#获取系统剪贴板内容\" class=\"headerlink\" title=\"获取系统剪贴板内容\"></a>获取系统剪贴板内容</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 获取系统剪贴板内容</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getClipContent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ClipboardManager manager = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (manager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (manager.hasPrimaryClip() &amp;&amp; manager.getPrimaryClip().getItemCount() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            CharSequence addedText = manager.getPrimaryClip().getItemAt(<span class=\"number\">0</span>).getText();</div><div class=\"line\">            String addedTextString = String.valueOf(addedText);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(addedTextString)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> addedTextString;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"清空剪贴板内容\"><a href=\"#清空剪贴板内容\" class=\"headerlink\" title=\"清空剪贴板内容\"></a>清空剪贴板内容</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 清空剪贴板内容</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearClipboard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ClipboardManager manager = (ClipboardManager) CloudReaderApplication.getInstance().getSystemService(Context.CLIPBOARD_SERVICE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (manager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            manager.setPrimaryClip(manager.getPrimaryClip());</div><div class=\"line\">            manager.setText(<span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            DebugUtil.error(e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"剪贴板的数据改变监听\"><a href=\"#剪贴板的数据改变监听\" class=\"headerlink\" title=\"剪贴板的数据改变监听\"></a>剪贴板的数据改变监听</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取系统剪贴板</span></div><div class=\"line\">ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加剪贴板数据改变监听器</span></div><div class=\"line\">clipboard.addPrimaryClipChangedListener(<span class=\"keyword\">new</span> ClipboardManager.OnPrimaryClipChangedListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPrimaryClipChanged</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 剪贴板中的数据被改变，此方法将被回调</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"onPrimaryClipChanged()\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 移除指定的剪贴板数据改变监听器</span></div><div class=\"line\"><span class=\"comment\">// clipboard.removePrimaryClipChangedListener(listener);</span></div></pre></td></tr></table></figure>","categories":["Android"],"tags":["Android","clipboard"]},{"title":"链表（上）：如何实现LRU缓存淘汰算法?","url":"http://jinbeen.com/2019/04/13/list/","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-9df053cef236aff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<a id=\"more\"></a>\n<p>经典的链表应用场景，那就是 LRU 缓存淘汰算法</p>\n<p>常见的缓存淘汰策略：</p>\n<ul>\n<li>先进先出策略 FIFO（First In，First Out）</li>\n<li>最少使用策略 LFU（Least Frequently Used）</li>\n<li>最近最少使用策略 LRU（Least Recently Used）</li>\n</ul>\n<blockquote>\n<p>这些策略你不用死记，我打个比方你很容易就明白了。假如说，你买了很多本技术书，但有一天你发现，这些书太多了，太占书房空间了，你要做个大扫除，扔掉一些书籍。那这个时候，你会选择扔掉哪些书呢？对应一下，你的选择标准是不是和上面的三种策略神似呢？</p>\n</blockquote>\n<p>五花八门的链表结构(不止这四种链表结构)</p>\n<h2 id=\"从底层的存储结构看\"><a href=\"#从底层的存储结构看\" class=\"headerlink\" title=\"从底层的存储结构看\"></a>从底层的存储结构看</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。</p>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>链表并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。<br><img src=\"http://upload-images.jianshu.io/upload_images/1354448-48f37c5fa5a90667.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>三种最常见的链表结构</p>\n<ul>\n<li>单链表</li>\n<li>双向链表</li>\n<li>循环链表</li>\n</ul>\n<h4 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h4><blockquote>\n<p>链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“<strong>结点</strong>”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。如图所示，我们把这个记录下个结点地址的指针叫作<strong>后继指针 next</strong>。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-9df053cef236aff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>从单链表图中，你应该可以发现，其中有两个结点是比较特殊的，它们分别是第一个结点和最后一个结点。我们习惯性地把第一个结点叫作<strong>头结点</strong>，把最后一个结点叫作<strong>尾结点</strong>。其中，头结点用来记录链表的基地址。有了它，我们就可以遍历得到整条链表。而尾结点特殊的地方是：指针不是指向下一个结点，而是指向一个<strong>空地址 NULL</strong>，表示这是链表上最后一个结点。</p>\n<p>插入和删除：</p>\n<ul>\n<li>数组：插入和删除时，为了保持内存数据的连续性，需要做大量的数据搬移，时间复杂度为O(n)。</li>\n<li>链表：链表的插入和删除操作，我们只需要考虑相邻节点的指针改变，时间复杂度为O(1)。</li>\n</ul>\n<p>查找：</p>\n<ul>\n<li>链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点，时间复杂度为O(n)。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-6c2972ee0d91f454.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h4><blockquote>\n<p>循环链表是一种特殊的单链表。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-1ded6687d1ba3c51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>与单链表唯一的区别在尾节点：</p>\n<ul>\n<li>单链表的尾节点指针指向<em>空指针</em>，表示这是最后的节点。</li>\n<li>循环链表的尾节点指针指向链表的<em>头结点</em>，</li>\n</ul>\n<p>与单链表比优点：从链尾到链头比较方便。</p>\n<h4 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h4><blockquote>\n<p>单链表只有一个方向，节点只有一个后继指针 next 指向后面的节点。<br>而双向链表，它支持两个方向，每个节点不止有一个后继指针 next 指向后面的节点，还有一个前驱指针 prev 指向前面的节点。(LinkedHashMap)</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-b538df27f89e9ee3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>从图中可以看出来，双向链表需要额外的两个空间来存储前继节点和前驱节点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。<br>虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性。</p>\n<p>从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。</p>\n<h5 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h5><p>在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：</p>\n<ul>\n<li>1.删除结点中“值等于某个给定值”的结点；</li>\n<li>2.删除给定指针指向的结点。</li>\n</ul>\n<h6 id=\"1-删除结点中“值等于某个给定值”的结点\"><a href=\"#1-删除结点中“值等于某个给定值”的结点\" class=\"headerlink\" title=\"1. 删除结点中“值等于某个给定值”的结点\"></a>1. 删除结点中“值等于某个给定值”的结点</h6><p>不管是单链表还是双向链表，为了查找到值等于给定值的结点，都需要从头结点开始一个一个依次遍历对比，直到找到值等于给定值的结点，然后再通过我前面讲的指针操作将其删除。</p>\n<p>尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 O(n)。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 O(n)。</p>\n<h6 id=\"2-删除给定指针指向的结点\"><a href=\"#2-删除给定指针指向的结点\" class=\"headerlink\" title=\"2.删除给定指针指向的结点\"></a>2.删除给定指针指向的结点</h6><p>我们已经找到了要删除的结点，但是删除某个结点 q 需要知道其前驱结点，而单链表并不支持直接获取前驱结点，所以，为了找到前驱结点，我们还是要从头结点开始遍历链表，直到 p-&gt;next=q，说明 p 是 q 的前驱结点。</p>\n<p>双向链表这种情况比较有优势。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以，针对第二种情况，单链表删除操作需要 O(n) 的时间复杂度，而双向链表只需要在 O(1) 的时间复杂度内就搞定了！</p>\n<p>如果我们希望在链表的某个指定结点前面<em>插入</em>一个结点，双向链表比单链表有很大的优势。双向链表可以在 O(1) 时间复杂度搞定，而单向链表需要 O(n) 的时间复杂度。</p>\n<p>查询：<br>除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查询的效率也要比单链表高一些。因为，我们可以记录上次查找的位置 p，每次查询时，根据要查找的值与 p 的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。</p>\n<ul>\n<li>对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；</li>\n<li>而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。</li>\n</ul>\n<h4 id=\"双向循环链表\"><a href=\"#双向循环链表\" class=\"headerlink\" title=\"双向循环链表\"></a>双向循环链表</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-35804af4bafa5670.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h2 id=\"链表-VS-数组性能大比拼\"><a href=\"#链表-VS-数组性能大比拼\" class=\"headerlink\" title=\"链表 VS 数组性能大比拼\"></a>链表 VS 数组性能大比拼</h2><p>数组和链表是两种截然不同的内存组织方式。正是因为内存存储的区别，它们插入、删除、随机访问操作的时间复杂度正好相反。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">时间复杂度</th>\n<th style=\"text-align:center\">数组</th>\n<th style=\"text-align:center\">链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">插入删除</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">随机访问</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>数组简单易用，在实现上使用的是连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。<ul>\n<li>链表在内存中并不是连续存储，所以对CPU缓存不友好，没办法有效预读。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。</li>\n<li>链表本身没有大小的限制，天然地支持动态扩容，这也是它与数组最大的区别。</li>\n</ul>\n<p>你可能会说，我们 Java 中的 ArrayList 容器，也可以支持动态扩容啊？我们上一节课讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将数据拷贝过去，而数据拷贝的操作是非常耗时的。</p>\n<p>我举一个稍微极端的例子。如果我们用 ArrayList 存储了了 1GB 大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList 会申请一个 1.5GB 大小的存储空间，并且把原来那 1GB 的数据拷贝到新申请的空间上。听起来是不是就很耗时？</p>\n<p>除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的存储空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是 Java 语言，就有可能会导致频繁的 GC（Garbage Collection，垃圾回收）。</p>\n<p>所以，在我们实际的开发中，针对不同类型的项目，要根据具体情况，权衡究竟是选择数组还是链表。</p>\n<h2 id=\"如何基于链表实现-LRU-缓存淘汰算法？\"><a href=\"#如何基于链表实现-LRU-缓存淘汰算法？\" class=\"headerlink\" title=\"如何基于链表实现 LRU 缓存淘汰算法？\"></a>如何基于链表实现 LRU 缓存淘汰算法？</h2><p>我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p>\n<ol>\n<li><p>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</p>\n</li>\n<li><p>如果此数据没有在缓存链表中，又可以分为两种情况：</p>\n<ul>\n<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>\n<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>\n</ul>\n</li>\n</ol>\n<p>这样我们就用链表实现了一个 LRU 缓存，是不是很简单？</p>\n<p>现在我们来看下 m 缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为 O(n)。</p>\n<p>实际上，我们可以继续优化这个实现思路，比如引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。因为要涉及我们还没有讲到的数据结构，所以这个优化方案，我现在就不详细说了，等讲到散列表的时候，我会再拿出来讲。</p>\n<h2 id=\"个人总结\"><a href=\"#个人总结\" class=\"headerlink\" title=\"个人总结\"></a>个人总结</h2><ul>\n<li>数组需要一块连续的内存空间来存储。</li>\n<li>链表是通过“指针”将一组零散的内存块串联起来使用。</li>\n</ul>\n<p>单链表的第一个结点叫头结点，最后一个结点叫作尾结点，尾结点指向一个空指针NULL。插入和删除的时间复杂度为O(1)，查找的时间复杂度为O(n)。</p>\n<p>循环链表的最后一个结点指向链表头结点，适合处理环形数据结构。</p>\n<p>双向链表不止有一个后继指针 next 还有一个前驱指针 prev ，同样的数据双向链表比单链表占更多的内存空间。<br>删除给定的结点，双向链表时间复杂度为O(1)，单链表的时间复杂度为O(n)。</p>\n<p>ArrayList：支持动态扩容的数组，但当没有空闲空间了，就会申请一个更大的空间，将数据拷贝过去，而数据拷贝是非常耗时的。</p>\n","categories":["数据结构与算法之美"],"tags":["数据结构与算法之美"]},{"title":"数组：为什么很多编程语言中数组都从0开始编号？","url":"http://jinbeen.com/2019/04/12/array/","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-076bc675dd272e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640\" alt=\"image\"></p>\n<a id=\"more\"></a>\n<h3 id=\"如何实现随机访问？\"><a href=\"#如何实现随机访问？\" class=\"headerlink\" title=\"如何实现随机访问？\"></a>如何实现随机访问？</h3><p><strong>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</strong></p>\n<p>1.第一是<strong>线性表（Linear List）。</strong><br>顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。<br><img src=\"http://upload-images.jianshu.io/upload_images/1354448-fac4ea94046a2e8c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>而与它相对立的概念是<strong>非线性表</strong>，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-c1edf8fc505e56c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>2.第二个是<strong>连续的内存空间和相同类型的数据。</strong><br>正是因为这两个限制，它才有了一个堪称“杀手锏”的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p>\n<h3 id=\"数组是如何实现根据下标随机访问数组元素的\"><a href=\"#数组是如何实现根据下标随机访问数组元素的\" class=\"headerlink\" title=\"数组是如何实现根据下标随机访问数组元素的?\"></a>数组是如何实现根据下标随机访问数组元素的?</h3><p>我们拿一个长度为 10 的 int 类型的数组 int[] a = new int[10] 来举例。在我画的这个图中，计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 base_address = 1000。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-076bc675dd272e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>我们知道，计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</p>\n<p><code>a[i]_address = base_address + i * data_type_size</code></p>\n<p>其中 data_type_size 表示数组中每个元素的大小。我们举的这个例子里，数组中存储的是 int 类型数据，所以 data_type_size 就为 4 个字节。</p>\n<blockquote>\n<ul>\n<li>这里我要特别纠正一个“错误”。我在面试的时候，常常会问数组和链表的区别，很多人都回答说，“链表适合插入、删除，时间复杂度 O(1)；数组适合查找，查找时间复杂度为 O(1)”。</li>\n<li>实际上，这种表述是不准确的。数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，<strong><em>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。</em></strong></li>\n</ul>\n</blockquote>\n<h3 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h3><h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><p>假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。那插入操作的时间复杂度是多少呢？你可以自己先试着分析一下。</p>\n<p>如果在数组的末尾插入元素，那就不需要移动数据了，这时的时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。 因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)/n=O(n)。</p>\n<p>如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p>\n<p>为了更好地理解，我们举一个例子。假设数组 a[10] 中存储了如下 5 个元素：a，b，c，d，e。</p>\n<p>我们现在需要将元素 x 插入到第 3 个位置。我们只需要将 c 放入到 a[5]，将 a[2] 赋值为 x 即可。最后，数组中的元素如下： a，b，x，d，e，c。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-4a81eac6520048ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>利用这种处理技巧，在特定场景下，在第 k 个位置插入一个元素的时间复杂度就会降为 O(1)。这个处理思想在快排中也会用到，我会在排序那一节具体来讲，这里就说到这儿。</p>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><p>跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</p>\n<p>和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。</p>\n<p>实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？</p>\n<p>我们继续来看例子。数组 a[10] 中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-4ed4d751eb76c7c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p>\n<p>如果你了解 JVM，你会发现，这不就是 JVM 标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，<strong><em>很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的。</em></strong>如果你细心留意，不管是在软件开发还是架构设计中，总能找到某些算法和数据结构的影子。</p>\n<blockquote>\n<p>JVM标记清除算法：<br>大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存活。只有当标记工作完成后，清理工作才会开始。<br>不足：1.效率问题。标记和清理效率都不高，但是当知道只有少量垃圾产生时会很高效。2.空间问题。会产生不连续的内存空间碎片。</p>\n</blockquote>\n<h3 id=\"警惕数组的访问越界问题\"><a href=\"#警惕数组的访问越界问题\" class=\"headerlink\" title=\"警惕数组的访问越界问题\"></a>警惕数组的访问越界问题</h3><p>C语言代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; i&lt;=<span class=\"number\">3</span>; i++)&#123;</div><div class=\"line\">        arr[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>问题：无限打印“hello world”</li>\n<li>原因：数组大小为 3，a[0]，a[1]，a[2]，而我们的代码因为书写错误，导致 for 循环的结束条件错写为了 i&lt;=3 而非 i&lt;3，所以当 i=3 时，数组 a[3] 访问越界。</li>\n</ul>\n<p>我们知道，在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3] 也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。</p>\n<p>数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理。因为，访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误。</p>\n<h3 id=\"容器能否完全替代数组？\"><a href=\"#容器能否完全替代数组？\" class=\"headerlink\" title=\"容器能否完全替代数组？\"></a>容器能否完全替代数组？</h3><p>我个人觉得，ArrayList 最大的优势就是可以将很多数组操作的细节封装起来。比如前面提到的数组插入、删除数据时需要搬移其他数据等。另外，它还有一个优势，就是支持动态扩容。</p>\n<p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</p>\n<p>如果使用 ArrayList，我们就完全不需要关心底层的扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。</p>\n<p>不过，这里需要注意一点，因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好在创建 ArrayList 的时候事先指定数据大小。</p>\n<p>比如我们要从数据库中取出 10000 条数据放入 ArrayList。我们看下面这几行代码，你会发现，相比之下，事先指定数据大小可以省掉很多次内存申请和数据搬移操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;User&gt; users = <span class=\"keyword\">new</span> ArrayList(<span class=\"number\">10000</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; ++i) &#123;</div><div class=\"line\">  users.add(xxx);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有些时候，用数组会更合适些，我总结了几点自己的经验。</p>\n<ul>\n<li><p>1.Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</p>\n</li>\n<li><p>2.如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</p>\n</li>\n<li><p>3.还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。比如 Object[][] array；而用容器的话则需要这样定义：ArrayList<arraylist> array。</arraylist></p>\n</li>\n</ul>\n<p>我总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</p>\n<h3 id=\"为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？\"><a href=\"#为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？\" class=\"headerlink\" title=\"为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？\"></a>为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？</h3><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。前面也讲到，如果用 a 来表示数组的首地址，a[0] 就是偏移为 0 的位置，也就是首地址，a[k] 就表示偏移 k 个 type_size 的位置，所以计算 a[k] 的内存地址只需要用这个公式：</p>\n<p><code>a[k]_address = base_address + k * type_size</code></p>\n<p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k] 的内存地址就会变为：</p>\n<p><code>a[k]_address = base_address + (k-1)*type_size</code></p>\n<p>对比两个公式，我们不难发现，从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。</p>\n<p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。</p>\n<p>不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非 0 开始不可。所以我觉得最主要的原因可能是历史原因。</p>\n<p>C 语言设计者用 0 开始计数数组下标，之后的 Java、JavaScript 等高级语言都效仿了 C 语言，或者说，为了在一定程度上减少 C 语言程序员学习 Java 的学习成本，因此继续沿用了从 0 开始计数的习惯。实际上，很多语言中数组也并不是从 0 开始计数的，比如 Matlab。甚至还有一些语言支持负数下标，比如 Python。</p>\n<h3 id=\"内容小节\"><a href=\"#内容小节\" class=\"headerlink\" title=\"内容小节\"></a>内容小节</h3><p>我们今天学习了数组。它可以说是最基础、最简单的数据结构了。数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p>\n<blockquote>\n<p>二维数组内存寻址：<br>对于m*n的数组，a[ i ][ j ](i &lt; m,j &lt; n)的地址为：<br><code>address = base_address + ( i * n + j) * type_size</code><br>另外，对于数组访问越界造成无限循环，我理解是编译器的问题，对于不同的编译器，在内存分配时，会按照内存地址递增或递减的方式进行分配。老师的程序，如果是内存地址递减的方式，就会造成无限循环。</p>\n</blockquote>\n<h3 id=\"个人小结\"><a href=\"#个人小结\" class=\"headerlink\" title=\"个人小结\"></a>个人小结</h3><p>数组用来储存相同类型的数据，且内存是连续的，线性表数据结构。<br>方便访问，但是对于删除和插入效果不好。</p>\n<p>随机寻址：<br><code>a[i]_address = base_address + i * data_type_size</code></p>\n<p>删除和插入要进行移位操作，可以优化的是，先处理完数据，最后再进行移位，和jvm垃圾回收机制类似。</p>\n<p>一般情况可以用ArrayList来替代数组，它的好处是支持动态扩容和封装了插入删除等操作，没有空间时它都会将空间自动扩容为 1.5 倍大小。</p>\n<p>至于为什么从0开始，猜想<br>一是因为C语言和很多语言都是从0开始，为了学习成本数组也从0开始。<br>二是如果从1开始，内存地址就会成为<code>a[k]_address = base_address + (k-1)*type_size</code>，则会多一次减法运算，为了CPU性能，则从0开始计数。</p>\n","categories":["数据结构与算法之美"],"tags":["数据结构与算法之美"]},{"title":"为 GitHub 项目生成独立主页","url":"http://jinbeen.com/2019/04/09/github-pages-readme/","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-b66068bcf588c88a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h4 id=\"生成主页\"><a href=\"#生成主页\" class=\"headerlink\" title=\"生成主页\"></a>生成主页</h4><p>步骤：</p>\n<ol>\n<li><p>进入项目的设置页 <code>Settings</code><br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-acb452ee6cf3f1a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Settings.png\"></p>\n</li>\n<li><p>选择 <code>GitHub Pages</code><br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-5941f6d80b024d10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"GitHub Pages.png\"></p>\n</li>\n</ol>\n<ol>\n<li><p>选择主题 <code>Change theme</code><br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-d378ddf6260eaea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Change theme.png\"></p>\n</li>\n<li><p>确定选择<br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-efbcee3c18c2c798.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Select.png\"></p>\n</li>\n</ol>\n<p>效果页面：<a href=\"https://jinbeen.com/CloudReader\">https://jinbeen.com/CloudReader</a></p>\n<h4 id=\"所遇问题\"><a href=\"#所遇问题\" class=\"headerlink\" title=\"所遇问题\"></a>所遇问题</h4><ol>\n<li><p>图片显示不出来？<br>使用<code>&lt;img /&gt;</code>标签失效，必须使用正规的引入图片的方式：<code>![]()</code><br>图片尺寸太大？ - 图片处理网站：<a href=\"https://www.fotor.com/create/design\" target=\"_blank\" rel=\"external\">https://www.fotor.com/create/design</a></p>\n</li>\n<li><p>图片链接失效？<br>注意使用正确的图片链接，之前使用的是：<br><code>https://github.com/youlookwhat/CloudReader/blob/master/file/images.png</code><br>发现这个链接是有问题的，点击<code>download</code>进去，正确的链接应该是：<br><code>https://raw.githubusercontent.com/youlookwhat/CloudReader/master/file/images.png</code></p>\n</li>\n</ol>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ul>\n<li><a href=\"https://www.jianshu.com/p/1b37016d8db6\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/1b37016d8db6</a></li>\n</ul>\n","categories":["开源项目"],"tags":["开源项目","github"]},{"title":"Mybatis 框架实战","url":"http://jinbeen.com/2019/04/03/mybatis-practice/","content":"<blockquote>\n<p>我们容易忽视慢变量，但慢变量才是牵引历史进程的火车头。 - 何帆/变量</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>Mybatis 持久层：简化工作量、灵活</li>\n<li>Spring 粘合剂：整合框架 AOP IOC DI</li>\n<li>SpringMvc 表现层：方便前后端数据的传输</li>\n</ul>\n<p>Mybatis:</p>\n<ul>\n<li>1.是对jdbc的封装，</li>\n<li>2.将sql语句放在映射文件中(xml)，</li>\n<li>3.自动将输入参数映射到sql语句的动态参数上，</li>\n<li>4.自动将sql语句执行的结果映射成java对象</li>\n</ul>\n<p>入门示例：</p>\n<h3 id=\"1-创建项目mubatis-01\"><a href=\"#1-创建项目mubatis-01\" class=\"headerlink\" title=\"1.创建项目mubatis-01\"></a>1.创建项目mubatis-01</h3><h3 id=\"2-导入jar\"><a href=\"#2-导入jar\" class=\"headerlink\" title=\"2.导入jar:\"></a>2.导入jar:</h3><ul>\n<li>mybatis-3.2.8</li>\n<li>mysql-connect</li>\n<li>log4j-1.2.17</li>\n</ul>\n<h3 id=\"3-加入配置文件\"><a href=\"#3-加入配置文件\" class=\"headerlink\" title=\"3.加入配置文件\"></a>3.加入配置文件</h3><p>(1)db.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.driver=com.mysql.cj.jdbc.Driver</div><div class=\"line\">jdbc.url = jdbc:mysql:<span class=\"comment\">//localhost:3306/mysql_0219</span></div><div class=\"line\">jdbc.username = root</div><div class=\"line\">jdbc.password = <span class=\"number\">123456</span></div></pre></td></tr></table></figure>\n<p>(2)log4j.properties<br><a href=\"https://blog.csdn.net/sinat_30185177/article/details/73550377\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/sinat_30185177/article/details/73550377</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">log4j.rootLogger=DEBUG,A1</div><div class=\"line\">log4j.logger.org.mybatis=DEBUG</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>(3) mybatis核心配置文件：mybatis-config.xml</p>\n<p>(4) BlogMapper.xml</p>\n<p>包:com.jingbin.mybatis.mapper</p>\n<h3 id=\"4-编写接口：BlogMapper\"><a href=\"#4-编写接口：BlogMapper\" class=\"headerlink\" title=\"4.编写接口：BlogMapper\"></a>4.编写接口：BlogMapper</h3><h3 id=\"5-创建pojo：Blog\"><a href=\"#5-创建pojo：Blog\" class=\"headerlink\" title=\"5.创建pojo：Blog\"></a>5.创建pojo：Blog</h3><h3 id=\"6-创建工具类：MyBatisUtil\"><a href=\"#6-创建工具类：MyBatisUtil\" class=\"headerlink\" title=\"6.创建工具类：MyBatisUtil\"></a>6.创建工具类：MyBatisUtil</h3><h3 id=\"7-编写测试类：\"><a href=\"#7-编写测试类：\" class=\"headerlink\" title=\"7.编写测试类：\"></a>7.编写测试类：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">testSelectBlog</div><div class=\"line\">发现要连接数据库，学习mysql内容</div><div class=\"line\">学习配置好了后：运行报错：Invalid bound statement (not found): mapper.BlogMapper.selectBlog</div><div class=\"line\">解决：https://www.cnblogs.com/cailijuan/p/9505244.html</div><div class=\"line\">1)使用创建接口的方式</div><div class=\"line\">2)不是用接口的方式</div></pre></td></tr></table></figure>\n<h3 id=\"8-列名和属性名不一致的情况\"><a href=\"#8-列名和属性名不一致的情况\" class=\"headerlink\" title=\"8.列名和属性名不一致的情况\"></a>8.列名和属性名不一致的情况</h3><p>数据库里的列名为author_id,属性名为authorId。在BlogMapper.xml里：</p>\n<p>1.使用别名</p>\n<p><code>select author_id as authorId from Blog where id=#{id}</code></p>\n<p>2.使用 resultMap</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resultMap type=\"Blog\" id=\"blogResultMap\"&gt;</div><div class=\"line\">\t\t&lt;id column=\"id\" property=\"id\" jdbcType=\"INTEGER\"/&gt;</div><div class=\"line\">      &lt;result column=\"author_id\" property=\"authorId\" jdbcType=\"INTEGER\"/&gt;</div><div class=\"line\">&lt;/resultMap&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;select id=\"selectBlog\" parameterType=\"Integer\" resultMap=\"blogResultMap\"&gt;</div><div class=\"line\">       select * from blog where id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"9-模糊查询之-和-的区别\"><a href=\"#9-模糊查询之-和-的区别\" class=\"headerlink\" title=\"9.模糊查询之#和$的区别\"></a>9.模糊查询之<code>#</code>和<code>$</code>的区别</h3><p>模糊查询：根据博客名字查询博客列表</p>\n<p>1)使用<code>#</code>传参<br>2)使用<code>$</code>传参</p>\n<p><code>#</code>是占位符？，<code>$</code>是字符串拼接。</p>\n<p>mybatis定义：</p>\n<ul>\n<li>使用<code>$</code>。如果参数是单指类型(简单类型)，并且只有一个参数，则花括号里只能写value占位。</li>\n<li>使用<code>$</code>可以直接将<code>%</code>写里面，可能有sql注入的风险，建议最好使用<code>#</code>。参数是字符串要使用 ‘’</li>\n<li>当参数表示表名或列名的时候，只能使用<code>$</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 使用 $ 不区分大小写的查询 lower--&gt;</div><div class=\"line\">    &lt;select id=<span class=\"string\">\"selectBlogByTitle2\"</span> parameterType=<span class=\"string\">\"string\"</span> resultType=<span class=\"string\">\"Blog\"</span>&gt;</div><div class=\"line\">            select * <span class=\"function\">from blog where <span class=\"title\">lower</span><span class=\"params\">(title)</span> like <span class=\"title\">lower</span><span class=\"params\">(<span class=\"string\">'%$&#123;value&#125;%'</span>)</span></span></div><div class=\"line\">    &lt;/select&gt;</div><div class=\"line\">&lt;/mapper&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"10-查询排序\"><a href=\"#10-查询排序\" class=\"headerlink\" title=\"10.查询排序\"></a>10.查询排序</h3><p>需求：按照某一列排序</p>\n<p>select * from blog order by CONVERT(${value} USING gbk)</p>\n<p>gbk:输入中文时排序成功，否则会失败。且使用gbk规避魅族(gb2313)不排序问题。</p>\n<h3 id=\"11-分页-多参数传递\"><a href=\"#11-分页-多参数传递\" class=\"headerlink\" title=\"11.分页-多参数传递\"></a>11.分页-多参数传递</h3><p>需求：查询分页数据</p>\n<ul>\n<li>1）使用索引</li>\n</ul>\n<p>按照参数的顺序，从0开始</p>\n<p>select * from blog limit #{0}, #{1}</p>\n<ul>\n<li>2）使用注解</li>\n</ul>\n<p>注解的value值要和mapper的占位参数一致。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">select * from blog limit #&#123;offset&#125;, #&#123;pageSize&#125;</div><div class=\"line\">List&lt;Blog&gt; selectBlogByPage2(@Param(value = \"offset\") int offset, @Param(value = \"pageSize\") int pageSize);</div></pre></td></tr></table></figure>\n<ul>\n<li>3）使用map(常用)</li>\n</ul>\n<p>注意：mapper中的参数占位符要和测试中的map的key一一对应</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">select * from blog limit #&#123;offset&#125;, #&#123;pageSize&#125;</div><div class=\"line\">// 测试</div><div class=\"line\">SqlSession session = MyBatisUtil.getSqlSession();</div><div class=\"line\">BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class=\"line\">Map&lt;String, Object&gt; objectMap = new HashMap&lt;&gt;();</div><div class=\"line\">objectMap.put(\"offset\", 0);</div><div class=\"line\">objectMap.put(\"pageSize\", 2);</div><div class=\"line\">List&lt;Blog&gt; blogList = blogMapper.selectBlogByPage3(objectMap);</div></pre></td></tr></table></figure>\n<h3 id=\"12-插入功能和获取刚刚插入的id\"><a href=\"#12-插入功能和获取刚刚插入的id\" class=\"headerlink\" title=\"12.插入功能和获取刚刚插入的id\"></a>12.插入功能和获取刚刚插入的id</h3><ul>\n<li>1)插入记录</li>\n</ul>\n<p>需求：新增一个博客记录</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=\"insertBlog\" parameterType=\"Blog\"&gt;</div><div class=\"line\">        insert into `blog`(</div><div class=\"line\">          `name`,</div><div class=\"line\">          `age`,</div><div class=\"line\">          `title`,</div><div class=\"line\">          `author_id`,</div><div class=\"line\">          `featured`</div><div class=\"line\">        ) values (</div><div class=\"line\">          #&#123;name&#125;,</div><div class=\"line\">          #&#123;age&#125;,</div><div class=\"line\">          #&#123;title&#125;,</div><div class=\"line\">          #&#123;author_id&#125;,</div><div class=\"line\">          #&#123;featured&#125;</div><div class=\"line\">        )</div><div class=\"line\">    &lt;/insert&gt;</div><div class=\"line\">    </div><div class=\"line\">// 提交</div><div class=\"line\">session.commit();</div></pre></td></tr></table></figure>\n<ul>\n<li>2）获取自增id<br>方式1：在mapper中配置<code>insert</code>节点的属性 <code>useGeneratedKeys</code>和<code>keyProperty</code>节点<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=<span class=\"string\">\"insertBlog\"</span> parameterType=<span class=\"string\">\"Blog\"</span> useGeneratedKeys=<span class=\"string\">\"true\"</span> keyProperty=<span class=\"string\">\"id\"</span>/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>方式2：在全局配置文件中配置setting<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--定义数据库链接配置--&gt;</div><div class=\"line\">    &lt;properties resource=\"db.properties\"/&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;!--具体的insert也得配置 keyProperty节点--&gt;</div><div class=\"line\">    &lt;settings&gt;</div><div class=\"line\">        &lt;setting name=\"useGeneratedKeys\" value=\"true\"/&gt;</div><div class=\"line\">    &lt;/settings&gt;</div></pre></td></tr></table></figure></p>\n<p>方式3：适用于没有自增主键的数据库</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=\"insertBlogOracle\" parameterType=\"Blog\"&gt;</div><div class=\"line\">        &lt;selectKey resultType=\"java.lang.Integer\" order=\"BEFORE\" keyProperty=\"id\"&gt;</div><div class=\"line\">            select seq.nextval as id from dual</div><div class=\"line\">        &lt;/selectKey&gt;</div><div class=\"line\">        insert into `blog`(</div><div class=\"line\">          `name`,</div><div class=\"line\">          `age`,</div><div class=\"line\">          `title`,</div><div class=\"line\">          `author_id`,</div><div class=\"line\">          `featured`</div><div class=\"line\">        ) values (</div><div class=\"line\">          #&#123;name&#125;,</div><div class=\"line\">          #&#123;age&#125;,</div><div class=\"line\">          #&#123;title&#125;,</div><div class=\"line\">          #&#123;author_id&#125;,</div><div class=\"line\">          #&#123;featured&#125;</div><div class=\"line\">        )</div><div class=\"line\">    &lt;/insert&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;insert id=\"insertBlogMysql\" parameterType=\"Blog\"&gt;</div><div class=\"line\">        &lt;selectKey resultType=\"java.lang.Integer\" order=\"AFTER\" keyProperty=\"id\"&gt;</div><div class=\"line\">            SELECT LAST_INSERT_ID()</div><div class=\"line\">        &lt;/selectKey&gt;</div><div class=\"line\"></div><div class=\"line\">        insert into `blog`(</div><div class=\"line\">        `name`,</div><div class=\"line\">        `age`,</div><div class=\"line\">        `title`,</div><div class=\"line\">        `author_id`,</div><div class=\"line\">        `featured`</div><div class=\"line\">        ) values (</div><div class=\"line\">        #&#123;name&#125;,</div><div class=\"line\">        #&#123;age&#125;,</div><div class=\"line\">        #&#123;title&#125;,</div><div class=\"line\">        #&#123;author_id&#125;,</div><div class=\"line\">        #&#123;featured&#125;</div><div class=\"line\">        )</div><div class=\"line\">    &lt;/insert&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"13-修改功能和修改部分字段注意的问题\"><a href=\"#13-修改功能和修改部分字段注意的问题\" class=\"headerlink\" title=\"13.修改功能和修改部分字段注意的问题\"></a>13.修改功能和修改部分字段注意的问题</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;update id=\"updateBlog\" parameterType=\"Blog\"&gt;</div><div class=\"line\">        update `blog`</div><div class=\"line\">        set</div><div class=\"line\">        `name` = #&#123;name&#125;,</div><div class=\"line\">        `age` = #&#123;age&#125;,</div><div class=\"line\">        `title` = #&#123;title&#125;,</div><div class=\"line\">        `author_id` = #&#123;author_id&#125;,</div><div class=\"line\">        `featured` = #&#123;featured&#125;</div><div class=\"line\">        where</div><div class=\"line\">        `id` = #&#123;id&#125;</div><div class=\"line\">    &lt;/update&gt;</div></pre></td></tr></table></figure>\n<p>注意：如果没有为对象设置所有的要修改的属性，那么未设置的属性会用成员变量的默认值填充。<br>解决：<br>方式1：数据库查一遍，再返回的数据修改。缺点：又执行了一遍数据库操作<br>方式2：查询语句里增加if else。</p>\n<h3 id=\"14-删除记录\"><a href=\"#14-删除记录\" class=\"headerlink\" title=\"14.删除记录\"></a>14.删除记录</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;delete id=\"deleteBlogById\"&gt;</div><div class=\"line\">  delete from blog where id=#&#123;id&#125;</div><div class=\"line\">&lt;/delete&gt;</div></pre></td></tr></table></figure>\n<p>动态sql<br>批量删除：使用动态sql实现<br>if、[choose、when、otherwise]、where、set、trim、foreach、sql片段</p>\n<h3 id=\"15-if\"><a href=\"#15-if\" class=\"headerlink\" title=\"15.if\"></a>15.if</h3><p>需求：</p>\n<ul>\n<li>1.查询已激活的并且博客的名字是包含某个查询字符串的记录</li>\n<li>2.如果用户没有输入任何查询字符串，那么就显示所有已激活的记录</li>\n</ul>\n<p>// 如果用户输入了查询字符串<br>select * from blog<br>where state = ‘ACTIVE’<br>and title like  ‘%o%’</p>\n<p>// 用户没有输入查询字符串<br>select * from blog<br>where state = ‘ACTIVE’</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">select * from blog</div><div class=\"line\">where state = 'ACTIVE' </div><div class=\"line\">&lt;if test=\"value != null and value!=''\"&gt;</div><div class=\"line\">   and title like value[%%] 具体见代码</div><div class=\"line\">&lt;/if&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"16-choose、when、otherwise\"><a href=\"#16-choose、when、otherwise\" class=\"headerlink\" title=\"16.choose、when、otherwise\"></a>16.choose、when、otherwise</h3><p>需求：</p>\n<ul>\n<li>1、查询已激活的</li>\n<li>2、如果用户输入了标题的查询关键字，则根据关键字查询</li>\n<li>3、否则根据blog风格样式查询</li>\n<li>4、如果什么都没有输入，则显示推荐的博客</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"selectActiveBlogByTitleOrStyle\" parameterType=\"Blog\" resultType=\"Blog\"&gt;</div><div class=\"line\">    select * from blog</div><div class=\"line\">    where state = 'ACTIVE'</div><div class=\"line\">    &lt;choose&gt;</div><div class=\"line\">        &lt;when test=\"title != null and title!=''\"&gt;and lower(title) like lower(#&#123;title&#125;)&lt;/when&gt;</div><div class=\"line\">        &lt;when test=\"style != null and style!=''\"&gt;and style = #&#123;style&#125;&lt;/when&gt;</div><div class=\"line\">        &lt;otherwise&gt; and featured = true&lt;/otherwise&gt;</div><div class=\"line\">    &lt;/choose&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"17-where\"><a href=\"#17-where\" class=\"headerlink\" title=\"17.where\"></a>17.where</h3><p>需求：多条件查询，根据状态，标题，是否被推荐<br>自动修补查询条件，查询语句中的where关键字使用<where>标签替代，不能省略 and or 关键字</where></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"selectBlogByCondition\" parameterType=\"Blog\" resultType=\"Blog\"&gt;</div><div class=\"line\">    select * from blog</div><div class=\"line\">    &lt;where&gt;</div><div class=\"line\">        &lt;if test=\"state != null and state!=''\"&gt;</div><div class=\"line\">            state = #&#123;state&#125;</div><div class=\"line\">        &lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"title != null and title!=''\"&gt;</div><div class=\"line\">            and lower(title) like lower(#&#123;title&#125;)</div><div class=\"line\">        &lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"featured != null\"&gt;</div><div class=\"line\">            and featured = #&#123;featured&#125;</div><div class=\"line\">        &lt;/if&gt;</div><div class=\"line\">    &lt;/where&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"18-set\"><a href=\"#18-set\" class=\"headerlink\" title=\"18.set\"></a>18.set</h3><p>需求：按需修改，修改执行的列，未指定的不修改<br>set 会自动去掉if语句后面的逗号</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;update id=\"updateBlogByCondition\" parameterType=\"Blog\"&gt;</div><div class=\"line\">    update `blog`</div><div class=\"line\">    &lt;set&gt;</div><div class=\"line\">        &lt;if test=\"name != null\"&gt;`name` = #&#123;name&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"age != null\"&gt;`age` = #&#123;age&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"title != null\"&gt;`title` = #&#123;title&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"author_id != null\"&gt;`author_id` = #&#123;author_id&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"featured != null\"&gt;`featured` = #&#123;featured&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"state != null\"&gt;`state` = #&#123;state&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"style != null\"&gt;`style` = #&#123;state&#125;,&lt;/if&gt;</div><div class=\"line\">    &lt;/set&gt;</div><div class=\"line\">    where `id` = #&#123;id&#125;</div><div class=\"line\">&lt;/update&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"19-trim\"><a href=\"#19-trim\" class=\"headerlink\" title=\"19.trim\"></a>19.trim</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"selectBlogByConditionTrim\" parameterType=\"Blog\" resultType=\"Blog\"&gt;</div><div class=\"line\">    select * from blog</div><div class=\"line\">    -- prefixOverrides 去掉前面的 and 或 or</div><div class=\"line\">    &lt;trim prefix=\"where\" prefixOverrides=\"and | or\"&gt;</div><div class=\"line\">        &lt;if test=\"state != null and state!=''\"&gt;</div><div class=\"line\">            state = #&#123;state&#125;</div><div class=\"line\">        &lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"title != null and title!=''\"&gt;</div><div class=\"line\">            and lower(title) like lower(#&#123;title&#125;)</div><div class=\"line\">        &lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"featured != null\"&gt;</div><div class=\"line\">            and featured = #&#123;featured&#125;</div><div class=\"line\">        &lt;/if&gt;</div><div class=\"line\">    &lt;/trim&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;update id=\"updateBlogByConditionTrim\" parameterType=\"Blog\"&gt;</div><div class=\"line\">    update `blog`</div><div class=\"line\">    -- suffixOverrides 去掉后面的 ,</div><div class=\"line\">    &lt;trim prefix=\"set\" suffixOverrides=\",\"&gt;</div><div class=\"line\">        &lt;if test=\"name != null\"&gt;`name` = #&#123;name&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"age != null\"&gt;`age` = #&#123;age&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"title != null\"&gt;`title` = #&#123;title&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"author_id != null\"&gt;`author_id` = #&#123;author_id&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"featured != null\"&gt;`featured` = #&#123;featured&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"state != null\"&gt;`state` = #&#123;state&#125;,&lt;/if&gt;</div><div class=\"line\">        &lt;if test=\"style != null\"&gt;`style` = #&#123;state&#125;,&lt;/if&gt;</div><div class=\"line\">    &lt;/trim&gt;</div><div class=\"line\">    where `id` = #&#123;id&#125;</div><div class=\"line\">&lt;/update&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"20-foreach\"><a href=\"#20-foreach\" class=\"headerlink\" title=\"20.foreach\"></a>20.foreach</h3><p>需求：批量删除</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;!-- parameterType 与 collection 一致--&gt;</div><div class=\"line\">&lt;delete id=\"deleteBlogList\" parameterType=\"list\"&gt;</div><div class=\"line\">    delete from blog where id in</div><div class=\"line\">    &lt;foreach collection=\"list\" item=\"item\" open=\"(\" close=\")\" separator=\",\"&gt;</div><div class=\"line\">        #&#123;item&#125;</div><div class=\"line\">    &lt;/foreach&gt;</div><div class=\"line\">&lt;/delete&gt;</div><div class=\"line\"></div><div class=\"line\">@Test</div><div class=\"line\">public void testDeleteBlogList() &#123;</div><div class=\"line\">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class=\"line\">    List&lt;Integer&gt; asList = Arrays.asList(1, 2);</div><div class=\"line\">    int count = blogMapper.deleteBlogList(asList);</div><div class=\"line\">    // 提交</div><div class=\"line\">    session.commit();</div><div class=\"line\">    session.close();</div><div class=\"line\">    System.out.println(\"更新了\" + count + \"条记录\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"21-sql片段\"><a href=\"#21-sql片段\" class=\"headerlink\" title=\"21.sql片段\"></a>21.sql片段</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--sql片段--&gt;</div><div class=\"line\">&lt;sql id=\"columnBase\"&gt;</div><div class=\"line\">      `id`,</div><div class=\"line\">      `name`,</div><div class=\"line\">      `age`,</div><div class=\"line\">      `title`,</div><div class=\"line\">      `author_id`,</div><div class=\"line\">      `featured`,</div><div class=\"line\">      `state`,</div><div class=\"line\">      `style`</div><div class=\"line\">&lt;/sql&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--通过id查询博客--&gt;</div><div class=\"line\">&lt;select id=\"selectBlog\" parameterType=\"Integer\" resultType=\"Blog\"&gt;</div><div class=\"line\">    select</div><div class=\"line\">    &lt;include refid=\"columnBase\"/&gt;</div><div class=\"line\">    from blog where id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"22-23-逆向功工程-代码的生成\"><a href=\"#22-23-逆向功工程-代码的生成\" class=\"headerlink\" title=\"22 23.逆向功工程-代码的生成\"></a>22 23.逆向功工程-代码的生成</h3><p>使用 Mybatis 官方工具直接生成对应的mapper文件<br>全部生成 - 无实际意义，具体项目中不适用</p>\n<h3 id=\"24-缓存-mybatis的一级缓存\"><a href=\"#24-缓存-mybatis的一级缓存\" class=\"headerlink\" title=\"24.缓存 - mybatis的一级缓存\"></a>24.缓存 - mybatis的一级缓存</h3><p>一级缓存：<br>是session级别的缓存，一级缓存默认存在。<br>当在同一个session范围内执行查询的时候，如果执行相同的查询，那么第二次查询会从缓存中获取数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * mybatis的一级缓存</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogCacheOne1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class=\"line\"></div><div class=\"line\">    Blog blog1 = blogMapper.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span> + blog1);</div><div class=\"line\">    Blog blog2 = blogMapper.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询：从缓存中获取数据\"</span> + blog2);</div><div class=\"line\"></div><div class=\"line\">    session.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"session关闭\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"25-缓存-一级缓存被刷新的情况\"><a href=\"#25-缓存-一级缓存被刷新的情况\" class=\"headerlink\" title=\"25.缓存 - 一级缓存被刷新的情况\"></a>25.缓存 - 一级缓存被刷新的情况</h3><p>如果两次查询中间有增删改操作，sql session缓存区会被自动清空，说明下一次查询会重新执行sql语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * mybatis的一级缓存,中间有增删改会刷新</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogCacheOne2</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</div><div class=\"line\"></div><div class=\"line\">    Blog blog1 = blogMapper.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span> + blog1);</div><div class=\"line\">    blog1.setFeatured(<span class=\"keyword\">true</span>);</div><div class=\"line\">    blogMapper.updateBlog(blog1);</div><div class=\"line\"></div><div class=\"line\">    Blog blog2 = blogMapper.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询：从新执行查询\"</span> + blog2);</div><div class=\"line\"></div><div class=\"line\">    session.commit();</div><div class=\"line\">    session.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"session关闭\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"26-缓存-开启二级缓存\"><a href=\"#26-缓存-开启二级缓存\" class=\"headerlink\" title=\"26.缓存 - 开启二级缓存\"></a>26.缓存 - 开启二级缓存</h3><p><strong>默认不开启</strong>。如果在不同的session范围内执行相同的数据查询，那么每次查询将会执行独立的数据库检索过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * mybatis的二级缓存</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogCacheLevelTwo1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    Blog blog1 = blogMapper1.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span> + blog1);</div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class=\"line\">    Blog blog2 = blogMapper2.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询：从缓存中获取数据\"</span> + blog2);</div><div class=\"line\">    session2.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"session关闭\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>开启二级缓存<br>1.在mapper文件中设置  <cache><br>2.在实体类中实现序列化接口</cache></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * mybatis的二级缓存</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogCacheLevelTwo1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    Blog blog1 = blogMapper1.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span> + blog1);</div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Cache Hit Ratio [mapper.BlogMapper]: 0.5</span></div><div class=\"line\">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class=\"line\">    Blog blog2 = blogMapper2.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询：从缓存中获取数据\"</span> + blog2);</div><div class=\"line\">    session2.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"session关闭\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"27-缓存-二级缓存被刷新的情况\"><a href=\"#27-缓存-二级缓存被刷新的情况\" class=\"headerlink\" title=\"27.缓存 - 二级缓存被刷新的情况\"></a>27.缓存 - 二级缓存被刷新的情况</h3><p>和一级缓存相同，中间有增删改则二级缓存会被清空</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * mybatis的二级缓存 缓存被刷新</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogCacheLevelTwo2</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    Blog blog1 = blogMapper1.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    blog1.setFeatured(<span class=\"keyword\">true</span>);</div><div class=\"line\">    blogMapper1.updateBlog(blog1);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span> + blog1);</div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    SqlSession session2 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper2 = session2.getMapper(BlogMapper.class);</div><div class=\"line\">    Blog blog2 = blogMapper2.selectBlog(<span class=\"number\">3</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"缓存被刷新，重新查询\"</span> + blog2);</div><div class=\"line\">    session2.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"session关闭\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"28-嵌套查询-一对一和多对一\"><a href=\"#28-嵌套查询-一对一和多对一\" class=\"headerlink\" title=\"28.嵌套查询 - 一对一和多对一\"></a>28.嵌套查询 - 一对一和多对一</h3><p>高级结果映射<br>一、关联映射(适用于一对一和多对一的情况)</p>\n<p>1).创建pojo<br>(1)在Blog中创建Author对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Author author;</div></pre></td></tr></table></figure>\n<p>(2)创建Author的pojo</p>\n<p>2).配置mapper</p>\n<p>BlogMapper.java</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resultMap type=\"Blog\" id=\"blogResultMap\"&gt;</div><div class=\"line\">    &lt;id column=\"id\" property=\"id\" jdbcType=\"INTEGER\"&gt;&lt;/id&gt;</div><div class=\"line\">    &lt;association property=\"author\" column=\"author_id\" javaType=\"Author\"</div><div class=\"line\">                 select=\"me.jing.mapper.AuthorMapper.selectAuthorById\"&gt;</div><div class=\"line\">    &lt;/association&gt;</div><div class=\"line\">&lt;/resultMap&gt;</div><div class=\"line\">&lt;select id=\"selectBlogById\" parameterType=\"int\" resultMap=\"blogResultMap\"&gt;</div><div class=\"line\">    select * from blog where id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>AuthorMapper.java</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resultMap type=\"Author\" id=\"authorResultMap\"&gt;</div><div class=\"line\">    &lt;id column=\"id\" property=\"id\" jdbcType=\"INTEGER\"/&gt;</div><div class=\"line\">    &lt;result column=\"favourite_section\" property=\"favouriteSection\" jdbcType=\"VARCHAR\"/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/resultMap&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;select id=\"selectAuthorById\" parameterType=\"int\" resultMap=\"authorResultMap\"&gt;</div><div class=\"line\">  select * from author where id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>3) 接口</p>\n<p>(1) Blog</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Blog <span class=\"title\">selectBlogById</span><span class=\"params\">(Integer id)</span></span>;</div></pre></td></tr></table></figure>\n<p>(2) Author</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Author <span class=\"title\">selectAuthorById</span><span class=\"params\">(Integer id)</span></span>;</div></pre></td></tr></table></figure>\n<p>4) 测试</p>\n<p>查询Blog列表时，执行的sql语句是 1+n，但是如果blog关联的author有重复的数据，那么从一级缓存中查询。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * 通过id查具体的博客，查询时 再拿到作者id 去作者表查具体的作者信息</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    Blog blog = blogMapper1.selectBlogById(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span> + blog);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"29-嵌套查询-显示信息列表\"><a href=\"#29-嵌套查询-显示信息列表\" class=\"headerlink\" title=\"29.嵌套查询 - 显示信息列表\"></a>29.嵌套查询 - 显示信息列表</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=\"selectBlogList\" resultMap=\"blogResultMap\"&gt;</div><div class=\"line\">    select * from blog</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\"></div><div class=\"line\">List&lt;Blog&gt; selectBlogList();</div><div class=\"line\"></div><div class=\"line\">@Test</div><div class=\"line\">public void testSelectBlogList() &#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    List&lt;Blog&gt; blogs = blogMapper1.selectBlogList();</div><div class=\"line\"></div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"结果已查询\" + blogs);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"30-嵌套查询-一对多的配置-31-嵌套查询-一对多的查询配置\"><a href=\"#30-嵌套查询-一对多的配置-31-嵌套查询-一对多的查询配置\" class=\"headerlink\" title=\"30.嵌套查询-一对多的配置 31.嵌套查询-一对多的查询配置\"></a>30.嵌套查询-一对多的配置 31.嵌套查询-一对多的查询配置</h3><p>执行流程：1.先执行单表查询，2.再利用单表查询的结果继续执行其他单表查询，3.最后组装结果映射。</p>\n<p>通过post的id 查询post表的内容，同时通过此id查询评论表 comment 里的数据列表,即这篇文章的评论列表</p>\n<p>sql:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">create table <span class=\"title\">post</span><span class=\"params\">(id <span class=\"keyword\">int</span>,blog_id <span class=\"keyword\">int</span>,author_id <span class=\"keyword\">int</span>,</span></span></div><div class=\"line\">section varchar(<span class=\"number\">20</span>),subject <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">20</span>)</span>,draft <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">20</span>)</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">insert into <span class=\"title\">post</span><span class=\"params\">(id,blog_id,author_id,section,subject,draft)</span> </span></div><div class=\"line\"><span class=\"title\">values</span><span class=\"params\">(<span class=\"string\">'1'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'15'</span>,<span class=\"string\">'section'</span>,<span class=\"string\">'subject'</span>,<span class=\"string\">'draft'</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">create table <span class=\"title\">comment</span><span class=\"params\">(id <span class=\"keyword\">int</span>,</span></span></div><div class=\"line\">name varchar(<span class=\"number\">20</span>),comment <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">20</span>)</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">insert into <span class=\"title\">comment</span><span class=\"params\">(id,name,comment,post_id)</span> </span></div><div class=\"line\"><span class=\"title\">values</span><span class=\"params\">(<span class=\"string\">'1'</span>,<span class=\"string\">'评论name'</span>,<span class=\"string\">'我觉得很棒 评论'</span>,<span class=\"string\">'1'</span>)</span>;</div></pre></td></tr></table></figure>\n<p>PostMapper.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resultMap type=\"Post\" id=\"postResultMap\"&gt;</div><div class=\"line\">    &lt;id column=\"id\" property=\"id\" jdbcType=\"INTEGER\"&gt;&lt;/id&gt;</div><div class=\"line\">    &lt;collection property=\"commentList\" column=\"id\" javaType=\"ArrayList\" ofType=\"Comment\"</div><div class=\"line\">                select=\"me.jing.mapper.CommentMapper.selectCommentListByPostId\"&gt;&lt;/collection&gt;</div><div class=\"line\">&lt;/resultMap&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;select id=\"selectPostById\" parameterType=\"int\" resultMap=\"postResultMap\"&gt;</div><div class=\"line\">    select * from post where id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>CommentMapper.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resultMap type=\"Comment\" id=\"commentResultMap\"&gt;</div><div class=\"line\">    &lt;id column=\"id\" property=\"id\" jdbcType=\"INTEGER\"&gt;&lt;/id&gt;</div><div class=\"line\">&lt;/resultMap&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--通过post_id查询评论列表--&gt;</div><div class=\"line\">&lt;select id=\"selectCommentListByPostId\"  parameterType=\"int\" resultMap=\"commentResultMap\"&gt;</div><div class=\"line\">    select * from comment where post_id = #&#123;postId&#125;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;select id=\"selectCommentById\" parameterType=\"int\" resultMap=\"commentResultMap\"&gt;</div><div class=\"line\">    select * from comment where id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * 通过post的id 查询post表的内容，</div><div class=\"line\"> * 同时通过此id查询评论表 comment 里的数据列表,即这篇文章的评论列表</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectPostById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    PostMapper mapper = session1.getMapper(PostMapper.class);</div><div class=\"line\">    Post post = mapper.selectPostById(<span class=\"number\">1</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span> + post);</div><div class=\"line\">    session1.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"32-高级结果映射-嵌套结果\"><a href=\"#32-高级结果映射-嵌套结果\" class=\"headerlink\" title=\"32.高级结果映射-嵌套结果\"></a>32.高级结果映射-嵌套结果</h3><p>1).先执行关联查询，一次性将所有数据都查询出来<br>2).再将所有查询出来的列组织成嵌套的结果对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM</div><div class=\"line\">blog b</div><div class=\"line\">LEFT JOIN author a</div><div class=\"line\">ON b.author_id = a.id;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\"> b.id as blog_id,</div><div class=\"line\"> b.title as blog_title,</div><div class=\"line\"> b.author_id as blog_author_id,</div><div class=\"line\"> b.state as blog_state,</div><div class=\"line\"> b.featured as blog_featured,</div><div class=\"line\"> b.style as blog_style,</div><div class=\"line\"> </div><div class=\"line\"> a.id as author_id,</div><div class=\"line\"> a.username as author_username,</div><div class=\"line\"> a.password as author_password,</div><div class=\"line\"> a.email as author_email</div><div class=\"line\"> </div><div class=\"line\">FROM blog b</div><div class=\"line\">LEFT JOIN author a</div><div class=\"line\">ON b.author_id = a.id;</div></pre></td></tr></table></figure>\n<p>BlogMapper.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resultMap id=\"blogResultMapNested\" type=\"Blog\"&gt;</div><div class=\"line\">    &lt;id column=\"blog_id\" property=\"id\"/&gt;</div><div class=\"line\">    &lt;result column=\"blog_title\" property=\"title\"/&gt;</div><div class=\"line\">    &lt;result column=\"blog_state\" property=\"state\"/&gt;</div><div class=\"line\">    &lt;result column=\"blog_featured\" property=\"featured\"/&gt;</div><div class=\"line\">    &lt;result column=\"blog_style\" property=\"style\"/&gt;</div><div class=\"line\">    &lt;!--&lt;result column=\"blog_author_id\" property=\"author_id\"/&gt;--&gt;</div><div class=\"line\">    &lt;association property=\"author\" column=\"blog_author_id\" javaType=\"Author\"&gt;</div><div class=\"line\">        &lt;id column=\"author_id\" property=\"id\"/&gt;</div><div class=\"line\">        &lt;result column=\"author_username\" property=\"username\"/&gt;</div><div class=\"line\">        &lt;result column=\"author_password\" property=\"password\"/&gt;</div><div class=\"line\">        &lt;result column=\"author_email\" property=\"email\"/&gt;</div><div class=\"line\">    &lt;/association&gt;</div><div class=\"line\">&lt;/resultMap&gt;</div><div class=\"line\">&lt;!--32.高级结果映射-嵌套结果--&gt;</div><div class=\"line\">&lt;select id=\"selectBlogListNested\" resultMap=\"blogResultMapNested\"&gt;</div><div class=\"line\">    SELECT</div><div class=\"line\">     b.id as blog_id,</div><div class=\"line\">     b.title as blog_title,</div><div class=\"line\">     b.author_id as blog_author_id,</div><div class=\"line\">     b.state as blog_state,</div><div class=\"line\">     b.featured as blog_featured,</div><div class=\"line\">     b.style as blog_style,</div><div class=\"line\"></div><div class=\"line\">     a.id as author_id,</div><div class=\"line\">     a.username as author_username,</div><div class=\"line\">     a.password as author_password</div><div class=\"line\"></div><div class=\"line\">    FROM blog b</div><div class=\"line\">    LEFT JOIN author a</div><div class=\"line\">    ON b.author_id = a.id;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 嵌套查询</div><div class=\"line\"> */</div><div class=\"line\">List&lt;Blog&gt; selectBlogListNested();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 嵌套查询</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testSelectBlogListNested() &#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    List&lt;Blog&gt; blogs = blogMapper1.selectBlogListNested();</div><div class=\"line\">    session1.close();</div><div class=\"line\">    System.out.println(\"结果已查询2:\" + blogs);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"33-为什么要做扩展结果集-34-扩展结果的实现\"><a href=\"#33-为什么要做扩展结果集-34-扩展结果的实现\" class=\"headerlink\" title=\"33.为什么要做扩展结果集|34.扩展结果的实现\"></a>33.为什么要做扩展结果集|34.扩展结果的实现</h3><p>1).mapper</p>\n<p>BlogCustomMapper.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;sql id=\"baseColumn\"&gt;</div><div class=\"line\">    b.id,</div><div class=\"line\">    b.`title`,</div><div class=\"line\">    b.`author_id`,</div><div class=\"line\">    b.`state`,</div><div class=\"line\">    b.`featured`,</div><div class=\"line\">    b.`style`,</div><div class=\"line\">    a.username as authorUsername</div><div class=\"line\">&lt;/sql&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;select id=\"selectBlogById\" parameterType=\"int\" resultType=\"BlogCustom\"&gt;</div><div class=\"line\">    select</div><div class=\"line\">    &lt;include refid=\"baseColumn\"/&gt;</div><div class=\"line\">    from blog b</div><div class=\"line\">    left join author a</div><div class=\"line\">    on b.author_id = a.id</div><div class=\"line\">    where b.id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>BlogCustomMapper.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BlogCustomMapper</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">BlogCustom <span class=\"title\">selectBlogById</span><span class=\"params\">(Integer id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2)vo.BlogCustom.java</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 扩展Blog</div><div class=\"line\"> */</div><div class=\"line\">public class BlogCustom extends Blog &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final long serialVersionUID = 1L;</div><div class=\"line\">    private String authorUsername;</div><div class=\"line\"></div><div class=\"line\">    public String getAuthorUsername() &#123;</div><div class=\"line\">        return authorUsername;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setAuthorUsername(String authorUsername) &#123;</div><div class=\"line\">        this.authorUsername = authorUsername;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return \"BlogCustom&#123;\" +</div><div class=\"line\">                \"authorUsername='\" + authorUsername + '\\'' +</div><div class=\"line\">                '&#125;';</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;!--定义别名--&gt;</div><div class=\"line\">&lt;typeAliases&gt;</div><div class=\"line\">    &lt;!--&lt;typeAlias type=\"pojo.Blog\" alias=\"Blog\"/&gt;--&gt;</div><div class=\"line\">    &lt;package name=\"me.jing.pojo\"/&gt;</div><div class=\"line\">    &lt;package name=\"me.jing.pojo.vo\"/&gt;</div><div class=\"line\">&lt;/typeAliases&gt;</div></pre></td></tr></table></figure>\n<p>3)测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通过id查具体的博客，查询时 再拿到作者id 去作者表查具体的作者 username</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogCustomMapper mapper = session1.getMapper(BlogCustomMapper.class);</div><div class=\"line\">    BlogCustom blog = mapper.selectBlogById(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span> + blog);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"35-高级结果映射-构造方式映射\"><a href=\"#35-高级结果映射-构造方式映射\" class=\"headerlink\" title=\"35.高级结果映射 - 构造方式映射\"></a>35.高级结果映射 - 构造方式映射</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">Bolg.xml</div><div class=\"line\"></div><div class=\"line\">public Blog(Integer id, String title) &#123;</div><div class=\"line\">    this.id = id;</div><div class=\"line\">    this.title = title;</div><div class=\"line\">    System.out.println(\"构造函数调用-----\");</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;!--构造方法映射--&gt;</div><div class=\"line\">&lt;resultMap id=\"blogResultMapConstructor\" type=\"Blog\"&gt;</div><div class=\"line\">    &lt;constructor&gt;</div><div class=\"line\">        &lt;idArg column=\"id\" javaType=\"int\"/&gt;</div><div class=\"line\">        &lt;arg column=\"title\" javaType=\"string\"/&gt;</div><div class=\"line\">    &lt;/constructor&gt;</div><div class=\"line\">&lt;/resultMap&gt;</div><div class=\"line\">&lt;select id=\"selectBlogByIdConstructor\" parameterType=\"int\" resultMap=\"blogResultMapConstructor\"&gt;</div><div class=\"line\">  select * from blog where id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\"></div><div class=\"line\"> /**</div><div class=\"line\"> * 构造方式映射</div><div class=\"line\"> */</div><div class=\"line\">Blog selectBlogByIdConstructor(Integer id);</div><div class=\"line\"></div><div class=\"line\"> /**</div><div class=\"line\"> * 构造方式映射</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testSelectBlogByIdConstructor() &#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    Blog blog = blogMapper1.selectBlogByIdConstructor(3);</div><div class=\"line\">    session1.close();</div><div class=\"line\">    System.out.println(\"结果已查询:\" + blog);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"36-鉴别器\"><a href=\"#36-鉴别器\" class=\"headerlink\" title=\"36.鉴别器\"></a>36.鉴别器</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE `vehicle`(</div><div class=\"line\">\t`id` INT(<span class=\"number\">11</span>) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">\t`vin` VARCHAR(<span class=\"number\">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class=\"line\">\t`year` YEAR(<span class=\"number\">4</span>) DEFAULT NULL,</div><div class=\"line\">\t`make` VARCHAR(<span class=\"number\">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class=\"line\">\t`model` VARCHAR(<span class=\"number\">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class=\"line\">\t`color` VARCHAR(<span class=\"number\">50</span>) COLLATE utf8_bin DEFAULT NULL,</div><div class=\"line\">\t`vehicle_type` INT(<span class=\"number\">11</span>) DEFAULT NULL,</div><div class=\"line\">\t`door_count` INT(<span class=\"number\">11</span>) DEFAULT NULL,</div><div class=\"line\">\t`all_wheel_drive` TINYINT(<span class=\"number\">1</span>) DEFAULT NULL,</div><div class=\"line\">\t<span class=\"function\">PRIMARY <span class=\"title\">KEY</span><span class=\"params\">(`id`)</span></span></div><div class=\"line\"> ) ENGINE=INNODB AUTO_INCREMENT=<span class=\"number\">5</span> DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">VehicleMapper.xml</div><div class=\"line\"></div><div class=\"line\">&lt;resultMap type=\"Vehicle\" id=\"vehicleResultMap\"&gt;</div><div class=\"line\">    &lt;id column=\"id\" property=\"id\" jdbcType=\"INTEGER\"/&gt;</div><div class=\"line\">    &lt;discriminator javaType=\"int\" column=\"vehicle_type\"&gt;</div><div class=\"line\">        &lt;case value=\"1\" resultType=\"Car\"&gt;</div><div class=\"line\">            &lt;result column=\"door_count\" property=\"doorCount\"/&gt;</div><div class=\"line\">        &lt;/case&gt;</div><div class=\"line\">        &lt;case value=\"2\" resultType=\"Suv\"&gt;</div><div class=\"line\">            &lt;result column=\"all_wheel_drive\" property=\"allWheelDrive\"/&gt;</div><div class=\"line\">        &lt;/case&gt;</div><div class=\"line\">    &lt;/discriminator&gt;</div><div class=\"line\">&lt;/resultMap&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;select id=\"selectVehicleById\" parameterType=\"int\" resultMap=\"vehicleResultMap\"&gt;</div><div class=\"line\">    select * from vehicle where id = #&#123;id&#125;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\"></div><div class=\"line\">Vehicle selectVehicleById(Integer id);</div></pre></td></tr></table></figure>\n<p>pojo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer vehicle_type;</div><div class=\"line\">    <span class=\"keyword\">private</span> String vin;</div><div class=\"line\">    <span class=\"keyword\">private</span> String make;</div><div class=\"line\">    <span class=\"keyword\">private</span> String model;</div><div class=\"line\">    <span class=\"keyword\">private</span> String color;</div><div class=\"line\">    <span class=\"keyword\">private</span> Boolean all_wheel_drive;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Suv</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 全轮驱动 awd</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Boolean allWheelDrive;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Suv</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getAllWheelDrive</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> allWheelDrive;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAllWheelDrive</span><span class=\"params\">(Boolean allWheelDrive)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.allWheelDrive = allWheelDrive;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Suv&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"allWheelDrive=\"</span> + allWheelDrive +</div><div class=\"line\">                <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 门的数量</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Integer doorCount;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getDoorCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> doorCount;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDoorCount</span><span class=\"params\">(Integer doorCount)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.doorCount = doorCount;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Car&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"doorCount=\"</span> + doorCount +</div><div class=\"line\">                <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * 鉴别器</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectVehicleById</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    VehicleMapper mapper = session1.getMapper(VehicleMapper.class);</div><div class=\"line\">    Vehicle vehicle = mapper.selectVehicleById(<span class=\"number\">1</span>);</div><div class=\"line\">    Vehicle vehicle2 = mapper.selectVehicleById(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (vehicle <span class=\"keyword\">instanceof</span> Car) &#123;</div><div class=\"line\">        Car car = (Car) vehicle;</div><div class=\"line\">        Suv suv = (Suv) vehicle2;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"car:\"</span> + car);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"suv:\"</span> + suv);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        Car car = (Car) vehicle2;</div><div class=\"line\">        Suv suv = (Suv) vehicle;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"car:\"</span> + car);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"suv:\"</span> + suv);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"vehicle:\"</span> + vehicle);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"vehicle2:\"</span> + vehicle2);</div><div class=\"line\">    session1.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"37-延迟加载-不配置延迟加载的情况\"><a href=\"#37-延迟加载-不配置延迟加载的情况\" class=\"headerlink\" title=\"37.延迟加载 - 不配置延迟加载的情况\"></a>37.延迟加载 - 不配置延迟加载的情况</h3><p>测试一：<br>没有配置任何选项，执行两遍查询，性能比较低</p>\n<p>无论是否查询blog的任意属性，都会执行author的任何查询，就是说 始终会执行两次查询。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">查询blog----</div><div class=\"line\">Opening JDBC Connection</div><div class=\"line\">Created connection <span class=\"number\">504858437</span>.</div><div class=\"line\">Setting autocommit to <span class=\"keyword\">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class=\"number\">1e178745</span>]</div><div class=\"line\">==&gt;  Preparing: select * from blog where id = ? </div><div class=\"line\">==&gt; Parameters: <span class=\"number\">3</span>(Integer)</div><div class=\"line\">====&gt;  Preparing: select * from author where id = ? </div><div class=\"line\">====&gt; Parameters: <span class=\"number\">15</span>(Integer)</div><div class=\"line\">&lt;====      Total: <span class=\"number\">1</span></div><div class=\"line\">&lt;==      Total: <span class=\"number\">1</span></div><div class=\"line\">Resetting autocommit to <span class=\"keyword\">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class=\"number\">1e178745</span>]</div><div class=\"line\">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class=\"number\">1e178745</span>]</div><div class=\"line\">Returned connection <span class=\"number\">504858437</span> to pool.</div><div class=\"line\">查询blog的title属性----</div><div class=\"line\">Android开发艺术探索</div><div class=\"line\">查询blog的author属性----</div><div class=\"line\">景彬</div><div class=\"line\">结果已查询</div></pre></td></tr></table></figure>\n<h3 id=\"38-延迟加载-配置lazyloadingenabled\"><a href=\"#38-延迟加载-配置lazyloadingenabled\" class=\"headerlink\" title=\"38.延迟加载 - 配置lazyloadingenabled\"></a>38.延迟加载 - 配置lazyloadingenabled</h3><p>测试二：<br>如果不查询blog的任意属性，那么不会执行author的查询</p>\n<p>配置了全局属性：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;settings&gt;</div><div class=\"line\">    &lt;!--&lt;setting name=\"useGeneratedKeys\" value=\"true\"/&gt;--&gt;</div><div class=\"line\">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class=\"line\">    &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/&gt;</div><div class=\"line\">&lt;/settings&gt;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 测试延迟加载</div><div class=\"line\"> * 没有配置 lazyLoadingEnabled 时，会始终执行两次查询</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogByIdLazyLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"查询blog----\"</span>);</div><div class=\"line\">    Blog blog = blogMapper1.selectBlogById(<span class=\"number\">3</span>);</div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//        System.out.println(\"查询blog的title属性----\");</span></div><div class=\"line\"><span class=\"comment\">//        System.out.println(blog.getTitle());</span></div><div class=\"line\"><span class=\"comment\">//        System.out.println(\"查询blog的author属性----\");</span></div><div class=\"line\"><span class=\"comment\">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>日志打印：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">查询blog----</div><div class=\"line\">Opening JDBC Connection</div><div class=\"line\">Created connection <span class=\"number\">210156003</span>.</div><div class=\"line\">Setting autocommit to <span class=\"keyword\">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">==&gt;  Preparing: select * from blog where id = ? </div><div class=\"line\">==&gt; Parameters: <span class=\"number\">3</span>(Integer)</div><div class=\"line\">&lt;==      Total: <span class=\"number\">1</span></div><div class=\"line\">Resetting autocommit to <span class=\"keyword\">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">Returned connection <span class=\"number\">210156003</span> to pool.</div><div class=\"line\">结果已查询</div></pre></td></tr></table></figure>\n<h3 id=\"39-延迟加载-测试用例1和2的比较\"><a href=\"#39-延迟加载-测试用例1和2的比较\" class=\"headerlink\" title=\"39.延迟加载 - 测试用例1和2的比较\"></a>39.延迟加载 - 测试用例1和2的比较</h3><h3 id=\"40-延迟加载-积极的延迟加载\"><a href=\"#40-延迟加载-积极的延迟加载\" class=\"headerlink\" title=\"40.延迟加载 - 积极的延迟加载\"></a>40.延迟加载 - 积极的延迟加载</h3><p>延迟加载：用属性就加载，不用就不加载。<br>积极的延迟加载：只要用属性，就把所有要查询的属性sql全部执行一遍。</p>\n<p>测试三：<br>只要查询bolg的任意属性，都会执行author数据的查询</p>\n<p>配置了全局属性(同测试2的配置)：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;settings&gt;</div><div class=\"line\">    &lt;!--&lt;setting name=\"useGeneratedKeys\" value=\"true\"/&gt;--&gt;</div><div class=\"line\">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class=\"line\">    &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/&gt;</div><div class=\"line\">&lt;/settings&gt;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 测试延迟加载</div><div class=\"line\"> * 没有配置 lazyLoadingEnabled 时，会始终执行两次查询</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogByIdLazyLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"查询blog----\"</span>);</div><div class=\"line\">    Blog blog = blogMapper1.selectBlogById(<span class=\"number\">3</span>);</div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"查询blog的title属性----\"</span>);</div><div class=\"line\">    System.out.println(blog.getTitle());</div><div class=\"line\"><span class=\"comment\">//        System.out.println(\"查询blog的author属性----\");</span></div><div class=\"line\"><span class=\"comment\">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"41-延迟加载-非积极延迟加载\"><a href=\"#41-延迟加载-非积极延迟加载\" class=\"headerlink\" title=\"41.延迟加载 - 非积极延迟加载\"></a>41.延迟加载 - 非积极延迟加载</h3><p>测试四：<br>延迟加载，并且是非积极的。如果需要访问blog的非author属性，则不执行关联的author查询。</p>\n<p>配置了全局属性：</p>\n<blockquote>\n<p>配置后，没有调用 blog.getAuthor() 属性，就只会执行一次，调用 blog.getAuthor() 属性才回再执行查询author表一次。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--具体的insert也得配置 keyProperty--&gt;</div><div class=\"line\">&lt;settings&gt;</div><div class=\"line\">    &lt;setting name=\"useGeneratedKeys\" value=\"true\"/&gt;</div><div class=\"line\">    &lt;!--延迟加载 配置lazyloadingenabled--&gt;</div><div class=\"line\">    &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/&gt;</div><div class=\"line\">    &lt;!--非积极的延迟加载--&gt;</div><div class=\"line\">    &lt;setting name=\"aggressiveLazyLoading\" value=\"false\"/&gt;</div><div class=\"line\">&lt;/settings&gt;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * 测试延迟加载</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogByIdLazyLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"查询blog----\"</span>);</div><div class=\"line\">    Blog blog = blogMapper1.selectBlogById(<span class=\"number\">3</span>);</div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"查询blog的title属性----\"</span>);</div><div class=\"line\">    System.out.println(blog.getTitle());</div><div class=\"line\"><span class=\"comment\">//        System.out.println(\"查询blog的author属性----\");</span></div><div class=\"line\"><span class=\"comment\">//        System.out.println(blog.getAuthor().getUsername());</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>打印：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">查询blog----</div><div class=\"line\">Opening JDBC Connection</div><div class=\"line\">Created connection <span class=\"number\">210156003</span>.</div><div class=\"line\">Setting autocommit to <span class=\"keyword\">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">==&gt;  Preparing: select * from blog where id = ? </div><div class=\"line\">==&gt; Parameters: <span class=\"number\">3</span>(Integer)</div><div class=\"line\">&lt;==      Total: <span class=\"number\">1</span></div><div class=\"line\">Resetting autocommit to <span class=\"keyword\">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">Returned connection <span class=\"number\">210156003</span> to pool.</div><div class=\"line\">查询blog的title属性----</div><div class=\"line\">Android开发艺术探索</div><div class=\"line\">结果已查询</div></pre></td></tr></table></figure>\n<p>测试五：</p>\n<p>配置了全局属性 同配置四</p>\n<p>延迟加载，并且是不积极的。如果访问了blog的author属性，则执行关联的author查询</p>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 测试延迟加载</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelectBlogByIdLazyLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    SqlSession session1 = MyBatisUtil.getSqlSession();</div><div class=\"line\">    BlogMapper blogMapper1 = session1.getMapper(BlogMapper.class);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"查询blog----\"</span>);</div><div class=\"line\">    Blog blog = blogMapper1.selectBlogById(<span class=\"number\">3</span>);</div><div class=\"line\">    session1.close();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"查询blog的title属性----\"</span>);</div><div class=\"line\">    System.out.println(blog.getTitle());</div><div class=\"line\">    System.out.println(<span class=\"string\">\"查询blog的author属性----\"</span>);</div><div class=\"line\">    System.out.println(blog.getAuthor().getUsername());</div><div class=\"line\">    System.out.println(<span class=\"string\">\"结果已查询\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>打印：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">查询blog----</div><div class=\"line\">Opening JDBC Connection</div><div class=\"line\">Created connection <span class=\"number\">210156003</span>.</div><div class=\"line\">Setting autocommit to <span class=\"keyword\">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">==&gt;  Preparing: select * from blog where id = ? </div><div class=\"line\">==&gt; Parameters: <span class=\"number\">3</span>(Integer)</div><div class=\"line\">&lt;==      Total: <span class=\"number\">1</span></div><div class=\"line\">Resetting autocommit to <span class=\"keyword\">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">Returned connection <span class=\"number\">210156003</span> to pool.</div><div class=\"line\">查询blog的title属性----</div><div class=\"line\">Android开发艺术探索</div><div class=\"line\">查询blog的author属性----</div><div class=\"line\">Opening JDBC Connection</div><div class=\"line\">Checked out connection <span class=\"number\">210156003</span> from pool.</div><div class=\"line\">Setting autocommit to <span class=\"keyword\">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">==&gt;  Preparing: select * from author where id = ? </div><div class=\"line\">==&gt; Parameters: <span class=\"number\">15</span>(Integer)</div><div class=\"line\">&lt;==      Total: <span class=\"number\">1</span></div><div class=\"line\">Resetting autocommit to <span class=\"keyword\">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class=\"meta\">@c</span>86b9e3]</div><div class=\"line\">Returned connection <span class=\"number\">210156003</span> to pool.</div><div class=\"line\">景彬</div><div class=\"line\">结果已查询</div></pre></td></tr></table></figure>","categories":["Java后端"],"tags":["MySql"]},{"title":"MySQL 使用规范(内部培训笔记)","url":"http://jinbeen.com/2019/03/31/mysql-tip/","content":"<p>袋鼠云数据库使用基本规范。</p>\n<a id=\"more\"></a>\n<h3 id=\"一般操作\"><a href=\"#一般操作\" class=\"headerlink\" title=\"一般操作\"></a>一般操作</h3><ul>\n<li>高峰期不进行DDL操作，不进行大表全表扫描；</li>\n<li>进行更新或删除时，一万以下条数据最好使用 分批更新(计数 如 i 累加到500)（存储方式）</li>\n</ul>\n<h3 id=\"设计库\"><a href=\"#设计库\" class=\"headerlink\" title=\"设计库\"></a>设计库</h3><ul>\n<li>原则：不同业务按库划分</li>\n<li>使用：innodb 存储引擎</li>\n</ul>\n<h3 id=\"设计表\"><a href=\"#设计表\" class=\"headerlink\" title=\"设计表\"></a>设计表</h3><ul>\n<li>一定要有主键</li>\n<li>强烈建议字段为 NOT NULL，并设置默认值</li>\n<li>禁止储存图片、文件、视频等</li>\n<li>使用 tingint 代替 ENUM</li>\n<li>禁止使用外键</li>\n<li>少用拆分 BLOB、TEXT字段</li>\n<li>控制 字段数量/尽可能小的字段/命名规范</li>\n</ul>\n<h3 id=\"字段类型\"><a href=\"#字段类型\" class=\"headerlink\" title=\"字段类型\"></a>字段类型</h3><ul>\n<li>Tinyint[UNSIGNED] - 无负整数 （从 0 到 255 的整型数据。存储大小为 1 字节。）</li>\n<li>DECIIMAL - 精确数值，不是Float/Double</li>\n<li>int(3) - 后面的数字无意义</li>\n</ul>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><blockquote>\n<p>index<em>表名</em>字段</p>\n</blockquote>\n<ul>\n<li>联合索引字段建议不超过5个</li>\n<li>单表索引数量5个以内</li>\n<li>使用自增id作为主键</li>\n</ul>\n<h3 id=\"编写sql\"><a href=\"#编写sql\" class=\"headerlink\" title=\"编写sql\"></a>编写sql</h3><ul>\n<li>update/delete 不使用limit，必须添加where</li>\n<li>使用prepared、statement，提成性能，避免SQL注入</li>\n<li>禁止使用 % 模糊查询(全表)</li>\n<li>表中记录数 <code>count(*)</code></li>\n<li>用 join 链接替代 嵌套查询</li>\n<li>尽量不使用 hints</li>\n<li><p>查询拒绝 select * ，避免对索引字段使用 函数或计算操作</p>\n<ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">where new_id = <span class=\"string\">\"123456\"</span> (<span class=\"function\">where <span class=\"title\">upper</span><span class=\"params\">(id)</span>)</span></div></pre></td></tr></table></figure>\n<ul>\n<li>如果 new_id 是 varchar 则使用 <code>new_id = &quot;123456&quot;</code> 比使用 <code>new_id = 123456</code> 的效率高很多倍</li>\n<li>使用 where upper(id) 的效率很低</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["Java后端"],"tags":["MySql"]},{"title":"数据库基础","url":"http://jinbeen.com/2019/03/30/mysql-basics/","content":"<blockquote>\n<p>我坚信在行动之前，必须先有足够的观察和知识。 - 奇异博士</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>持久化操作：保存到数据库</li>\n<li>主键：用户表里的id，唯一标识</li>\n<li>外键：另一个表里引用的用户id，外键</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/xiaomaotao/p/9211152.html\" target=\"_blank\" rel=\"external\">下载mysql 配置环境</a> 更改密码：a12345678</p>\n<p><a href=\"https://www.jianshu.com/p/f3ef78deadaa\" target=\"_blank\" rel=\"external\">Navicat Premium for Mac的破解教程</a> 注意时间戳是今天的时间-2019-02-20 12:00:00</p>\n<p>命令行操作(一般来说关键字都用大写)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alias mysql=/usr/local/mysql/bin/mysql</div><div class=\"line\">alias mysqladmin=/usr/local/mysql/bin/mysqladmin</div></pre></td></tr></table></figure>\n<pre><code>启动mysql\nmysql\n// 更换密码：\nmysqladmin -u root -p password\n登录：\nmysql -u root -p\n</code></pre><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><blockquote>\n<p>;是结束符</p>\n</blockquote>\n<ul>\n<li><p>1.创建数据库<br><code>create database mysql_0219;</code></p>\n</li>\n<li><p>2.查看所有数据库<br><code>show databases;</code></p>\n</li>\n<li><p>3.使用数据库<br><code>use mysql_0219;</code></p>\n</li>\n<li><p>4.删除数据库<br><code>drop database mysql_0219;</code></p>\n</li>\n<li><p>5.查看数据库状态<br><code>status (注意编码：utf-8)</code></p>\n</li>\n</ul>\n<h3 id=\"表的创建与管理\"><a href=\"#表的创建与管理\" class=\"headerlink\" title=\"表的创建与管理:\"></a>表的创建与管理:</h3><ul>\n<li><p>1.创建表<br><code>create table t_user1(id int,name varchar(20),age int,birthday date);</code></p>\n</li>\n<li><p>2.修改表<br><code>alter table t_user1 rename t_user2;</code></p>\n</li>\n<li><p>3.查看具体表<br><code>desc t_user2;</code></p>\n</li>\n<li><p>4.查看所有表<br><code>show tables;</code></p>\n</li>\n<li><p>5.删除<br><code>drop table t_user2;</code></p>\n</li>\n<li><p>6.表中添加字段</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table 表名称 add 字段名称 字段类型</div><div class=\"line\">alter table t_user1 add sex varchar(3);</div></pre></td></tr></table></figure>\n<ul>\n<li>7.修改表中的字段</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table t_user1 change name user_name varchar(3);</div><div class=\"line\">// 更改表的类型名称 布尔为 tinyint(1)</div><div class=\"line\">alter table t_user1 modify user_name varchar(2);</div></pre></td></tr></table></figure>\n<ul>\n<li>8.删除表重的字段<br><code>alter table t_user1 drop birthday;</code></li>\n</ul>\n<h3 id=\"表数据更新：\"><a href=\"#表数据更新：\" class=\"headerlink\" title=\"表数据更新：\"></a>表数据更新：</h3><ul>\n<li><p>1.数据插入<br><code>insert into t_user1(id,user_name,age,sex) values(&#39;1&#39;,&#39;ad&#39;,&#39;22&#39;,&#39;男&#39;);</code></p>\n</li>\n<li><p>2.查看数据<br><code>select * from t_user1;</code></p>\n</li>\n<li><p>3.数据更新</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">单条</div><div class=\"line\">update t_user1 set user_name=&apos;admin&apos; where id=1;</div><div class=\"line\">多条</div><div class=\"line\">update t_user1 set age=33,sex=&apos;女&apos; where id=1;</div></pre></td></tr></table></figure>\n<ul>\n<li>4.删除数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">delete from t_user1 where id =2;</div><div class=\"line\">delete from t_user1;(清空表)</div></pre></td></tr></table></figure>\n<h3 id=\"约束条件\"><a href=\"#约束条件\" class=\"headerlink\" title=\"约束条件\"></a>约束条件</h3><p>非空约束 唯一约束 主键约束 主外键约束</p>\n<p>图形化连接:</p>\n<p>使用 Navicat for MySQL 输入密码：a123456789 新建查询创建</p>\n<h4 id=\"非空约束：\"><a href=\"#非空约束：\" class=\"headerlink\" title=\"非空约束：\"></a>非空约束：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">CREATE TABLE <span class=\"title\">t_user2</span><span class=\"params\">(</span></span></div><div class=\"line\">id <span class=\"keyword\">int</span>,</div><div class=\"line\">name VARCHAR(<span class=\"number\">2</span>) not <span class=\"keyword\">null</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">show TABLES;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INSERT INTO <span class=\"title\">t_user2</span><span class=\"params\">(id,name)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">23</span>)</span></span>;</div><div class=\"line\">-- <span class=\"function\">INSERT INTO <span class=\"title\">t_user2</span><span class=\"params\">(id,name)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"keyword\">null</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">SELECT * FROM t_user2;</div></pre></td></tr></table></figure>\n<h4 id=\"唯一约束：\"><a href=\"#唯一约束：\" class=\"headerlink\" title=\"唯一约束：\"></a>唯一约束：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">CREATE TABLE <span class=\"title\">t_user3</span><span class=\"params\">(</span></span></div><div class=\"line\">id <span class=\"keyword\">int</span>,</div><div class=\"line\">name VARCHAR(<span class=\"number\">30</span>) not <span class=\"keyword\">null</span>,</div><div class=\"line\">email <span class=\"title\">VARCHAR</span><span class=\"params\">(<span class=\"number\">20</span>)</span> UNIQUE -- 唯一约束，邮箱不允许重复</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INSERT INTO <span class=\"title\">t_user3</span><span class=\"params\">(id,name,email)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"string\">'110@email.com'</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">INSERT INTO <span class=\"title\">t_user3</span><span class=\"params\">(id,name,email)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"number\">2</span>,<span class=\"number\">333</span>,<span class=\"string\">'111@email.com'</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">SELECT * FROM t_user3;</div></pre></td></tr></table></figure>\n<h4 id=\"主键约束：\"><a href=\"#主键约束：\" class=\"headerlink\" title=\"主键约束：\"></a>主键约束：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">DROP TABLE t_user3;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">CREATE TABLE <span class=\"title\">t_user3</span><span class=\"params\">(</span></span></div><div class=\"line\">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键唯一不能为<span class=\"keyword\">null</span>，自增</div><div class=\"line\">name VARCHAR(<span class=\"number\">30</span>) not <span class=\"keyword\">null</span>,</div><div class=\"line\">email <span class=\"title\">VARCHAR</span><span class=\"params\">(<span class=\"number\">20</span>)</span> UNIQUE -- 唯一约束，邮箱不允许重复</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INSERT INTO <span class=\"title\">t_user3</span><span class=\"params\">(name,email)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"number\">23</span>,<span class=\"string\">'110@email.com'</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">INSERT INTO <span class=\"title\">t_user3</span><span class=\"params\">(name,email)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"number\">2223</span>,<span class=\"string\">'112220@email.com'</span>)</span></span>;</div></pre></td></tr></table></figure>\n<h4 id=\"主外键约束：\"><a href=\"#主外键约束：\" class=\"headerlink\" title=\"主外键约束：\"></a>主外键约束：</h4><p>一般不会建，不能单独删除这个约束表。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">CREATE TABLE <span class=\"title\">t_user</span><span class=\"params\">(</span></span></div><div class=\"line\">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键不能为 <span class=\"keyword\">null</span>，且不能重复，自增</div><div class=\"line\">name VARCHAR(<span class=\"number\">30</span>) not <span class=\"keyword\">null</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">CREATE TABLE <span class=\"title\">t_order</span><span class=\"params\">(</span></span></div><div class=\"line\">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键不能为 <span class=\"keyword\">null</span>，且不能重复，自增</div><div class=\"line\">order_name VARCHAR(<span class=\"number\">30</span>),</div><div class=\"line\">user_id <span class=\"keyword\">int</span>,</div><div class=\"line\">CONSTRAINT user_id_fk FOREIGN <span class=\"title\">key</span> <span class=\"params\">(user_id)</span> REFERENCES <span class=\"title\">t_user</span><span class=\"params\">(id)</span> -- 添加外键</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INSERT INTO <span class=\"title\">t_user</span><span class=\"params\">(name)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"string\">'amdin'</span>)</span></span>;</div><div class=\"line\">SELECT * FROM t_user;</div><div class=\"line\"><span class=\"function\">INSERT INTO <span class=\"title\">t_order</span><span class=\"params\">(order_name,user_id)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"string\">'订单1'</span>,<span class=\"number\">1</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">INSERT INTO <span class=\"title\">t_order</span><span class=\"params\">(order_name,user_id)</span> <span class=\"title\">VALUES</span><span class=\"params\">(<span class=\"string\">'订单2'</span>,<span class=\"number\">2</span>)</span></span>;<span class=\"comment\">// 报错</span></div><div class=\"line\">SELECT * FROM t_order;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Mysql的备份与恢复\"><a href=\"#Mysql的备份与恢复\" class=\"headerlink\" title=\"Mysql的备份与恢复\"></a>Mysql的备份与恢复</h3><h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><p>导出数据库：</p>\n<p>mysqldump -u root -p mysql_0219&gt;/Users/jingbin/Documents/LearningFile/S-Mybatis/mysql_0219.sql;</p>\n<p>一、<a href=\"https://www.cnblogs.com/malcolmfeng/p/6560772.html\" target=\"_blank\" rel=\"external\">Mac os导出Mysql数据库</a></p>\n<p>1.打开终端，</p>\n<p>2.执行： cd 要导出到的目录  （如：cd /Users/jingbin/Documents/LearningFile/mysql）</p>\n<p>3.执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　alias mysqldump=/usr/local/mysql/bin/mysqldump</div><div class=\"line\">　　mysqldump -u root -p 要导出的数据库名&gt;名字随意.sql </div><div class=\"line\">　　（如：mysqldump -u root -p mysql_0219&gt;mysql_0219.sql;） 输入数据密码</div><div class=\"line\">此时，会在/Users/jingbin/Documents/LearningFile/mysql中发现已经导出的.sql文件：mysql_0219.sql。</div></pre></td></tr></table></figure>\n<p>导出数据库里对应的表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -u root -p mysql_0219 t_user&gt;mysql_0219_user.sql;</div></pre></td></tr></table></figure>\n<h4 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database mysql_back;</div><div class=\"line\">use mysql_back;</div><div class=\"line\">show tables;</div><div class=\"line\">source /Users/jingbin/Documents/LearningFile/mysql/mysql_0219_user.sql</div><div class=\"line\">show tables;</div><div class=\"line\">select * from t_user;</div></pre></td></tr></table></figure>\n<hr>\n","categories":["Java后端"],"tags":["MySql"]},{"title":"Maven基础","url":"http://jinbeen.com/2019/03/29/maven-basics/","content":"<blockquote>\n<p>真正的价值并不在人生的舞台上，而在我们扮演的角色中。 - 席勒/画家</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Maven基础\"><a href=\"#Maven基础\" class=\"headerlink\" title=\"Maven基础\"></a>Maven基础</h2><ul>\n<li><a href=\"https://www.cnblogs.com/xulisheng/p/4049740.html\" target=\"_blank\" rel=\"external\">Mac中host设置方法</a></li>\n<li><a href=\"https://www.jianshu.com/p/3c87487e7121\" target=\"_blank\" rel=\"external\">IntelliJ IDEA 2018 破解过程</a></li>\n</ul>\n<p>jdk1.8</p>\n<p>File Encodings 全部utf-8</p>\n<p>企业做法 - Maven</p>\n<ul>\n<li>新建 maven</li>\n<li><strong>普通项目 quickstart</strong></li>\n<li><strong>web项目 webapp</strong></li>\n</ul>\n<p>GAV坐标：GroupId 组织 ArtifactId 项目 Version 版本</p>\n<ul>\n<li>新建的时候，setting.xml第一次需要新建，并配置本地仓库地址</li>\n<li>配置自动导入，maven - inporting</li>\n</ul>\n<p>Maven install 打包部署</p>\n<hr>\n<p>建web项目：</p>\n<ul>\n<li>Maven - webapp</li>\n<li>默认建立没有java目录 - 手动创建Java目录</li>\n</ul>\n<p>web项目打包格式：<packaging>war</packaging> 不适合给三方团队使用。</p>\n<p>关联web容器：</p>\n<ul>\n<li>顶部导航栏 - Add Configuration - 加号 - Tomcat Server local</li>\n</ul>\n<p>下载tomcat : <a href=\"http://tomcat.apache.org/download-80.cgi\" target=\"_blank\" rel=\"external\">http://tomcat.apache.org/download-80.cgi</a></p>\n<p>部署：</p>\n<ul>\n<li>顶部导航栏 - Add Configuration - 加号 - Tomcat Server local - Deployment - 加号 “/web_war”？“/” 不用改</li>\n<li>maven - install - 开始键部署</li>\n</ul>\n<hr>\n<p>多模块开发：</p>\n<ul>\n<li>父子项目 - 选择站点模式 - site-simple</li>\n<li>目的：让父项目来管理所有子项目的jar包</li>\n<li>server引用dao的代码：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--导入dao--&gt;</div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;me.jing&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;jd-dao&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p>直接右键 - Run</p>\n","categories":["Java后端"],"tags":["Maven"]},{"title":"复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度","url":"http://jinbeen.com/2019/03/27/complexity-analysis-next/","content":"<blockquote>\n<p>在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>最好情况时间复杂度（best case time complexity）、</li>\n<li>最坏情况时间复杂度（worst case time complexity）、</li>\n<li>平均情况时间复杂度（average case time complexity）、</li>\n<li>均摊时间复杂度（amortized time complexity）</li>\n</ul>\n<h3 id=\"最好、最坏情况时间复杂度\"><a href=\"#最好、最坏情况时间复杂度\" class=\"headerlink\" title=\"最好、最坏情况时间复杂度\"></a>最好、最坏情况时间复杂度</h3><p>首先看这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// n 表示数组 array 的长度</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> pos = -<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; n; ++i) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array[i] == x) pos = i;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> pos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>比较明显：这段代码的复杂度是 O(n)，其中，n 代表数组的长度。</p>\n<p>优化一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// n 表示数组 array 的长度</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> pos = -<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; n; ++i) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array[i] == x) &#123;</div><div class=\"line\">       pos = i;</div><div class=\"line\">       <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> pos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>要查找的变量 x 可能出现在数组的任意位置</strong></p>\n<ul>\n<li>如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。</li>\n<li>但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。</li>\n</ul>\n<p>所以，不同的情况下，这段代码的时间复杂度是不一样的。</p>\n<p>为了表示代码在不同情况下的不同时间复杂度，我们需要引入三个概念：<strong>最好情况时间复杂度</strong>、<strong>最坏情况时间复杂度</strong>和<strong>平均情况时间复杂度</strong>。</p>\n<p><strong>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。</strong>就像我们刚刚讲到的，在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这个时候对应的时间复杂度就是最好情况时间复杂度。</p>\n<p>同理，<strong>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。</strong>就像刚举的那个例子，如果数组中没有要查找的变量 x，我们需要把整个数组都遍历一遍才行，所以这种最糟糕情况下对应的时间复杂度就是最坏情况时间复杂度。</p>\n<h3 id=\"平均情况时间复杂度\"><a href=\"#平均情况时间复杂度\" class=\"headerlink\" title=\"平均情况时间复杂度\"></a>平均情况时间复杂度</h3><p>借助刚才查找变量 x 的例子来给你解释:</p>\n<p>要查找的变量 x 在数组中的位置，有 n+1 种情况：<strong>在数组的 0～n-1 位置中和不在数组中</strong>。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：</p>\n<p>(1+2+3+…+n+n)/(n+1) = n(n+3)/2(n+1)</p>\n<p>我们知道，时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以，咱们把刚刚这个公式简化之后，得到的平均时间复杂度就是 O(n)。</p>\n<p>但是计算过程稍微有点儿问题。究竟是什么问题呢？我们刚讲的这 n+1 种情况，出现的概率并不是一样的。我带你具体分析一下。</p>\n<p>我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。</p>\n<p>因此，前面的推导过程中存在的最大问题就是，没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-d44427c8032e4dc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>这个值就是概率论中的<strong>加权平均值</strong>，也叫作<strong>期望值</strong>，所以平均时间复杂度的全称应该叫<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p>\n<p>引入概率之后，前面那段代码的加权平均值为 (3n+1)/4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。</p>\n<p>实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p>\n<h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3><p>大部分情况下，我们并不需要区分最好、最坏、平均三种复杂度。平均复杂度只在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// array 表示一个长度为 n 的数组</span></div><div class=\"line\"><span class=\"comment\">// 代码中的 array.length 就等于 n</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (count == array.length) &#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</div><div class=\"line\">         sum = sum + array[i];</div><div class=\"line\">      &#125;</div><div class=\"line\">      array[<span class=\"number\">0</span>] = sum;</div><div class=\"line\">      count = <span class=\"number\">1</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   array[count] = val;</div><div class=\"line\">   ++count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我先来解释一下这段代码。这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p>\n<ul>\n<li>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。</li>\n<li>最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</li>\n<li>那平均时间复杂度是多少呢？答案是 O(1)。我们还是可以通过前面讲的概率论的方法来分析。</li>\n</ul>\n<p>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-7f74e561d22382dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>至此为止，前面的最好、最坏、平均时间复杂度的计算，理解起来应该都没有问题。但是这个例子里的平均复杂度分析其实并不需要这么复杂，不需要引入概率论的知识。这是为什么呢？我们先来对比一下这个 insert() 的例子和前面那个 find() 的例子，你就会发现这两者有很大差别。</p>\n<p>首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()第一个区别于 find() 的地方。</p>\n<p>我们再来看第二个不同的地方。对于 insert() 函数来说，O(1) 时间复杂度的插入和 O(n) 时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。</p>\n<p>所以，针对这样一种特殊场景的复杂度分析，我们并不需要像之前讲平均复杂度分析方法那样，找出所有的输入情况及相应的发生概率，然后再计算加权平均值。</p>\n<p>针对这种特殊的场景，我们引入了一种更加简单的分析方法：摊还分析法，通过摊还分析得到的时间复杂度我们起了一个名字，叫均摊时间复杂度。</p>\n<p>那究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p>\n<p>我们还是继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。你都理解了吗？</p>\n<p>均摊时间复杂度和摊还分析应用场景比较特殊，所以我们并不会经常用到。为了方便你理解、记忆，我这里简单总结一下它们的应用场景。如果你遇到了，知道是怎么回事儿就行了。</p>\n<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p>\n<p>尽管很多数据结构和算法书籍都花了很大力气来区分平均时间复杂度和均摊时间复杂度，但其实我个人认为，均摊时间复杂度就是一种特殊的平均时间复杂度，我们没必要花太多精力去区分它们。你最应该掌握的是它的分析方法，摊还分析。至于分析出来的结果是叫平均还是叫均摊，这只是个说法，并不重要。</p>\n","categories":["数据结构与算法之美"],"tags":["数据结构与算法之美"]},{"title":"复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？","url":"http://jinbeen.com/2019/03/26/complexity-analysis/","content":"<blockquote>\n<p>T(n) = O(f(n))</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"大-O-复杂度表示法\"><a href=\"#大-O-复杂度表示法\" class=\"headerlink\" title=\"大 O 复杂度表示法\"></a>大 O 复杂度表示法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (; i &lt;= n; ++i) &#123;</div><div class=\"line\">    sum = sum + i;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总的执行时间就是T(n) = (2n+2)*unit_time。<br>记为：T(n) = O(n)； </p>\n<p>所有代码的执行时间 T(n) 与每行代码的执行次数成正比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (; i &lt;= n; ++i) &#123;</div><div class=\"line\">    j = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (; j &lt;= n; ++j) &#123;</div><div class=\"line\">      sum = sum +  i * j;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行时间 T(n) = (2n2+2n+3)* unit_time。<br>记为：T(n) = O(n2)</p>\n<p><strong>大 O 复杂度表示法：</strong></p>\n<p><center>T(n) = O(f(n))</center></p>\n<p>T(n): 表示代码执行的时间；<br>n: 表示数据规模的大小；<br>f(n): 表示每行代码执行的次数总和；<br>O: 表示代码的执行时间T(n)与f(n)表达式成正比。</p>\n<p>大 O 复杂度表示法时间上并不具体表示代码真正的执行时间，而是表示代码<strong>执行时间随数据规模增长的变化趋势</strong>，所以，也叫作渐进时间复杂度，简称<strong>时间复杂度</strong>。</p>\n<h3 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h3><ul>\n<li>1.只关注循环执行次数最多的一段代码</li>\n<li>2.加法法则：总复杂度等于量级最大的那段代码的复杂度</li>\n<li>3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>\n</ul>\n<h3 id=\"几种常见时间复杂度实例分析\"><a href=\"#几种常见时间复杂度实例分析\" class=\"headerlink\" title=\"几种常见时间复杂度实例分析\"></a>几种常见时间复杂度实例分析</h3><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了你今后可以接触的所有代码的复杂度量级。</p>\n<p>复杂度量级(按数量级递增)</p>\n<ul>\n<li>多项式量级<ul>\n<li>常量阶 O(1) </li>\n<li>对数阶 O(log n)</li>\n<li>线性阶 O(n)</li>\n<li>线性代数阶 O(nlogn)</li>\n<li>平方阶 O(n²)、立方阶O(n³)…k次方阶O(n^{k})</li>\n</ul>\n</li>\n<li>非多项式量级<ul>\n<li>指数阶 O(2^n)</li>\n<li>阶乘积 O(n!)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-O-1\"><a href=\"#1-O-1\" class=\"headerlink\" title=\"1.O(1)\"></a>1.O(1)</h4><p>首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> j = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> sum = i + j;</div></pre></td></tr></table></figure>\n<p>我稍微总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，<strong>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。</strong></p>\n<h4 id=\"2-O-logn-、O-nlogn\"><a href=\"#2-O-logn-、O-nlogn\" class=\"headerlink\" title=\"2.O(logn)、O(nlogn)\"></a>2.O(logn)、O(nlogn)</h4><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。我通过一个例子来说明一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">i=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (i &lt;= n)  &#123;</div><div class=\"line\">  i = i * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。</p>\n<p>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：</p>\n<p><code>2^0 * 2^1 * 2^2 ... 2^k ... 2^n = m 3 n</code></p>\n<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2x=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log2n，所以，这段代码的时间复杂度就是 O(log2n)。</p>\n<p>现在，我把代码稍微改下，你再看看，这段代码的时间复杂度是多少？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">i=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (i &lt;= n)  &#123;</div><div class=\"line\">  i = i * <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>根据我刚刚讲的思路，很简单就能看出来，这段代码的时间复杂度为 O(log3n)。</p>\n<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>\n<p>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 <em> log2n，所以 O(log3n) = O(C </em> log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p>\n<p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>\n<h4 id=\"3-O-m-n-、O-m-n\"><a href=\"#3-O-m-n-、O-m-n\" class=\"headerlink\" title=\"3.O(m+n)、O(m*n)\"></a>3.O(m+n)、O(m*n)</h4><p>我们再来讲一种跟前面都不一样的时间复杂度，代码的复杂度由两个数据的规模来决定。老规矩，先看代码！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> sum_1 = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; m; ++i) &#123;</div><div class=\"line\">    sum_1 = sum_1 + i;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> sum_2 = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (; j &lt; n; ++j) &#123;</div><div class=\"line\">    sum_2 = sum_2 + j;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> sum_1 + sum_2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p>\n<p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)<em>T2(n) = O(f(m) </em> f(n))。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系。</strong></p>\n<p>举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt;n; ++i) &#123;</div><div class=\"line\">    a[i] = i * i;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (i = n-<span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</div><div class=\"line\">    print out a[i]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>\n<p>我们常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p>\n<h3 id=\"内容小节\"><a href=\"#内容小节\" class=\"headerlink\" title=\"内容小节\"></a>内容小节</h3><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。等你学完整个专栏之后，你就会发现几乎所有的数据结构和算法的复杂度都跑不出这几个。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-d2f12e37539d8733.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n","categories":["数据结构与算法之美"],"tags":["数据结构与算法之美"]},{"title":"推荐几款常用的Chrome插件","url":"http://jinbeen.com/2019/03/25/chrome-plugin/","content":"<blockquote>\n<p>天空既在我们的头上又在我们的脚下。 - 梭罗/作家</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"1-广告终结者\"><a href=\"#1-广告终结者\" class=\"headerlink\" title=\"1.广告终结者\"></a>1.广告终结者</h3><p>用来清除网页上乱七八糟的广告，比如网站的竞价广告的显示，使自己想要的结果显示在前面。<br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-3cb16077659f99e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"广告终结者.png\"></p>\n<h3 id=\"2-The-Great-Suspender\"><a href=\"#2-The-Great-Suspender\" class=\"headerlink\" title=\"2.The Great Suspender\"></a>2.The Great Suspender</h3><p>开很多页面时，用来释放很久没有浏览过的标签页，点击后再加载网页。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-b84479b4fc2cb42e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"The Great Suspender.png\"></p>\n<h3 id=\"3-JSONView\"><a href=\"#3-JSONView\" class=\"headerlink\" title=\"3.JSONView\"></a>3.JSONView</h3><p>格式化json，如果是get请求，返回的json数据会结构清晰的显示在网页上。<br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-b654cec6f132ba42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"JSONView.png\"></p>\n<h3 id=\"4-Octotree\"><a href=\"#4-Octotree\" class=\"headerlink\" title=\"4.Octotree\"></a>4.Octotree</h3><p>看GitHub时，用来查看项目的目录结构，这个插件普及有段时间了。<br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-123659e654301e01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Octotree.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-f73faeb37738e67d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果图.png\"></p>\n<h3 id=\"5-Imagus\"><a href=\"#5-Imagus\" class=\"headerlink\" title=\"5.Imagus\"></a>5.Imagus</h3><p>添加后，将鼠标移到有图片链接的地方，就会显示图片大图。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-84419d8188b06fb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Imagus.png\"></p>\n<h3 id=\"6-捕捉网页截图-FireShot的\"><a href=\"#6-捕捉网页截图-FireShot的\" class=\"headerlink\" title=\"6.捕捉网页截图 - FireShot的\"></a>6.捕捉网页截图 - FireShot的</h3><p>可以自动滚动截图，保存GitHub每日趋势图和自己仓库图等很有作用。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-8a33c8934b1ad1ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"FireShot.png\"></p>\n<h3 id=\"7-Dark-Reader\"><a href=\"#7-Dark-Reader\" class=\"headerlink\" title=\"7.Dark Reader\"></a>7.Dark Reader</h3><p>网页的黑夜模式。将网页的白底变成黑底，适合长时间看博客文章，找很久了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-8f7db07c6794b139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Dark Reader.png\"></p>\n","categories":["工具"],"tags":["工具"]},{"title":"如何学习数据结构与算法","url":"http://jinbeen.com/2019/03/25/array/","content":"<p>笔记源于极客时间<a href=\"http://gk.link/a/102Xb\" target=\"_blank\" rel=\"external\">《数据结构与算法之美》</a></p>\n<a id=\"more\"></a>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-a1846067f2f612b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"数据结构与算法之美.jpg\"></p>\n<p>什么是数据结构？什么是算法？<br>从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。<br>从狭义上讲，也就是我们专栏要讲的，是指某些著名的数据结构和算法，比如队列、栈、堆、二分查找、动态规划等。<br>数据结构和算法解决的是如何更省、更快地存储和处理数据的问题。因此，我们就需要一个考量效率和资源消耗的方法，这就是复杂度分方法。</p>\n<p>10个数据结构：<br>数组、链表、栈、队列、散列表、二叉树、堆、调表、图、Trie树。<br>10个算法：<br>递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。</p>\n<p>学习技巧：</p>\n<ol>\n<li>边学边练，适度刷题</li>\n<li>多问、多思考、多互动</li>\n<li>打怪升级学习法<br>我们在枯燥的学习过程中，也可以给自己设立一个切实可行的目标</li>\n<li>知识需要沉淀，不要想试图一下子掌握所有</li>\n</ol>\n<hr>\n","categories":["数据结构与算法之美"],"tags":["数据结构与算法之美"]},{"title":"Kotlin | 2.Kotlin基础","url":"http://jinbeen.com/2019/03/24/kotlin-basics/","content":"<p>上篇：<a href=\"https://jinbeen.com/2019/03/22/kotlin-define/\">《Kotlin | 1.定义和目的》</a></p>\n<a id=\"more\"></a>\n<blockquote>\n<ul>\n<li>声明函数、变量、类、枚举以及类型</li>\n<li>Kotlin中的控制结构</li>\n<li>智能转换</li>\n<li>抛出和处理异常</li>\n</ul>\n</blockquote>\n<p><a href=\"https://github.com/youlookwhat/kotlin-learning/blob/master/kotlin/app/src/main/java/com/kotlin/jingbin/kotlinapp/MainActivity.kt\" target=\"_blank\" rel=\"external\">函数学习</a></p>\n<h3 id=\"函数和变量\"><a href=\"#函数和变量\" class=\"headerlink\" title=\"函数和变量\"></a>函数和变量</h3><h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    *  求最大值</div><div class=\"line\">    * if是表达式而不是语句，表达式有值，语句没有。</div><div class=\"line\">    * java中所有的控制结构都是语句</div><div class=\"line\">    * kotlin中除了循环以外大多数控制结构都是表达式</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">max</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (a &gt; b) a <span class=\"keyword\">else</span> b</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">    * 如果函数体写在花括号中，我们说这个函数有代码块体。</div><div class=\"line\">    * 如果直接返回了一个表达式体，他就有表达式体。</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">max2</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> = <span class=\"keyword\">if</span> (a &gt; b) a <span class=\"keyword\">else</span> b</div></pre></td></tr></table></figure>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><h5 id=\"可变变量和不可变变量\"><a href=\"#可变变量和不可变变量\" class=\"headerlink\" title=\"可变变量和不可变变量\"></a>可变变量和不可变变量</h5><ul>\n<li>val - 不可变引用。 相当于Java的final变量。</li>\n<li>var - 可变引用。   普通的Java变量。</li>\n</ul>\n<p>在定义了val变量的代码块执行期间，val变量只能进行唯一一次初始化。但是，如果编译器能确保只有唯一一条初始化语句被执行，可以根据条件使用不同的值来初始化它：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> message:String</div><div class=\"line\"><span class=\"keyword\">if</span> (CanPerformOperation())&#123;</div><div class=\"line\">   message = <span class=\"string\">\"Success\"</span></div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">   message = <span class=\"string\">\"Failed\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：尽管val引用自身是不可变的，但是它指向的对象可能是可变的。例如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> languages = arrayListOf(<span class=\"string\">\"Java\"</span>)  <span class=\"comment\">// 声明不可变引用</span></div><div class=\"line\">languages.add(<span class=\"string\">\"Kotlin\"</span>)              <span class=\"comment\">// 改变引用指向的对象</span></div></pre></td></tr></table></figure>\n<p>错误：类型不匹配</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"number\">42</span></div><div class=\"line\">answer = <span class=\"string\">\"no answer\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">val</span> s1 = <span class=\"string\">\"a is <span class=\"subst\">$a1</span>\"</span></div><div class=\"line\">a1 = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\">// 模板中的任意表达式</span></div><div class=\"line\"><span class=\"keyword\">val</span> s2 = <span class=\"string\">\"<span class=\"subst\">$&#123;s1.replace(\"is\", \"was\")&#125;</span>,but no is <span class=\"subst\">$a1</span>\"</span></div><div class=\"line\"><span class=\"comment\">// a was 1, but now is 3</span></div><div class=\"line\">Log.e(<span class=\"string\">\"s2\"</span>, s2)</div></pre></td></tr></table></figure>\n<p>和许多脚本语言一样，只需要在变量名称前加上 $ ，就可以在字符串字面值中引用局部变量。<br>引用”$”需要转义<code>“\\$”</code></p>\n<h3 id=\"类和属性\"><a href=\"#类和属性\" class=\"headerlink\" title=\"类和属性\"></a>类和属性</h3><h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><p>在Kotlin中，public是默认的可见性，所以你能省略它。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>—&gt;</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person(private val name: String)</div></pre></td></tr></table></figure>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonProperty</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 只读属性：生成一个字段和一个简单的getter</span></div><div class=\"line\">    val name: String = <span class=\"string\">\"kotlin_hahaha\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 可写属性：一个字段、一个getter和一个setter</span></div><div class=\"line\">    var isMarried: Boolean = <span class=\"function\"><span class=\"keyword\">false</span></span></div><div class=\"line\"></div><div class=\"line\">    fun <span class=\"title\">set</span><span class=\"params\">()</span> &#123;</div><div class=\"line\">        isMarried = <span class=\"keyword\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自定义访问器\"><a href=\"#自定义访问器\" class=\"headerlink\" title=\"自定义访问器\"></a>自定义访问器</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by jingbin on 2018/11/18.</div><div class=\"line\"> * 自定义访问器</div><div class=\"line\"> * 也可以使用函数返回，实现和性能没有差别，唯一的差别是可读性</div><div class=\"line\"> * 通常来说：</div><div class=\"line\"> * 如果描述的是类的特征(属性)，应该把它声明成属性。</div><div class=\"line\"> */</div><div class=\"line\">class Rectangle(val height: Int, val width: Int) &#123;</div><div class=\"line\"></div><div class=\"line\">    // 函数表达式 可以赋值</div><div class=\"line\">    val isSquare: Boolean</div><div class=\"line\">    // 声明属性的getter</div><div class=\"line\">        get() &#123;</div><div class=\"line\">            return height == width</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Kotlin源码布局：目录和包\"><a href=\"#Kotlin源码布局：目录和包\" class=\"headerlink\" title=\"Kotlin源码布局：目录和包\"></a>Kotlin源码布局：目录和包</h4><blockquote>\n<p>1.把类和函数的声明放在包中，可以同级</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span>(<span class=\"keyword\">val</span> height: <span class=\"built_in\">Int</span>, <span class=\"keyword\">val</span> width: <span class=\"built_in\">Int</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 函数表达式 可以赋值</span></div><div class=\"line\">    <span class=\"keyword\">val</span> isSquare: <span class=\"built_in\">Boolean</span></div><div class=\"line\">    <span class=\"comment\">// 声明属性的getter</span></div><div class=\"line\">        <span class=\"keyword\">get</span>() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> height == width</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createRandomRectangle</span><span class=\"params\">()</span></span>: Rectangle &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> random = Random()</div><div class=\"line\">    <span class=\"keyword\">return</span> Rectangle(random.nextInt(), random.nextInt())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Kotlin不区分导入的是类还是函数，而且，它允许使用import关键字导入任何种类的声明。可以直接导入顶层函数的名称。</p>\n<blockquote>\n<p>2.导入其他包中的函数</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 导入函数的名称</span></div><div class=\"line\"><span class=\"keyword\">import</span> com.kotlin.jingbin.kotlinapp.classproperty.createRandomRectangle</div><div class=\"line\"><span class=\"comment\">// 导入其他包中的函数</span></div><div class=\"line\">LogUtil.e(createRandomRectangle().isSquare)</div></pre></td></tr></table></figure>\n<p>包层级和java类似。</p>\n<h3 id=\"表示和处理选择-枚举和”when”\"><a href=\"#表示和处理选择-枚举和”when”\" class=\"headerlink\" title=\"表示和处理选择: 枚举和”when”\"></a>表示和处理选择: 枚举和”when”</h3><p>when结构，java中switch结构的替代品，但是更强大。智能转换。</p>\n<h4 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h4><h5 id=\"1-声明简单的枚举类\"><a href=\"#1-声明简单的枚举类\" class=\"headerlink\" title=\"1.声明简单的枚举类\"></a>1.声明简单的枚举类</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleColor</span> </span>&#123;</div><div class=\"line\">    RED, ORANGE</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-声明一个带属性的枚举类\"><a href=\"#2-声明一个带属性的枚举类\" class=\"headerlink\" title=\"2.声明一个带属性的枚举类\"></a>2.声明一个带属性的枚举类</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span></span>(</div><div class=\"line\">        <span class=\"comment\">// 声明枚举常量的属性</span></div><div class=\"line\">        <span class=\"keyword\">val</span> r: <span class=\"built_in\">Int</span>, <span class=\"keyword\">val</span> g: <span class=\"built_in\">Int</span>, <span class=\"keyword\">val</span> b: <span class=\"built_in\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 在每一个常量创建的时候指定属性值</span></div><div class=\"line\">    RED(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>),</div><div class=\"line\">    ORANGE(<span class=\"number\">255</span>, <span class=\"number\">165</span>, <span class=\"number\">0</span>),</div><div class=\"line\">    WELLOW(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>),</div><div class=\"line\">    GREEN(<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>),</div><div class=\"line\">    BULE(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>),</div><div class=\"line\">    INDIGO(<span class=\"number\">75</span>, <span class=\"number\">0</span>, <span class=\"number\">130</span>),</div><div class=\"line\">    VIILET(<span class=\"number\">238</span>, <span class=\"number\">130</span>, <span class=\"number\">238</span>);<span class=\"comment\">// 分号</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">rgb</span><span class=\"params\">()</span></span> = (r * <span class=\"number\">256</span> + g) * <span class=\"number\">256</span> + b</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"3-使用“when”处理枚举类\"><a href=\"#3-使用“when”处理枚举类\" class=\"headerlink\" title=\"3.使用“when”处理枚举类\"></a>3.使用“when”处理枚举类</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 使用when处理枚举类:</div><div class=\"line\">    * 直接返回一个“when\"表达式</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getMnemonic</span><span class=\"params\">(color: <span class=\"type\">Color</span>)</span></span> = &#123;</div><div class=\"line\">       <span class=\"keyword\">when</span> (color) &#123;</div><div class=\"line\">           RED -&gt; <span class=\"string\">\"Richard\"</span></div><div class=\"line\">           ORANGE -&gt; <span class=\"string\">\"Of\"</span></div><div class=\"line\">           WELLOW -&gt; <span class=\"string\">\"Haha\"</span></div><div class=\"line\">           <span class=\"comment\">// 合并多个选项</span></div><div class=\"line\">           BULE, GREEN -&gt; <span class=\"string\">\"望穿\"</span></div><div class=\"line\">           VIILET, INDIGO -&gt; <span class=\"string\">\"秋水\"</span></div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"when\"><a href=\"#when\" class=\"headerlink\" title=\"when\"></a>when</h4><h5 id=\"1、在-when-结构中使用任意对象\"><a href=\"#1、在-when-结构中使用任意对象\" class=\"headerlink\" title=\"1、在 when 结构中使用任意对象\"></a>1、在 when 结构中使用任意对象</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">mix</span><span class=\"params\">(c1: <span class=\"type\">Color</span>, c2: <span class=\"type\">Color</span>)</span></span> = &#123;</div><div class=\"line\">        <span class=\"comment\">// when 表达式的实参可以是任何对象，它被检查是否与分支条件对等</span></div><div class=\"line\">        <span class=\"keyword\">when</span> (setOf(c1, c2)) &#123;</div><div class=\"line\">            setOf(Color.RED, Color.YELLOW) -&gt; Color.ORANGE</div><div class=\"line\">            setOf(Color.BLUE, Color.YELLOW) -&gt; Color.GREEN</div><div class=\"line\">            setOf(Color.BLUE, Color.VIOLET) -&gt; Color.INDIGO</div><div class=\"line\">        <span class=\"comment\">// 如果没有任何其他分支匹配这里就会执行</span></div><div class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> Exception(<span class=\"string\">\"Dirty color\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2、不带参数的-when\"><a href=\"#2、不带参数的-when\" class=\"headerlink\" title=\"2、不带参数的 when\"></a>2、不带参数的 when</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">minOptimized</span><span class=\"params\">(c1: <span class=\"type\">Color</span>, c2: <span class=\"type\">Color</span>)</span></span> = &#123;</div><div class=\"line\">        <span class=\"comment\">// 没有实参传给 when</span></div><div class=\"line\">        <span class=\"keyword\">when</span> &#123;</div><div class=\"line\">            (c1 == Color.RED &amp;&amp; c2 == Color.YELLOW) || (c2 == Color.RED &amp;&amp; c1 == Color.YELLOW) -&gt; Color.ORANGE</div><div class=\"line\">            (c1 == Color.BLUE &amp;&amp; c2 == Color.YELLOW) || (c2 == Color.BLUE &amp;&amp; c1 == Color.YELLOW) -&gt; Color.GREEN</div><div class=\"line\">            (c1 == Color.BLUE &amp;&amp; c2 == Color.VIOLET) || (c2 == Color.BLUE &amp;&amp; c1 == Color.VIOLET) -&gt; Color.INDIGO</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> Exception(<span class=\"string\">\"Dirty color\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"3、智能转换：合并类型检查和转换\"><a href=\"#3、智能转换：合并类型检查和转换\" class=\"headerlink\" title=\"3、智能转换：合并类型检查和转换\"></a>3、智能转换：合并类型检查和转换</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 3.1表达式层次结构</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expr</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 简单的值对象类，只有一个属性value，实现了Expr接口</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Num</span></span>(<span class=\"keyword\">val</span> value: <span class=\"built_in\">Int</span>) : Expr</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// sum运算的实参可以是任何Expr: Num或者另一个Sum</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sum</span></span>(<span class=\"keyword\">val</span> left: Expr, <span class=\"keyword\">val</span> right: Expr) : Expr</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 3.2 使用 if 层叠对表达式求值</div><div class=\"line\">     * 在 Kotlin 中，如果你检查过一个变量是某种类型，后面就不再需要转换它，可以就把它当作你检查过的类型使用。</div><div class=\"line\">     * 事实上编译器为你执行了类型转换，我们把这种行为称为智能转换。</div><div class=\"line\">     * */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">eval</span><span class=\"params\">(e: <span class=\"type\">Expr</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// is - instanceOf</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (e <span class=\"keyword\">is</span> Num) &#123;</div><div class=\"line\">            <span class=\"comment\">// 显示的转换成类型 Num是多余的</span></div><div class=\"line\">            <span class=\"keyword\">val</span> num = e <span class=\"keyword\">as</span> Num</div><div class=\"line\">            <span class=\"keyword\">return</span> num.value</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e <span class=\"keyword\">is</span> Sum) &#123;</div><div class=\"line\">            <span class=\"comment\">// 变量 e 被智能转换了类型</span></div><div class=\"line\">            <span class=\"keyword\">return</span> eval(e.left) + eval(e.right)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">throw</span> IllegalAccessException(<span class=\"string\">\"Unknown expression\"</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"4、重构：用“when”代替“if”\"><a href=\"#4、重构：用“when”代替“if”\" class=\"headerlink\" title=\"4、重构：用“when”代替“if”\"></a>4、重构：用“when”代替“if”</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Kotlin 中没有三元运算符，因为if有返回值</div><div class=\"line\">     * 意味着: 可以用表达式语法重写eval函数，去掉return语句和花括号，使用if表达式作为函数体</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"comment\">// 4.1 使用用返回值的 if 表达式</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">eval2</span><span class=\"params\">(e: <span class=\"type\">Expr</span>)</span></span>: <span class=\"built_in\">Int</span> =</div><div class=\"line\">            <span class=\"keyword\">if</span> (e <span class=\"keyword\">is</span> Num) &#123;</div><div class=\"line\">                e.value</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">is</span> Sum) &#123;</div><div class=\"line\">                eval2(e.right) + eval2(e.left)</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> IllegalAccessException(<span class=\"string\">\"Unknown expression\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 4.2 使用 when 代替 if 层叠</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">eval3</span><span class=\"params\">(e: <span class=\"type\">Expr</span>)</span></span>: <span class=\"built_in\">Int</span> =</div><div class=\"line\">            <span class=\"keyword\">when</span> (e) &#123;</div><div class=\"line\">                <span class=\"keyword\">is</span> Num -&gt; e.value</div><div class=\"line\">                <span class=\"keyword\">is</span> Sum -&gt; eval3(e.right) + eval3(e.left)</div><div class=\"line\">                <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalAccessException(<span class=\"string\">\"Unknown expression\"</span>)</div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"5、代码块作为-“if”-和-“when”-的分支\"><a href=\"#5、代码块作为-“if”-和-“when”-的分支\" class=\"headerlink\" title=\"5、代码块作为 “if” 和 “when” 的分支\"></a>5、代码块作为 “if” 和 “when” 的分支</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * 一个函数要么具有不是代码块的表达式函数体，</div><div class=\"line\">     * 要么具有包含显示return语句的代码块函数体</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"comment\">// 在分支中含有混合操作的 when</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">evalWithLogging</span><span class=\"params\">(e: <span class=\"type\">Expr</span>)</span></span>: <span class=\"built_in\">Int</span> =</div><div class=\"line\">            <span class=\"keyword\">when</span> (e) &#123;</div><div class=\"line\">                <span class=\"keyword\">is</span> Num -&gt; &#123;</div><div class=\"line\">                    LogUtil.e(<span class=\"string\">\"num: <span class=\"subst\">$&#123;e.value&#125;</span>\"</span>)</div><div class=\"line\">                    e.value</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">is</span> Sum -&gt; &#123;</div><div class=\"line\">                    <span class=\"keyword\">val</span> left = <span class=\"keyword\">this</span>.evalWithLogging(e.left)</div><div class=\"line\">                    <span class=\"keyword\">val</span> right = <span class=\"keyword\">this</span>.evalWithLogging(e.right)</div><div class=\"line\">                    LogUtil.e(<span class=\"string\">\"Sum: <span class=\"subst\">$left</span> + <span class=\"subst\">$right</span>\"</span>)</div><div class=\"line\">                    <span class=\"comment\">// 代码块中最后的表达式就是结果</span></div><div class=\"line\">                    left + right</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalAccessException(<span class=\"string\">\"Unknown expression\"</span>)</div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"迭代事物-“when”循环和“for”循环\"><a href=\"#迭代事物-“when”循环和“for”循环\" class=\"headerlink\" title=\"迭代事物: “when”循环和“for”循环\"></a>迭代事物: “when”循环和“for”循环</h3><h4 id=\"1、“while”-循环\"><a href=\"#1、“while”-循环\" class=\"headerlink\" title=\"1、“while” 循环\"></a>1、“while” 循环</h4><p>Kotlin 有 while 循环和 do-while 循环，他们的语法和Java中相应的循环没有什么区别</p>\n<h4 id=\"2、迭代数字：区间和数列\"><a href=\"#2、迭代数字：区间和数列\" class=\"headerlink\" title=\"2、迭代数字：区间和数列\"></a>2、迭代数字：区间和数列</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">     * 区间：区间本质上就是两个值之间的间隔，这两个值通常是数字：一个起始值，一个结束值。</div><div class=\"line\">     * 使用 .. 运算符来表示区间</div><div class=\"line\">     * 数列：你能用整数区间做的最基本的事情就是循环迭代其中所有的值。</div><div class=\"line\">     * 如果你能迭代区间中所有的值，这样的区间被称作数列。</div><div class=\"line\">     * */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> oneToTen = <span class=\"number\">1.</span><span class=\"number\">.10</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用 when 实现 Fizz-Buzz 游戏</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fizzBuzz</span><span class=\"params\">(i: <span class=\"type\">Int</span>)</span></span> = <span class=\"keyword\">when</span> &#123;</div><div class=\"line\">        i % <span class=\"number\">15</span> == <span class=\"number\">0</span> -&gt; <span class=\"string\">\"FizzBuzz\"</span></div><div class=\"line\">        i % <span class=\"number\">3</span> == <span class=\"number\">0</span> -&gt; <span class=\"string\">\"Fizz\"</span></div><div class=\"line\">        i % <span class=\"number\">5</span> == <span class=\"number\">0</span> -&gt; <span class=\"string\">\"Buzz\"</span></div><div class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"string\">\"<span class=\"subst\">$i</span>\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>) &#123;</div><div class=\"line\"><span class=\"comment\">//            LogUtil.e(fizzBuzz(i))</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 倒序 只计偶数 [使用 until 函数可以标识：不包含指定结束值的半闭合区间]</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">100</span> downTo <span class=\"number\">0</span> step <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            LogUtil.e(fizzBuzz(i))</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3、迭代map\"><a href=\"#3、迭代map\" class=\"headerlink\" title=\"3、迭代map\"></a>3、迭代map</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用 TreeMap 让键排序</span></div><div class=\"line\"> <span class=\"keyword\">val</span> binaryReps = TreeMap&lt;<span class=\"built_in\">Char</span>, String&gt;()</div><div class=\"line\"> <span class=\"comment\">// 创建字符区间 包括 F</span></div><div class=\"line\"> <span class=\"keyword\">for</span> (c <span class=\"keyword\">in</span> <span class=\"string\">'A'</span>..<span class=\"string\">'F'</span>) &#123;</div><div class=\"line\">     <span class=\"comment\">// 把 ASCII 码转换成二进制</span></div><div class=\"line\">     <span class=\"keyword\">val</span> binaryString = Integer.toBinaryString(c.toInt())</div><div class=\"line\">     binaryReps[c] = binaryString</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">// 迭代 map ，把键和值赋值给两个变量</span></div><div class=\"line\"> <span class=\"keyword\">for</span> ((letter, binary) <span class=\"keyword\">in</span> binaryReps) &#123;</div><div class=\"line\">     LogUtil.e(<span class=\"string\">\"<span class=\"subst\">$letter</span> = <span class=\"subst\">$binary</span>\"</span>)</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 迭代集合时 使用下标</span></div><div class=\"line\"> <span class=\"keyword\">val</span> list = arrayListOf(<span class=\"string\">\"10\"</span>, <span class=\"string\">\"11\"</span>, <span class=\"string\">\"1001\"</span>)</div><div class=\"line\"> <span class=\"keyword\">for</span> ((index, element) <span class=\"keyword\">in</span> list.withIndex()) &#123;</div><div class=\"line\">     LogUtil.e(<span class=\"string\">\"<span class=\"subst\">$index</span> = <span class=\"subst\">$element</span>\"</span>)</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4、使用-“in”-检查集合和区间的成员\"><a href=\"#4、使用-“in”-检查集合和区间的成员\" class=\"headerlink\" title=\"4、使用 “in” 检查集合和区间的成员\"></a>4、使用 “in” 检查集合和区间的成员</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"comment\">// 1.使用 in 检查区间的成员</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isLetter</span><span class=\"params\">(c: <span class=\"type\">Char</span>)</span></span> = c <span class=\"keyword\">in</span> <span class=\"string\">'a'</span>..<span class=\"string\">'z'</span> || c <span class=\"keyword\">in</span> <span class=\"string\">'A'</span>..<span class=\"string\">'Z'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isNoDigitic</span><span class=\"params\">(c: <span class=\"type\">Char</span>)</span></span> = c !<span class=\"keyword\">in</span> <span class=\"string\">'0'</span>..<span class=\"string\">'9'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 2.用 in 检查作为when分支</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">recognize</span><span class=\"params\">(c: <span class=\"type\">Char</span>)</span></span> = <span class=\"keyword\">when</span> (c) &#123;</div><div class=\"line\">        <span class=\"keyword\">in</span> <span class=\"string\">'0'</span>..<span class=\"string\">'9'</span> -&gt; <span class=\"string\">\"In's a digit!\"</span></div><div class=\"line\">        <span class=\"keyword\">in</span> <span class=\"string\">'a'</span>..<span class=\"string\">'z'</span>, <span class=\"keyword\">in</span> <span class=\"string\">'A'</span>..<span class=\"string\">'Z'</span> -&gt; <span class=\"string\">\"In's a letter!\"</span></div><div class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"string\">\"I don't know..\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">### Kotlin中的异常</div><div class=\"line\">```kotlin</div><div class=\"line\"><span class=\"comment\">// val 不能再赋值，相当于 final</span></div><div class=\"line\">        <span class=\"keyword\">val</span> percentage = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (percentage !<span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.100</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> IllegalAccessException(<span class=\"string\">\"A percentage value must be between 0 and 100: <span class=\"subst\">$percentage</span>\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 和所有其他类一样，不必使用 new 关键字来创建异常实例。</div><div class=\"line\">         * 和java不同的是，Kotlin中throw结构是一个表达式，能作为另一个表达式的一部分使用：</div><div class=\"line\">         */</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> number = <span class=\"number\">8</span></div><div class=\"line\">        <span class=\"keyword\">val</span> percentage2 =</div><div class=\"line\">                <span class=\"keyword\">if</span> (number <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.100</span>) &#123;</div><div class=\"line\">                    number</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// throw 是一个表达式</span></div><div class=\"line\">                    <span class=\"keyword\">throw</span> IllegalAccessException(<span class=\"string\">\"A percentage value must be between 0 and 100: <span class=\"subst\">$percentage</span>\"</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> bufferedReader = BufferedReader(StringReader(<span class=\"string\">\"239\"</span>))</div></pre></td></tr></table></figure>\n<h4 id=\"1、try-catch-和-finally\"><a href=\"#1、try-catch-和-finally\" class=\"headerlink\" title=\"1、try catch 和 finally\"></a>1、try catch 和 finally</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 不必显式地知道这个函数可能抛出的异常</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readNumber</span><span class=\"params\">(reader: <span class=\"type\">BufferedReader</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">val</span> line = reader.readLine()</div><div class=\"line\">            <span class=\"keyword\">return</span> Integer.parseInt(line)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 异常类型在右边</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: NumberFormatException) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            reader.close()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2、try-作为表达式\"><a href=\"#2、try-作为表达式\" class=\"headerlink\" title=\"2、try 作为表达式\"></a>2、try 作为表达式</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readNumber2</span><span class=\"params\">(reader: <span class=\"type\">BufferedReader</span>)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> number = <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 没有任何异常发生时 使用这个值</span></div><div class=\"line\">            Integer.parseInt(reader.readLine())</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: NumberFormatException) &#123;</div><div class=\"line\"><span class=\"comment\">//            return</span></div><div class=\"line\">            <span class=\"comment\">// 发生异常时的情况下使用 null</span></div><div class=\"line\">            <span class=\"literal\">null</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>fun 关键字用来声明函数。Val关键字和var关键字分别用来声明只读变量和可变变量。</li>\n<li>字符串模板帮组你避免繁琐的字符串拼接。在变量名称前加上 $ 前缀或者用 ${} 包围一个表达式，来把值注入到字符串中。</li>\n<li>值对象类在Kotlin中以简洁的方式表示。</li>\n<li>熟悉的if现在是带返回值的表达式。</li>\n<li>when表达式类似于Java中的switch但功能更强大。</li>\n<li>在检查过变量具有某种类型之后不必显示地转换它的类型:编译器使用智能转换字段帮你完成。</li>\n<li>for、while、和 do-while 循环与java类似，但是for循环现在更加方便，特别是当你需要迭代map的时候，又或是迭代集合需要下标的时候。</li>\n<li>简洁的语法 1..5 会创建一个区间。区间和数列允许Kotlin在for循环中使用统一的语法和同一套抽象机制，并且还可以使用in运算符和!in运算符来检查值是否属于某个区间。</li>\n<li>Kotlin中的异常处理和java非常相似，除了Kotlin不要求你声明函数可以抛出异常。</li>\n</ul>\n","categories":["Kotlin"],"tags":["Kotlin"]},{"title":"Kotlin | 1.定义和目的","url":"http://jinbeen.com/2019/03/22/kotlin-define/","content":"<ul>\n<li>书籍：<a href=\"https://book.douban.com/subject/27093660/\" target=\"_blank\" rel=\"external\">《Kotlin实战》</a></li>\n</ul>\n<a id=\"more\"></a>\n<p>本章内容包括：</p>\n<blockquote>\n<ul>\n<li>Kotlin 的基本示范</li>\n<li>Kotlin 语言的主要特征</li>\n<li>Android 和服务端开发的可能性</li>\n<li>Kotlin 与其他语言的区别</li>\n<li>用 Kotlin 编写并运行代码</li>\n</ul>\n</blockquote>\n<ul>\n<li>Kotlin和Java一样是一种静态类型的编程语言。编译时即可检查代码正确性。动态语言：Groovy,JRuby。</li>\n<li>根据上下问判断变量类型： val x=1</li>\n<li>性能、可靠性、可维护性、工具支持。</li>\n</ul>\n<hr>\n<p>支持函数式编程风格，不强制使用：</p>\n<ul>\n<li>函数类型，允许函数接受其他函数作为参数，或者返回其他函数。</li>\n<li>lambda表达式</li>\n<li>数据类，提供了创建不可变值对象的简明语法</li>\n<li>标准库中包含了丰富的API集合，让你用函数式编程风格操作对象和集合。</li>\n</ul>\n<hr>\n<p>自动检查空指针：</p>\n<ul>\n<li>val s: String? = null  可以为null，也会检查，禁止可能导致的空指针</li>\n<li>val s2: String = “”    不能为null</li>\n</ul>\n<p>避免类型转换异常：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(value <span class=\"keyword\">is</span> String)               检查类型</div><div class=\"line\">  println(value.toUpperCase())    调用该类型的方法</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>源代码文件存放在后缀名为.kt的文件中，编辑器生成.class文件。</li>\n<li>AndriodSdudio中使用：<strong>“Setting(设置) - Plugins(插件) - Install JetBrains Plugin - Kotlin”</strong></li>\n</ul>\n","categories":["Kotlin"],"tags":["Kotlin"]},{"title":"Android Span在项目中的几种使用方式","url":"http://jinbeen.com/2019/03/21/android-span/","content":"<ul>\n<li>1.改变文字颜色</li>\n<li>2.改变文字大小</li>\n<li>3.改变文字颜色 并 添加点击事件</li>\n<li>4.增加边框和改变颜色及字体大小</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1-改变文字颜色\"><a href=\"#1-改变文字颜色\" class=\"headerlink\" title=\"1.改变文字颜色\"></a>1.改变文字颜色</h3><blockquote>\n<p>ForegroundColorSpan</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 自定义颜色</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> content 全部文本</div><div class=\"line\"> * <span class=\"doctag\">@param</span> keyWord 需要变色的关键字</div><div class=\"line\"> * <span class=\"doctag\">@param</span> color   颜色</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SpannableStringBuilder <span class=\"title\">getSpan</span><span class=\"params\">(String content, String keyWord, <span class=\"keyword\">int</span> color)</span> </span>&#123;</div><div class=\"line\">    SpannableStringBuilder span = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (content == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        span = <span class=\"keyword\">new</span> SpannableStringBuilder(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> span;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> startIndex = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> endIndex = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (keyWord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            startIndex = content.indexOf(keyWord);</div><div class=\"line\">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class=\"line\">            span = <span class=\"keyword\">new</span> SpannableStringBuilder(content);</div><div class=\"line\">            <span class=\"keyword\">if</span> (startIndex != -<span class=\"number\">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class=\"line\">                span.setSpan(<span class=\"keyword\">new</span> ForegroundColorSpan(getResoure().getColor(color)), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> span;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-改变文字大小\"><a href=\"#2-改变文字大小\" class=\"headerlink\" title=\"2.改变文字大小\"></a>2.改变文字大小</h3><blockquote>\n<p>AbsoluteSizeSpan</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 设置单个字符串的文字大小</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> content 全部文字</div><div class=\"line\"> * <span class=\"doctag\">@param</span> keyWord 需要改变的文本</div><div class=\"line\"> * <span class=\"doctag\">@param</span> spValue 需要设置的文本大小</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SpannableStringBuilder <span class=\"title\">getSizeSpan</span><span class=\"params\">(String content, String keyWord, <span class=\"keyword\">float</span> spValue)</span> </span>&#123;</div><div class=\"line\">    SpannableStringBuilder span = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(content)) &#123;</div><div class=\"line\">        span = <span class=\"keyword\">new</span> SpannableStringBuilder(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> span;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> startIndex = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> endIndex = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (keyWord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            startIndex = content.indexOf(keyWord);</div><div class=\"line\">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class=\"line\">            span = <span class=\"keyword\">new</span> SpannableStringBuilder(content);</div><div class=\"line\">            <span class=\"keyword\">if</span> (startIndex != -<span class=\"number\">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class=\"line\">                <span class=\"keyword\">float</span> px = DensityAppUtil.sp2px(spValue);</div><div class=\"line\">                span.setSpan(<span class=\"keyword\">new</span> AbsoluteSizeSpan((<span class=\"keyword\">int</span>) px), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> span;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-改变文字颜色-并-添加点击事件\"><a href=\"#3-改变文字颜色-并-添加点击事件\" class=\"headerlink\" title=\"3.改变文字颜色 并 添加点击事件\"></a>3.改变文字颜色 并 添加点击事件</h3><blockquote>\n<p>ClickableSpan</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonSpan</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClickableSpan</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    View.OnClickListener onClickListener;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> colorId;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ButtonSpan</span><span class=\"params\">(Context context, View.OnClickListener onClickListener)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, onClickListener, R.color.color_theme);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ButtonSpan</span><span class=\"params\">(Context context, View.OnClickListener onClickListener, <span class=\"keyword\">int</span> colorId)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onClickListener = onClickListener;</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.colorId = colorId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateDrawState</span><span class=\"params\">(TextPaint ds)</span> </span>&#123;</div><div class=\"line\">        ds.setColor(context.getResources().getColor(colorId));</div><div class=\"line\">        ds.setUnderlineText(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View widget)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (onClickListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            onClickListener.onClick(widget);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// content为全部的字符串，keyWord为需要改变的字符串</span></div><div class=\"line\">SpannableString spannableString = <span class=\"keyword\">new</span> SpannableString(content);</div><div class=\"line\">ButtonSpan span = <span class=\"keyword\">new</span> ButtonSpan(v.getContext(), <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something..</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, R.color.color_theme);</div><div class=\"line\">spannableString.setSpan(span, content.indexOf(keyWord), content.indexOf(keyWord + keyWord.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class=\"line\"><span class=\"comment\">//不设置 没有点击事件</span></div><div class=\"line\">titleTop.setMovementMethod(LinkMovementMethod.getInstance());</div><div class=\"line\"><span class=\"comment\">//设置点击后的颜色为透明</span></div><div class=\"line\">titleTop.setHighlightColor(Color.TRANSPARENT);</div><div class=\"line\">titleTop.setText(spannableString);</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-增加边框和改变颜色及字体大小\"><a href=\"#4-增加边框和改变颜色及字体大小\" class=\"headerlink\" title=\"4.增加边框和改变颜色及字体大小\"></a>4.增加边框和改变颜色及字体大小</h3><blockquote>\n<p>ReplacementSpan</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagSpan</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReplacementSpan</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// span width</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mSize;</div><div class=\"line\">    <span class=\"comment\">// text and background wireframe color</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor;</div><div class=\"line\">    <span class=\"comment\">// tag text size</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mTextSizePx;</div><div class=\"line\">    <span class=\"comment\">// background radius</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mRadiusPx;</div><div class=\"line\">    <span class=\"comment\">// background wireframe right margin</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mRightMarginPx;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TagSpan</span><span class=\"params\">(<span class=\"keyword\">int</span> color, <span class=\"keyword\">int</span> textSizePx, <span class=\"keyword\">int</span> radiusPx, <span class=\"keyword\">int</span> rightMarginPx)</span> </span>&#123;</div><div class=\"line\">        mColor = color;</div><div class=\"line\">        mTextSizePx = textSizePx;</div><div class=\"line\">        mRadiusPx = radiusPx;</div><div class=\"line\">        mRightMarginPx = rightMarginPx;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">(@NonNull Paint paint, CharSequence text, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, Paint.FontMetricsInt fm)</span> </span>&#123;</div><div class=\"line\">        mSize = (<span class=\"keyword\">int</span>) paint.measureText(text, start, end) + mRightMarginPx;</div><div class=\"line\">        <span class=\"keyword\">return</span> mSize;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(@NonNull Canvas canvas, CharSequence text, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">float</span> x, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> bottom, Paint paint)</span> </span>&#123;</div><div class=\"line\">        drawTagRect(canvas, x, y, paint);</div><div class=\"line\">        drawTagText(canvas, text, start, end, y, paint);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawTagRect</span><span class=\"params\">(Canvas canvas, <span class=\"keyword\">float</span> x, <span class=\"keyword\">int</span> y, Paint paint)</span> </span>&#123;</div><div class=\"line\">        paint.setColor(mColor);</div><div class=\"line\">        paint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        Paint.FontMetricsInt fontMetrics = paint.getFontMetricsInt();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> strokeWidth = paint.getStrokeWidth();</div><div class=\"line\">        RectF oval = <span class=\"keyword\">new</span> RectF(x + strokeWidth + <span class=\"number\">0.5f</span>, y + fontMetrics.ascent, x + mSize + strokeWidth + <span class=\"number\">0.5f</span> - mRightMarginPx, y + fontMetrics.descent);</div><div class=\"line\">        paint.setStyle(Paint.Style.STROKE);</div><div class=\"line\">        canvas.drawRoundRect(oval, mRadiusPx, mRadiusPx, paint);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawTagText</span><span class=\"params\">(Canvas canvas, CharSequence text, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">int</span> y, Paint paint)</span> </span>&#123;</div><div class=\"line\">        paint.setTextSize(mTextSizePx);</div><div class=\"line\">        paint.setColor(mColor);</div><div class=\"line\">        paint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\">        paint.setTextAlign(Paint.Align.CENTER);</div><div class=\"line\"></div><div class=\"line\">        Paint.FontMetrics fontMetrics = paint.getFontMetrics();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> textCenterX = (mSize - mRightMarginPx / <span class=\"number\">2</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> textBaselineY = (<span class=\"keyword\">int</span>) (y - fontMetrics.descent / <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">final</span> String tag = text.subSequence(start, end).toString();</div><div class=\"line\">        canvas.drawText(tag, textCenterX, textBaselineY, paint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用静态方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 增加边框和改变颜色及字体大小</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> content 内容</div><div class=\"line\"> * <span class=\"doctag\">@param</span> keyWord 关键字</div><div class=\"line\"> * <span class=\"doctag\">@param</span> color   颜色</div><div class=\"line\"> * <span class=\"doctag\">@param</span> sp      字体sp，需转换为对应的px</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SpannableStringBuilder <span class=\"title\">getSpan</span><span class=\"params\">(String content, String keyWord, <span class=\"keyword\">int</span> color, <span class=\"keyword\">int</span> sp)</span> </span>&#123;</div><div class=\"line\">    SpannableStringBuilder span = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (content == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        span = <span class=\"keyword\">new</span> SpannableStringBuilder(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> span;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> startIndex = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> endIndex = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.isEmpty(keyWord)) &#123;</div><div class=\"line\">            startIndex = content.indexOf(keyWord);</div><div class=\"line\">            endIndex = content.indexOf(keyWord) + keyWord.length();</div><div class=\"line\">            span = <span class=\"keyword\">new</span> SpannableStringBuilder(content);</div><div class=\"line\">            <span class=\"keyword\">if</span> (startIndex != -<span class=\"number\">1</span> &amp;&amp; startIndex &lt;= endIndex) &#123;</div><div class=\"line\">                <span class=\"comment\">// 圆角 右边距</span></div><div class=\"line\">                span.setSpan(<span class=\"keyword\">new</span> TagSpan(color, (<span class=\"keyword\">int</span>) sp, <span class=\"number\">4</span>, <span class=\"number\">8</span>), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> span;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","categories":["Android"],"tags":["Android","span"]},{"title":"Git commit 规范","url":"http://jinbeen.com/2019/03/20/git-commit/","content":"<blockquote>\n<p>与道人之短，勿说己之长；人骂之一笑，人誉之一笑。  - 齐白石/国画大师</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>git提交估计也快上万次了，每次不知道怎么写好，今天在网上找到一套规范然后加上常用的一些，总结出来一套 Git commit 规范，没有强制的规定，主要是翻阅以前的日志会更清晰。</p>\n<hr>\n<p> <code>type: description</code></p>\n<p><code>type</code> 是 commit 的类别，只允许如下几种标识：</p>\n<ul>\n<li>fix: 修复bug</li>\n<li>add: 新功能</li>\n<li>update: 更新</li>\n<li>refactor : 某个已有功能重构</li>\n<li>perf : 性能优化</li>\n<li>style : 代码格式改变</li>\n<li>test: 增加测试代码</li>\n<li>docs : 文档改变</li>\n<li>revert: 撤销上一次的commit</li>\n<li>build: 构建工具或构建过程等的变动，如：关联包升级等</li>\n</ul>\n<p><code>description</code> 是对本次提交的简短描述：</p>\n<ul>\n<li>不超过50个字符。</li>\n<li>推荐以动词开头，如： 设置、修改、增加、删减、撤销等</li>\n</ul>\n","categories":["Git"],"tags":["Git"]},{"title":"TabLayout的几种用法","url":"http://jinbeen.com/2019/03/19/android-tablayout/","content":"<ul>\n<li>1.结合ViewPager使用</li>\n<li>2.点击滑动选中，类似<code>RadioGroup</code>的效果</li>\n<li>3.点击滑动到屏幕中央，并再次点击可取消</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1-结合ViewPager使用\"><a href=\"#1-结合ViewPager使用\" class=\"headerlink\" title=\"1.结合ViewPager使用\"></a>1.结合ViewPager使用</h3><p>这是最常见的用法了，实现也比较简单。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-c52cde3a668e998a.gif?imageMogr2/auto-orient/strip\" alt=\"tablayout01.gif\"></p>\n<p>布局文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tab_book\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"38dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabBackground</span>=<span class=\"string\">\"@drawable/ripple_tab_bg\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabIndicatorColor</span>=<span class=\"string\">\"@color/colorTheme\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabSelectedTextColor</span>=<span class=\"string\">\"@color/colorTheme\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabTextColor</span>=<span class=\"string\">\"@color/colorTabText\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/vp_book\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.view.ViewPager</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>对应的Activity页面：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WanFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseFragment</span>&lt;<span class=\"title\">NoViewModel</span>,<span class=\"title\">FragmentBookBinding</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; mTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">3</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Fragment&gt; mFragments = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">        showLoading();</div><div class=\"line\">        initFragmentList();</div><div class=\"line\">        MyFragmentPagerAdapter myAdapter = <span class=\"keyword\">new</span> MyFragmentPagerAdapter(getChildFragmentManager(), mFragments, mTitleList);</div><div class=\"line\">        bindingView.vpBook.setAdapter(myAdapter);</div><div class=\"line\">        <span class=\"comment\">// 左右预加载页面的个数</span></div><div class=\"line\">        bindingView.vpBook.setOffscreenPageLimit(<span class=\"number\">2</span>);</div><div class=\"line\">        myAdapter.notifyDataSetChanged();</div><div class=\"line\">        bindingView.tabBook.setTabMode(TabLayout.MODE_FIXED);</div><div class=\"line\">        bindingView.tabBook.setupWithViewPager(bindingView.vpBook);</div><div class=\"line\">        showContentView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">setContent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> R.layout.fragment_book;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initFragmentList</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mTitleList.clear();</div><div class=\"line\">        mTitleList.add(<span class=\"string\">\"玩安卓\"</span>);</div><div class=\"line\">        mTitleList.add(<span class=\"string\">\"知识体系\"</span>);</div><div class=\"line\">        mTitleList.add(<span class=\"string\">\"导航数据\"</span>);</div><div class=\"line\">        mFragments.add(BannerFragment.newInstance());</div><div class=\"line\">        mFragments.add(TreeFragment.newInstance());</div><div class=\"line\">        mFragments.add(NaviFragment.newInstance());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>设置后就可以达到切换滑动的效果。</p>\n<h3 id=\"2-点击滑动选中，类似RadioGroup的效果\"><a href=\"#2-点击滑动选中，类似RadioGroup的效果\" class=\"headerlink\" title=\"2.点击滑动选中，类似RadioGroup的效果\"></a>2.点击滑动选中，类似<code>RadioGroup</code>的效果</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-d1001a99c065fadc.gif?imageMogr2/auto-orient/strip\" alt=\"tablayout02.gif\"></p>\n<p>不过它与<code>RadioGroup</code>不同在于它有下划线可以滑动，更<code>动感</code>…，如果产品经理要求这样实现，就可以派上用场了。</p>\n<p>布局文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tl_search\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"30dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorTheme\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabIndicatorColor</span>=<span class=\"string\">\"@color/colorWhite\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabSelectedTextColor</span>=<span class=\"string\">\"@color/colorWhite\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabTextAppearance</span>=<span class=\"string\">\"@style/MyTabLayoutTextAppearance\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabTextColor</span>=<span class=\"string\">\"@color/colorWhiteHalf\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabItem</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"玩安卓\"</span></div><div class=\"line\">                <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorWhite\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"12sp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabItem</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"干货 | 安卓\"</span></div><div class=\"line\">                <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorWhite\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"12sp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabItem</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"干货 | 全部\"</span></div><div class=\"line\">                <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorWhite\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"12sp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabItem</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"网页\"</span></div><div class=\"line\">                <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorWhite\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"12sp\"</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TabLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当然也可以在Activit动态添加，其中的一些颜色设置等就不细说了~：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (String bean : list) &#123;</div><div class=\"line\">     MyTabLayout.Tab tab = binding.tlSearch.newTab();</div><div class=\"line\">     tab.setText(bean.getName());</div><div class=\"line\">     binding.tlSearch.addTab(tab);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>然后再监听点击的时候做处理：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">binding.tlSearch.addOnTabSelectedListener(<span class=\"keyword\">new</span> TabLayout.OnTabSelectedListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTabSelected</span><span class=\"params\">(TabLayout.Tab tab)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 选中 逻辑操作 (再次点击不会触发)</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTabUnselected</span><span class=\"params\">(TabLayout.Tab tab)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTabReselected</span><span class=\"params\">(TabLayout.Tab tab)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-点击滑动到屏幕中央，并再次点击可取消\"><a href=\"#3-点击滑动到屏幕中央，并再次点击可取消\" class=\"headerlink\" title=\"3.点击滑动到屏幕中央，并再次点击可取消\"></a>3.点击滑动到屏幕中央，并再次点击可取消</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-59d07d987b8a1104.gif?imageMogr2/auto-orient/strip\" alt=\"tablayout03.gif\"></p>\n<p>这样的效果很实用，很多App都会有这样的效果，以前我都是用<code>HorizontalScrollView</code>来实现的，设置点击的item滑动到屏幕中央。</p>\n<p>后来想想<code>TabLayout</code>继承自<code>HorizontalScrollView</code>，选中也会自动滚动并居中，于是就选用了它来实现，相对于直接使用<code>HorizontalScrollView</code>代码量更少。</p>\n<p>布局文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tl_tag\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabIndicatorHeight</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"scrollable\"</span></div><div class=\"line\">    <span class=\"attr\">app:tabSelectedTextColor</span>=<span class=\"string\">\"@color/color_theme\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>Activity里控制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 添加自定义Tab</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++) &#123;</div><div class=\"line\">    TabLayout.Tab tab = bindingView.tlTag.newTab();</div><div class=\"line\">    bindingView.tlTag.addTab(tab.setCustomView(getTabView(result.get(i).getName())));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 默认 手动设置 position=0的Tab不选中</span></div><div class=\"line\"><span class=\"keyword\">if</span> (bindingView.tlTag.getTabAt(<span class=\"number\">0</span>) != <span class=\"keyword\">null</span></div><div class=\"line\">        &amp;&amp; bindingView.tlTag.getTabAt(<span class=\"number\">0</span>).getCustomView() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    bindingView.tlTag.getTabAt(<span class=\"number\">0</span>).getCustomView().setSelected(<span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 添加监听</span></div><div class=\"line\">addTagListener();</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 哪个tag被选择过</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tagSelectPosition = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">// 是否被选中</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> tagSelect = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 主要处理取消选中的状态</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addTagListener</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    bindingView.tlTag.addOnTabSelectedListener(<span class=\"keyword\">new</span> TabLayout.OnTabSelectedListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTabSelected</span><span class=\"params\">(TabLayout.Tab tab)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// // 切换到此tab，则设置已选中position和选中的状态</span></div><div class=\"line\">            tagSelectPosition = tab.getPosition();</div><div class=\"line\">            tagSelect = <span class=\"keyword\">true</span>;</div><div class=\"line\">            <span class=\"comment\">// do something..</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTabUnselected</span><span class=\"params\">(TabLayout.Tab tab)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTabReselected</span><span class=\"params\">(TabLayout.Tab tab)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// // Tab再次被点击会走这里</span></div><div class=\"line\">            <span class=\"comment\">// 之前手动 [取消] 的tab角标 初始值为0</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (tagSelectPosition == tab.getPosition()) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (tagSelect) &#123;</div><div class=\"line\">                    <span class=\"comment\">// tab之前被选中，则手动取消</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class=\"keyword\">null</span></div><div class=\"line\">                            &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        tagSelectPosition = tab.getPosition();</div><div class=\"line\">                        tagSelect = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView().setSelected(<span class=\"keyword\">false</span>);</div><div class=\"line\">                        <span class=\"comment\">// do something..</span></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// tab之前被取消，则手动将其选中</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class=\"keyword\">null</span></div><div class=\"line\">                            &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        tagSelectPosition = tab.getPosition();</div><div class=\"line\">                        tagSelect = <span class=\"keyword\">true</span>;</div><div class=\"line\">                         <span class=\"comment\">// do something..</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 一般不会触发，以防万一</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (bindingView.tlTag.getTabAt(tab.getPosition()) != <span class=\"keyword\">null</span></div><div class=\"line\">                        &amp;&amp; bindingView.tlTag.getTabAt(tab.getPosition()).getCustomView() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    tagSelectPosition = tab.getPosition();</div><div class=\"line\">                    tagSelect = <span class=\"keyword\">true</span>;</div><div class=\"line\">                     <span class=\"comment\">// do something..</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h3><p>第一部分：<a href=\"https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/wan/WanFragment.java\" target=\"_blank\" rel=\"external\">WanFragment.java</a><br>第二部分：<a href=\"https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/menu/SearchActivity.java\" target=\"_blank\" rel=\"external\">SearchActivity.java</a></p>\n<p>完整Demo项目：<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">https://github.com/youlookwhat/CloudReader</a></p>\n<p>第三部分因为是公司项目，暂时只有上面的代码片段，已包含所有的相关代码，如果有问题请留言，我会重新整理在Demo里。</p>\n","categories":["Android"],"tags":["Android"]},{"title":"Android MVC、MVP、MVVM、MVP-databinding 架构单元示例","url":"http://jinbeen.com/2019/03/18/android-mvc-mvp-mvvm/","content":"<blockquote>\n<p>生命不必每时每刻都要冲刺，低沉时就当是放一个悠长假期。 - 北川悦吏子/编剧</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>GitHub地址：<a href=\"https://github.com/youlookwhat/ProjectPatternStudy\" target=\"_blank\" rel=\"external\">ProjectPatternStudy</a></p>\n<p>基本Android项目都采用MVC、MVP、MVVM架构，个人认为软件架构没有绝对的优劣之分，大家都各有利弊。</p>\n<ul>\n<li>如果页面比较单一，采用MVC也未尝不可；</li>\n<li>如果需要稳定性高，解耦性强就可以选用MVP，使M层与V层分离，结构更清晰；</li>\n<li>如果想尝鲜(其实已经有段时间了)，少写接口，高效，也可以使用MVVM；</li>\n</ul>\n<p>阮一峰《<a href=\"http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\" target=\"_blank\" rel=\"external\">MVC，MVP 和 MVVM 的图示</a>》总结的非常简练，这里相当于扩展了一下，对于不太懂的人可能会用处更大。</p>\n<p>MVP-databinding：是使用MVP架构，但是布局使用databinding设置值，也是行之有效的一种，也可以满足你的需求。</p>\n<h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><p>Model-View-Controller，最常见的软件架构之一。</p>\n<ul>\n<li>视图（View）：用户界面。</li>\n<li>控制器（Controller）：业务逻辑</li>\n<li>模型（Model）：数据保存</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-bf0d44e0665daf6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"来自MVC----MVC，MVP 和 MVVM 的图示\"></p>\n<p>如<code>Avtivity</code>里的一个点击事件：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 将业务逻辑封装在Model里, 但C(Activity)层可以和Model直接交互, 交互完后根据显示结果来调整V层(如 显示数据)</div><div class=\"line\"> */</div><div class=\"line\">EssayModel essayModel = <span class=\"keyword\">new</span> EssayModel(LoadDataActivity.<span class=\"keyword\">this</span>);</div><div class=\"line\">essayModel.getEssay(<span class=\"number\">3</span>, <span class=\"keyword\">new</span> EssayModel.OnEssayListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(List&lt;Essay&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 直接使用list,得到List的逻辑都放在mode层</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.get(<span class=\"number\">0</span>) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            tvViewUpdata.setText(<span class=\"string\">\"MVC 更新数据: \"</span> + list.get(<span class=\"number\">0</span>).getTitle());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果一个页面比较简单，只有简单的几个操作，也不会经常去改可以使用此方式；如果页面逻辑比较复杂，接口请求都有好几个，那么不建议使用MVC，因为代码会全部堆积在一个Activity里面，会显得非常之冗余。</p>\n<h3 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h3><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。<br><img src=\"http://upload-images.jianshu.io/upload_images/1354448-11d6a8d1746fae11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"来自MVP----MVC，MVP 和 MVVM 的图示\"></p>\n<p>通过P层将Model层与View层解耦，同时P与V、P与M可以相互通信。<br>下面举个登录的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserLoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUserLoginView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.et_username)</div><div class=\"line\">    EditText etUsername;</div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.et_password)</div><div class=\"line\">    EditText etPassword;</div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.bt_login)</div><div class=\"line\">    Button btLogin;</div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.bt_clear)</div><div class=\"line\">    Button btClear;</div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.progress)</div><div class=\"line\">    ProgressBar progress;</div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.activity_user_login)</div><div class=\"line\">    RelativeLayout activityUserLogin;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserLoginPresenter userLoginPresenter = <span class=\"keyword\">new</span> UserLoginPresenter(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_user_login);</div><div class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">        setTitle(<span class=\"string\">\"用户登录（MVP）\"</span>);</div><div class=\"line\"></div><div class=\"line\">        initListener();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initListener</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        btLogin.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                userLoginPresenter.login();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        btClear.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                userLoginPresenter.clear();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> etUsername.getText().toString().trim();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassword</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> etPassword.getText().toString().trim();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearUserName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        etUsername.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearPassword</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        etPassword.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        progress.setVisibility(View.VISIBLE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hindLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        progress.setVisibility(View.GONE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toMainActivity</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"login success , to MainActivity!\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showFailedError</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"login failed!\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by jingbin on 2016/11/3.</div><div class=\"line\"> * Presenter是用作Model和View之间交互的桥梁，那么应该有什么方法呢？</div><div class=\"line\"> * 其实也是主要看该功能有什么操作，比如本例，两个操作:login和clear。</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserLoginPresenter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// view</span></div><div class=\"line\">    <span class=\"keyword\">private</span> IUserLoginView iUserLoginView;</div><div class=\"line\">    <span class=\"comment\">// model</span></div><div class=\"line\">    <span class=\"keyword\">private</span> UserBiz mUserBiz;</div><div class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserLoginPresenter</span><span class=\"params\">(IUserLoginView iUserLoginView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.iUserLoginView = iUserLoginView;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mUserBiz = <span class=\"keyword\">new</span> UserBiz();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//view</span></div><div class=\"line\">        iUserLoginView.showLoading();</div><div class=\"line\">        <span class=\"comment\">// model</span></div><div class=\"line\">        mUserBiz.login(iUserLoginView.getUserName(), iUserLoginView.getPassword(), <span class=\"keyword\">new</span> OnLoginListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loginSuccess</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 需要在UI线程中执行</span></div><div class=\"line\">                mHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                        iUserLoginView.toMainActivity();</div><div class=\"line\">                        iUserLoginView.hindLoading();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loginFailed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 需要在UI线程中执行</span></div><div class=\"line\">                mHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                        iUserLoginView.hindLoading();</div><div class=\"line\">                        iUserLoginView.showFailedError();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        iUserLoginView.clearUserName();</div><div class=\"line\">        iUserLoginView.clearPassword();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface IUserLoginView &#123;</div><div class=\"line\"></div><div class=\"line\">    // login说明了要有用户名、密码，那么对应两个方法：</div><div class=\"line\">    String getUserName();</div><div class=\"line\"></div><div class=\"line\">    String getPassword();</div><div class=\"line\"></div><div class=\"line\">    void clearUserName();</div><div class=\"line\"></div><div class=\"line\">    void clearPassword();</div><div class=\"line\"></div><div class=\"line\">    // 再者login是个耗时操作，我们需要给用户一个友好的提示，一般就是操作ProgressBar，所以再两个：</div><div class=\"line\">    void showLoading();</div><div class=\"line\"></div><div class=\"line\">    void hindLoading();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // login当然存在登录成功与失败的处理，我们主要看成功我们是跳转Activity，而失败可能是去给个提醒：</div><div class=\"line\">    void toMainActivity();</div><div class=\"line\"></div><div class=\"line\">    void showFailedError();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用户点击登录，触发点击事件，然后通过P层<code>userLoginPresenter</code>，调用登录的方法<code>login()</code>，方法里面会通过Model层<code>mUserBiz.login()</code>去做一些数据请求操作的处理，然后得到相应的数据返回。这里看到Model层的数据处理操作放在P层里，是不与V层直接交互的。<br>然后M层得到数据后回调，P层根据相应的数据，显示不同的UI，如<code>toMainActivity</code>,<code>showFailedError</code>等，这样V层只会出现一些基本的显示逻辑的处理。</p>\n<h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。<br><img src=\"http://upload-images.jianshu.io/upload_images/1354448-b43bea772693aaa8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"来自MVVM----MVC，MVP 和 MVVM 的图示\"></p>\n<p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 简单的MVVM + data-binding案例:</div><div class=\"line\"> * 以点击一下按钮然后年龄会+2 为例</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> jingbin</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeAgeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ChangeAgeViewModel viewModel;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        ActivityChangeAgeBinding binding = DataBindingUtil.setContentView(<span class=\"keyword\">this</span>, R.layout.activity_change_age);</div><div class=\"line\">        setTitle(<span class=\"string\">\"MVVM + data-binding\"</span>);</div><div class=\"line\"></div><div class=\"line\">        viewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).get(ChangeAgeViewModel.class);</div><div class=\"line\">        binding.setViewModel(viewModel);</div><div class=\"line\">        binding.setButtonname(<span class=\"string\">\"年龄+2\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**监听年龄的变化*/</span></div><div class=\"line\">        viewModel.desc.observe(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable String desc)</span> </span>&#123;</div><div class=\"line\">                Log.e(<span class=\"string\">\"desc\"</span>, desc);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        binding.btAge.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                viewModel.change();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> jingbin</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeAgeViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidViewModel</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> MutableLiveData&lt;String&gt; desc = <span class=\"keyword\">new</span> MutableLiveData&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObservableField&lt;String&gt; age = <span class=\"keyword\">new</span> ObservableField&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChangeAgeViewModel</span><span class=\"params\">(@NonNull Application application)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(application);</div><div class=\"line\">        age.set(String.valueOf(<span class=\"number\">23</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String value = age.get();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.isEmpty(value)) &#123;</div><div class=\"line\">            Integer integer = Integer.valueOf(value);</div><div class=\"line\">            <span class=\"comment\">// 改变age的值 布局里的值直接改变</span></div><div class=\"line\">            age.set(String.valueOf(integer + <span class=\"number\">2</span>));</div><div class=\"line\"></div><div class=\"line\">            desc.setValue(<span class=\"string\">\"年龄改变:\"</span> + age.get());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- View + ViewModel--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span></span></div><div class=\"line\">            <span class=\"attr\">name</span>=<span class=\"string\">\"viewModel\"</span></div><div class=\"line\">            <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.jingbin.projectstru.mvvm.ChangeAgeViewModel\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span></span></div><div class=\"line\">            <span class=\"attr\">name</span>=<span class=\"string\">\"buttonname\"</span></div><div class=\"line\">            <span class=\"attr\">type</span>=<span class=\"string\">\"String\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"25dp\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tv_mvvm\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"年龄\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorPrimary\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tv_age\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;viewModel.age&#125;\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bt_age\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;buttonname&#125;\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>可以看出，MVVM比MVP少了对应View的接口文件，这样更简洁了，而且，改变ViewModel里的值，则<code>xml</code>文件对应的值也会对应改变。如果通过手动setText()，则<code>ViewModel</code>里的值也会得到改变。通过这一层关系，我们可以通过数据去操控<code>View</code>里的显示，所以才可以去除掉对应View的接口文件。</p>\n<h3 id=\"MVP-databinding\"><a href=\"#MVP-databinding\" class=\"headerlink\" title=\"MVP-databinding\"></a>MVP-databinding</h3><p>基本实现了MVC，MVP，MVVM后，我发现它们各自有各自的优缺点。<br>MVC：简单，单一页面可以实现。但是不利于复杂页面。<br>MVP：解耦，结构清晰。但文件较多，每一个页面基本要新建P层和V层的文件，同时还会有findViewById操作。<br>MVVM：解耦，结构相对清晰，文件相对MVP较少。但如果页面显示比较复杂，需要通过多个值去控制页面的显示，或者页面一个值的显示 要通过多种逻辑去处理得到结果，个人感觉还是不太适用。(其中的ViewModel与对应宿主的生命周期相同，从而内存泄漏问题比MVP处理较好这里先不做讨论)</p>\n<p><strong>MVP-databinding</strong>：<br>处理方式与MVP相同，只是使用了databinding的优势，databinding节省了类似findViewById和数据绑定的时间，从此代码里就没有findViewById和ButterKnife之类的代码了，而且也不会有<code>通过多个值去控制页面的显示</code>这样不好操作的情况了。当然文件还是会多一些。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * MVP + data-binding</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> jingbin</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvpDataBindingActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChangeAgeView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ActivityMvpDataBindingBinding binding;</div><div class=\"line\">    <span class=\"keyword\">private</span> ChangeAgePresenter presenter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        binding = DataBindingUtil.setContentView(<span class=\"keyword\">this</span>, R.layout.activity_mvp_data_binding);</div><div class=\"line\"></div><div class=\"line\">        setTitle(<span class=\"string\">\"MVP + data-binding\"</span>);</div><div class=\"line\">        presenter = <span class=\"keyword\">new</span> ChangeAgePresenter(<span class=\"keyword\">this</span>);</div><div class=\"line\">        binding.setButtonname(<span class=\"string\">\"年龄+2\"</span>);</div><div class=\"line\"></div><div class=\"line\">        binding.btAge.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                presenter.changeAge(binding.getUser());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showContentView</span><span class=\"params\">(UserBean user)</span> </span>&#123;</div><div class=\"line\">        binding.setUser(user);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        presenter.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> jingbin</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2019/02/26</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeAgePresenter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ChangeAgeView changeInterface;</div><div class=\"line\">    <span class=\"keyword\">private</span> UserModel userModel;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChangeAgePresenter</span><span class=\"params\">(ChangeAgeView changeInterface)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changeInterface = changeInterface;</div><div class=\"line\">        <span class=\"comment\">// 初始化</span></div><div class=\"line\">        changeInterface.showContentView(<span class=\"keyword\">new</span> UserBean(<span class=\"string\">\"小白\"</span>, <span class=\"number\">23</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 改变年龄</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeAge</span><span class=\"params\">(UserBean myUser)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (userModel == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            userModel = <span class=\"keyword\">new</span> UserModel();</div><div class=\"line\">        &#125;</div><div class=\"line\">        userModel.changeAge(myUser, <span class=\"number\">2</span>, <span class=\"keyword\">new</span> UserModel.ChangeInterface() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(UserBean user)</span> </span>&#123;</div><div class=\"line\">                changeInterface.showContentView(user);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        userModel = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>张鸿洋：<a href=\"http://blog.csdn.net/lmj623565791/article/details/46596109\" target=\"_blank\" rel=\"external\">浅谈 MVP in Android</a></li>\n<li>阮一峰: <a href=\"http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\" target=\"_blank\" rel=\"external\">MVC，MVP 和 MVVM 的图示</a></li>\n<li>Jensen: <a href=\"https://segmentfault.com/a/1190000004616513?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">Android中的MVC和MVP(分析+实例)</a></li>\n<li>CSDN: <a href=\"http://blog.csdn.net/jdsjlzx/article/details/51174396#t3\" target=\"_blank\" rel=\"external\">认清Android框架 MVC，MVP和MVVM</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">projectstru</div><div class=\"line\">├─ MainActivity.java</div><div class=\"line\">├─ mvc</div><div class=\"line\">│    ├─ LoadDataActivity.java</div><div class=\"line\">│    ├─ bean</div><div class=\"line\">│    │    └─ Essay.java</div><div class=\"line\">│    └─ model</div><div class=\"line\">│           ├─ EssayModel.java</div><div class=\"line\">│           └─ MainModel.java</div><div class=\"line\">├─ mvp</div><div class=\"line\">│    ├─ UserLoginActivity.java</div><div class=\"line\">│    ├─ bean</div><div class=\"line\">│    │    └─ User.java</div><div class=\"line\">│    ├─ model</div><div class=\"line\">│    │    ├─ IUserBiz.java</div><div class=\"line\">│    │    ├─ OnLoginListener.java</div><div class=\"line\">│    │    └─ UserBiz.java</div><div class=\"line\">│    ├─ presenter</div><div class=\"line\">│    │    └─ UserLoginPresenter.java</div><div class=\"line\">│    └─ view</div><div class=\"line\">│           └─ IUserLoginView.java</div><div class=\"line\">├─ mvpdatabindind</div><div class=\"line\">│    ├─ MvpDataBindingActivity.java</div><div class=\"line\">│    ├─ bean</div><div class=\"line\">│    │    └─ UserBean.java</div><div class=\"line\">│    ├─ model</div><div class=\"line\">│    │    └─ UserModel.java</div><div class=\"line\">│    ├─ presenter</div><div class=\"line\">│    │    └─ ChangeAgePresenter.java</div><div class=\"line\">│    └─ view</div><div class=\"line\">│           └─ ChangeAgeView.java</div><div class=\"line\">└─ mvvm</div><div class=\"line\">       ├─ ChangeAgeActivity.java</div><div class=\"line\">       └─ ChangeAgeViewModel.java</div></pre></td></tr></table></figure>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3><p>对应项目：<strong><a href=\"https://github.com/youlookwhat/ProjectPatternStudy\" target=\"_blank\" rel=\"external\">ProjectPatternStudy</a></strong> 😁<br>此文仅个人总结，如有不当之处，请留言告知。</p>\n","categories":["Android"],"tags":["Android","mvvm"]},{"title":"Android-WebView与JS交互实例","url":"http://jinbeen.com/2019/01/12/webview-js-interaction/","content":"<blockquote>\n<p>纸上觉来终觉浅，绝知此事要躬行。 - 陆游/诗人(宋)</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-6825b9b6a213c33c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/540\" alt=\"与js交互示例.jpg\"></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>一切基于项目<strong><a href=\"https://github.com/youlookwhat/WebViewStudy\" target=\"_blank\" rel=\"external\">WebViewStudy</a></strong>来说明，都是最小单元案例，可作为参考研究，本文从几个方面来讲解：</p>\n<ul>\n<li>1、Java调用WebView里的js代码(传递参数)</li>\n<li>2、WebView里的js代码调用Java本地方法(传递参数)</li>\n<li>3、外部注入js代码</li>\n<li>4、WebView长按事件</li>\n</ul>\n<h3 id=\"相关JS代码：\"><a href=\"#相关JS代码：\" class=\"headerlink\" title=\"相关JS代码：\"></a>相关JS代码：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>js调用android原生代码<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=gb2312\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">id</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,minimal-ui\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        function javacalljs()&#123;</div><div class=\"line\">             document.getElementById(\"content\").innerHTML +=</div><div class=\"line\">                 \"<span class=\"tag\">&lt;<span class=\"name\">br\\</span>&gt;</span>java调用了js函数，无参\";</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!--这里取到的是 android端传过来的数据--&gt;</span></div><div class=\"line\">        function javacalljswithargs(data)&#123;</div><div class=\"line\">             document.getElementById(\"content\").innerHTML +=</div><div class=\"line\">                 (\"<span class=\"tag\">&lt;<span class=\"name\">br\\</span>&gt;</span>\"+data);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"window.injectedObject.startFunction()\"</span>&gt;</span>点击调用java代码<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--可以将android端传过来的数据，处理后,放在这里再传给android端--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"window.injectedObject.startFunction('我是网页传出来的数据')\"</span>&gt;</span>点击调用java代码并传递参数<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span>内容显示<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Java调用WebView里的js代码-传递参数\"><a href=\"#Java调用WebView里的js代码-传递参数\" class=\"headerlink\" title=\"Java调用WebView里的js代码(传递参数)\"></a>Java调用WebView里的js代码(传递参数)</h3><p>// 告诉WebView启用JavaScript执行。默认的是false。<br>ws.setJavaScriptEnabled(true);<br>1、如果点击调用就直接执行就好：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 无参数调用</span></div><div class=\"line\">webView.loadUrl(<span class=\"string\">\"javascript:javacalljs()\"</span>);</div><div class=\"line\"><span class=\"comment\">// 传递参数调用</span></div><div class=\"line\">webView.loadUrl(<span class=\"string\">\"javascript:javacalljswithargs('\"</span> + <span class=\"string\">\"android传入到网页里的数据，有参\"</span> + <span class=\"string\">\"')\"</span>);</div></pre></td></tr></table></figure></p>\n<p>2、如果是显示后就调用，注意放在html显示完成之后<br><a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebViewClient.java\" target=\"_blank\" rel=\"external\">MyWebViewClient.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 无参数调用</span></div><div class=\"line\">        webView.loadUrl(<span class=\"string\">\"javascript:javacalljs()\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 传递参数调用</span></div><div class=\"line\">        webView.loadUrl(<span class=\"string\">\"javascript:javacalljswithargs('\"</span> + <span class=\"string\">\"android传入到网页里的数据，有参\"</span> + <span class=\"string\">\"')\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 4.4以上可用 evaluateJavascript 效率高</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String jsCode)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">        evaluateJavascript(jsCode, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        loadUrl(jsCode);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"WebView里的js代码调用Java本地方法-传递参数\"><a href=\"#WebView里的js代码调用Java本地方法-传递参数\" class=\"headerlink\" title=\"WebView里的js代码调用Java本地方法(传递参数)\"></a>WebView里的js代码调用Java本地方法(传递参数)</h3><p>这里有一个js点击方法:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;&lt;a onClick=\"window.injectedObject.startFunction()\"&gt;点击调用java代码&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;li&gt;&lt;a onClick=\"window.injectedObject.startFunction('我是网页传出来的数据')\"&gt;点击调用java代码并传递参数&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>\n<p>实现与js交互接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.addJavascriptInterface(<span class=\"keyword\">new</span> MyJavascriptInterface(<span class=\"keyword\">this</span>), <span class=\"string\">\"injectedObject\"</span>);</div></pre></td></tr></table></figure></p>\n<p>这里的”injectedObject”对应js里的”window.<strong>injectedObject</strong>.startFunction()”，其中<a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyJavascriptInterface.java\" target=\"_blank\" rel=\"external\">MyJavascriptInterface.java</a>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by jingbin on 2016/11/17.</div><div class=\"line\"> * js通信接口</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyJavascriptInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyJavascriptInterface</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 前端代码嵌入js：</div><div class=\"line\">     * imageClick 名应和js函数方法名一致</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> src 图片的链接</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">imageClick</span><span class=\"params\">(String src)</span> </span>&#123;</div><div class=\"line\">        Log.e(<span class=\"string\">\"imageClick\"</span>, <span class=\"string\">\"----点击了图片\"</span>);</div><div class=\"line\">        Log.e(<span class=\"string\">\"src\"</span>, src);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 前端代码嵌入js</div><div class=\"line\">     * 遍历&lt;li&gt;节点</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> type    &lt;li&gt;节点下type属性的值</div><div class=\"line\">     * <span class=\"doctag\">@param</span> item_pk item_pk属性的值</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">textClick</span><span class=\"params\">(String type, String item_pk)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.isEmpty(type) &amp;&amp; !TextUtils.isEmpty(item_pk)) &#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"textClick\"</span>, <span class=\"string\">\"----点击了文字\"</span>);</div><div class=\"line\">            Log.e(<span class=\"string\">\"type\"</span>, type);</div><div class=\"line\">            Log.e(<span class=\"string\">\"item_pk\"</span>, item_pk);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 网页使用的js，方法无参数</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startFunction</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.e(<span class=\"string\">\"startFunction\"</span>, <span class=\"string\">\"----无参\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 网页使用的js，方法有参数，且参数名为data</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> data 网页js里的参数名</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startFunction</span><span class=\"params\">(String data)</span> </span>&#123;</div><div class=\"line\">        Log.e(<span class=\"string\">\"startFunction\"</span>, <span class=\"string\">\"----有参\"</span> + data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>且对标里面的两个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 网页使用的js，方法无参数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startFunction</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Log.e(<span class=\"string\">\"startFunction\"</span>, <span class=\"string\">\"----无参\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 网页使用的js，方法有参数，且参数名为data</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> data 网页js里的参数名</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startFunction</span><span class=\"params\">(String data)</span> </span>&#123;</div><div class=\"line\">    Log.e(<span class=\"string\">\"startFunction\"</span>, <span class=\"string\">\"----有参\"</span> + data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"外部注入js代码\"><a href=\"#外部注入js代码\" class=\"headerlink\" title=\"外部注入js代码\"></a>外部注入js代码</h3><p>有时候我们得到一个网页，这个网页并不是我们订制的，里面没有我们调用的js代码，这时候我们可在前端直接注入js的。<br>比如 网页里面有图片，我们点击图片想要查看图片和保存图片到本地，这时候网页并没有实现这个js方法供我们调用，但是我们可以注入js代码，来实现这个需求。</p>\n<p>在html加载完成之后，我们调用这段js:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这段js函数的功能就是，遍历所有的img节点，并添加onclick函数，函数的功能是在图片点击的时候调用本地java接口并传递url过去</span></div><div class=\"line\">webView.loadUrl(<span class=\"string\">\"javascript:(function()&#123;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"var objs = document.getElementsByTagName(\\\"img\\\");\"</span> +</div><div class=\"line\">        <span class=\"string\">\"for(var i=0;i&lt;objs.length;i++)\"</span> +</div><div class=\"line\">        <span class=\"string\">\"&#123;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"objs[i].onclick=function()&#123;window.injectedObject.imageClick(this.getAttribute(\\\"src\\\"));&#125;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"&#125;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"&#125;)()\"</span>);</div></pre></td></tr></table></figure></p>\n<p>这时候再看<a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyJavascriptInterface.java\" target=\"_blank\" rel=\"external\">MyJavascriptInterface.java</a>里的imageClick方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 前端代码嵌入js：</div><div class=\"line\"> * imageClick 名应和js函数方法名一致</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> src 图片的链接</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">imageClick</span><span class=\"params\">(String src)</span> </span>&#123;</div><div class=\"line\">    Log.e(<span class=\"string\">\"imageClick\"</span>, <span class=\"string\">\"----点击了图片\"</span>);</div><div class=\"line\">    Log.e(<span class=\"string\">\"src\"</span>, src);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>src即为图片链接，可以作为显示和下载用。</p>\n<h3 id=\"WebView长按事件\"><a href=\"#WebView长按事件\" class=\"headerlink\" title=\"WebView长按事件\"></a>WebView长按事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.setOnLongClickListener(<span class=\"keyword\">new</span> View.OnLongClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> WebView.HitTestResult hitTestResult = webView.getHitTestResult();</div><div class=\"line\">        <span class=\"comment\">// 如果是图片类型或者是带有图片链接的类型</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (hitTestResult.getType() == WebView.HitTestResult.IMAGE_TYPE ||</div><div class=\"line\">                hitTestResult.getType() == WebView.HitTestResult.SRC_IMAGE_ANCHOR_TYPE) &#123;</div><div class=\"line\">            <span class=\"comment\">// 弹出保存图片的对话框</span></div><div class=\"line\">            <span class=\"keyword\">new</span> AlertDialog.Builder(WebViewActivity.<span class=\"keyword\">this</span>)</div><div class=\"line\">                    .setItems(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"查看大图\"</span>, <span class=\"string\">\"保存图片到相册\"</span>&#125;, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\">                            String picUrl = hitTestResult.getExtra();</div><div class=\"line\">                            <span class=\"comment\">//获取图片</span></div><div class=\"line\">                            Log.e(<span class=\"string\">\"picUrl\"</span>, picUrl);</div><div class=\"line\">                            <span class=\"keyword\">switch</span> (which) &#123;</div><div class=\"line\">                                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                                <span class=\"keyword\">default</span>:</div><div class=\"line\">                                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                    .show();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://blog.csdn.net/wangtingshuai/article/details/8631835\" target=\"_blank\" rel=\"external\">android webview js交互 第一节 （java和js交互）</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","webview"]},{"title":"Android-应用被作为第三方浏览器打开","url":"http://jinbeen.com/2018/12/15/third-party-browser/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>微信里的文章页面，可以选择<strong>“在浏览器打开”</strong>。现在很多应用都内嵌了WebView，那是否可以使自己的应用作为第三方浏览器打开此文章呢？<br><a id=\"more\"></a><br>如图：</p>\n<ul>\n<li><img src=\"https://upload-images.jianshu.io/upload_images/1354448-4a8b8f2956cfabdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"微信打开三方浏览器.png\"></li>\n</ul>\n<p>就像图中这样，让自己的应用出现在列表里。<br>这篇文章就是为了实现这个功能。</p>\n<p>项目代码地址：<a href=\"https://github.com/youlookwhat/WebViewStudy\" target=\"_blank\" rel=\"external\"><strong>WebViewStudy</strong></a></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>实现其实很简单：<br>在Manifest文件中，给想要接收跳转的Activity添加<intent-filter>配置：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity</div><div class=\"line\">     android:name=\".WebViewActivity\"</div><div class=\"line\">     android:configChanges=\"orientation|screenSize\"</div><div class=\"line\">     android:hardwareAccelerated=\"true\"</div><div class=\"line\">     android:launchMode=\"singleTask\"</div><div class=\"line\">     android:screenOrientation=\"portrait\"</div><div class=\"line\">     android:theme=\"@style/WebViewTheme\"&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;!--需要添加下面的intent-filter配置--&gt;</div><div class=\"line\">     &lt;intent-filter tools:ignore=\"AppLinkUrlError\"&gt;</div><div class=\"line\">         &lt;action android:name=\"android.intent.action.VIEW\" /&gt;</div><div class=\"line\"></div><div class=\"line\">         &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;</div><div class=\"line\">         &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;</div><div class=\"line\">         &lt;!--使用http，则只能打开http开头的网页--&gt;</div><div class=\"line\">         &lt;data android:scheme=\"https\" /&gt;</div><div class=\"line\">     &lt;/intent-filter&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;/activity&gt;</div></pre></td></tr></table></figure></intent-filter></p>\n<p>然后在 WebViewActivity 中获取相关传递数据：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebViewActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_web_view);</div><div class=\"line\">        getIntentData();</div><div class=\"line\">        initTitle();</div><div class=\"line\">        initWebView();</div><div class=\"line\">        webView.loadUrl(mUrl);</div><div class=\"line\">       <span class=\"comment\">// 处理 作为三方浏览器打开传过来的值</span></div><div class=\"line\">        getDataFromBrowser(getIntent());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">     * 使用singleTask启动模式的Activity在系统中只会存在一个实例。</div><div class=\"line\">     * 如果这个实例已经存在，intent就会通过onNewIntent传递到这个Activity。</div><div class=\"line\">     * 否则新的Activity实例被创建。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onNewIntent(intent);</div><div class=\"line\">        getDataFromBrowser(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 作为三方浏览器打开传过来的值</div><div class=\"line\">     * Scheme: https</div><div class=\"line\">     * host: www.jianshu.com</div><div class=\"line\">     * path: /p/1cbaf784c29c</div><div class=\"line\">     * url = scheme + \"://\" + host + path;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getDataFromBrowser</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        Uri data = intent.getData();</div><div class=\"line\">        <span class=\"keyword\">if</span> (data != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                String scheme = data.getScheme();</div><div class=\"line\">                String host = data.getHost();</div><div class=\"line\">                String path = data.getPath();</div><div class=\"line\">                String text = <span class=\"string\">\"Scheme: \"</span> + scheme + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"host: \"</span> + host + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"path: \"</span> + path;</div><div class=\"line\">                Log.e(<span class=\"string\">\"data\"</span>, text);</div><div class=\"line\">                String url = scheme + <span class=\"string\">\"://\"</span> + host + path;</div><div class=\"line\">                webView.loadUrl(url);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>以上是核心代码，有几点需要说明的：</p>\n<ul>\n<li>1、设置启动模式：<code>launchMode=&quot;singleTask&quot;</code></li>\n<li>2、<code>getDataFromBrowser()</code>方法会在<code>onCreate</code>和<code>onNewIntent</code>方法中调用。</li>\n</ul>\n<h4 id=\"解释：\"><a href=\"#解释：\" class=\"headerlink\" title=\"解释：\"></a>解释：</h4><p>在实际使用中，有这样的场景：<br>我们在微信中“通过浏览器”打开自己的应用，然后将自己的应用切到后台。重复上面的操作，会一直创建应用的实例，这样肯定是不好的，为了避免这种情况我们设置启动模式为：<code>launchMode=&quot;singleTask&quot;</code>。</p>\n<blockquote>\n<p>使用singleTask启动模式的Activity在系统中只会存在一个实例。<br>如果这个实例不存在，新的Activity实例被创建。<br>如果这个实例已经存在，那么在Activity回退栈中，所有位于该Activity上面的Activity实例都将被销毁掉（销毁过程会调用Activity生命周期回调），这样使得singleTask Activity实例位于栈顶。与此同时，Intent会通过<code>onNewIntent</code>传递到这个SingleTask Activity实例。 - <a href=\"https://droidyue.com/blog/2015/08/16/dive-into-android-activity-launchmode/\" target=\"_blank\" rel=\"external\">&lt;深入讲解Android中Activity launchMode&gt;</a></p>\n</blockquote>\n<p>这就是为什么要在<code>onNewIntent</code>中调用的原因，当此Activity已存在时，值会通过<code>onNewIntent</code>传递过来。</p>\n<h3 id=\"继续拓展\"><a href=\"#继续拓展\" class=\"headerlink\" title=\"继续拓展\"></a>继续拓展</h3><p>也许大家用<code>知乎</code>进行过类似的操作，会发现有这样一个效果：<br>当知乎没有开启时，在其他应用打开知乎后，关闭页面会回到知乎的<strong>主页面</strong>。正常是不会有出现这样的情况的，我们需要简单设置一下。</p>\n<p>1、在主页面设置静态变量，初始化时改变静态变量的值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span>  </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否开启了主页，没有开启则会返回主页</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> isLaunch = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        initView();</div><div class=\"line\">        isLaunch = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        isLaunch = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>2、当<code>WebViewActivity</code>关闭时判断是否打开主页面<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 直接通过三方浏览器打开时，回退到首页</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleFinish</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">        finishAfterTransition();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        finish();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!MainActivity.isLaunch) &#123;</div><div class=\"line\">        MainActivity.start(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>其实这相当于Activity隐式跳转，其中点击网页中的电话跳转到手机的拨号盘也是这样的原理，DeepLink也基本是这个逻辑。</p>\n<p>设想这样一种情况：<br>我们通过浏览器拉起自己的应用，不一定要打开WebView，也可以打开原生的页面，只需要传过来的数据里有此页面想要的数据即可。其实很多应用都这样做了。</p>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h4><ul>\n<li>下载体验：<a href=\"https://fir.im/webviewstudy\" target=\"_blank\" rel=\"external\">https://fir.im/webviewstudy</a></li>\n<li>最后再附一遍项目地址😆：<strong><a href=\"https://github.com/youlookwhat/WebViewStudy\" target=\"_blank\" rel=\"external\">WebViewStudy</a></strong></li>\n</ul>\n","categories":["Android"],"tags":["Android","Android基础知识点"]},{"title":"《云阅2.0》一款同时看玩安卓和干货集中营资讯的App","url":"http://jinbeen.com/2018/11/06/cloudreader-app-introduce/","content":"<p><img src=\"https://jinbeen.com/images/2018/cloudreader-2-info.png\" alt=\"CloudReader.png\"></p>\n<a id=\"more\"></a>\n<h3 id=\"一、云阅2-0\"><a href=\"#一、云阅2-0\" class=\"headerlink\" title=\"一、云阅2.0 \"></a>一、<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">云阅2.0 </a></h3><p><a href=\"https://www.jianshu.com/p/69a229fb6e1d\" target=\"_blank\" rel=\"external\">《云阅》一个仿网易云音乐UI，使用Gank.Io及豆瓣Api开发的开源项目</a><br>在云阅发布第一版之后，大约经过了近两年的时间，不断的更新迭代，现在已经完成了2.0，相比第一版它改变了很多：</p>\n<p><img src=\"https://jinbeen.com/images/2018/cloudreader-2-screenshots.png\" alt=\"最新截图\"></p>\n<h4 id=\"1、新增功能\"><a href=\"#1、新增功能\" class=\"headerlink\" title=\"1、新增功能\"></a>1、新增功能</h4><ul>\n<li>玩安卓完整模块(首页、知识体系、导航数据、收藏文章和网址)</li>\n<li>糗事百科段子内容</li>\n<li>webview 新增分享，复制，刷新，浏览器打开，添加到收藏功能</li>\n<li>侧边栏新增 账号登录、我的收藏、退出应用功能</li>\n<li>增加Room的使用</li>\n</ul>\n<h4 id=\"2、优化-amp-修复\"><a href=\"#2、优化-amp-修复\" class=\"headerlink\" title=\"2、优化&amp;修复\"></a>2、优化&amp;修复</h4><ul>\n<li>网络请求升级到Retrofit2.x，稳定运行</li>\n<li>保存图片优化</li>\n<li>webview大幅完善，具体详见<strong><a href=\"https://github.com/youlookwhat/WebViewStudy\" target=\"_blank\" rel=\"external\">WebViewStudy</a></strong></li>\n<li>解决应用退出后台，点击图标重新启动问题</li>\n<li>升级gradle到3.0以上</li>\n<li>Andoird性能优化 - 布局优化</li>\n<li>修复可能存在的内存泄漏问题</li>\n</ul>\n<p>具体见<a href=\"https://jinbeen.com/2016/12/30/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97-%E4%BA%91%E9%98%85/\">更新日志-云阅</a></p>\n<h3 id=\"二、交流\"><a href=\"#二、交流\" class=\"headerlink\" title=\"二、交流\"></a>二、交流</h3><ul>\n<li><p>期间有很多人提了很多<a href=\"https://github.com/youlookwhat/CloudReader/issues\" target=\"_blank\" rel=\"external\">Issues</a>，有很多表示喜欢的，说已经使用了一年多了，很感谢。还有指出问题的，比如提到说MVVM架构不规范及内存泄漏问题，还有一部分请教问题的，尽量解决大家的问题，同时提升自己，但有些时候由于自己本身工作的原因，没有多余的时间解决问题还请大家多见谅。</p>\n</li>\n<li><p>关于MVVM架构的问题之前和大家说了，是我理解的有点偏差，可能大部分的架构是MVP - databinding，也有比较典型的MVVM - datadinding，比如登录页面<a href=\"https://github.com/youlookwhat/CloudReader/blob/master/app/src/main/java/com/example/jingbin/cloudreader/ui/menu/LoginActivity.java\" target=\"_blank\" rel=\"external\">LoginActivity</a>。感觉MVVM有些情况并没有很好的解决日常开发的问题。对于MVC，MVP，MVVM，我们都应该理解它们的含义，并在具体的情况使用合适的架构，比如一个简单的页面就没太大的必要去写MVVM，那样只会多一些class文件，也许一个MVC就解决的很好。</p>\n</li>\n<li><p>因为我平时也是用这个软件来看一些技术的动态，随着干货集中营更新的不频繁，玩安卓也越来越完善后，便实现了玩安卓的大部分功能，没有实现的只有少部分接口了，比如TODO，搜索部分，搜索后期也会完善，TODO因为平时自己用<a href=\"https://www.wunderlist.com/zh/\" target=\"_blank\" rel=\"external\"><code>奇妙清单</code></a>觉得很好用，感觉再写一个用处不大，之后要做的话就是结合文章一起做了，比如看到一篇好文章想什么时间来学就添加一个TODO，不过这是之后的事了。</p>\n</li>\n</ul>\n<h3 id=\"三、2-0-之后的计划\"><a href=\"#三、2-0-之后的计划\" class=\"headerlink\" title=\"三、2.0 之后的计划\"></a>三、2.0 之后的计划</h3><ul>\n<li><p>如果应用中使用到的Api(玩安卓、干货集中营和豆瓣开放Api)可以继续使用的话，以后的样式ui基本就是这样子了，期间也会加一些实用的功能，如监控剪切板的内容打开链接等。我会一直维护这个项目，有什么问题可以随时交流，但今后的重心可能不会于此。</p>\n</li>\n<li><p>此应用虽然基础的UI是仿网易云音乐界面，但是具体的一些细节，如电影部分和玩安卓的主页面等都是花了很长时间慢慢调试才达到这样相对美观的效果，其中包含文字颜色，图标及一些图片的选择。这对于一个业余的开发者来讲很耗时间，其中参考了ui设计网站里的一部分设计图，可以说考虑ui方面的展示比写代多码付出了几倍的时间。</p>\n</li>\n<li><p>不久后可能会出一款全栈的App，并自己设计UI，而不是使用其他软件的UI，仿xxx系列只是初期的阶段，正如模仿刘德华，张学友之类的，模仿始终是模仿，活在其他人的影子之下，最终实现一款完全属于自己的App才是我们的目标。</p>\n</li>\n</ul>\n<h3 id=\"四、最后\"><a href=\"#四、最后\" class=\"headerlink\" title=\"四、最后\"></a>四、最后</h3><ul>\n<li><p>如果大家感兴趣可以前往下载：<a href=\"https://fir.im/cloudreader\" target=\"_blank\" rel=\"external\">https://fir.im/cloudreader</a><br>有什么问题可以随时交流：</p>\n<ul>\n<li>email: jingbin127@163.com</li>\n<li>个人主页：<a href=\"http://jinbeen.com\">http://jinbeen.com</a></li>\n<li>项目地址： <strong><a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">CloudReader</a></strong></li>\n</ul>\n</li>\n</ul>\n","categories":["开源项目"],"tags":["cloudreader","开源项目"]},{"title":"Android DeepLink介绍与使用","url":"http://jinbeen.com/2018/07/02/deeplink-intro-use/","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-f9353b100e86560b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>前段时间公司让调研一下DeepLink，说以后会用到，之前看了很久，并做了个demo，现整理一下，方便以后查阅，如果有幸帮助到其他人就更好了。</p>\n<a id=\"more\"></a>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>Deep Link，又叫deep linking，中文翻译作深层链接。</p>\n<p>简单地从用户体验来讲，Deep Link，就是可以让你在手机的浏览器/Google Search上点击搜索的结果，便能直接跳转到已安装的应用中的某一个页面的技术。</p>\n<p>对于不懂技术的运营人员来说就是一个分享功能，而从技术层面上去简单理解是实现将某APP用户带到另外APP相对应的内容页面，实现APP之间无缝跳转！</p>\n<h2 id=\"商业价值\"><a href=\"#商业价值\" class=\"headerlink\" title=\"商业价值\"></a>商业价值</h2><p>相信大家或多或少看到过这样的页面：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-a4fcbfe2740d1b8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"deeplink\"></p>\n<p>底部有一个“App内打开”，点击后如果安装过应用直接跳到应用的对应页面，如果没安装则跳到下载应用页。</p>\n<h3 id=\"Deeplink（深度链接）\"><a href=\"#Deeplink（深度链接）\" class=\"headerlink\" title=\"Deeplink（深度链接）\"></a>Deeplink（深度链接）</h3><p>对于已经安装APP，指向特定的页面，和上面说的一致。</p>\n<h3 id=\"Deferred-deeplink（-延迟深度链接）\"><a href=\"#Deferred-deeplink（-延迟深度链接）\" class=\"headerlink\" title=\"Deferred deeplink（ 延迟深度链接）\"></a>Deferred deeplink（ 延迟深度链接）</h3><p>相比deeplink，它增加了判断APP是否被安装，用户匹配的2个功能；</p>\n<ul>\n<li>1.当用户点击链接的时候判断APP是否安装，如果用户没有安装时，引导用户跳转到应用商店下载应用。</li>\n<li>2.用户匹配功能，当用户点击链接时和用户启动APP时，分别将这两次用户Device Fingerprint（设备指纹信息）传到服务器进行模糊匹配，使用户下载且启动APP时，直接打开相应的指定页面。</li>\n</ul>\n<p>通过上面的2个技术方案，不仅：①可以让被分享者更快更便捷的回到APP，且回到指定的活动页面，而且：②可以引导未安装APP的用户下载APP、③分享者和被分享者的关系链会通过设备指纹信息记录下来，在业务场景中给出相应的奖励。</p>\n<p>使用deeplink前后对比：<br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-b4468f9f81f2e0b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"对比\"></p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><blockquote>\n<p>具体见Demo：<a href=\"https://github.com/youlookwhat/WebViewStudy\" target=\"_blank\" rel=\"external\">WebViewStudy</a></p>\n</blockquote>\n<h3 id=\"HTML页面：deeplink-html\"><a href=\"#HTML页面：deeplink-html\" class=\"headerlink\" title=\"HTML页面：deeplink.html\"></a>HTML页面：<a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/assets/deeplink.html\" target=\"_blank\" rel=\"external\">deeplink.html</a></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"[scheme]://[host]/[path]?[query]\"</span>&gt;</span>启动应用程序<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>示例：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"will://link/testId\"</span>&gt;</span>立即打开（直接打开）&amp;gt;&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a><a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/AndroidManifest.xml\" target=\"_blank\" rel=\"external\">AndroidManifest.xml</a></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用于DeepLink，html跳到此页面  scheme_Adr: 'will://link/testid',--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".DeepLinkActivity\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.BROWSABLE\"</span> /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">data</span></span></div><div class=\"line\">                    <span class=\"attr\">android:host</span>=<span class=\"string\">\"link\"</span></div><div class=\"line\">                    <span class=\"attr\">android:scheme</span>=<span class=\"string\">\"will\"</span> /&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"MyWebViewClient-class\"><a href=\"#MyWebViewClient-class\" class=\"headerlink\" title=\"MyWebViewClient.class\"></a><a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebViewClient.java\" target=\"_blank\" rel=\"external\">MyWebViewClient.class</a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"deprecation\"</span>)</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(url)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 用于DeepLink测试</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (url.startsWith(<span class=\"string\">\"will://\"</span>)) &#123;</div><div class=\"line\">            Uri uri = Uri.parse(url);</div><div class=\"line\">            Log.e(<span class=\"string\">\"---------scheme\"</span>, uri.getScheme() + <span class=\"string\">\"；host: \"</span> + uri.getHost() + <span class=\"string\">\"；Id: \"</span> + uri.getPathSegments().get(<span class=\"number\">0</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Intent intent1 = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        intent1.setAction(<span class=\"string\">\"android.intent.action.VIEW\"</span>);</div><div class=\"line\">        Uri uri = Uri.parse(url);</div><div class=\"line\">        intent1.setData(uri);</div><div class=\"line\">        intent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">        mActivity.startActivity(intent1);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"DeepLinkActivity-java\"><a href=\"#DeepLinkActivity-java\" class=\"headerlink\" title=\"DeepLinkActivity.java\"></a><a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/DeepLinkActivity.java\" target=\"_blank\" rel=\"external\">DeepLinkActivity.java</a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">  * 从deep link中获取数据</div><div class=\"line\">  * 'will://share/传过来的数据'</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getDataFromBrowser</span><span class=\"params\">(TextView textView)</span> </span>&#123;</div><div class=\"line\">     Uri data = getIntent().getData();</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         String scheme = data.getScheme();</div><div class=\"line\">         String host = data.getHost();</div><div class=\"line\">         List&lt;String&gt; params = data.getPathSegments();</div><div class=\"line\">         <span class=\"comment\">// 从网页传过来的数据</span></div><div class=\"line\">         String testId = params.get(<span class=\"number\">0</span>);</div><div class=\"line\">         String text = <span class=\"string\">\"Scheme: \"</span> + scheme + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"host: \"</span> + host + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"params: \"</span> + testId;</div><div class=\"line\">         Log.e(<span class=\"string\">\"ScrollingActivity\"</span>, text);</div><div class=\"line\">         textView.setText(text);</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>页面具体显示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scheme：will</div><div class=\"line\">host：link</div><div class=\"line\">params：testId</div></pre></td></tr></table></figure></p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>DeepLink用到的核心技术就是：URL SCHEMES。不论是IOS还是Android。<br>URL Schemes 有两个单词：</p>\n<ul>\n<li>URL，我们都很清楚，<a href=\"http://www.apple.com\" target=\"_blank\" rel=\"external\">http://www.apple.com</a> 就是个 URL，也叫它链接或网址；</li>\n<li>Schemes，表示的是一个 URL 中的一个位置——最初始的位置，即 ://之前的那段字符。比如 <a href=\"http://www.apple.com\" target=\"_blank\" rel=\"external\">http://www.apple.com</a> 这个网址的 Schemes 是 http。</li>\n</ul>\n<p>我们可以像定位一个网页一样，用一种特殊的 URL 来定位一个应用甚至应用里某个具体的功能。而定位这个应用的，就应该这个应用的 URL 的 Schemes 部分，也就是开头儿那部分。但是需要注意的是应用的URL Schemes 并不唯一，也就是说一个应用可以“起多个名“，不同应用的URL Schemes也可能因为名字一样发生冲突。</p>\n<p>Android系统级应用，有一些已经定义了URL Schemes，比如短信是 sms:、通话是tel:、email是mailto:，在定义自己APP的URL Schemes的时候要避免跟系统应用名称一样。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:15088888888\"</span>&gt;</span>电话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:15088888888\"</span>&gt;</span>短信<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:15088888888@qq.com\"</span>&gt;</span>邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>与URL一样，URL Schemes也可以通过传参打开特定的APP界面。</p>\n<ul>\n<li>URL：<a href=\"http://images.google.com/images?q=关键字\" target=\"_blank\" rel=\"external\">http://images.google.com/images?q=关键字</a></li>\n<li>URL Schemes：weixin://dl/moments（打开微信朋友圈）</li>\n</ul>\n<h2 id=\"Applink\"><a href=\"#Applink\" class=\"headerlink\" title=\"Applink\"></a>Applink</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>官网文档：<a href=\"https://developer.android.com/training/app-links/verify-site-associations#the-difference\" target=\"_blank\" rel=\"external\">Verify Android App Links</a></p>\n<p>Android App Links是一种特殊的Deep Links，它使Android系统能够直接通过网站地址打开应用程序对应的内容页面，而不需要用户选择使用哪个应用来处理网站地址。</p>\n<p>要添加Android App Links到应用中，需要在应用里定义通过Http(s)地址打开应用的intent filter，并验证你确实拥有该应用和该网站。如果系统成功验证到你拥有该网站，那么系统会直接把URL对应的intent路由到你的应用。</p>\n<p>为了验证你对应用和网站的所有权，以下两个步骤是必须的：</p>\n<ul>\n<li>1.在AndroidManifest里要求系统自动进行App Links的所有权验证。这个配置会告诉Android系统去验证你的应用是否属于在intent filter内指定的URL域名。</li>\n<li>2.在以下链接地址里，放置一个数字资产链接的Json文件，声明你的网址和应用之间的关系：<ul>\n<li><code>https://domain.name/.well-known/assetlinks.json</code> </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"与Deep-Links的区别\"><a href=\"#与Deep-Links的区别\" class=\"headerlink\" title=\"与Deep Links的区别\"></a>与Deep Links的区别</h3><ul>\n<li><p>Deep Links 是一种允许用户进入应用某个特定Activity的intent filter。点击这类链接时，系统可能会弹出一个选择列表，让用户在一堆能够处理这类链接的应用里(包括你的)选择一个来处理该链接。图一展示了这样一种情况：用户点击了一个地图相关的链接，系统弹出一个选择列表，让用户选择是要使用地图应用来处理，还是使用Chrome浏览器来处理。</p>\n</li>\n<li><p>App Links 是一种基于你的网站地址且验证通过的Deep Links。因此，点击一个这样的链接会直接打开你的应用(如果已经安装)，系统将不会弹出选择列表。当然，后续用户可以更改配好设置，来指定由哪个应用程序处理这类链接。</p>\n</li>\n</ul>\n<p>下面这个列表描述更多差异：</p>\n<table>\n<thead>\n<tr>\n<th>item</th>\n<th style=\"text-align:center\">Deep Links</th>\n<th style=\"text-align:center\">App Links</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Intent URL Scheme</td>\n<td style=\"text-align:center\">https, http，或者自定义</td>\n<td style=\"text-align:center\">需为http或https</td>\n</tr>\n<tr>\n<td>Intent Action</td>\n<td style=\"text-align:center\">任意Action</td>\n<td style=\"text-align:center\">需为<code>android.intent.action.VIEW</code></td>\n</tr>\n<tr>\n<td>Intent Category</td>\n<td style=\"text-align:center\">任意Category</td>\n<td style=\"text-align:center\">需为<code>android.intent.category.BROWSABLE</code>和<code>android.intent.category.DEFAULT</code></td>\n</tr>\n<tr>\n<td>链接验证</td>\n<td style=\"text-align:center\">不需要</td>\n<td style=\"text-align:center\">需要在网站上放置一个数字资产链接，并能够通过HTTPS访问</td>\n</tr>\n<tr>\n<td>用户体验</td>\n<td style=\"text-align:center\">可能会弹出一个选择列表给用户选择用哪个应用处理连接</td>\n<td style=\"text-align:center\">没有弹框，系统直接打开你的应用处理网站连接</td>\n</tr>\n<tr>\n<td>兼容性</td>\n<td style=\"text-align:center\">所有Android版本</td>\n<td style=\"text-align:center\">Android 6.0及以上</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><ul>\n<li>1.APP要想被其他APP直接打开，自身得支持，让自己具备被人打开的能力。（URL Schemes）</li>\n<li>2.APP要想打开其他的APP，自身也得支持。（判断设备是否安装、各种跳转的处理）</li>\n</ul>\n<p>应该来讲，deeplink技术比较适用于独立电商、金融理财APP，一方面这类APP的广告内容可以是平台的商品（产品），链接后直接进入相关商品（产品）的详情页，另一方面，这类APP在打开后是会产生后续的交易行为。</p>\n<p>这种方式只能用于系统处理URL的intent的情况，若URL本身没有抛给系统处理，而是直接在应用内打开了，那就无法直接拉起应用。</p>\n<p>由于大部分应用，如微博、微信、第三方浏览器(包括Chrome)，都不会将URL抛给系统处理(对scheme进行屏蔽)，因此App Links生效的情况就很有限了，比如只能从记事本应用、短信应用这些进行跳转。总体来说，实属鸡肋。</p>\n<blockquote>\n<p>京东及淘宝的CPS即是使用此方式实现的。<br><a href=\"https://jinbeen.com/2018/02/02/%E4%BA%AC%E4%B8%9CCPS%E5%95%86%E5%93%81%E6%8E%A8%E5%B9%BF%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/\">京东CPS商品推广接入流程</a><br><a href=\"https://jinbeen.com/2018/01/19/Android-%E9%98%BF%E9%87%8C%E7%99%BE%E5%B7%9Dcps-SDK%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/\">Android 阿里百川cps SDK接入流程</a></p>\n</blockquote>\n<h2 id=\"一些常用APP的URL-Schemes\"><a href=\"#一些常用APP的URL-Schemes\" class=\"headerlink\" title=\"一些常用APP的URL Schemes\"></a>一些常用APP的URL Schemes</h2><p>知乎：回答 zhihu://answers/{id}用户页 zhihu://people/{id}<br>微信：<br>weixin://dl/scan 扫一扫weixin://dl/feedback 反馈weixin://dl/moments 朋友圈weixin://dl/settings 设置weixin://dl/notifications 消息通知设置weixin://dl/chat 聊天设置weixin://dl/general 通用设置weixin://dl/officialaccounts 公众号weixin://dl/games 游戏weixin://dl/help 帮助weixin://dl/feedback 反馈weixin://dl/profile 个人信息weixin://dl/features 功能插件</p>\n<p>腾讯微博：TencentWeibo://<br>淘宝：taobao://<br>支付宝：alipay://<br>微博：sinaweibo://<br>weico微博：weico://<br>QQ浏览器：mqqbrowser://<br>uc浏览器：ucbrowser://<br>海豚浏览器：dolphin://<br>搜狗浏览器：SogouMSE://<br>百度地图：baidumap://<br>Chrome：googlechrome://<br>优酷：youku://<br>京东：openapp.jdmoble://<br>人人：renren://<br>美团：imeituan://<br>1号店：wccbyihaodian://<br>我查查：wcc://<br>有道词典：ddictproapp://<br>点评：dianping://<br>微盘：sinavdisk://<br>豆瓣fm：doubanradio://<br>网易公开课：ntesopen://<br>名片全能王：camcard://<br>淘宝宝贝搜索：taobao://<a href=\"http://s.taobao.com/?q=[prompt\" target=\"_blank\" rel=\"external\">http://s.taobao.com/?q=[prompt</a>]<br>淘宝店铺搜索：taobao://<a href=\"http://shopsearch.t\" target=\"_blank\" rel=\"external\">http://shopsearch.t</a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/\" target=\"_blank\" rel=\"external\">Deep Link是什么</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fWBDfd-7al7MsY0zwDn6dA\" target=\"_blank\" rel=\"external\">深度链接（Deeplink）技术助力APP运营，实现病毒式用户增长</a></li>\n<li><a href=\"http://www.sohu.com/a/122694049_491343\" target=\"_blank\" rel=\"external\">现在很火的app上的deeplink技术，到底是什么？</a></li>\n<li><a href=\"https://juejin.im/entry/590fe2d8ac502e006cf9e3e4\" target=\"_blank\" rel=\"external\">5 分钟搞懂 Android DeepLink</a></li>\n<li><a href=\"https://juejin.im/post/59b3eab25188257e8d77c991#heading-16\" target=\"_blank\" rel=\"external\">Android AppLinks 接入</a></li>\n<li><a href=\"https://github.com/hehonghui/android-tech-frontier/blob/master/issue-15/Android-M%E7%9A%84App-Links%E5%AE%9E%E7%8E%B0%E8%AF%A6%E8%A7%A3.md\" target=\"_blank\" rel=\"external\">Android M的App Links实现详解</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20694818\" target=\"_blank\" rel=\"external\">移动DeepLink的前生今世</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","deeplink"]},{"title":"Android 内存泄漏分析与优化","url":"http://jinbeen.com/2018/06/27/memory-leak-analysis/","content":"<blockquote>\n<p>大范围借鉴及自己思考总结的内容，感谢各位博主的分享。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><h4 id=\"何为性能问题\"><a href=\"#何为性能问题\" class=\"headerlink\" title=\"何为性能问题\"></a>何为性能问题</h4><h5 id=\"1-响应时间\"><a href=\"#1-响应时间\" class=\"headerlink\" title=\"(1). 响应时间\"></a>(1). 响应时间</h5><p>指从用户操作开始到系统给用户以正确反馈的时间。一般包括逻辑处理时间 + 网络传输时间 + 展现时间。对于非网络类应用不包括网络传输时间。</p>\n<p>展现时间即：网页或 App 界面渲染时间。<br>响应时间是：用户对性能最直接的感受。</p>\n<h5 id=\"2-TPS-Transaction-Per-Second\"><a href=\"#2-TPS-Transaction-Per-Second\" class=\"headerlink\" title=\"(2). TPS(Transaction Per Second)\"></a>(2). TPS(Transaction Per Second)</h5><p>TPS为每秒处理的事务数，是系统吞吐量的指标，在搜索系统中也用QPS(Query Per Second)衡量。TPS一般与响应时间反相关。</p>\n<p>通常所说的性能问题就是指响应时间过长、系统吞吐量过低。</p>\n<p>对后台开发来说，也常将高并发下内存泄漏归为性能问题。<br>对移动开发来说，性能问题还包括电量、内存使用这两类较特殊情况。</p>\n<h4 id=\"性能调优方式\"><a href=\"#性能调优方式\" class=\"headerlink\" title=\"性能调优方式\"></a>性能调优方式</h4><p>明白了何为性能问题之后，就能明白性能优化实际就是优化系统的响应时间，提高TPS。优化响应时间，提高TPS。方式不外乎这三大类：</p>\n<ul>\n<li>(1) 降低执行时间，又包括几小类<ul>\n<li>a. 利用多线程并发或分布式提高 TPS</li>\n<li>b. 缓存(包括对象缓存、IO 缓存、网络缓存等)</li>\n<li>c. 数据结构和算法优化</li>\n<li>d. 性能更优的底层接口调用，如 JNI 实现</li>\n<li>e. 逻辑优化</li>\n<li>f. 需求优化</li>\n</ul>\n</li>\n<li>(2) 同步改异步，利用多线程提高TPS</li>\n<li>(3) 提前或延迟操作，错峰提高TPS</li>\n</ul>\n<h3 id=\"项目优化细节\"><a href=\"#项目优化细节\" class=\"headerlink\" title=\"项目优化细节\"></a>项目优化细节</h3><h4 id=\"内存泄漏问题\"><a href=\"#内存泄漏问题\" class=\"headerlink\" title=\"内存泄漏问题\"></a>内存泄漏问题</h4><h5 id=\"静态单例类引用Activity的context\"><a href=\"#静态单例类引用Activity的context\" class=\"headerlink\" title=\"静态单例类引用Activity的context\"></a>静态单例类引用Activity的context</h5><p>单例模式不正确的获取context:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginManager</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LoginManager manager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LoginManager <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (manager == <span class=\"keyword\">null</span>)</div><div class=\"line\">            manager = <span class=\"keyword\">new</span> LoginManager(context);</div><div class=\"line\">        <span class=\"keyword\">return</span> manager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LoginManager</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>在LoginActivity中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span>  </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> LoginManager loginManager;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_login);</div><div class=\"line\">        loginManager = LoginManager.getInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>在LoginManager的单例中context持有了LoginActivity的this对象，即使登录成功后我们跳转到了其他Activity页面，LoginActivity的对象仍然得不到回收因为他被单例所持有，而单例的生命周期是同Application保持一致的。</p>\n<p>正确的获取context的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginManager</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LoginManager manager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LoginManager <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (manager == <span class=\"keyword\">null</span>)</div><div class=\"line\">            manager = <span class=\"keyword\">new</span> LoginManager(context);</div><div class=\"line\">        <span class=\"keyword\">return</span> manager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LoginManager</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context.getApplicationContext();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>我们单例中context不再持有Activity的context而是持有Application的context即可，因为Application本来就是单例，所以这样就不会存在内存泄漏的的现象了。</p>\n</blockquote>\n<h5 id=\"单例模式中通过内部类持有activity对象\"><a href=\"#单例模式中通过内部类持有activity对象\" class=\"headerlink\" title=\"单例模式中通过内部类持有activity对象\"></a>单例模式中通过内部类持有activity对象</h5><p>下面是一个单例的类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> TestManager INSTANCE = <span class=\"keyword\">new</span> TestManager();</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;MyListener&gt; mListenerList;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">TestManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mListenerList = <span class=\"keyword\">new</span> ArrayList&lt;MyListener&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TestManager <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerListener</span><span class=\"params\">(MyListener listener)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mListenerList.contains(listener)) &#123;</div><div class=\"line\">            mListenerList.add(listener);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unregisterListener</span><span class=\"params\">(MyListener listener)</span> </span>&#123;</div><div class=\"line\">        mListenerList.remove(listener);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSomeThingHappen</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后是activity:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> MyListener mMyListener=<span class=\"keyword\">new</span> MyListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSomeThingHappen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">private</span> TestManager testManager=TestManager.getInstance();</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_test);</div><div class=\"line\">        testManager.registerListener(mMyListener);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们知道在java中，非静态的内部类的对象都是会持有指向外部类对象的引用的，因此我们将内部类对象mMyListener让单例所持有时，由于mMyListener引用了我们的activity对象，因此造成activity对象也不能被回收了，从而出现内存泄漏现象。</p>\n<p>修改以上代码，避免内存泄漏，在activity中添加以下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    testManager.unregisterListener(mMyListener);</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>退出界面时，取消相关注册监听！</p>\n</blockquote>\n<h5 id=\"AsyncTask不正确使用造成的内存泄漏\"><a href=\"#AsyncTask不正确使用造成的内存泄漏\" class=\"headerlink\" title=\"AsyncTask不正确使用造成的内存泄漏\"></a>AsyncTask不正确使用造成的内存泄漏</h5><p>我们在来看一种更加容易被忽略的内存泄漏现象，对于AsyncTask不正确使用造成内存泄漏的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mTask=<span class=\"keyword\">new</span> AsyncTask&lt;String,Void,Void&gt;()</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">doInBackground</span><span class=\"params\">(String... params)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//doSamething..</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;.execute(<span class=\"string\">\"a task\"</span>);</div></pre></td></tr></table></figure>\n<p>我们在使用AsyncTask的时候不宜在其中执行太耗时的操作，假设activity已经退出了，然而AsyncTask里任务还没有执行完成或者是还在排队等待执行，就会造成我们的activity对象被回收的时间延后，一段时间内内存占有率变大。</p>\n<p>解决方法在activity退出的时候应该调用cancel()函数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//mTask.cancel(false);</span></div><div class=\"line\">       mTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">       <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>退出界面时，结束当前页面的线程。</p>\n</blockquote>\n<h5 id=\"内部Handler类引起内存泄露\"><a href=\"#内部Handler类引起内存泄露\" class=\"headerlink\" title=\"内部Handler类引起内存泄露\"></a>内部Handler类引起内存泄露</h5><p>原因：Handler在Android中用于消息的发送与异步处理，常常在Activity中作为一个匿名内部类来定义，此时Handler会隐式地持有一个外部类对象（通常是一个Activity）的引用。当Activity已经被用户关闭时，由于Handler持有Activity的引用造成Activity无法被GC回收，这样容易造成内存泄露。 正确的做法是将其定义成一个静态内部类（此时不会持有外部类对象的引用），在构造方法中传入Activity并对Activity对象增加一个弱引用，这样Activity被用户关闭之后，即便异步消息还未处理完毕，Activity也能够被GC回收，从而避免了内存泄露。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;Activity&gt; reference;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">            reference = <span class=\"keyword\">new</span> WeakReference&lt;Activity&gt;(activity);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (reference.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                    <span class=\"comment\">// do something...</span></div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>:</div><div class=\"line\">                    <span class=\"comment\">// do something...</span></div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"webview导致的内存泄漏\"><a href=\"#webview导致的内存泄漏\" class=\"headerlink\" title=\"webview导致的内存泄漏\"></a>webview导致的内存泄漏</h5><p>用代码New一个WebView而不是在XML中静态写入(不过貌似不能设置进度条了，不需要进度条的可以忽略):</p>\n<p>在XML文件中用layout占位:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;RelativeLayout</div><div class=\"line\">    android:id=<span class=\"string\">\"@+id/base_web_view_container\"</span></div><div class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>接下来只需要在Activity中New一个WebView并且添加到我们的容器中就ok了:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">RelativeLayout webview_container = (RelativeLayout) findViewById(R.id.base_web_view_container);</div><div class=\"line\">web_view_ = <span class=\"keyword\">new</span> WebView(yourApplicationContext);</div><div class=\"line\">web_view_.setLayoutParams(<span class=\"keyword\">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</div><div class=\"line\">                ViewGroup.LayoutParams.MATCH_PARENT));</div><div class=\"line\">web_view_.setOnWebCallback(yourWebCallback);</div><div class=\"line\">webview_container.addView(web_view_);</div></pre></td></tr></table></figure>\n<p>关于WebView的context应该用Activity还是Application的context，这里网上较为一致的观点都是采用Application的，理由是这样不会造成Activity的context的内存泄漏。</p>\n<p>销毁时的动作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearWebViewResource</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (web_view_ != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        LogUtils.d(TAG,<span class=\"string\">\"Clear webview's resources\"</span>);</div><div class=\"line\">        web_view_.removeAllViews();</div><div class=\"line\">        <span class=\"comment\">// in android 5.1(sdk:21) we should invoke this to avoid memory leak</span></div><div class=\"line\">        <span class=\"comment\">// see (https://coolpers.github.io/webview/memory/leak/2015/07/16/</span></div><div class=\"line\">        <span class=\"comment\">// android-5.1-webview-memory-leak.html)</span></div><div class=\"line\">        ((ViewGroup) web_view_.getParent()).removeView(web_view_);</div><div class=\"line\">        web_view_.setTag(<span class=\"keyword\">null</span>);</div><div class=\"line\">        web_view_.clearHistory();</div><div class=\"line\">        web_view_.destroy();</div><div class=\"line\">        web_view_ = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>尽量不要将WebView作为listview的头部使用，这样的话WebView会被一次性加载到内存中。</p>\n<h5 id=\"Window-Leaked\"><a href=\"#Window-Leaked\" class=\"headerlink\" title=\"Window Leaked\"></a>Window Leaked</h5><p>按字面了解，Window Leaked大概就是说一个窗体泄漏了，也就是我们常说的内存泄漏，为什么窗体会泄漏呢？</p>\n<ul>\n<li><p>产生原因：<br> 我们知道Android的每一个Activity都有个WindowManager窗体管理器，同样，构建在某个Activity之上的对话框、PopupWindow也有相应的WindowManager窗体管理器。因为对话框、PopupWindown不能脱离Activity而单独存在着，所以当某个Dialog或者某个PopupWindow正在显示的时候我们去finish()了承载该Dialog(或PopupWindow)的Activity时，就会抛Window Leaked异常了，因为这个Dialog(或PopupWindow)的WindowManager已经没有谁可以附属了，所以它的窗体管理器已经泄漏了。</p>\n</li>\n<li><p>解决方法：<br>关闭(finish)某个Activity前，要确保附属在上面的Dialog或PopupWindow已经关闭(dismiss)了。</p>\n</li>\n</ul>\n<h5 id=\"避免内存流失\"><a href=\"#避免内存流失\" class=\"headerlink\" title=\"避免内存流失\"></a>避免内存流失</h5><p>内存流失可能会导致出现大量的 GC 事件，如自定义组件的 onDraw() ，避免大量创建临时对象，比如 String ，以免频繁触发 GC。GC 事件通常不影响您的 APP 的性能，然而在很短的时间段，发生许多垃圾收集事件可以快速地吃了您的帧时间，系统上时间的都花费在 GC ，就有很少时间做其他的东西像渲染或音频流。</p>\n<h5 id=\"监听器的注销\"><a href=\"#监听器的注销\" class=\"headerlink\" title=\"监听器的注销\"></a>监听器的注销</h5><ul>\n<li>对于观察者, 广播, Listener等, 注册和注销没有成对出现而导致的内存泄露.</li>\n<li>使用CountDownTimer倒计时时，退出activity要取消：<code>timer.cancel()</code></li>\n<li>使用LocationManager获取地理位置，及时取消注册：<code>locationManager.removeUpdates(mListener);</code></li>\n<li>使用dialog或BottomSheetDialog，消失时移除监听，对象置空</li>\n<li>使用RxBus，退出activity取消注册</li>\n<li>使用一些三方的库，仔细查看是否需要取消注册的情况</li>\n</ul>\n<h5 id=\"Bitmap处理\"><a href=\"#Bitmap处理\" class=\"headerlink\" title=\"Bitmap处理\"></a>Bitmap处理</h5><p>以<a href=\"https://www.fresco-cn.org/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">fresco</a>为例：</p>\n<ul>\n<li>(最好是加载图片宽高大小的图片，多余的尺寸会导致内存浪费，不过webp后缀的图片无法设置宽高，这是个问题？)加载特别特别大的图片时最容易导致这种情况。如果你加载的图片比承载的View明显大出太多，那你应该考虑将它Resize一下。</li>\n<li>Android <strong><em>无法绘制长或宽大于2048像素的图片</em></strong>。这是由OpenGL渲染系统限制的，如果它超过了这个界限，Fresco会对它进行Resize。</li>\n<li>decode format：解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。在不需要特别清晰的图片情况下，使用<strong><em>RBG_565</em></strong>为好。</li>\n</ul>\n<h5 id=\"SharedPreference-存储value\"><a href=\"#SharedPreference-存储value\" class=\"headerlink\" title=\"SharedPreference 存储value\"></a>SharedPreference 存储value</h5><p>sp在创建的时候会把整个文件全部加载进内存，如果你的sp文件比较大，那么会带来两个严重问题：</p>\n<ul>\n<li>第一次从sp中获取值的时候，有可能阻塞主线程，使界面卡顿、掉帧。</li>\n<li>解析sp的时候会产生大量的临时对象，导致频繁GC，引起界面卡顿。</li>\n<li>这些key和value会永远存在于内存之中，占用大量内存。</li>\n</ul>\n<p>储存数据量过大后，取值小屏手机vivoY23L,v4.4.4会取值失败。</p>\n<h5 id=\"Cursor关闭\"><a href=\"#Cursor关闭\" class=\"headerlink\" title=\"Cursor关闭\"></a>Cursor关闭</h5><p>如查询数据库的操作，使用到Cursor，也要对Cursor对象及时关闭。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (cursor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        cursor.moveToFirst();</div><div class=\"line\">        <span class=\"comment\">// do something.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cursor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        cursor.close();</div><div class=\"line\">        cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"有效使用内存的建议\"><a href=\"#有效使用内存的建议\" class=\"headerlink\" title=\"有效使用内存的建议\"></a>有效使用内存的建议</h4><h5 id=\"去掉bean里无用的字段\"><a href=\"#去掉bean里无用的字段\" class=\"headerlink\" title=\"去掉bean里无用的字段\"></a>去掉bean里无用的字段</h5><p>有时候我们通过GsonFormat直接生成返回的json的Bean，而有一些我们并未使用的字段也一并生成了，建议删除这些无用字段，不然将无可避免的占用一定的内存空间。</p>\n<h5 id=\"关闭页面，全局的list清空后置空\"><a href=\"#关闭页面，全局的list清空后置空\" class=\"headerlink\" title=\"关闭页面，全局的list清空后置空\"></a>关闭页面，全局的list清空后置空</h5><p>用完就清空，并设置为null，不要到处引用不然会导致不能及时释放。</p>\n<h5 id=\"谨慎使用服务Service\"><a href=\"#谨慎使用服务Service\" class=\"headerlink\" title=\"谨慎使用服务Service\"></a>谨慎使用服务Service</h5><p>离开了 APP 还在运行服务是最糟糕的内存管理错误之一，当 APP 处在后台，我们应该停止服务，除非它需要运行的任务。我们可以使用<a href=\"https://developer.android.google.cn/topic/performance/background-optimization\" target=\"_blank\" rel=\"external\">JobScheduler</a>替代实现，JobScheduler把一些不是特别紧急的任务放到更合适的时机批量处理。如果必须使用一个服务，最佳方法是使用<a href=\"https://developer.android.google.cn/guide/components/services\" target=\"_blank\" rel=\"external\">IntentService</a>，限制服务寿命，所有请求处理完成后，IntentService 会自动停止。</p>\n<h5 id=\"使用优化后的数据容器\"><a href=\"#使用优化后的数据容器\" class=\"headerlink\" title=\"使用优化后的数据容器\"></a>使用优化后的数据容器</h5><p>考虑使用优化过数据的容器 SparseArray / SparseBooleanArray / LongSparseArray 代替 HashMap 等传统数据结构，通用 HashMap 的实现可以说是相当低效的内存，因为它需要为每个映射一个单独的条目对象</p>\n<p>关于HashMap，ArrayMap，SparseArray, <a href=\"https://www.jianshu.com/p/7b9a1b386265\" target=\"_blank\" rel=\"external\">这篇文章</a>有个比较直观的比较, 可以看下</p>\n<h5 id=\"少用枚举enum结构\"><a href=\"#少用枚举enum结构\" class=\"headerlink\" title=\"少用枚举enum结构\"></a>少用枚举enum结构</h5><p>枚举一般是用来列举一系列相同类型的常量，它是一种特殊的数据类型，使用枚举能够确保参数的安全性。但是Android开发文档上指出，使用枚举会比使用静态变量多消耗两倍的内存，应该尽量避免在Android中使用枚举。</p>\n<p>那么枚举为什么会更消耗内存呢？ - <a href=\"https://blog.csdn.net/xiao_nian/article/details/80002101\" target=\"_blank\" rel=\"external\">分析链接</a></p>\n<h5 id=\"避免创建不必要的对象\"><a href=\"#避免创建不必要的对象\" class=\"headerlink\" title=\"避免创建不必要的对象\"></a>避免创建不必要的对象</h5><p>诸如一些临时对象, 特别是循环中的.</p>\n<h5 id=\"使用异步处理数据较多的情况\"><a href=\"#使用异步处理数据较多的情况\" class=\"headerlink\" title=\"使用异步处理数据较多的情况\"></a>使用异步处理数据较多的情况</h5><p>如果一些数据需要处理再显示在UI上，对于数据量比较大的情况强烈建议异步处理后再在主线程处理。</p>\n<h5 id=\"使用-nano-protobufs-序列化数据\"><a href=\"#使用-nano-protobufs-序列化数据\" class=\"headerlink\" title=\"使用 nano protobufs 序列化数据\"></a>使用 nano protobufs 序列化数据</h5><p>Protocol buffers 是一个语言中立，平台中立的，可扩展的机制，由谷歌进行序列化结构化数据，类似于 XML 设计的，但是更小，更快，更简单。如果需要为您的数据序列化与协议化，建议使用 nano protobufs。</p>\n<h5 id=\"使用ProGuard来剔除不需要的代码\"><a href=\"#使用ProGuard来剔除不需要的代码\" class=\"headerlink\" title=\"使用ProGuard来剔除不需要的代码\"></a>使用ProGuard来剔除不需要的代码</h5><p>使用 ProGuard 来剔除不需要的代码，移除任何冗余的，不必要的，或臃肿的组件，资源或库完善 APP 的内存消耗。</p>\n<h5 id=\"降低整体尺寸APK\"><a href=\"#降低整体尺寸APK\" class=\"headerlink\" title=\"降低整体尺寸APK\"></a>降低整体尺寸APK</h5><p>您可以通过减少 APP 的整体规模显著减少 APP 的内存使用情况。文章：<a href=\"http://wuxiaolong.me/2017/03/19/ReduceAPKSize/\" target=\"_blank\" rel=\"external\">Android APK瘦身实践</a></p>\n<h5 id=\"优化布局层次\"><a href=\"#优化布局层次\" class=\"headerlink\" title=\"优化布局层次\"></a>优化布局层次</h5><p>通过优化视图层次结构，以减少重叠的 UI 对象的数量来提高性能。文章：<a href=\"http://wuxiaolong.me/2017/03/26/Rendering/\" target=\"_blank\" rel=\"external\">Android 渲染优化</a></p>\n<h3 id=\"检测工具\"><a href=\"#检测工具\" class=\"headerlink\" title=\"检测工具\"></a>检测工具</h3><ul>\n<li><a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">leakcanary</a></li>\n</ul>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.trinea.cn/android/performance/\" target=\"_blank\" rel=\"external\">性能优化系列总篇</a></li>\n<li><a href=\"https://blog.csdn.net/ys408973279/article/details/50389200\" target=\"_blank\" rel=\"external\">Android内存优化之——static使用篇</a></li>\n<li><a href=\"https://gist.github.com/yangdm0209/ded1d6fe2d7724070b3af87caa5515c2\" target=\"_blank\" rel=\"external\">Android 中handler的HandlerLeak问题</a></li>\n<li><a href=\"https://blog.csdn.net/sanjay_f/article/details/50208847\" target=\"_blank\" rel=\"external\">源码探索系列1—Handler与HandlerLeak的那些事</a></li>\n<li><a href=\"http://lipeng1667.github.io/2016/08/06/memory-optimisation-for-webview-in-android/\" target=\"_blank\" rel=\"external\">WebView内存泄漏优化之路</a></li>\n<li><a href=\"https://blog.csdn.net/u_xtian/article/details/6123945\" target=\"_blank\" rel=\"external\">关于android.view.WindowLeaked的解决方案</a></li>\n<li><a href=\"http://wuxiaolong.me/2017/04/15/memory/\" target=\"_blank\" rel=\"external\">Android 内存优化</a></li>\n<li><a href=\"http://weishu.me/2016/10/13/sharedpreference-advices/\" target=\"_blank\" rel=\"external\">请不要滥用SharedPreference</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","性能优化"]},{"title":"武汉购房经历 | 已结束","url":"http://jinbeen.com/2018/06/13/buying-a-house-in-wuhan/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>2018.6.12，今天刚领到了购房合同，从买房到现在已经一年多了，总算完成了一项一百多万的大买卖。总结一下这一年多买房的经历。</p>\n<p>很长的文字，建议<del>用时一个小时</del>不要看。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://jinbeen.com/images/2018/life-house-光谷转盘图.png\" alt=\"image.png\"></p>\n<h3 id=\"开始想买房\"><a href=\"#开始想买房\" class=\"headerlink\" title=\"开始想买房\"></a>开始想买房</h3><p>刚毕业半年，还在北京工作的的时候，一高中同学就打算在武汉买套房，那时候是2015年底，因为她毕业的早一年，而且提前出去工作的，在武汉已经工作了一年了，对那里的形势也比较了解。</p>\n<p>跟我说了一下买房的事情，由于我对武汉的情况并不了解，而且那时候刚毕业不久，没有很稳定的工作，不确定是不是一定到武汉定居，所以并没有多在意，当年过年回家和父母商量可不可以买。</p>\n<p>当时没有买，我知道的几个原因有，<br>第一：家里那时候生意不太好做，准备搬到市区去做另一行的生意，进货、租店而且还要一定的资金周转，拿出20万作为首付后资金有点紧张。<br>第二：父母问了其他人武汉的房子好不好买，大家都说好买，不急，到处都拉着你买房子。<br>第三：我还不确定回武汉，以后还不一定在武汉定居，现在买了不一定增值，花20万放在房子上增值现在看不到好的前景。<br>第四：我的收入不稳定，买了不一定还得起，到时候还得让父母还，我心里也不好受。<br>第五：我大学在宜昌上的，之后又去了北京，对武汉的情况不了解，不知道哪个地方好，哪个地方差还需要去好好看，而且买了后还要领合同签贷款交首付之类的要一段时间，我马上就要去北京了，父母忙生意也没时间。<br>由于种种原因，当时是没有买的，不然现在也不会花这么大价钱买。</p>\n<p>那个高中同学买了，之后说的是逼她的父母买的《宝业光谷丽都》，当时的价好像是7500左右，2015年下半年或2016年上半年，买的一个85平左右的两室一厅，对于我们来说已经非常好了。</p>\n<p><img src=\"https://jinbeen.com/images/2018/life-house-宝业光谷丽都.png\" alt=\"宝业光谷丽都\"></p>\n<p>后来房价一路飙升，原定她的小区第三期2017年开盘的一直捂盘到现在，2018年5月，靠近三环的比较吵的以均价15000元一平，靠后一点的以均价17000元一平的出售了。整整翻了两倍不止。</p>\n<h3 id=\"网上看房子\"><a href=\"#网上看房子\" class=\"headerlink\" title=\"网上看房子\"></a>网上看房子</h3><p>过完年去北京后，网上一直有武汉房价的消息，可能那时候资本寒冬，投资家的钱没地方去就很多到了房市上面。那时候还在网上慢慢悠悠看房子，看哪里的地段好，哪里符合我工作的地方。</p>\n<p>突然，具体时间忘记了，也不是很敏感，因为当时父母没这么想买，我没这么多钱，觉得父母已经很辛苦了，所以没有太在意。大约是2016年下半年的时候，武汉限购了，不是武汉户口的买不了，刚开始是几个区限购，后来越来越多，以至于好点的地方都需要户口或两年社保。[2016、武汉9月限贷，10月限购，11月又限购]</p>\n<p>2017年过年的时候回家，差不多2017年2月，在武汉呆了几天，去她的房子那看了一下，好像就是那个三期的，说是快开盘了，我问可以不可以买，说是限购了一定要是武汉户口，或是两年社保，当时想了想两年是不可能的，还要工作两年，本地户口又不是，所以很无奈。</p>\n<h3 id=\"第一次实地看房\"><a href=\"#第一次实地看房\" class=\"headerlink\" title=\"第一次实地看房\"></a>第一次实地看房</h3><p>2017年回家后，决定了之后去深圳发展，回北京后辞去当时的工作，然后去了深圳，打算的是在深圳打工然后还武汉的房贷。既然买不了主城区的房子，就买远城区的，心里想的很简单，只要是武汉的房子就好，就算离工作的地方搭车2小时也无所谓。</p>\n<p>然后在深圳找工作期间，发现不是很顺利，深圳的工资没有我想象的那么高，而且远城区的房子比我想象的要远😂。</p>\n<p>当时在深圳找工作，因为深圳距离武汉比较远，父母和另一个人就开车一起去武汉看了一次，开去武汉差不多就2个小时左右。看了几个楼盘感觉比较好，想我回来看下然后最好能定下来。2017年5月1日前几天我回武汉去和父母看了一下。</p>\n<p><img src=\"https://jinbeen.com/images/2018/life-house-汉口北.png\" alt=\"汉口北\"></p>\n<p>当时看了四套房，都在汉口北地铁站附近：</p>\n<ul>\n<li><p>第一套，位置很偏，旁边还是石子路，配套什么的想都没想。进去小区之后，两个字：“荒芜”，基本没有什么人在那里住，只有一个阿姨推着小孩在那里玩。墙上已经掉漆了，是的，建筑的外墙已经掉漆了，进去楼道口，门和电梯都是旧的，应该是没有物业吧，没人住也不用请物业，不能进去房间里看，就到顶楼看了下，心里很难受，坚决不能买。</p>\n</li>\n<li><p>第二套，是隔得不远的一间，小区位置还比较好，和之前的比好多了，里面的入住率很高，而且绿化做的很好，就是有个缺点，在一楼或是二楼，阳光不是很好，好像还看了同一个小区的，因为里面的户型不好没有考虑，都是二手房。暂时把这个留作考虑。</p>\n</li>\n<li><p>第三套，这个很差非常差。。是一个和我一般大的小姑凉带我们看的房，去的路上还有别人在旁边种田，进去后是一个老小区，里面别人住了大几年的那种，很破。房价是一万一平！小姑凉实话说了，之前那里没人来看，因为限购了，所以很多人跑这里买了，这里的价格就起来了。</p>\n</li>\n<li><p>第四套，是性价比最高的。在第二套的不远处，但是这个是中层，而且是毛坯，户型也还可以采光比较好，大小85平左右，小区物业一般。在楼上看了一下远处新建的一栋楼，问了下中介那么什么价，中介说均价差不多9000-10000，要收10万的茶水费才能买到，就是10万买一个购房名额，当时我们真是目瞪口呆，10万在老家可以付个首付了这里就是一个名额钱。</p>\n</li>\n</ul>\n<p>思来想去，如果买的话最好的选择是第四套，但感觉缺点什么，没有生气还是比较远？父母比较忙也没有时间过来武汉，一直看房子为这事操心，都准备去中介所那里交定金了，一万的定金给预留房源，交了买可以低首付，不买是不能退的。思考了很久，我拉住父母说，我另一个同学也说要在武汉买房子，我参考一下他的意见。</p>\n<p>另一个同学也在武汉工作，一个男生，之前和我们说想要在武汉买房，他对武汉应该很熟悉，就问了他很多情况，让他说汉口北是什么情况，建不建议买。他说汉口北有地铁，周边有很多批发市场，看起来还可以，但是离主城区远，周边也没有什么工作的地方，一切都比较虚。这么一说我心里就有点明白了，在回去的时候思考了很久该怎么办。最后灵光一现，干脆回武汉，这样对武汉也熟一些，知道买哪里好，在武汉先工作着，不行就两年后再买，买的很远也不能住没有意义。</p>\n<p>然后，我就回武汉了。</p>\n<h3 id=\"可以转户口了\"><a href=\"#可以转户口了\" class=\"headerlink\" title=\"可以转户口了\"></a>可以转户口了</h3><p>2017年8月份，听到一个房产中介朋友说可以转户口了！只要是大学生就可以！</p>\n<p>当时不敢相信，还特地去东湖高新政务中心问了，武汉启动大学生留汉政策，可以办理！然后下个星期我就拿资料去办理了。</p>\n<p>办理所需的资料：<br>[2017年9月1日 星期五 10:24 拍的照片]<br><img src=\"https://jinbeen.com/images/2018/life-house-所需资料.png\" alt=\"所需资料\"></p>\n<p>然后很快拿到准迁证，之后回老家的户籍办理中心，将准迁证给工作人员，然后电脑操作一下在准迁证另一半上盖一个章，再回武汉到洪山区关东派出所将另一半准迁证给工作人员。等一两个月新的身份证下来就好了！</p>\n<p>这时候我终于可以买主城区的房子了！比我预想的快了将近两年。</p>\n<h3 id=\"江夏庙山保利海上五月花\"><a href=\"#江夏庙山保利海上五月花\" class=\"headerlink\" title=\"江夏庙山保利海上五月花\"></a>江夏庙山保利海上五月花</h3><blockquote>\n<p>限购区看中的第一套房，严格来讲江夏不算主城区。</p>\n</blockquote>\n<p><img src=\"https://jinbeen.com/images/2018/life-house-保利海上五月花.png\" alt=\"保利海上五月花\"></p>\n<p>租房的时候遇到一个在我爱我家做房产中介的朋友。他在卖二手房，负责保利海上五月花，周末约他去看了一下那的房子。相对之前我看的房子好太多太多了，价格是11600元左右一平，因为是二手房有很多税加一起来差不多这个价，而且是临湖，可以睡到卧室能直接看到湖的哪一种，距离光谷转盘坐公交40-50分钟。没有看到比这还好的了，因为之前看的都比较差。</p>\n<p>想买，后来发现我另一同学在武汉做中介，也是在我爱我家，负责另一片区。说可以讲中介费做到0.5%，正常的是2.5%，而且后期还有很多税是和中间评估商有关联的，评估的越高税越贵，他们可以做的低一点，这样算下来可以少几万！当然是找我那同学了，只能对不起那朋友了。</p>\n<p>后来，过来这边看了好几次，总觉得还是不太好。第一，单价还是有点贵，第二，房间比较小，77平，两个小房间，两个人住还好，之后人多了不方便，不过当时的首付只有35w，所以大点的话了买不起。总的来说，基本满足我的需要。</p>\n<h3 id=\"江夏庙山广信万汇城\"><a href=\"#江夏庙山广信万汇城\" class=\"headerlink\" title=\"江夏庙山广信万汇城\"></a>江夏庙山广信万汇城</h3><blockquote>\n<p>江夏庙山地理位置最好的盘</p>\n</blockquote>\n<p><img src=\"https://jinbeen.com/images/2018/life-house-广信万汇城.png\" alt=\"广信万汇城\"></p>\n<p>父母过来准备交首付了，想带父母去房子里看一下，路过了《广信万汇城》。<br>显然那个盘比保利海上五月花好，新房而且地理位置好，旁边就是武昌理工学院。当时单价是9500元一平，算了下，就算交8万的茶水费买97平的和买保利海上五月花一样的价。何乐而不为，当时就定了广信万汇城！</p>\n<p>10月份交了认筹资料就没有管了，因为交了茶水费可以说是稳了，大伙基本也知道怎么回事，说的是不交买不到的，没想到的是交了也买不到。</p>\n<p>过了两个月，通知开盘，交了20w的认筹金，然后开盘后被告知没有搞到房子，开发商那边炸了，收了很多的茶水费，房子不够用了，大家都没有得到。被号称是全球最快秒光盘，全部内定，一进去选房系统全部秒红，事后很多人去销售中心拉横幅，我还被加入了好多的“广信万汇城退筹群”。这这一次开的是第二期，第三期定在2018年下旬了，没有请营销团队，全部内部售卖，可以说是非常厉害了！</p>\n<p><a href=\"http://haokan.baidu.com/videoui/page/videoland?context=%7B%22nid%22%3A%22sv_8734269223388388804%22%7D\" target=\"_blank\" rel=\"external\">秒光视频</a> - 说不定什么时候就没有了<br>—“垃圾，都被内定了，还收20万认凑金，收了一千多份，这样的开发商政府为什么不查？老百姓就这样被折腾没人管吗？大家现在需要的是真相，全部房拿出去收茶水费，还要骗这么多认凑，太过分了！”</p>\n<p>之后同学推荐了中海光谷锦城，说的是双轨交汇，就是贵了点差不多四十几万的首付，给父母说了太贵就没作考虑。然后马上过年回家了，这年就没有买到。</p>\n<h3 id=\"保利海上五月花最后一期\"><a href=\"#保利海上五月花最后一期\" class=\"headerlink\" title=\"保利海上五月花最后一期\"></a>保利海上五月花最后一期</h3><blockquote>\n<p>在毛坯房绝迹时，保利海上五月花最后一期毛坯房推出了</p>\n</blockquote>\n<p>这次的政策很好，房产商的120平以下的房源，40%拿出来作为刚需选房(2018年6月1日后是60%)。<br>就是如果有100套120平以下的房，那么，就拿40套出来让刚需的先选择一次，没有选中再选择另外的房源。<br>评为刚需的条件是：在武汉没有房而且多少年内没有贷款记录。<br>由房管局将所有刚需的人摇号排序依次选房，保利海上五月花最后一期刚需房源有180套，我被摇到了90名，就是说我是第90人进去选房子的人，选一个少一套。</p>\n<p>经过一定的思想斗争，我放弃了。之前一直想买的房子现在免费给我机会不要茶水费，毛坯，而且单价是9700元，这里的二手房价已经是12000元了，网上内定名额已经炒到10w一个人了。<br>这里的交通(2049年都没有规划地铁)，教育配套，生活配套都不行，仅有的好处是便宜。考虑到后期这里显然不是最佳的选择。</p>\n<h3 id=\"安居客看房团\"><a href=\"#安居客看房团\" class=\"headerlink\" title=\"安居客看房团\"></a>安居客看房团</h3><blockquote>\n<p>白沙洲线路：新力城、美好长江首玺、东原乐见城、中悦滨湖尚城、加州橘郡</p>\n</blockquote>\n<p>为了了解更多的房源，在安居客上报了一个白沙洲线路的看房团，这条线路的盘均价在12000左右。</p>\n<ul>\n<li>新力城、美好长江首玺性价比比较高，属于白沙洲，现在的周边环境不太适合居住，交通也基本没有，新力城都没有公交车到那里。不过周围已经规划地铁，相信以后会很好。</li>\n<li>东原乐见城位置最好，在南湖，但价格也最高，首付60-70w，验资50w,装修不能贷款。周边有地铁并且已经开通，生活氛围也浓厚。</li>\n<li>中悦滨湖尚城属于江夏，四环外了，距离地铁线也比较远，好处是周围有几个学校和一个腾讯大厦，居然叫出12500的高价，应该是距离江夏市政府比较近或其他缘故。</li>\n<li>加州橘郡在江夏庙山，距离保利海上五月花比较近，自从经历了广信万汇城，觉得庙山其他的盘都看不上眼了。自带幼儿园小学，周边都是私立学校，置业说一年5w学费，一般人真的上不起，很多家长陪读的，出租到是很好。后期开盘人也是爆满。</li>\n</ul>\n<p>和公司的一个同事一起去看的，然后在路上遇到了一个一起看房的哥们，从他口中得知了《康桥知园》这个楼盘，说是价格适中，而且地理位置也可以，之前加过他们的置业，马上截止交资料了就把资料拍照发给了置业。</p>\n<h3 id=\"康桥知园\"><a href=\"#康桥知园\" class=\"headerlink\" title=\"康桥知园\"></a>康桥知园</h3><blockquote>\n<p>旁边楼盘有：招商东城华府和中海光谷锦城。</p>\n</blockquote>\n<p><img src=\"https://jinbeen.com/images/2018/life-house-康桥知园.png\" alt=\"康桥知园\"></p>\n<ul>\n<li>位置：位于东湖高新区佛祖岭地块，距离佛祖岭地铁站(2号线南延线最后一站)1.7km左右。旁边的中海和招商华府都属于江夏。</li>\n<li>价格：郑州康桥集团拿的地，7200多一点，均价15500元，价格还能接受，周边的中海和招商华府都差不多是这个价，中海的地拿的是8300元左右，是江夏地王。首付将近50w。</li>\n<li>配套：说的三轨交汇，2号线，9号线和有轨。2号线2019年1月份开通，有轨已经开通，9号线的站点会距离项目更近一些，不过是很久之后的事情了，也属于2期建设，不知道是何年何月。周边有很多学校，幼儿园小学初中高中都有，而且都可以上，隔壁的楼盘则不能。</li>\n<li>小区规模：这个相对劣势，只有三栋楼288户卖完就没有了，不过小区的绿化楼间距可以，品质也比较好。</li>\n</ul>\n<p>武汉阿松的评价：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/SyXblCmku_cLlWiuqnwVEg\" target=\"_blank\" rel=\"external\">武汉有这样一个盘 开发商竟然不以赚钱为目的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/nIOGa-czOtIHORH5fL9Xew\" target=\"_blank\" rel=\"external\">阿松楼书：康桥知园-光谷稀有品质房 所有房源一次性全部推出！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/nHzGNcE3X6YU48Ye_UzljA\" target=\"_blank\" rel=\"external\">康桥知园VS中海光谷锦城！</a></li>\n</ul>\n<h3 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h3><blockquote>\n<p>东湖高新 - 武汉东湖新技术开发区</p>\n</blockquote>\n<ul>\n<li>有人评价东湖高新和汉阳：一个是高科技里搞住宅，一个是住宅里搞高科技。</li>\n<li>如果说以前武汉的中心是汉口，那现在武汉的中心就是东湖高新。</li>\n<li>光谷是宇宙中心，光谷东是上海，光谷南是广州，光谷西是成都，光谷北是北京。</li>\n<li>一个与市政府平级的行政区</li>\n</ul>\n<p>不做多的解释了，看百度百科：</p>\n<ul>\n<li><a href=\"https://baike.baidu.com/item/%E6%AD%A6%E6%B1%89%E4%B8%9C%E6%B9%96%E6%96%B0%E6%8A%80%E6%9C%AF%E4%BA%A7%E4%B8%9A%E5%BC%80%E5%8F%91%E5%8C%BA\" target=\"_blank\" rel=\"external\">武汉东湖新技术产业开发区</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/-8xRVpfbmBE8wBUtv2blwg\" target=\"_blank\" rel=\"external\">从0到518平方公里！武汉最牛X的区是如何炼成的？</a></li>\n</ul>\n<h3 id=\"贷款事项\"><a href=\"#贷款事项\" class=\"headerlink\" title=\"贷款事项\"></a>贷款事项</h3><blockquote>\n<p>房贷 装修贷  利率：25%</p>\n</blockquote>\n<p>经过一系列操作，最终成功买到了康桥知园，总价160w左右，首付50w左右，房贷和装修贷是分开的。</p>\n<ul>\n<li>房贷：首套房30%(第二套50%)，招商，利率上浮25%，总贷款94w，还款30年。</li>\n<li>装修贷：中行信用卡，贷款18w，还款8年。</li>\n</ul>\n<p>算在一起每月还款8k左右了，在武汉，房价现在这个价很正常，每月月供这个多，在武汉拿的工资很难还得起。除非装修款提前还完之后的生活就宽裕一点。</p>\n<p>拿到房子后等通知去售楼部交贷款资料给相关银行审核，前提是我和我父母的收入(可以添加父母为共同还款人)加起来是贷款的2倍，就是一月1.6k。审核的细节很多，还要看父母的征信等，父母过来排了半天的队，半辈子的积蓄就给了首付钱，心里很难受。</p>\n<p>给银行审核的时间差不多一个月左右，然后成功后去售楼部交首付，交完首付签购房合同，合同拿去给房管局盖章时间差不多也是一个月左右。然后房贷放款，售楼部拿到购房合同去中行放装修款，这个时间也将近大半个月吧。</p>\n<p>最后等房贷和装修贷全部放款之后，就去售楼部拿的购房合同。</p>\n<h3 id=\"落户及房产证\"><a href=\"#落户及房产证\" class=\"headerlink\" title=\"落户及房产证\"></a>落户及房产证</h3><blockquote>\n<p>置业说的是90天之后可以拿购房合同去东湖高新政务服务中心办理房产证。</p>\n</blockquote>\n<p>听阿松讲。东湖高新这样的主城区需要100平米以上才能落户，其他的区有点不一样，面积可以小一点。<br>还没有办理房屋落户和房产证暂不多说。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>由最初的能买到，能住就好，到最后考虑到行政区、交通、教育、离上班的位置距离、周边商业、户型。这一年多的买房经历真是学到了不少，以前东南西北都分不清，现在因为要看房子的朝向都老熟了，房子朝南偏13度才是最佳朝向，而不是正朝南。</p>\n<p>最辛苦的还是父母，首付钱基本是父母支持的，家里本不富裕，一个农村人在武汉买一套房是多不容易的事情，周围的小伙伴在武汉买房的毕竟还是少数，后期会更加努力争取过上更好的生活。</p>\n<p>基本完。</p>\n<blockquote>\n<p>2018.6.13 00:41 夜深，下次更。<br>2018.6.13 22:51 基本结束</p>\n</blockquote>\n","categories":["life"],"tags":["life"]},{"title":"hexo permalink设置技巧","url":"http://jinbeen.com/2018/06/06/set-hexo-permalink/","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>之前的文章有幸被鸿洋的公众号收录，文章内引用了博客中的一篇文章链接：<strong><a href=\"https://jinbeen.com/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/\">https://jinbeen.com/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/</a></strong>；着实尴尬，因为默认生成的文章链接是<code>:year/:month/:day/:title/</code>，里面的汉字经过转义，导致了这样的结局。</p>\n<a id=\"more\"></a>\n<h3 id=\"永久链接\"><a href=\"#永久链接\" class=\"headerlink\" title=\"永久链接\"></a>永久链接</h3><p>看一下<a href=\"https://hexo.io/zh-cn/docs/permalinks.html\" target=\"_blank\" rel=\"external\">永久链接（Permalinks）</a>的解释，在站点的<code>_config.yml</code>中，生成的文章链接默认为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n<p>因为<strong>title</strong>可能为中文，那生成的链接就可能为上面的情况，这时候我们希望自己在每篇文章的Front-matter中指定一个字段，然后替换<strong>title</strong>，这样就可以显示我们自己定义的url了，例如：</p>\n<ul>\n<li><code>permalink: :year/:month/:day/:urlname/</code></li>\n<li><code>permalink: post/:urlname/</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink: :year/:month/:day/:urlname/</div><div class=\"line\"># 当没有urlname时显示什么,写上 :title 也没有用，会作为字符串处理</div><div class=\"line\">permalink_defaults:</div><div class=\"line\">  urlname: index</div></pre></td></tr></table></figure>\n<p>因为之前文章的形式是<code>:year/:month/:day/:title/</code>，为了保留以前的文章阅读数，这里我使用第一种形式，然后在以前每篇文章的Front-matter中加上<strong>urlname</strong>，保持和以前的文章链接一致就可以了，例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: 《Android群英传 神兵利器》读书笔记</div><div class=\"line\">urlname: 《Android群英传-神兵利器》读书笔记</div><div class=\"line\">date: <span class=\"number\">2018</span>-<span class=\"number\">02</span>-<span class=\"number\">04</span> <span class=\"number\">23</span>:<span class=\"number\">16</span>:<span class=\"number\">31</span></div><div class=\"line\">tags:</div><div class=\"line\">- Android</div><div class=\"line\">- Books</div><div class=\"line\">- 工具</div><div class=\"line\">categories: Android</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：标题上的空格，有时候转义为“%20”，有时候则为“-”。其他的特殊字符也要注意，不然和以前的文章就不是一个链接了！</p>\n</blockquote>\n<p>为了每次<code>hexo new “my new blog title”</code>时就有<strong>urlname</strong>字段，我们可以在<code>scaffolds/post.md</code>里配上这个字段，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: &#123;&#123; title &#125;&#125;</div><div class=\"line\">urlname: </div><div class=\"line\">date: &#123;&#123; date &#125;&#125;</div><div class=\"line\">tags:</div><div class=\"line\">categories:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>这样生成的链接形式就是这样了：<a href=\"https://jinbeen.com/2018/06/06/set-hexo-permalink/\">https://jinbeen.com/2018/06/06/set-hexo-permalink/</a></p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ul>\n<li>修改站点文件<code>_config.yml</code>中的<strong>permalink</strong>： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink: :year/:month/:day/:urlname/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\">  urlname: index</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>在<code>scaffolds/post.md</code>里配上<strong>urlname</strong>字段：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: &#123;&#123; title &#125;&#125;</div><div class=\"line\">urlname: </div><div class=\"line\">date: &#123;&#123; date &#125;&#125;</div><div class=\"line\">tags:</div><div class=\"line\">categories:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"hexo遇到的问题\"><a href=\"#hexo遇到的问题\" class=\"headerlink\" title=\"hexo遇到的问题\"></a>hexo遇到的问题</h3><h4 id=\"hexo-d卡很久\"><a href=\"#hexo-d卡很久\" class=\"headerlink\" title=\"hexo d卡很久\"></a>hexo d卡很久</h4><p>之前遇到的一个问题，折磨了几天，和这篇文章无关，现记录在这里：<br>用<code>hexo d</code>命令部署的时候总是会卡住很久，只用<code>hexo d -debug</code>查看日志发现信息一直在循环：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ hexo d -debug</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">INFO  Files loaded in <span class=\"number\">620</span> ms</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">INFO  Files loaded in <span class=\"number\">342</span> ms</div><div class=\"line\">...</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">INFO  Files loaded in <span class=\"number\">274</span> ms</div><div class=\"line\">INFO  <span class=\"number\">0</span> files generated in <span class=\"number\">381</span> ms</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">^C  </div><div class=\"line\">Bye!</div></pre></td></tr></table></figure>\n<p>这里和另一个使用hexo的人情况一致，<a href=\"http://duanyifu.com/2016/08/23/hexo-deploy-problem/\" target=\"_blank\" rel=\"external\">hexo deploy 命令卡住的奇怪问题</a>，参考他的解决方法还是没有解决，估计每个人产生的原因可能不一致，最后<code>删除db.json 文件</code>才好了。</p>\n<h4 id=\"debug预览错误提示\"><a href=\"#debug预览错误提示\" class=\"headerlink\" title=\"debug预览错误提示\"></a>debug预览错误提示</h4><blockquote>\n<p>TypeError: The header content contains invalid characters</p>\n</blockquote>\n<p>网上有说是链接上有中文的原因，不过是2016年的了。</p>\n<p>我的是使用了<code>![图片](图片)</code>这样的文本，本想做一个占位然后后期补上的，不过加上这个会导致错误！</p>\n<h4 id=\"主页底部的访问数量显示失效\"><a href=\"#主页底部的访问数量显示失效\" class=\"headerlink\" title=\"主页底部的访问数量显示失效\"></a>主页底部的访问数量显示失效</h4><p>之前一直以为底部的访问数量是<code>leancloud</code>来计数的，后来发现错了。</p>\n<p><code>leancloud</code>是用来统计文章的访问量的，不蒜子才是用来统计站点的总访问量的。</p>\n<p><code>因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！</code><br>导致站点的总浏览量显示不出，更改就好了：<br>找到对应的next主题文件：<br><code>_scripts/third-party/analytics/busuanzi-counter.swig</code></p>\n<p>更改对应的域名为：busuanzi.ibruce.info</p>\n<ul>\n<li><a href=\"https://www.zhyong.cn/posts/ea4d/\" target=\"_blank\" rel=\"external\">使用不蒜子添加总访问量</a></li>\n<li><a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"external\">不蒜子 - 极简网页计数器</a></li>\n</ul>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://jinbeen.com/2016/11/19/Mac%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95%EF%BC%8C%E6%8E%92%E9%9B%B7%E5%AE%8C%E6%88%90/\">Mac搭建Hexo博客流程记录，排雷完成</a></li>\n<li><a href=\"http://www.wuliaole.com/post/permalink_and_internal_link_in_hexo/\" target=\"_blank\" rel=\"external\">HEXO的站内链接和永久链接</a></li>\n<li><a href=\"http://luanlouis.com/big-front-end/build-perfect-url-in-hexo.html\" target=\"_blank\" rel=\"external\">在hexo博客中打造相对完美的URL</a></li>\n<li><a href=\"http://www.cnblogs.com/donglegend/p/5821052.html\" target=\"_blank\" rel=\"external\">hexo问题篇(偶尔抽抽疯)</a></li>\n</ul>\n","categories":["hexo"],"tags":["hexo"]},{"title":"一次面试题的简单整理","url":"http://jinbeen.com/2018/05/27/一次面试题的简单整理/","content":"<p>牛客网：<a href=\"https://www.nowcoder.com/9070733\" target=\"_blank\" rel=\"external\">https://www.nowcoder.com/9070733</a><br><a id=\"more\"></a></p>\n<h3 id=\"选择题\"><a href=\"#选择题\" class=\"headerlink\" title=\"选择题\"></a>选择题</h3><p>1、广播的注册方式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--广播注册--&gt;  </div><div class=\"line\">   &lt;receiver android:name=\".SmsBroadCastReceiver\"&gt;  </div><div class=\"line\">       &lt;intent-filter android:priority=\"20\"&gt;  </div><div class=\"line\">          &lt;action android:name=\"android.provider.Telephony.SMS_RECEIVED\"/&gt;  </div><div class=\"line\">       &lt;/intent-filter&gt;  </div><div class=\"line\">   &lt;/receiver&gt;</div></pre></td></tr></table></figure>\n<hr>\n<p>2、android 关于service生命周期的onCreate()和onStart()说法正确的是?(<a href=\"https://www.nowcoder.com/questionTerminal/ed1d86767b314513916228a38014789f?from=14pdf\" target=\"_blank\" rel=\"external\">AD</a>)</p>\n<ul>\n<li>A.当第一次启动的时候先后调用onCreate()和onStart()方法</li>\n<li>B.当第一次启动的时候只会调用onCreate()方法</li>\n<li>C.如果service已经启动，将先后调用onCreate()和onStart()方法</li>\n<li>D.如果service已经启动，只会执行onStart()方法，不在执行onCreate()方法</li>\n</ul>\n<p><img src=\"http://uploadfiles.nowcoder.net/images/20161103/7327747_1478142515011_5191CAD3158E038AE9D09ED7CF1D5165\" alt=\"\"></p>\n<hr>\n<p>3.在android中使用Menu时可能需要重写的方法有?（<a href=\"https://www.nowcoder.com/questionTerminal/9a4add5a37434be0a5f28e5c371609be\" target=\"_blank\" rel=\"external\">AC</a>）</p>\n<ul>\n<li>A.onCreateOptionsMenu()</li>\n<li>B.onCreateMenu()</li>\n<li>C.onOptionsItemSelected()</li>\n<li>D.onItemSelected()</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);  </div><div class=\"line\">        setContentView(R.layout.activity_main);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// Inflate the menu; this adds items to the action bar if it is present.  </span></div><div class=\"line\">        getMenuInflater().inflate(R.menu.activity_main, menu);  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub  </span></div><div class=\"line\">        <span class=\"keyword\">switch</span>(item.getItemId())&#123;  </div><div class=\"line\">           <span class=\"keyword\">case</span> R.id.menu_about:             </div><div class=\"line\">               Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"\"</span>+<span class=\"string\">\"关于\"</span>, Toast.LENGTH_SHORT).show();  </div><div class=\"line\">               <span class=\"keyword\">break</span>;  </div><div class=\"line\">           <span class=\"keyword\">case</span> R.id.menu_settings:  </div><div class=\"line\">                 </div><div class=\"line\">               Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"\"</span>+<span class=\"string\">\"设置\"</span>, Toast.LENGTH_SHORT).show();  </div><div class=\"line\">               <span class=\"keyword\">break</span>;  </div><div class=\"line\">           <span class=\"keyword\">case</span> R.id.menu_quit:  </div><div class=\"line\">                 </div><div class=\"line\">               Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"\"</span>+<span class=\"string\">\"退出\"</span>, Toast.LENGTH_SHORT).show();  </div><div class=\"line\">               <span class=\"keyword\">break</span>;  </div><div class=\"line\">           <span class=\"keyword\">default</span>:  </div><div class=\"line\">               <span class=\"keyword\">break</span>;  </div><div class=\"line\">           &#125;  </div><div class=\"line\"><span class=\"comment\">//         Toast.makeText(MainActivity.this, \"\"+item.getItemId(), Toast.LENGTH_SHORT).show();  </span></div><div class=\"line\">      </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>4.android中下列属于intent的作用是(<a href=\"https://www.nowcoder.com/questionTerminal/e261e82aee5248d2939f251318ae11c4\" target=\"_blank\" rel=\"external\">C</a>)</p>\n<ul>\n<li>A.实现应用程序间的数据共享</li>\n<li>B.是一段长的生命周期，没有用户界面的程序，可以保持应用在后台运行，而不会因为切换页面而消失</li>\n<li>C.可以实现界面间的切换，可以包含动作和动作数据，连接四大组件的纽带</li>\n<li>D.处理一个应用程序整体性的工作</li>\n</ul>\n<blockquote>\n<p>不同activity间的数据共享</p>\n</blockquote>\n<hr>\n<p>5.如果在Activity中对一些资源以及状态进行保存操作，最好是在生命周期的哪个函数中进行呢？（A）</p>\n<ul>\n<li>A.onPause()</li>\n<li>B.onCreat()</li>\n<li>C.onResume()</li>\n<li>D.onStart() </li>\n</ul>\n<blockquote>\n<p>暂停的时候保存。在onPause()时候保存状态，才能保存用户最终的使用状态。</p>\n</blockquote>\n<hr>\n<p>6.android 工程最后生成的工程文件是？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app\\build\\intermediates文件夹里是也</div><div class=\"line\">intermediates：是一个中间人，调节人的意思，</div><div class=\"line\">java源文件转为class文件后再转为dex文件，最后生成apk</div><div class=\"line\">这里面class文件夹就被存放在intermediates文件夹里面</div></pre></td></tr></table></figure>\n<h3 id=\"填空题\"><a href=\"#填空题\" class=\"headerlink\" title=\"填空题\"></a>填空题</h3><p>1.android常用的五种布局FrameLayout(框架布局)，LinearLayout(线性布局)，RelativeLayout(相对布局)，AbsoluteLayout(绝对布局)，TableLayout(表格布局)</p>\n<hr>\n<p>2.Android四大基本组件分别是Activity，Service服务,Content Provider内容提供者，BroadcastReceiver广播接收器。</p>\n<hr>\n<p>3.android 中 service 的实现方法是： <strong><strong><em>__</em></strong></strong> 和 <strong><strong><strong>_</strong></strong></strong> 。<br>start 和 bind</p>\n<hr>\n<p>4.Android的系统体系结构分为四层，自顶向下分别是</p>\n<ul>\n<li>应用程序(Applications)</li>\n<li>应用程序框架(Application Frameworks)</li>\n<li>系统运行库与Android运行环境(Libraris &amp; Android Runtime)</li>\n<li>Linux内核(Linux Kernel)</li>\n</ul>\n<hr>\n<p>5.AsyncTask是什么？AsyncTask的使用方法？<br>android的类AsyncTask对线程间通讯进行了包装，提供了简易的编程方式来使后台线程和UI线程进行通讯：后台线程执行异步任务，并把操作结果通知UI线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Integer</span>, <span class=\"title\">String</span>&gt;</span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//后面尖括号内分别是参数（例子里是线程休息时间），进度(publishProgress用到)，返回值 类型  </span></div><div class=\"line\">          </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//第一个执行方法  </span></div><div class=\"line\">            <span class=\"keyword\">super</span>.onPreExecute();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//第二个执行方法,onPreExecute()执行完后执行  </span></div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;  </div><div class=\"line\">                pb.setProgress(i);  </div><div class=\"line\">                publishProgress(i);  </div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                    Thread.sleep(params[<span class=\"number\">0</span>]);  </div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                    e.printStackTrace();  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"执行完毕\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Integer... progress)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//这个函数在doInBackground调用publishProgress时触发，虽然调用时只有一个参数  </span></div><div class=\"line\">            <span class=\"comment\">//但是这里取到的是一个数组,所以要用progesss[0]来取值  </span></div><div class=\"line\">            <span class=\"comment\">//第n个参数就用progress[n]来取值  </span></div><div class=\"line\">            tv.setText(progress[<span class=\"number\">0</span>]+<span class=\"string\">\"%\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">super</span>.onProgressUpdate(progress);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(String result)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//doInBackground返回时触发，换句话说，就是doInBackground执行完后触发  </span></div><div class=\"line\">            <span class=\"comment\">//这里的result就是上面doInBackground执行后的返回值，所以这里是\"执行完毕\"  </span></div><div class=\"line\">            setTitle(result);  </div><div class=\"line\">            <span class=\"keyword\">super</span>.onPostExecute(result);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://allenwu.itscoder.com/Arts-Development-of-Android-11-1\" target=\"_blank\" rel=\"external\">AsyncTask 的使用方法和工作原理</a></p>\n</blockquote>\n<hr>\n<p>6.什么是AIDL？AIDL是如何工作的？</p>\n<blockquote>\n<p>AIDL: Android Interface Definition Language</p>\n</blockquote>\n<p>AIDL是一种IDL语言，用于生成可以在Android设备上两个进程之间进行进程间通信(interprocess communication, IPC)的代码。如果在一个进程中（例如Activity）要调用另一个进程中（例如Service）对象的操作，就可以使用AIDL生成可序列化的参数。</p>\n<p>AIDL是一种接口定义语言，用于生成可在Android设备上两个进程之间进行进程间通信(IPC)的代码。<br>高度概括AIDL的用法，就是服务端里有一个Service，给与之绑定(bindService)的特定客户端进程提供Binder对象。客户端通过AIDL接口的静态方法asInterface 将Binder对象转化成AIDL接口的代理对象，通过这个代理对象就可以发起远程调用请求了。</p>\n<blockquote>\n<p>引：<a href=\"https://blog.csdn.net/tellh/article/details/55100167\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/tellh/article/details/55100167</a></p>\n</blockquote>\n<hr>\n<p>7.Android中如何避免OOM异常？</p>\n<blockquote>\n<p>Java.lang.OutOfMemoryError : bitmap size exceeds VM budget。</p>\n</blockquote>\n<p>OOM 内存溢出，想要避免OOM 异常首先我们要知道什么情况下会导致OOM 异常。<br>1、图片过大导致OOM<br>2、界面切换导致OOM<br>3、在页面切换时尽可能少地重复使用一些代码<br>3、查询数据库没有关闭游标<br>4、构造Adapter 时，没有使用缓存的convertView<br>5、Bitmap 对象不再使用时调用recycle()释放内存<br>6、其他<br>Android 应用程序中最典型的需要注意释放资源的情况是在Activity 的生命周期中，在onPause()、onStop()、onDestroy()方法中需要适当的释放资源的情况。使用广播没有注销也会产生OOM。</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/jiayi_yao/article/details/51107960\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/jiayi_yao/article/details/51107960</a></p>\n</blockquote>\n<hr>\n<p>8.什么是ANR 如何避免它？</p>\n<blockquote>\n<p>ANR：Application Not Responding</p>\n</blockquote>\n<p>不同的组件发生ANR的时间不一样，Activity是5秒，BroadCastReceiver是10秒，Service是20秒。<br>解决方案：<br>1、将所有耗时操作，比如访问网络，Socket 通信，查询大量SQL 语句，复杂逻辑计算等都放在子线程中去，然后通过handler.sendMessage、runonUITread、AsyncTask 等方式更新UI，以确保用户界面操作的流畅度。<br>2、如果耗时操作需要让用户等待，那么可以在界面上显示进度条。</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/m_xiaoer/article/details/62438802\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/m_xiaoer/article/details/62438802</a></p>\n</blockquote>\n<hr>\n<hr>\n<p>9.NDK 与 JNI 是什么？</p>\n<blockquote>\n<p>JNI: Java Native Interface，即 Java本地接口<br>NDK: Native Development Kit，是 Android的一个工具开发包 </p>\n</blockquote>\n<p>JNI介绍<br>定义：Java Native Interface，即 Java本地接口<br>作用： 使得Java 与 本地其他类型语言（如C、C++）交互<br>即在 Java代码 里调用 C、C++等语言的代码 或 C、C++代码调用 Java 代码</p>\n<p>特别注意：<br>JNI是 Java 调用 Native 语言的一种特性<br>JNI 是属于 Java 的，与 Android 无直接关系</p>\n<p>实现步骤:<br>1.在Java中声明Native方法（即需要调用的本地方法）<br>2.编译上述 Java源文件javac（得到 .class文件）<br>3.通过 javah 命令导出JNI的头文件（.h文件）<br>使用 Java需要交互的本地代码 实现在 Java中声明的Native方法<br>如 Java 需要与 C++ 交互，那么就用C++实现 Java的Native方法<br>4.编译.so库文件<br>5.通过Java命令执行 Java程序，最终实现Java调用本地代码</p>\n<p>NDK介绍<br>定义：Native Development Kit，是 Android的一个工具开发包<br>NDK是属于 Android 的，与Java并无直接关系</p>\n<p>作用：快速开发C、 C++的动态库，并自动将so和应用一起打包成 APK<br>即可通过 NDK在 Android中 使用 JNI与本地代码（如C、C++）交互</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/carson_ho/article/details/73250163\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/carson_ho/article/details/73250163</a></p>\n</blockquote>\n<hr>\n<p>10.Android Fragment 生命周期图</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-99a43b3f7496fa2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Fragment生命周期图.png\"></p>\n<p>fragments的大部分状态都和activitie很相似，但fragment有一些新的状态。</p>\n<p>onAttached() —— 当fragment被加入到activity时调用（在这个方法中可以获得所在的activity）。<br>onCreateView() —— 当activity要得到fragment的layout时，调用此方法，fragment在其中创建自己的layout(界面)。<br>onActivityCreated() —— 当activity的onCreated()方法返回后调用此方法<br>onDestroyView() —— 当fragment中的视图被移除的时候，调用这个方法。<br>onDetach() —— 当fragment和activity分离的时候，调用这个方法。</p>\n<p>一旦activity进入resumed状态（也就是running状态），你就可以自由地添加和删除fragment了。因此，只有当activity在resumed状态时，fragment的生命周期才能独立的运转，其它时候是依赖于activity的生命周期变化的。</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/purediy/p/3276545.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/purediy/p/3276545.html</a></p>\n</blockquote>\n<hr>\n<p>11.Android5.0和6.0之后有哪些新控件？<br>Android5.0和6.0之后新增的控件，在项目中使用的时候，可分为三大类：</p>\n<ul>\n<li><p>1、第一类是内核提供的控件，位于SDK的android.jar中。<br>这个与系统版本有关，每个版本的android.jar是固定的，有在该内核中定义的控件才能正常调用，没在内核中定义的控件在运行时会扔出类找不到的异常。比如水波图形RippleDrawable和矢量图形VectorDrawable，这两个控件在Android5.0之后的系统内核中提供，所以只有系统版本不低于5.0的手机才能使用它们，运行4.*系统的手机是无法正常调用这两个控件的。</p>\n</li>\n<li><p>2、第二类是v4兼容库提供的控件，位于SDK的android-support-v4.jar中。<br>v4库默认会被编译进App的安装包，所以它不需要系统内核支持，可直接运行在4.0之后的所有系统上，并且App工程无需手工导入v4库。使用v4控件唯一需要注意的地方，是布局文件中要引用完整路径的控件名称，如抽屉布局android.support.v4.widget.DrawerLayout、下拉刷新布局android.support.v4.widget.SwipeRefreshLayout等等。</p>\n</li>\n<li><p>3、第三类是v7兼容库和design库，它们有各自的库工程，开发者要在App工程中手工导入用到的兼容库。<br>v7与design库导入App工程后，编译出来的App即可兼容4.*的系统。使用v7与design库的控件，类似于使用自定义控件，不但要在布局文件中引用完整路径的控件名称，还要在根布局声明命名空间（即添加属性<code>xmlns:app=http://schemas.android.com/apk/res-auto</code>），然后方可使用这些控件的自定义属性。这部分控件数量最多，实现的界面特效最丰富，而且互相之间存在依赖关系，如design库依赖于appcompat-v7库，部分design控件如NavigationView还依赖于recyclerview-v7库，所以若要正确使用design库的控件，往往得同时导入好几个相关的兼容库。</p>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/aqi00/article/details/59108336\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/aqi00/article/details/59108336</a></p>\n</blockquote>\n<h3 id=\"编程题\"><a href=\"#编程题\" class=\"headerlink\" title=\"编程题\"></a>编程题</h3><p>1.<a href=\"https://blog.csdn.net/zhangke3016/article/details/75923323\" target=\"_blank\" rel=\"external\">写一个自己的Handler，对消息进行处理</a></p>\n<hr>\n<p>2.写一个冒泡排序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">bubbleSort</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>\t<span class=\"title\">bubbleSort</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t <span class=\"keyword\">int</span> a[]=&#123;<span class=\"number\">49</span>,<span class=\"number\">38</span>,<span class=\"number\">65</span>,<span class=\"number\">97</span>,<span class=\"number\">76</span>,<span class=\"number\">13</span>,<span class=\"number\">27</span>,<span class=\"number\">49</span>,<span class=\"number\">78</span>,<span class=\"number\">34</span>,<span class=\"number\">12</span>,<span class=\"number\">64</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">62</span>,<span class=\"number\">99</span>,<span class=\"number\">98</span>,<span class=\"number\">54</span>,<span class=\"number\">56</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>,<span class=\"number\">23</span>,<span class=\"number\">34</span>,<span class=\"number\">15</span>,<span class=\"number\">35</span>,<span class=\"number\">25</span>,<span class=\"number\">53</span>,<span class=\"number\">51</span>&#125;;</div><div class=\"line\">\t<span class=\"keyword\">int</span> temp=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;a.length-<span class=\"number\">1</span>;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;a.length-<span class=\"number\">1</span>-i;j++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">\t\t\ttemp=a[j];</div><div class=\"line\">\t\t\ta[j]=a[j+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\ta[j+<span class=\"number\">1</span>]=temp;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;a.length;i++)</div><div class=\"line\">\t\tSystem.out.println(a[i]);\t</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>3.快速排序<br>基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">quickSort</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">inta[]=&#123;<span class=\"number\">49</span>,<span class=\"number\">38</span>,<span class=\"number\">65</span>,<span class=\"number\">97</span>,<span class=\"number\">76</span>,<span class=\"number\">13</span>,<span class=\"number\">27</span>,<span class=\"number\">49</span>,<span class=\"number\">78</span>,<span class=\"number\">34</span>,<span class=\"number\">12</span>,<span class=\"number\">64</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">62</span>,<span class=\"number\">99</span>,<span class=\"number\">98</span>,<span class=\"number\">54</span>,<span class=\"number\">56</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>,<span class=\"number\">23</span>,<span class=\"number\">34</span>,<span class=\"number\">15</span>,<span class=\"number\">35</span>,<span class=\"number\">25</span>,<span class=\"number\">53</span>,<span class=\"number\">51</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">quickSort</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    quick(a);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;a.length;i++)</div><div class=\"line\">       System.out.println(a[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMiddle</span><span class=\"params\">(<span class=\"keyword\">int</span>[] list, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;   </div><div class=\"line\">            <span class=\"keyword\">int</span> tmp = list[low];    <span class=\"comment\">//数组的第一个作为中轴   </span></div><div class=\"line\">            <span class=\"keyword\">while</span> (low &lt; high) &#123;</div><div class=\"line\">                <span class=\"keyword\">while</span> (low &lt; high &amp;&amp; list[high] &gt;= tmp) &#123;   </div><div class=\"line\">                    high--;   </div><div class=\"line\">                &#125;   </div><div class=\"line\">                list[low] = list[high];   <span class=\"comment\">//比中轴小的记录移到低端   </span></div><div class=\"line\">                <span class=\"keyword\">while</span> (low &lt; high &amp;&amp; list[low] &lt;= tmp) &#123;   </div><div class=\"line\">                    low++;   </div><div class=\"line\">                &#125;</div><div class=\"line\">                list[high] = list[low];   <span class=\"comment\">//比中轴大的记录移到高端   </span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">           list[low] = tmp;              <span class=\"comment\">//中轴记录到尾   </span></div><div class=\"line\">           <span class=\"keyword\">return</span> low;                   <span class=\"comment\">//返回中轴的位置   </span></div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">_quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] list, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;   </div><div class=\"line\">            <span class=\"keyword\">if</span> (low &lt; high) &#123;</div><div class=\"line\">               <span class=\"keyword\">int</span> middle = getMiddle(list, low, high);  <span class=\"comment\">//将list数组进行一分为二</span></div><div class=\"line\">                _quickSort(list, low, middle - <span class=\"number\">1</span>);        <span class=\"comment\">//对低字表进行递归排序</span></div><div class=\"line\">               _quickSort(list, middle + <span class=\"number\">1</span>, high);       <span class=\"comment\">//对高字表进行递归排序</span></div><div class=\"line\">            &#125;   </div><div class=\"line\">        &#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quick</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a2)</span> </span>&#123;   </div><div class=\"line\">            <span class=\"keyword\">if</span> (a2.length &gt; <span class=\"number\">0</span>) &#123;    <span class=\"comment\">//查看数组是否为空   </span></div><div class=\"line\">                _quickSort(a2, <span class=\"number\">0</span>, a2.length - <span class=\"number\">1</span>);   </div><div class=\"line\">        &#125;   </div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/pzhtpf/article/details/7560294\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/pzhtpf/article/details/7560294</a></p>\n</blockquote>\n<h3 id=\"kotlin了解一下\"><a href=\"#kotlin了解一下\" class=\"headerlink\" title=\"kotlin了解一下\"></a>kotlin了解一下</h3><p><a href=\"https://kotlintc.com/\" target=\"_blank\" rel=\"external\">kotlin中国</a><br><img src=\"http://upload-images.jianshu.io/upload_images/1354448-26afa9803cdfc340.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"kotlin.jpg\"></p>\n","categories":["Android"],"tags":["Android","面试"]},{"title":"Android 水波纹效果的探究","url":"http://jinbeen.com/2018/05/20/Android 水波纹效果的探究/","content":"<p><img src=\"https://jinbeen.com/images/2018/cloudreader-ripple-demo.gif\" alt=\"长按水波纹扩展效果\"></p>\n<a id=\"more\"></a>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>水波纹效果从Android5.0就已经出来了，基本的使用相信大家都知道了，这里多谈一些相对深层次的使用：</p>\n<ul>\n<li>1、基本使用</li>\n<li>2、水波纹效果与布局绘制之间的问题</li>\n<li>3、长按水波纹扩散效果</li>\n<li>4、Button点击的水波纹效果</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"系统自带水波纹实现方式\"><a href=\"#系统自带水波纹实现方式\" class=\"headerlink\" title=\"系统自带水波纹实现方式\"></a>系统自带水波纹实现方式</h3><h4 id=\"有界水波纹\"><a href=\"#有界水波纹\" class=\"headerlink\" title=\"有界水波纹\"></a>有界水波纹</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:background=<span class=\"string\">\"?android:attr/selectableItemBackground\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"无界水波纹\"><a href=\"#无界水波纹\" class=\"headerlink\" title=\"无界水波纹\"></a>无界水波纹</h4><blockquote>\n<p>以控件宽高中最大的数值作为水波纹效果所在正方形的边界进行绘制</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:background=<span class=\"string\">\"?android:attr/selectableItemBackgroundBorderless\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"自定义水波纹实现方式\"><a href=\"#自定义水波纹实现方式\" class=\"headerlink\" title=\"自定义水波纹实现方式\"></a>自定义水波纹实现方式</h3><h4 id=\"无界水波纹-1\"><a href=\"#无界水波纹-1\" class=\"headerlink\" title=\"无界水波纹\"></a>无界水波纹</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;  </div><div class=\"line\">&lt;ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">android:color=\"@color/colorAccent\"&gt; </div><div class=\"line\">&lt;/ripple&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"有界水波纹-1\"><a href=\"#有界水波纹-1\" class=\"headerlink\" title=\"有界水波纹\"></a>有界水波纹</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    android:color=\"@color/itemBackground\"&gt;</div><div class=\"line\">    &lt;item &gt;</div><div class=\"line\">        &lt;color android:color=\"@android:color/white\" /&gt;</div><div class=\"line\">    &lt;/item&gt;</div><div class=\"line\">&lt;/ripple&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"水波纹效果与布局绘制之间的问题\"><a href=\"#水波纹效果与布局绘制之间的问题\" class=\"headerlink\" title=\"水波纹效果与布局绘制之间的问题\"></a>水波纹效果与布局绘制之间的问题</h2><p><img src=\"https://jinbeen.com/images/2018/cloudreader-ripple-info.png\" alt=\"\"><br>在使用了以上的<strong>自定义有界水波纹点击效果</strong>后，使用[开发者选项 - 调试GPU过渡绘制]得到下面的视图<br><img src=\"https://jinbeen.com/images/2018/cloudreader-ripple-before.png\" alt=\"自定义有界水波纹\"></p>\n<p>对比后，发现绿色的文字部分经过了二重绘制，因为布局的白色背景和文字自身颜色的原因。如果布局背景能去掉还能实现水波纹的效果就好了，这样就只有文字一层的颜色。</p>\n<h3 id=\"有两种方案可以达到想要的这种效果：\"><a href=\"#有两种方案可以达到想要的这种效果：\" class=\"headerlink\" title=\"有两种方案可以达到想要的这种效果：\"></a>有两种方案可以达到想要的这种效果：</h3><p>1、使用系统自带有界水波纹实现方式，因为系统本身的默认背景是透明色的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:background=<span class=\"string\">\"?android:attr/selectableItemBackground\"</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>系统的默认水波纹颜色是灰色，如果需要使用对应的高亮色来作为ripple的背景色，我们可以在<code>styles-v21</code>系统主题里加入这个：<code>&lt;item name = &quot;android:colorControlHighlight&quot;&gt;@color/colorAccent&lt;/item&gt;</code></p>\n</blockquote>\n<p>2、使用自定义有界水波纹效果，使其默认背景色为透明色。<br>写法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    android:color=\"@color/itemBackground\"&gt;</div><div class=\"line\">    &lt;item android:id=\"@android:id/mask\"&gt;</div><div class=\"line\">        &lt;color android:color=\"@android:color/white\" /&gt;</div><div class=\"line\">    &lt;/item&gt;</div><div class=\"line\">&lt;/ripple&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>添item时，如果<strong><em>指定id为@android:id/mask</em></strong>，那么不点击时不会显示出该item指定的color。<br>可以设置指定子层item的android:id=”@android:id/mask”来设定当前Ripple的Mask。<br>Mask的内容并不会被绘制到屏幕上，它的作用是限定Ripple效果的绘制区域。</p>\n</blockquote>\n<p>最后可以得到我们想要的效果：<br><img src=\"https://jinbeen.com/images/2018/cloudreader-ripple-done.png\" alt=\"image.png\"></p>\n<h2 id=\"长按水波纹扩散效果\"><a href=\"#长按水波纹扩散效果\" class=\"headerlink\" title=\"长按水波纹扩散效果\"></a>长按水波纹扩散效果</h2><p><img src=\"https://jinbeen.com/images/2018/cloudreader-ripple-demo.gif\" alt=\"长按水波纹扩展效果\"></p>\n<p>在使用小红书时，我们可以看到关于“笔记”的item长按会展示扩散的效果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:foreground=<span class=\"string\">\"?attr/selectableItemBackgroundBorderless\"</span></div></pre></td></tr></table></figure></p>\n<p>又或者，无边界的水波纹也可以达到长按扩散的效果，只是它会超出边界，那我们就在对应的父布局加一层有边界的水波纹背景即可。就像这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;RelativeLayout</div><div class=\"line\">        android:layout_width=\"match_parent\"</div><div class=\"line\">        android:layout_height=\"wrap_content\"</div><div class=\"line\">        android:background=\"?attr/selectableItemBackground\"&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;RelativeLayout</div><div class=\"line\">            android:layout_width=\"match_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:background=\"?attr/selectableItemBackgroundBorderless\"</div><div class=\"line\">            android:onClick=\"@&#123;()-&gt;adapter.openDetail(bean)&#125;\"</div><div class=\"line\">            android:padding=\"8dp\"&gt;</div><div class=\"line\">        &lt;/RelativeLayout&gt;</div><div class=\"line\">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>两者的区别是：长按扩散时，前者的水波纹会在图片之上，而后者在图片之下。</p>\n</blockquote>\n<h2 id=\"Button点击的水波纹效果\"><a href=\"#Button点击的水波纹效果\" class=\"headerlink\" title=\"Button点击的水波纹效果\"></a>Button点击的水波纹效果</h2><p><img src=\"https://jinbeen.com/images/2018/cloudreader-ripple-button.gif\" alt=\"button阴影与点击效果\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Button</div><div class=\"line\">    style=<span class=\"string\">\"@style/Widget.AppCompat.Button.Colored\"</span></div><div class=\"line\">    android:layout_width=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    android:layout_height=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    android:layout_marginLeft=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    android:layout_weight=<span class=\"string\">\"1\"</span></div><div class=\"line\">    android:onClick=<span class=\"string\">\"login\"</span></div><div class=\"line\">    android:text=<span class=\"string\">\"登陆\"</span></div><div class=\"line\">    android:textColor=<span class=\"string\">\"@android:color/white\"</span></div><div class=\"line\">    android:textStyle=<span class=\"string\">\"bold\"</span> /&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The Widget.AppCompat.Button.Colored 继承了 Widget.AppCompat.Button style并且根据你选择的主题应用最接近的颜色。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.cnblogs.com/baiqiantao/p/8b57d809d212be6301bf5af850c115c7.html\" target=\"_blank\" rel=\"external\">Ripple 水波纹效果</a></li>\n<li><a href=\"https://blog.csdn.net/u012702547/article/details/52325418\" target=\"_blank\" rel=\"external\">聊聊Android5.0中的水波纹效果</a></li>\n<li><a href=\"https://www.jianshu.com/p/c29cfd89cb52\" target=\"_blank\" rel=\"external\">解决点击ripple水波纹无效的问题</a></li>\n<li><a href=\"https://www.jianshu.com/p/66c6a97a8d80\" target=\"_blank\" rel=\"external\">UI之修改Button颜色保持默认点击效果</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","Android基础知识点"]},{"title":"性能优化之布局优化记录","url":"http://jinbeen.com/2018/05/17/性能优化之布局优化记录/","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-37ff47faeefa1837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gpu绘制\"></p>\n<p>做开发时间长了之后，收集后台的bug，发现很多都是OOM(Out Of Memory Killer)。性能优化这时候成为了重点，下面是自己项目中布局优化的记录，希望对大家有所帮助。</p>\n<a id=\"more\"></a>\n<h3 id=\"父布局\"><a href=\"#父布局\" class=\"headerlink\" title=\"父布局\"></a>父布局</h3><ul>\n<li>对于ViewGroup的选择问题：推荐FrameLayout &gt; LinearLayout &gt; RelativeLayout(为了优化布局，RelativeLayout会调用childrenView 的onMeasure()两次)，推荐阅读：<a href=\"https://www.jianshu.com/p/8a7d059da746\" target=\"_blank\" rel=\"external\">LinearLayout与RelativeLayout的性能比较</a></li>\n<li>尽量不要嵌套使用RelativeLayout.</li>\n<li>尽量不要在嵌套的LinearLayout中都使用weight属性.</li>\n<li>避免使用多重布局嵌套，层级能少就少</li>\n<li>善用TextView的Drawable减少布局层级</li>\n</ul>\n<h3 id=\"背景色\"><a href=\"#背景色\" class=\"headerlink\" title=\"背景色\"></a>背景色</h3><ul>\n<li>去掉多余的布局背景色，比如ScrollView包裹的内容分为两段，第一段使用的是<code>match_parent</code>的宽，第二段是文字，只需要给文字部分加背景，则背景色属性就放在文字部分的节点属性里。</li>\n<li>RecyclerView及ViewPager等外部容器最好不要使用背景色，如果内容有背景色会导致重叠</li>\n<li>selector可使用系统自带的点击效果<code>android:background=&quot;?attr/selectableItemBackground&quot;</code>，因为初始值为透明色，不会重绘。如果需要使用对应的高亮色来作为ripple的背景色，那么就需要在styles-v21里面加这个加入：<br><code>&lt;item name = &quot;android:colorControlHighlight&quot;&gt;@color/colorAccent&lt;/item&gt;</code></li>\n<li>注：Navigation的background会影响4.4系统的状态栏</li>\n<li>CardView会自动加一层背景色</li>\n<li><code>ripple</code>里的默认颜色为<item>标签下设置，如果设置多个重复的<item>会导致多重绘制。</item></item></li>\n<li><code>ripple</code>里如要设置默认色为透明色，因为设置透明色不会导致重新绘制。直接设置<code>color=&quot;@android:color/transparent&quot;</code>点击会没有效果，加上一个掩码<item android:id=\"@android:id/mask\">就好了</item></li>\n<li><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    android:color=\"@color/itemBackground\"&gt;</div><div class=\"line\">    &lt;item android:id=\"@android:id/mask\"&gt;</div><div class=\"line\">        &lt;color android:color=\"@android:color/white\" /&gt;</div><div class=\"line\">    &lt;/item&gt;</div><div class=\"line\">&lt;/ripple&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>Mask层(Mask Layer):<br>可以设置指定子层item的android:id=”@android:id/mask”来设定当前Ripple的Mask。<br>Mask的内容并不会被绘制到屏幕上，它的作用是限定Ripple效果的绘制区域。<br>mask所在的的子层限制了Ripple效果的最大范围只能是View的边界，不会扩散到父组件。</p>\n</blockquote>\n<h3 id=\"布局优化标签\"><a href=\"#布局优化标签\" class=\"headerlink\" title=\"布局优化标签\"></a>布局优化标签</h3><p>1、<code>&lt;include&gt;</code>：常用于将布局中的公共部分提取出来供其他layout共用，以实现布局模块化，这在布局编写方便提供了大大的便利。</p>\n<p>2、<code>&lt;viewstub&gt;</code>：viewstub标签同include标签一样可以用来引入一个外部布局，不同的是，viewstub引入的布局默认不会扩张，即既不会占用显示也不会占用位置，从而在解析layout时节省cpu和内存。<br>viewstub常用来引入那些默认不会显示，只在特殊情况下显示的布局，如进度布局、网络失败显示的刷新布局、信息出错出现的提示布局等。<br>比较直观的感觉是：在设置里打开显示布局边界后，如果不是使用<code>&lt;viewstub&gt;</code>标签，<code>GONE</code>掉后，<strong>加载中的布局</strong>还是会有颜色显示，而使用了此标签后颜色会消失。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">使用前</th>\n<th style=\"text-align:center\">使用后</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://upload-images.jianshu.io/upload_images/1354448-9eabb8928ef612f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"使用前\"></td>\n<td style=\"text-align:center\"><img src=\"https://upload-images.jianshu.io/upload_images/1354448-ee5b4e1a13244e97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"使用后\"></td>\n</tr>\n</tbody>\n</table>\n<p>3、<code>&lt;merge&gt;</code>：在使用了include后可能导致布局嵌套过多，多余不必要的layout节点，从而导致解析变慢，不必要的节点和嵌套可通过hierarchy viewer(下面布局调优工具中有具体介绍)或设置-&gt;开发者选项-&gt;显示布局边界查看。</p>\n<h3 id=\"优化工具\"><a href=\"#优化工具\" class=\"headerlink\" title=\"优化工具\"></a>优化工具</h3><p>1、GPU过渡绘制：Graphic Processing Unit</p>\n<p>位置：设置/选择开发选项（Developer Options）/调试GPU 过度绘制（Debug GPU Overdraw），然后选择“显示过度绘制区域（Show overdraw area）”。</p>\n<p>定义：指在屏幕上的一个像素在单个帧中被重绘了多次。可以通过手机设置/开发者选项/调试GPU过渡绘制/，不同的颜色显示了渲染过渡程度<br><img src=\"https://upload-images.jianshu.io/upload_images/1354448-8b5d6f7c6cfefbfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"手机gpu绘制\"></p>\n<p>2、Hierarchy Viewer<br>3、Lint tool</p>\n<h3 id=\"优化结果\"><a href=\"#优化结果\" class=\"headerlink\" title=\"优化结果\"></a>优化结果</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">优化前</th>\n<th style=\"text-align:center\">优化后</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://upload-images.jianshu.io/upload_images/1354448-ac9f12fc0f737096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"优化前\"></td>\n<td style=\"text-align:center\"><img src=\"https://upload-images.jianshu.io/upload_images/1354448-33a678ffc779709d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"优化后\"></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>对应项目：<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">CloudReader</a></p>\n</blockquote>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"http://www.trinea.cn/android/layout-performance/\" target=\"_blank\" rel=\"external\">性能优化之布局优化</a></li>\n<li><a href=\"https://www.jianshu.com/p/af26dd165626\" target=\"_blank\" rel=\"external\">[Android] 布局优化</a></li>\n<li><a href=\"https://www.jianshu.com/p/8030a8eeff1f\" target=\"_blank\" rel=\"external\">Android性能优化–布局优化</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","性能优化"]},{"title":"健身记录","url":"http://jinbeen.com/2018/04/28/健身记录/","content":"<p>从2017五月中旬开始锻炼了半年有余，体重从57kg到68kg，算是达成目标。后期的持续锻炼也很重要，前天去健身房练背，有些动作忘记了，记录下来今后查阅。</p>\n<a id=\"more\"></a>\n<h2 id=\"心肺训练-有氧\"><a href=\"#心肺训练-有氧\" class=\"headerlink\" title=\"心肺训练(有氧)\"></a>心肺训练(有氧)</h2><ul>\n<li>深蹲跳</li>\n<li>箭步蹲</li>\n<li>原地碎步跑20s＋俯卧撑8</li>\n<li>单脚过障碍</li>\n<li>蛙跳</li>\n<li>跳绳</li>\n</ul>\n<h2 id=\"无氧训练\"><a href=\"#无氧训练\" class=\"headerlink\" title=\"无氧训练\"></a>无氧训练</h2><h3 id=\"胸\"><a href=\"#胸\" class=\"headerlink\" title=\"胸\"></a>胸</h3><ul>\n<li>俯卧撑</li>\n<li>史密斯平板卧推</li>\n<li>坐姿黄蜂推胸</li>\n<li>小杠铃平板卧推</li>\n<li>高位俯卧撑</li>\n<li>上斜卧推</li>\n<li>站姿钢线夹胸</li>\n<li>坐姿夹胸</li>\n<li>仰卧推胸飞鸟</li>\n</ul>\n<h3 id=\"腹\"><a href=\"#腹\" class=\"headerlink\" title=\"腹\"></a>腹</h3><ul>\n<li>平板支撑</li>\n<li>高位抬腿</li>\n<li>卷腹</li>\n<li>高位俯卧撑 – 抬腿</li>\n<li>坐姿腿屈伸</li>\n<li>两头起+卷腹</li>\n<li>自行车碰膝、大风车</li>\n<li>仰卧起坐</li>\n<li>山羊挺身</li>\n</ul>\n<h3 id=\"腰\"><a href=\"#腰\" class=\"headerlink\" title=\"腰\"></a>腰</h3><ul>\n<li>哑铃侧身弯体</li>\n<li>侧身弯体</li>\n<li>侧身抬腿</li>\n<li>杠铃前躬体</li>\n<li>单腿罗马尼亚硬拉</li>\n<li>罗马椅背屈伸</li>\n</ul>\n<h3 id=\"背部\"><a href=\"#背部\" class=\"headerlink\" title=\"背部\"></a>背部</h3><ul>\n<li>坐姿划船</li>\n<li>高位下拉</li>\n<li>俯身哑铃臂屈伸</li>\n<li>杠铃拉背</li>\n<li>杠铃硬拉</li>\n<li>大黄蜂拉背</li>\n<li>自重引体</li>\n<li>俯身飞鸟</li>\n<li>器械夹背</li>\n</ul>\n<h3 id=\"腿\"><a href=\"#腿\" class=\"headerlink\" title=\"腿\"></a>腿</h3><ul>\n<li>倒蹬机</li>\n<li>器械开腿</li>\n<li>器械合退</li>\n<li>器械反勾腿</li>\n<li>哑铃箭步走</li>\n<li>杠铃深蹲</li>\n<li>器械腿屈伸</li>\n<li>史密斯深蹲</li>\n</ul>\n<h3 id=\"二头肌\"><a href=\"#二头肌\" class=\"headerlink\" title=\"二头肌\"></a>二头肌</h3><ul>\n<li>二头弯举</li>\n<li>哑铃自由二头弯举</li>\n<li>二头举重龙门架</li>\n<li>杠铃站姿弯举</li>\n</ul>\n<h3 id=\"肩\"><a href=\"#肩\" class=\"headerlink\" title=\"肩\"></a>肩</h3><ul>\n<li>器械推肩</li>\n<li>坐姿哑铃推肩</li>\n<li>哑铃侧平举</li>\n<li>仰卧哑铃屈伸</li>\n<li>大黄蜂推肩</li>\n<li>哑铃臂屈伸</li>\n</ul>\n<h2 id=\"放松\"><a href=\"#放松\" class=\"headerlink\" title=\"放松\"></a>放松</h2><h3 id=\"伸展\"><a href=\"#伸展\" class=\"headerlink\" title=\"伸展\"></a>伸展</h3><ul>\n<li>斜方肌上束</li>\n<li>肩胛提肌</li>\n<li>胸锁乳突肌</li>\n<li>斜角肌</li>\n<li>腰方肌左侧</li>\n</ul>\n<h3 id=\"筋膜放松\"><a href=\"#筋膜放松\" class=\"headerlink\" title=\"筋膜放松\"></a>筋膜放松</h3><ul>\n<li>仰卧肚脐回贴</li>\n<li>弹力带仰卧下拉</li>\n<li>弹力带推肩</li>\n<li>弹力带提拉</li>\n<li>弹力带外展</li>\n<li>弹力带下拉</li>\n<li>蛙泳划臂</li>\n<li>支撑抬臀</li>\n</ul>\n","categories":["life"],"tags":["life"]},{"title":"《第一行代码：Android（第2版）》读书笔记","url":"http://jinbeen.com/2018/04/28/《第一行代码：Android（第2版）》读书笔记/","content":"<blockquote>\n<p><a href=\"https://book.douban.com/subject/26915433/\" target=\"_blank\" rel=\"external\">《第一行代码：Android（第2版）》</a> - 被广大Android 开发者誉为“Android 学习第一书”。全书系统全面、循序渐进地介绍了Android软件开发的必备知识、经验和技巧。</p>\n</blockquote>\n<p>内容比较基础，查漏补缺，记一些重点。</p>\n<a id=\"more\"></a>\n<p>第2版基于Android 7.0 对第1 版进行了全面更新，将所有知识点都在最新的Android 系统上进行重新适配，使用 全新的Android Studio 开发工具代替之前的Eclipse，并添加了对Material Design、运行时权限、Gradle、RecyclerView、百分比布局、OkHttp、Lambda 表达式等全新知识点的详细讲解。</p>\n<h2 id=\"Android系统架构\"><a href=\"#Android系统架构\" class=\"headerlink\" title=\"Android系统架构\"></a>Android系统架构</h2><p>总的来说，<a href=\"https://hit-alibaba.github.io/interview/Android/basic/Android-Arch.html\" target=\"_blank\" rel=\"external\">Android的系统体系结构</a>分为四层，自顶向下分别是</p>\n<ul>\n<li>应用程序(Applications)</li>\n<li>应用程序框架(Application Frameworks)</li>\n<li>系统运行库与Android运行环境(Libraris &amp; Android Runtime)</li>\n<li>Linux内核(Linux Kernel)</li>\n</ul>\n<p><img src=\"https://github.com/HIT-Alibaba/interview/blob/master/img/android-system-architecture.jpg?raw=true\" alt=\"\"></p>\n<h3 id=\"应用程序-Applications\"><a href=\"#应用程序-Applications\" class=\"headerlink\" title=\"应用程序(Applications)\"></a>应用程序(Applications)</h3><p>Android会同一系列核心应用程序包一起发布，该应用程序包包括email客户端，SMS短消息程序，日历，地图，浏览器，联系人管理程序等。所有的应用程序都是使用JAVA语言编写的。通常开发人员就处在这一层。</p>\n<h3 id=\"应用程序框架-Application-Frameworks\"><a href=\"#应用程序框架-Application-Frameworks\" class=\"headerlink\" title=\"应用程序框架(Application Frameworks)\"></a>应用程序框架(Application Frameworks)</h3><p>提供应用程序开发的各种API进行快速开发，也即隐藏在每个应用后面的是一系列的服务和系统，大部分使用Java编写，所谓官方源码很多也就是看这里，其中包括：</p>\n<ul>\n<li>丰富而又可扩展的视图（Views），可以用来构建应用程序， 它包括列表（lists），网格（grids），文本框（text boxes），按钮（buttons）， 甚至可嵌入的web浏览器。</li>\n<li>内容提供器（Content Providers）使得应用程序可以访问另一个应用程序的数据（如联系人数据库）， 或者共享它们自己的数据</li>\n<li>资源管理器（Resource Manager）提供 非代码资源的访问，如本地字符串，图形，和布局文件（ layout files ）。</li>\n<li>通知管理器 （Notification Manager） 使得应用程序可以在状态栏中显示自定义的提示信息。</li>\n<li>活动管理器（ Activity Manager） 用来管理应用程序生命周期并提供常用的导航回退功能。</li>\n</ul>\n<h3 id=\"系统运行库与Android运行环境-Libraris-amp-Android-Runtime\"><a href=\"#系统运行库与Android运行环境-Libraris-amp-Android-Runtime\" class=\"headerlink\" title=\"系统运行库与Android运行环境(Libraris &amp; Android Runtime)\"></a>系统运行库与Android运行环境(Libraris &amp; Android Runtime)</h3><h4 id=\"系统运行库\"><a href=\"#系统运行库\" class=\"headerlink\" title=\"系统运行库\"></a>系统运行库</h4><p>Android 包含一些C/C++库，这些库能被Android系统中不同的组件使用。它们通过 Android 应用程序框架为开发者提供服务。以下是一些核心库：</p>\n<ul>\n<li>Bionic系统 C 库 - 一个从 BSD 继承来的标准 C 系统函数库（ libc ）， 它是专门为基于 embedded linux 的设备定制的。</li>\n<li>媒体库 - 基于 PacketVideo OpenCORE；该库支持多种常用的音频、视频格式回放和录制，同时支持静态图像文件。编码格式包括MPEG4, H.264, MP3, AAC, AMR, JPG, PNG 。</li>\n<li>Surface Manager - 对显示子系统的管理，并且为多个应用程序提 供了2D和3D图层的无缝融合。这部分代码</li>\n<li>Webkit,LibWebCore - 一个最新的web浏览器引擎用，支持Android浏览器和一个可嵌入的web视图。鼎鼎大名的 Apple Safari背后的引擎就是Webkit</li>\n<li>SGL - 底层的2D图形引擎</li>\n<li>3D libraries - 基于OpenGL ES 1.0 APIs实现；该库可以使用硬件 3D加速（如果可用）或者使用高度优化的3D软加速。</li>\n<li>FreeType -位图（bitmap）和矢量（vector）字体显示。</li>\n<li>SQLite - 一个对于所有应用程序可用，功能强劲的轻型关系型数据库引擎。</li>\n<li>还有部分上面没有显示出来的就是硬件抽象层。其实Android并非讲所有的设备驱动都放在linux内核里面，而是实现在userspace空间，这么做的主要原因是GPL协议，Linux是遵循该 协议来发布的，也就意味着对 linux内核的任何修改，都必须发布其源代码。而现在这么做就可以避开而无需发布其源代码，毕竟它是用来赚钱的。 而 在linux内核中为这些userspace驱动代码开一个后门，就可以让本来userspace驱动不可以直接控制的硬件可以被访问。而只需要公布这个 后门代码即可。一般情况下如果要将Android移植到其他硬件去运行，只需要实现这部分代码即可。包括：显示器驱动，声音，相机，GPS,GSM等等</li>\n</ul>\n<h4 id=\"Android运行环境\"><a href=\"#Android运行环境\" class=\"headerlink\" title=\"Android运行环境\"></a>Android运行环境</h4><p>该核心库提供了JAVA编程语言核心库的大多数功能。</p>\n<p>每一个Android应用程序都在它自己的进程中运 行，都拥有一个独立的Dalvik虚拟 机实例。Dalvik被设计成一个设备可以同时高效地运行多个虚拟系统。 Dalvik虚拟机执行（.dex）的Dalvik可执行文件，该格式文件针对小内存使用做了 优化。同时虚拟机是基于寄存器的，所有的类都经由JAVA编译器编译，然后通过SDK中 的 “dx” 工具转化成.dex格式由虚拟机执行。</p>\n<h3 id=\"Linux内核-Linux-Kernel\"><a href=\"#Linux内核-Linux-Kernel\" class=\"headerlink\" title=\"Linux内核(Linux Kernel)\"></a>Linux内核(Linux Kernel)</h3><p>Android的核心系统服务依赖于Linux 2.6 内核，如安全性，内存管理，进程管理， 网络协议栈和驱动模型。 Linux 内核也同时作为硬件和软件栈之间的抽象层。其外还对其做了部分修改，主要涉及两部分修改：</p>\n<ul>\n<li>Binder (IPC)：提供有效的进程间通信，虽然linux内核本身已经提供了这些功能，但Android系统很多服务都需要用到该功能，为了某种原因其实现了自己的一套。</li>\n<li>电源管理：主要是为了省电，毕竟是手持设备嘛，低耗电才是我们的追求。</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li><strong>gradew和gradlew.bat</strong>：这两个文件是用来命令行界面中执行gradle命令的，其中gradlew是在Linux或Mac系统中使用的；gradlew.bat是在Windows系统中使用的。</li>\n<li>HelloWorld.iml：iml文件是所有InteliJ IDEA项目都会自动生成的一个文件(Android Studio是基于InteliJ IDEA开发的)，用于标识这是一个InteliJ IDEA项目，我们不需要修改这个文件中的任何内容。</li>\n<li>proguard-rules.pro：指定代码混淆规则。</li>\n<li>Gradle是一个非常先进的项目构建工具，它使用了一种基于Groovy的领域特定语言（DSL）来声明项目设置，摒弃了传统基于XML（如Ant何Maven）的各种繁琐配置。</li>\n<li>compileSdkVersion：用于指定项目的编译版本，指定的24表示使用Android7.0系统的SDK编译。</li>\n<li>buildToolsVersion：用于指定项目构建工具的版本。</li>\n<li>targetSdkVersion：指定的值表示你在该目标版本上已经做过了充分的测试，系统将会为你的应用程序启动一些最新的功能和特性。</li>\n</ul>\n<h2 id=\"更多隐式Intent的用法\"><a href=\"#更多隐式Intent的用法\" class=\"headerlink\" title=\"更多隐式Intent的用法\"></a>更多隐式Intent的用法</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-9a6b1b6b20053220.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-5067ab76605c7e95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-fac5abfbca8be214.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h2 id=\"随时随地退出程序\"><a href=\"#随时随地退出程序\" class=\"headerlink\" title=\"随时随地退出程序\"></a>随时随地退出程序</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-59b3d14e5d9962d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","categories":["Android"],"tags":["Android","Books"]},{"title":"《Android开发艺术探索》读书笔记","url":"http://jinbeen.com/2018/04/13/《Android开发艺术探索》读书笔记/","content":"<blockquote>\n<p><a href=\"https://book.douban.com/subject/26599538/\" target=\"_blank\" rel=\"external\">《Android开发艺术探索》</a> - 一本Android进阶类书籍，采用理论、源码和实践相结合的方式来阐述高水准的Android应用开发要点。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>《Android开发艺术探索》从三个方面来组织内容。第一，介绍Android开发者不容易掌握的一些知识点；第二，结合Android源代码和应用层开发过程，融会贯通，介绍一些比较深入的知识点；第三，介绍一些核心技术和Android的性能优化思想。</p>\n<p>《Android开发艺术探索》侧重于Android知识的体系化和系统工作机制的分析，通过《Android开发艺术探索》的学习可以极大地提高开发者的Android技术水平，从而更加高效地成为高级开发者。而对于高级开发者来说，仍然可以从《Android开发艺术探索》的知识体系中获益。</p>\n<blockquote>\n<p>完善中，借鉴了他人的读书笔记。</p>\n</blockquote>\n<h2 id=\"Activity的生命周期和启动模式\"><a href=\"#Activity的生命周期和启动模式\" class=\"headerlink\" title=\"Activity的生命周期和启动模式\"></a>Activity的生命周期和启动模式</h2><p>用户正常使用情况下的生命周期 &amp; 由于Activity被系统回收或者设备配置改变导致Activity被销毁重建情况下的生命周期。</p>\n<h3 id=\"Activity的生命周期全面分析\"><a href=\"#Activity的生命周期全面分析\" class=\"headerlink\" title=\"Activity的生命周期全面分析\"></a>Activity的生命周期全面分析</h3><h4 id=\"典型情况下的生命周期分析\"><a href=\"#典型情况下的生命周期分析\" class=\"headerlink\" title=\"典型情况下的生命周期分析\"></a>典型情况下的生命周期分析</h4><p>  <img src=\"https://upload-images.jianshu.io/upload_images/1354448-cfaabc5b421c5945.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540\" alt=\"Activity生命周期.png\"></p>\n<ul>\n<li>1.Activity第一次启动：onCreate-&gt;onStart-&gt;onResume。</li>\n<li>2.Activity切换到后台（ 用户打开新的Activity或者切换到桌面）,onPause-&gt;onStop。</li>\n<li>3.Activity从后台到前台，重新可见，onRestart-&gt;onStart-&gt;onResume。</li>\n<li>4.用户退出Activity，onPause-&gt;onStop-&gt;onDestroy。</li>\n<li>5.onStart开始到onStop之前，Activity可见。onResume到onPause之前，Activity可以接受用户交互。</li>\n<li>6.在新Activity启动之前，栈顶的Activity需要先onPause后，新Activity才能启动。所以不能在onPause执行耗时操作。</li>\n</ul>\n<h4 id=\"异常情况下的生命周期分析\"><a href=\"#异常情况下的生命周期分析\" class=\"headerlink\" title=\"异常情况下的生命周期分析\"></a>异常情况下的生命周期分析</h4><h5 id=\"系统配置变化导致Activity销毁重建\"><a href=\"#系统配置变化导致Activity销毁重建\" class=\"headerlink\" title=\"系统配置变化导致Activity销毁重建\"></a>系统配置变化导致Activity销毁重建</h5><p>例如Activity处于竖屏状态，<strong><em>如果突然旋转屏幕</em></strong>，由于系统配置发生了改变，Activity就会被销毁并重新创建。</p>\n<ul>\n<li>在异常情况下系统会在onStop之前调用onSaveInstanceState来保存状态。Activity重新创建后，会在onStart之后调用onRestoreInstanceState来恢复之前保存的数据。</li>\n<li>保存数据的流程： Activity被意外终止，调用onSaveIntanceState保存数据-&gt; Activity委托Window，Window委托它上面的顶级容器一个ViewGroup（ 书上说很可能就是DecorView） 。然后顶层容器在通知所有子元素来保存数据。 每个View都有 onSaveInstanceState 和 onRestoreInstanceState 方法。查看TextView 源码可以发现保存了文本选中状态和文本内容。</li>\n<li>系统只在Activity异常终止的时候才会调用 onSaveInstanceState 和onRestoreInstanceState 方法。其他情况不会触发。</li>\n</ul>\n<h5 id=\"资源内存不足导致低优先级的Activity被回收\"><a href=\"#资源内存不足导致低优先级的Activity被回收\" class=\"headerlink\" title=\"资源内存不足导致低优先级的Activity被回收\"></a>资源内存不足导致低优先级的Activity被回收</h5><ul>\n<li>1.前台- 可见非前台（ 被对话框遮挡的Activity） -后台，这三种Activity优先级从高到低。</li>\n<li>2.android:configChanges=”orientation” 在manifest中指定 configChanges 在系统配置变化后不重新创建Activity，也不会执行onSaveInstanceState 和 onRestoreInstanceState 方法，而是调用 onConfigurationChnaged 方法。</li>\n<li>3.configChanges 一般常用三个选项：<ul>\n<li>locale 系统语言变化</li>\n<li>keyborardHidden 键盘的可访问性发生了变化，比如用户调出了键盘</li>\n<li>orientation 屏幕方向变化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Activity的启动模式\"><a href=\"#Activity的启动模式\" class=\"headerlink\" title=\"Activity的启动模式\"></a>Activity的启动模式</h3><h4 id=\"Activity的LaunchMode\"><a href=\"#Activity的LaunchMode\" class=\"headerlink\" title=\"Activity的LaunchMode\"></a>Activity的LaunchMode</h4><p>Android使用栈来管理Activity。</p>\n<h5 id=\"standard\"><a href=\"#standard\" class=\"headerlink\" title=\"standard\"></a>standard</h5><ul>\n<li>每次启动都会重新创建一个实例，不管这个Activity在栈中是否已经存在。</li>\n<li>谁启动了这个Activity，那么Activity就运行在启动它的那个Activity所在的栈中。</li>\n<li>用Application去启动Activity时会报错，提示非Activity的Context没有所谓的任务栈。解决<br>办法是为待启动Activity制定FLAG_ACTIVITY_NEW_TASH标志位，这样就会为它创建<br>一个新的任务栈。</li>\n</ul>\n<h5 id=\"singleTop\"><a href=\"#singleTop\" class=\"headerlink\" title=\"singleTop\"></a>singleTop</h5><ul>\n<li>如果新Activity位于任务栈的栈顶，那么此Activity不会被重新创建，同时回调 onNewIntent 方法。</li>\n<li>如果新Activity已经存在但不是位于栈顶，那么新Activity仍然会被创建。</li>\n</ul>\n<h5 id=\"singleTask\"><a href=\"#singleTask\" class=\"headerlink\" title=\"singleTask\"></a>singleTask</h5><ul>\n<li>这是一种单实例模式</li>\n<li>只要Activity在栈中存在，那么多次启动这个Activity都不会重新创建实例，同时也会回调 onNewIntent 方法。</li>\n<li>同时会导致在Activity之上的栈内Activity出栈。</li>\n</ul>\n<h5 id=\"singleIntance\"><a href=\"#singleIntance\" class=\"headerlink\" title=\"singleIntance\"></a>singleIntance</h5><ul>\n<li>具有singleTask模式的所有特性，同时具有此模式的Activity只能单独的位于一个任务栈中</li>\n</ul>\n<h5 id=\"TaskAffinity属性\"><a href=\"#TaskAffinity属性\" class=\"headerlink\" title=\"TaskAffinity属性\"></a>TaskAffinity属性</h5><p>TaskAffinity参数标识了一个Activity所需要的任务栈的名字。为字符串，且中间必须包含包名分隔符“.”。默认情况下，所有Activity所需的任务栈名字为应用包名。TashAffinity属性主要和singleTask启动模式或者 allowTaskReparenting 属性配对使用，其他情况下没有意义。 应用A启动了应用B的某个Activity后，如果Activity的allowTaskReparenting属性为true的话，那么当应用B被启动后，此Activity会直接从应用A的任务栈转移到应用B的任务栈中。 打个比方就是，应用A启动了应用B的ActivityX，然后按Home回到桌面，单击应用B的图标，这时并不会启动B的主Activity，而是重新显示已经被应用A启动的ActivityX。这是因为ActivityX的TaskAffinity值肯定不和应用A的任务栈相同（ 因为包名不同） 。所以当应用B被启动以后，发现ActivityX原本所需的任务栈已经被创建了，所以把ActivityX从A的任务栈中转移过来了。</p>\n<p>设置启动模式:</p>\n<ul>\n<li>1.manifest中 设置下的 android:launchMode 属性。</li>\n<li>2.启动Activity的 intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); 。</li>\n<li>3.两种同时存在时，以第二种为准。第一种方式无法直接为Activity添加FLAG_ACTIVITY_CLEAR_TOP标识，第二种方式无法指定singleInstance模式。</li>\n<li>4.可以通过命令行 adb shell dumpsys activity 命令查看栈中的Activity信息。</li>\n</ul>\n<h4 id=\"Activity的Flags\"><a href=\"#Activity的Flags\" class=\"headerlink\" title=\"Activity的Flags\"></a>Activity的Flags</h4><p>这些FLAG可以设定启动模式、可以影响Activity的运行状态。</p>\n<ul>\n<li>FLAG_ACTIVITY_CLEAR_TOP 具有此标记位的Activity启动时，同一个任务栈中位于它上面的Activity都要出栈，一般和FLAG_ACTIVITY_NEW_TASK配合使用。效果和singleTask一样。</li>\n<li>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS 如果设置，新的Activity不会在最近启动的Activity的列表(就是安卓手机里显示最近打开的Activity那个系统级的UI)中保存。</li>\n</ul>\n<h3 id=\"IntentFilter的匹配规则\"><a href=\"#IntentFilter的匹配规则\" class=\"headerlink\" title=\"IntentFilter的匹配规则\"></a>IntentFilter的匹配规则</h3><p>启动Activity分为两种：</p>\n<ul>\n<li>1.显示调用 明确指定被启动对象的组件信息，包括包名和类名</li>\n<li>2.隐式调用 不需要明确指定组件信息，需要Intent能够匹配目标组件中的IntentFilter中所设置的过滤信息。</li>\n<li>3.IntentFilter中的过滤信息有action、category、data。</li>\n<li>4.只有一个Intent同时匹配action类别、category类别、data类别才能成功启动目标Activity。</li>\n<li>5.一个Activity可以有多个intent-filter，一个Intent只要能匹配任何一组intent-filter即可成功启动对应的Activity。</li>\n</ul>\n<h4 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h4><ul>\n<li>1.action是一个字符串。</li>\n<li>2.一个intent-filter可以有多个aciton，只要Intent中的action能够和任何一个action相同即可成功匹配。匹配是指与action的字符串完全一样。</li>\n<li>3.Intent中如果没有指定action，那么匹配失败。</li>\n</ul>\n<h4 id=\"category\"><a href=\"#category\" class=\"headerlink\" title=\"category\"></a>category</h4><ul>\n<li>category是一个字符串。</li>\n<li>2.Intent可以没有category，但是如果你一旦有category，不管有几个，每个都能够与<br>intent-filter中的其中一个category相同。</li>\n<li>3.系统在<code>startActivity</code>和<code>startActivityForResult</code>的时候，会默认为Intent加上 android.intent.category.DEFAULT 这个category，所以为了我们的activity能够接收隐式调用，就必须在intent-filter中加上 android.intent.category.DEFAULT 这个category。</li>\n</ul>\n<h4 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h4><ul>\n<li>1.data的匹配规则与action一样，如果intent-filter中定义了data，那么Intent中必须要定义可匹配的data。</li>\n<li><p>2.intent-filter中data的语法：</p>\n<pre><code>&lt;data android:scheme=&quot;string&quot;\n    android:host=&quot;string&quot;\n    android:port=&quot;string&quot;\n    android:path=&quot;string&quot;\n    android:pathPattern=&quot;string&quot;\n    android:pathPrefix=&quot;string&quot;\n    android:mimeType=&quot;string&quot;/&gt;\n</code></pre></li>\n<li><p>3.Intent中的data有两部分组成：mimeType和URI。mimeType是指媒体类型，比如<br>image/jpeg、audio/mpeg4-generic和video/等，可以表示图片、文本、视频等不同的媒<br>体格式。</p>\n<ul>\n<li>URI的结构：<code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</code><br>//实际例子<br>content://com.example.project:200/folder/subfolder/etc<br><a href=\"http://www.baidu.com:80/search/info\" target=\"_blank\" rel=\"external\">http://www.baidu.com:80/search/info</a><ul>\n<li>scheme：URI的模式，比如http、file、content等，默认值是 file 。</li>\n<li>host：URI的主机名</li>\n<li>port：URI的端口号</li>\n<li>path、pathPattern和pathPrefix：这三个参数描述路径信息。<ul>\n<li>path、pathPattern可以表示完整的路径信息，其中pathPattern可以包含通配符 * ，表示0个或者多个任意字符。</li>\n<li>pathPrefix只表示路径的前缀信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Intent指定data时，必须调用 setDataAndType 方法， setData 和 setType 会清除另一方的值。</li>\n</ul>\n</li>\n</ul>\n<p><strong>隐式调用需注意:</strong></p>\n<ul>\n<li><p>1.当通过隐式调用启动Activity时，没找到对应的Activity系统就会抛出 android.content.ActivityNotFoundException 异常，所以需要判断是否有Activity能够匹配我们的隐式Intent。</p>\n<ul>\n<li>i. 采用 PackageManager 的 resloveActivity 方法<br>public abstract List<resolveinfo> queryIntentActivityies(Intent intent,int flags);<br>public abstract ResolveInfo resloveActivity(Intent intent,int flags);<br>以上的第二个参数使用 MATCH_DEFAULT_ONLY ，这个标志位的含义是仅仅匹配那些在intent-filter中声明了 android.intent.category.DEFAULT 这个category的Activity。因为如果把不含这个category的Activity匹配出来了，由于不含DEFAULT这个category的Activity是无法接受隐式Intent的从而导致startActivity失败。</resolveinfo></li>\n<li>ii. 采用 Intent 的 resloveActivity 方法</li>\n</ul>\n</li>\n<li><p>2.下面的action和category用来表明这是一个入口Activity并且会出现在系统的应用列表中，二者缺一不可。<br><action android:name=\"android.intent.action.MAIN\"></action></p>\n<category android:name=\"android.intent.category.LAUNCHER\">\n\n</category></li>\n</ul>\n<hr>\n<h2 id=\"View的事件体系\"><a href=\"#View的事件体系\" class=\"headerlink\" title=\"View的事件体系\"></a>View的事件体系</h2><h3 id=\"view的基础知识\"><a href=\"#view的基础知识\" class=\"headerlink\" title=\"view的基础知识\"></a>view的基础知识</h3><h4 id=\"什么是view\"><a href=\"#什么是view\" class=\"headerlink\" title=\"什么是view\"></a>什么是view</h4><p>View是Android中所有控件的基类，View的本身可以是单个空间，也可以是多个控件组成的一<br>组控件，即ViewGroup，ViewGroup继承自View，其内部可以有子View，这样就形成了View<br>树的结构。</p>\n<h4 id=\"View的位置参数\"><a href=\"#View的位置参数\" class=\"headerlink\" title=\"View的位置参数\"></a>View的位置参数</h4><p>View的位置主要由它的四个顶点来决定，即它的四个属性：top、left、right、bottom，分别表示View左上角的坐标点（top，left）以及右下角的坐标点（right，bottom）。同时，我们可以得到View的大小：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">width = right - left</div><div class=\"line\">height = bottom - top</div></pre></td></tr></table></figure></p>\n<p>而这四个参数可以由以下方式获取：</p>\n<ul>\n<li>Left = getLeft();</li>\n<li>Right = getRight();</li>\n<li>Top = getTop();</li>\n<li>Bottom = getBottom();<br>Android3.0后，View增加了x、y、translationX和translationY这几个参数。其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于容器的偏移量。</li>\n</ul>\n<p>他们之间的换算关系如下：<br>x = left + translationX;<br>y = top + translationY;<br>注意：View在平移的过程中，top和left不会改变，改变的是x、y、translationX和translaY。</p>\n<h4 id=\"MotionEvent和TouchSlop\"><a href=\"#MotionEvent和TouchSlop\" class=\"headerlink\" title=\"MotionEvent和TouchSlop\"></a>MotionEvent和TouchSlop</h4><h5 id=\"MotionEvent\"><a href=\"#MotionEvent\" class=\"headerlink\" title=\"MotionEvent\"></a>MotionEvent</h5><p>在手指接触到屏幕后会产生乙烯类的点击事件，如</p>\n<ul>\n<li>点击屏幕后离开松开，事件序列为DOWN-&gt;UP</li>\n<li>点击屏幕滑动一会再松开，事件序列为DOWN-&gt;MOVE-&gt;…-&gt;MOVE-&gt;UP 通过MotionEven对象我们可以得到事件发生的x和y坐标，我们可以通过getX/getY和getRawX/getRawY得到，它们的区别是：getX/getY返回的是相对于当前View左上角的x和y坐标，getRawX/getRawY返回的是相对于手机屏幕左上角的x和y坐标。</li>\n</ul>\n<h5 id=\"TouchSloup\"><a href=\"#TouchSloup\" class=\"headerlink\" title=\"TouchSloup\"></a>TouchSloup</h5><p>TouchSloup是系统所能识别出的被认为是滑动的最小距离，这是一个常量，与设备有关，可通过以下方法获得：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewConfiguration.get(getContext()).getScaledTouchSloup().</div></pre></td></tr></table></figure></p>\n<h4 id=\"VelocityTracker、GestureDetector和Scroller\"><a href=\"#VelocityTracker、GestureDetector和Scroller\" class=\"headerlink\" title=\"VelocityTracker、GestureDetector和Scroller\"></a>VelocityTracker、GestureDetector和Scroller</h4><h5 id=\"VelocityTracker\"><a href=\"#VelocityTracker\" class=\"headerlink\" title=\"VelocityTracker\"></a>VelocityTracker</h5><p>速度追踪，用于追踪手指在滑动过程中的速度，包括水平放向速度和竖直方向速度。 使用方法：<br>1.在View的onTouchEvent方法中追踪当前单击事件的速度<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">VelocityRracker velocityTracker = VelocityTracker.obtain();</div><div class=\"line\">velocityTracker.addMovement(event);</div></pre></td></tr></table></figure></p>\n<p>2.计算速度，获得水平速度和竖直速度<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">int</span> xVelocity = (<span class=\"keyword\">int</span>)velocityTracker.getXVelocity();</div><div class=\"line\"><span class=\"keyword\">int</span> yVelocity = (<span class=\"keyword\">int</span>)velocityTracker.getYVelocity();</div></pre></td></tr></table></figure></p>\n<p>注意，获取速度之前必须先计算速度，即调用computeCurrentVelocity方法，这里指的速度是指一段时间内手指滑过的像素数，1000指的是1000毫秒，得到的是1000毫秒内滑过的像素数。速度可正可负：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">速度 = （终点位置 - 起点位置） / 时间段</div></pre></td></tr></table></figure></p>\n<p>3.最后，当不需要使用的时候，需要调用clear()方法重置并回收内存：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker.clear();</div><div class=\"line\">velocityTracker.recycle();</div></pre></td></tr></table></figure></p>\n<h5 id=\"GestureDetector\"><a href=\"#GestureDetector\" class=\"headerlink\" title=\"GestureDetector\"></a>GestureDetector</h5><p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。 使用方法：<br>1.创建一个GestureDetector对象并实现OnGestureListener接口，根据需要，也可实现<br>OnDoubleTapListener接口从而监听双击行为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GestureDetector mGestureDetector = <span class=\"keyword\">new</span> GestureDetector(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">//解决长按屏幕后无法拖动的现象</span></div><div class=\"line\">mGestureDetector.setIsLongpressEnabled(<span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure></p>\n<p>2.在目标View的OnTouchEvent方法中添加以下实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> consume = mGestureDetector.onTouchEvent(event);</div><div class=\"line\"><span class=\"keyword\">return</span> consume;</div></pre></td></tr></table></figure></p>\n<p>3.实现OnGestureListener和OnDoubleTapListener接口中的方法，其中常用的方法有：<br>onSingleTapUp(单击)、onFling(快速滑动)、onScroll(拖动)、onLongPress(长按)和onDoubleTap（双击）。 建议：如果只是监听滑动相关的，可以自己在onTouchEvent中实现，如果要监听双击这种行为，那么就使用GestureDetector。</p>\n<h5 id=\"Scroller\"><a href=\"#Scroller\" class=\"headerlink\" title=\"Scroller\"></a>Scroller</h5><p>弹性滑动对象，用于实现View的弹性滑动。其本身无法让View他行滑动，需要和View的computeScroll方法配合使用才能完成这个功能。 使用方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scroller scroller = <span class=\"keyword\">new</span> Scroller(mContext);</div><div class=\"line\"><span class=\"comment\">//缓慢移动到指定位置</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> destX,<span class=\"keyword\">int</span> destY)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> scrollX = getScrollX();</div><div class=\"line\">\t<span class=\"keyword\">int</span> delta = destX - scrollX;</div><div class=\"line\">\t<span class=\"comment\">//1000ms内滑向destX,效果就是慢慢滑动</span></div><div class=\"line\">\tmScroller.startScroll(scrollX,<span class=\"number\">0</span>,delta,<span class=\"number\">0</span>,<span class=\"number\">1000</span>);</div><div class=\"line\">\tinvalidata();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</div><div class=\"line\">\t\tscrollTo(mScroller.getCurrX,mScroller.getCurrY());</div><div class=\"line\">\t\tpostInvalidate();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>原理下节讲。</p>\n<h3 id=\"View的滑动\"><a href=\"#View的滑动\" class=\"headerlink\" title=\"View的滑动\"></a>View的滑动</h3><h4 id=\"使用scrollTo-scrollBy\"><a href=\"#使用scrollTo-scrollBy\" class=\"headerlink\" title=\"使用scrollTo/scrollBy\"></a>使用scrollTo/scrollBy</h4><p>1.scrollBy实际调用了scrollTo，它实现了基于当前位置的相对滑动，而scrollTo则实现了绝对滑动。<br>2.scrollTo和scrollBy只能改变View的内容位置而不能改变View在布局中的位置。<br>3.滑动偏移量mScrollX和mScrollY的正负与实际滑动方向相反，即从左向右滑动，mScrollX为负值，从上往下滑动mScrollY为负值。</p>\n<h4 id=\"使用动画\"><a href=\"#使用动画\" class=\"headerlink\" title=\"使用动画\"></a>使用动画</h4><p>使用动画移动View，主要是操作View的translationX和translationY属性，既可以采用传统的View动画，也可以采用属性动画，如果使用属性动画，为了能够兼容3.0以下的版本，需要采用开源动画库nineolddandroids。 如使用属性动画：(View在100ms内向右移动100像素)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObjectAnimator.ofFloat(targetView,<span class=\"string\">\"translationX\"</span><span class=\"number\">0</span>,<span class=\"number\">100</span>).setDuration(<span class=\"number\">100</span>).start();</div></pre></td></tr></table></figure></p>\n<h4 id=\"改变布局属性\"><a href=\"#改变布局属性\" class=\"headerlink\" title=\"改变布局属性\"></a>改变布局属性</h4><p>通过改变布局属性来移动View，即改变LayoutParams。</p>\n<h4 id=\"各种滑动方式的对比\"><a href=\"#各种滑动方式的对比\" class=\"headerlink\" title=\"各种滑动方式的对比\"></a>各种滑动方式的对比</h4><p>1.scrollTo/scrollBy：操作简单，适合对View内容的滑动；<br>2.动画：操作简单，主要适用于没有交互的View和实现复杂的动画效果；<br>3.改变布局参数：操作稍微复杂，适用于有交互的View。</p>\n<h3 id=\"弹性滑动\"><a href=\"#弹性滑动\" class=\"headerlink\" title=\"弹性滑动\"></a>弹性滑动</h3><h4 id=\"使用Scroller\"><a href=\"#使用Scroller\" class=\"headerlink\" title=\"使用Scroller\"></a>使用Scroller</h4><p>使用Scroller实现弹性滑动的典型使用方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scroller scroller = <span class=\"keyword\">new</span> Scroller(mContext);</div><div class=\"line\"><span class=\"comment\">//缓慢移动到指定位置</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> destX,<span class=\"keyword\">int</span> dextY)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> scrollX = getScrollX();</div><div class=\"line\">\t<span class=\"keyword\">int</span> deltaX = destX - scrollX;</div><div class=\"line\">\t<span class=\"comment\">//1000ms内滑向destX，效果就是缓慢滑动</span></div><div class=\"line\">\tmScroller.startSscroll(scrollX,<span class=\"number\">0</span>,deltaX,<span class=\"number\">0</span>,<span class=\"number\">1000</span>);</div><div class=\"line\">\tinvalidate();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</div><div class=\"line\">\t\tscrollTo(mScroller.getCurrX(),mScroller.getCurrY());</div><div class=\"line\">\t\tpostInvalidate();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上面代码可以知道，我们首先会构造一个Scroller对象，并调用他的startScroll方法，该方法并没有让view实现滑动，只是把参数保存下来，我们来看看startScroll方法的实现就知道了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startScroll</span><span class=\"params\">(<span class=\"keyword\">int</span> startX,<span class=\"keyword\">int</span> startY,<span class=\"keyword\">int</span> dx,<span class=\"keyword\">int</span> dy,<span class=\"keyword\">int</span> duration)</span></span>&#123;</div><div class=\"line\">\tmMode = SCROLL_MODE;</div><div class=\"line\">\tmFinished = <span class=\"keyword\">false</span>;</div><div class=\"line\">\tmDuration = duration;</div><div class=\"line\">\tmStartTime = AnimationUtils.currentAminationTimeMills();</div><div class=\"line\">\tmStartX = startX;</div><div class=\"line\">\tmStartY = startY;</div><div class=\"line\">\tmFinalX = startX + dx;</div><div class=\"line\">\tmFinalY = startY + dy;</div><div class=\"line\">\tmDeltaX = dx;</div><div class=\"line\">\tmDeltaY = dy;</div><div class=\"line\">\tmDurationReciprocal = <span class=\"number\">1.0f</span> / (<span class=\"keyword\">float</span>)mDuration;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以知道，startScroll方法的几个参数的含义，startX和startY表示滑动的起点，dx和dy表示的是滑动的距离，而duration表示的是滑动时间，注意，这里的滑动指的是View内容的滑动，在startScroll方法被调用后，马上调用invalidate方法，这是滑动的开始，invalidate方法会导致View的重绘，在View的draw方法中调用computeScroll方法，computeScroll又会去向Scroller获取当前的scrollX和scrollY；然后通过scrollTo方法实现滑动，接着又调用postInvalidate方法进行第二次重绘，一直循环，知道computeScrollOffset()方法返回值为false才结束整个滑动过程。 我们可以看看computeScrollOffset方法是如何获得当前的scrollX和scrollY的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">computeScrollOffset</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\t<span class=\"keyword\">int</span> timePassed = (<span class=\"keyword\">int</span>)(AnimationUtils.currentAnimationTimeMills() - mStartTime);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(timePassed &lt; mDuration)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span>(mMode)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> SCROLL_MODE:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = mInterpolator.getInterpolation(timePassed * mDurationReciprocal);</div><div class=\"line\">\t\t\t\tmCurrX = mStartX + Math.round(x * mDeltaX);</div><div class=\"line\">\t\t\t\tmCurrY = mStartY + Math.round(y * mDeltaY);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到这里我们就基本明白了，computeScroll向Scroller获取当前的scrollX和scrollY其实是通过计算时间流逝的百分比来获得的，每一次重绘距滑动起始时间会有一个时间间距，通过这个时间间距Scroller就可以得到View当前的滑动位置，然后就可以通过scrollTo方法来完成View的滑动了。</p>\n<h4 id=\"通过动画\"><a href=\"#通过动画\" class=\"headerlink\" title=\"通过动画\"></a>通过动画</h4><p>动画本身就是一种渐近的过程，因此通过动画来实现的滑动本身就具有弹性。实现也很简单：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObjectAnimator.ofFloat(targetView,<span class=\"string\">\"translationX\"</span><span class=\"number\">0</span>,<span class=\"number\">100</span>).setDuration(<span class=\"number\">100</span>).start();</div></pre></td></tr></table></figure></p>\n<p>当然，我们也可以利用动画来模仿Scroller实现View弹性滑动的过程：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> startX = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> deltaX = <span class=\"number\">100</span>;</div><div class=\"line\">ValueAnimator animator = ValueAnimator.ofInt(<span class=\"number\">0</span>,<span class=\"number\">1</span>).setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">animator.addUpdateListener(<span class=\"keyword\">new</span> AnimatorUpdateListener()&#123;</div><div class=\"line\">\t<span class=\"meta\">@override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animator)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">float</span> fraction = animator.getAnimatedFraction();</div><div class=\"line\">\t\tmButton1.scrollTo(startX + (<span class=\"keyword\">int</span>) (deltaX * fraction) , <span class=\"number\">0</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">animator.start();</div></pre></td></tr></table></figure></p>\n<p>上面的动画本质上是没有作用于任何对象上的，他只是在1000ms内完成了整个动画过程，利用这个特性，我们就可以在动画的每一帧到来时获取动画完成的比例，根据比例计算出View所滑动的距离。</p>\n<h4 id=\"使用延时策略\"><a href=\"#使用延时策略\" class=\"headerlink\" title=\"使用延时策略\"></a>使用延时策略</h4><p>延时策略的核心思想是通过发送一系列延时信息从而达到一种渐近式的效果，具体可以通过Hander和View的postDelayed方法，也可以使用线程的sleep方法。下面以Handler为例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MESSAGE_SCROLL_TO = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FRAME_COUNT = <span class=\"number\">30</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DELATED_TIME = <span class=\"number\">33</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@suppressLint</span>(<span class=\"string\">\"HandlerLeak\"</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> handler()&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span>(msg.what)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> MESSAGE_SCROLL_TO:</div><div class=\"line\">\t\t\tmCount ++ ;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mCount &lt;= FRAME_COUNT)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">float</span> fraction = mCount / (<span class=\"keyword\">float</span>) FRAME_COUNT;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> scrollX = (<span class=\"keyword\">int</span>) (fraction * <span class=\"number\">100</span>);</div><div class=\"line\">\t\t\t\tmButton1.scrollTo(scrollX,<span class=\"number\">0</span>);</div><div class=\"line\">\t\t\t\tmHandelr.sendEmptyMessageDelayed(MESSAGE_SCROLL_TO , DELAYED_TIME);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">default</span> : <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"View的事件分发机制\"><a href=\"#View的事件分发机制\" class=\"headerlink\" title=\"View的事件分发机制\"></a>View的事件分发机制</h3><h4 id=\"点击事件的传递规则\"><a href=\"#点击事件的传递规则\" class=\"headerlink\" title=\"点击事件的传递规则\"></a>点击事件的传递规则</h4><p>首先我们先看看下面一段伪代码，通过它我们可以理解到点击事件的传递规则：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span> <span class=\"params\">(MotionEvent ev)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">boolean</span> consume = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (onInterceptTouchEvnet(ev)&#123;</div><div class=\"line\">\t\tconsume = onTouchEvent(ev);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tconsume = child.dispatchTouchEnvet(ev);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> consume;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码主要涉及到以下三个方法：</p>\n<ul>\n<li>public boolean dispatchTouchEvent(MotionEvent ev); 这个方法用来进行事件的分发</li>\n<li>public boolean onInterceptTouchEvent(MotionEvent ev); 这个方法用来判断是否拦截事件</li>\n<li>public boolean onTouchEvent(MotionEvent ev); 这个方法用来处理点击事件</li>\n</ul>\n<p>下面理一理点击事件的传递规则：对于一个根ViewGroup，点击事件产生后，首先会传递给他，这时候就会调用他的onDispatchTouchEvent方法，如果Viewgroup的onInterceptTouchEvent方法返回true表示他要拦截事件，接下来事件就会交给ViewGroup处理，调用ViewGroup的onTouchEvent方法；如果ViewGroup的onInteceptTouchEvent方法返回值为false，表示ViewGroup不拦截该事件，这时事件就传递给他的子View，接下来子View的dispatchTouchEvent方法，如此反复直到事件被最终处理。</p>\n<p>当一个View需要处理事件时，如果它设置了OnTouchListener，那么onTouch方法会被调用，如果onTouch返回false，则当前View的onTouchEvent方法会被调用，返回true则不会被调用，同时，在onTouchEvent方法中如果设置了OnClickListener，那么他的onClick方法会被调用。由此可见处理事件时的优先级关系：<br>onTouchListener &gt; onTouchEvent &gt; onClickListener</p>\n<p>关于事件传递的机制，这里给出一些结论：</p>\n<ol>\n<li>一个事件系列以down事件开始，中间包含数量不定的move事件，最终以up事件结束。</li>\n<li>正常情况下，一个事件序列只能由一个View拦截并消耗。</li>\n<li>某个View拦截了事件后，该事件序列只能由它去处理，并且它的onInterceptTouchEvent不会再被调用。</li>\n<li>某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvnet返回false），那么同一事件序列中的其他事件都不会交给他处理，并且事件将重新交由他的父元素去处理，即父元素的onTouchEvent被调用。</li>\n<li>如果View不消耗ACTION_DOWN以外的其他事件，那么这个事件将会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终消失的点击事件会传递给Activity去处理。</li>\n<li>ViewGroup默认不拦截任何事件。</li>\n<li>View没有onInterceptTouchEvent方法，一旦事件传递给它，它的onTouchEvent方法会被View的事件体系调用。</li>\n<li>View的onTouchEvent默认消耗事件，除非他是不可点击的（clickable和longClickable同时为false）。</li>\n<li>View的enable不影响onTouchEvent的默认返回值。</li>\n<li>onClick会发生的前提是当前View是可点击的，并且收到了down和up事件。</li>\n<li>事件传递过程总是由外向内的，即事件总是先传递给父元素，然后由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的分发过程，但是ACTION_DOWN事件除外。</li>\n</ol>\n<h3 id=\"View的滑动冲突\"><a href=\"#View的滑动冲突\" class=\"headerlink\" title=\"View的滑动冲突\"></a>View的滑动冲突</h3><p>在界面中，只要内外两层同时可以滑动，这个时候就会产生滑动冲突。</p>\n<h4 id=\"常见的滑动冲突场景\"><a href=\"#常见的滑动冲突场景\" class=\"headerlink\" title=\"常见的滑动冲突场景\"></a>常见的滑动冲突场景</h4><ol>\n<li>外部滑动和内部滑动方向不一致；</li>\n<li>外部滑动方向和内部滑动方向一致；</li>\n<li>上面两种情况的嵌套。</li>\n</ol>\n<h4 id=\"滑动冲突的处理规则\"><a href=\"#滑动冲突的处理规则\" class=\"headerlink\" title=\"滑动冲突的处理规则\"></a>滑动冲突的处理规则</h4><ol>\n<li>对于场景一，处理的规则是：当用户左右（上下）滑动时，需要让外部的View拦截点击事件，当用户上下（左右）滑动的时候，需要让内部的View拦截点击事件。根据滑动的方向判断谁来拦截事件。</li>\n<li>对于场景二，由于滑动方向一致，这时候只能在业务上找到突破点，根据业务需求，规定什么时候让外部View拦截事件，什么时候由内部View拦截事件。</li>\n<li>场景三的情况相对比较复杂，同样根据需求在业务上找到突破点。</li>\n</ol>\n<h4 id=\"滑动冲突的解决方式\"><a href=\"#滑动冲突的解决方式\" class=\"headerlink\" title=\"滑动冲突的解决方式\"></a>滑动冲突的解决方式</h4><ol>\n<li>外部拦截法：所谓的外部拦截法是指点击事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，否则就不拦截。下面是伪代码：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span> <span class=\"params\">(MotionEvent event)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">\t<span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">\t<span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">\t\t\tintercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (父容器需要当前事件） &#123;</div><div class=\"line\">\t\t\t\tintercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tintercepted = flase;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">\t\t\tintercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">default</span> : <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">mLastXIntercept = x;</div><div class=\"line\">mLastYIntercept = y;</div><div class=\"line\"><span class=\"keyword\">return</span> intercepted;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>内部拦截法：内部拦截法是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗，否则就交由父容器进行处理。这种方法与Android事件分发机制不一致，需要配合requestDisallowInterceptTouchEvent方法才能正常工作。下面是伪代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span> <span class=\"params\">( MotionEvent event )</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (event.getAction) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">\t\t\t\tparent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> deltaX = x - mLastX;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> deltaY = y - mLastY;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (父容器需要此类点击事件) &#123;</div><div class=\"line\">\t\t\t\t\tparent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">default</span> : <span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tmLastX = x;</div><div class=\"line\">\tmLastY = y;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>除了子元素需要做处理外，父元素也要默认拦截除了ACTION_DOWN以外的其他事件，这样当子元素调用parent.requestDisallowInterceptTouchEvent(false)方法时，父元素才能继续拦截所需的事件。因此，父元素要做以下修改：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span> <span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> action = event.getAction();</div><div class=\"line\">\t<span class=\"keyword\">if</span>(action == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至于具体的实现可以根据实际需要去修改拦截成立的条件，开发艺术艺术中也给出了实<br>例，具体可参考书中P161-P173。</p>\n<hr>\n<h2 id=\"理解RemoteViews\"><a href=\"#理解RemoteViews\" class=\"headerlink\" title=\"理解RemoteViews\"></a>理解RemoteViews</h2><p>RemoteViews提供了一组基础的操作，用于跨进程更新它的界面。RemoteViews在Andriod中的使用场景有两种：通知栏和桌面小部件(都运行在SystemServer进程)。</p>\n<h3 id=\"RemoteViews的应用\"><a href=\"#RemoteViews的应用\" class=\"headerlink\" title=\"RemoteViews的应用\"></a>RemoteViews的应用</h3><p>通知栏主要通过NotificationManager的notify方法来实现，除了默认效果外还可以自定义布局。<br>桌面小工具主要通过AppWidgetProvider来实现，AppWidgetProvider本质上是一个广播。<br>两者都会用到RemoteViews，两者都运行在其他进程中，准确的说是系统的SystemServer进程。</p>\n<h4 id=\"RemoteViews在通知栏上的应用\"><a href=\"#RemoteViews在通知栏上的应用\" class=\"headerlink\" title=\"RemoteViews在通知栏上的应用\"></a>RemoteViews在通知栏上的应用</h4><p>关于PendingIntent，它表示的是一种特定的Intent，这个Intent中所包含的意图必须由用户来触发。</p>\n<h4 id=\"RemoteViews在桌面小部件上的应用\"><a href=\"#RemoteViews在桌面小部件上的应用\" class=\"headerlink\" title=\"RemoteViews在桌面小部件上的应用\"></a>RemoteViews在桌面小部件上的应用</h4><p>AppWidgetProvider实现桌面小工具的类，本质是一个广播即BroadcastReceiver。<br>具体使用看系统自动生成的桌面小工具。<br>桌面小部件上不管是初始化界面还是后续的更新界面都必须使用RemoteViews来完成。</p>\n<h4 id=\"PendingIntent概述\"><a href=\"#PendingIntent概述\" class=\"headerlink\" title=\"PendingIntent概述\"></a>PendingIntent概述</h4><p>PendingIntent和Intent的区别在于，PendingIntent是在将来的某个环节的不确定的时刻发生，而Intent是立刻发生。</p>\n<h3 id=\"RemoteViews的内部机制\"><a href=\"#RemoteViews的内部机制\" class=\"headerlink\" title=\"RemoteViews的内部机制\"></a>RemoteViews的内部机制</h3><ul>\n<li>大部分的set方法的确是通过发射来完成的。</li>\n<li>NotificationManager和AppWidgetProvider通过Binder分别和SystemServer进程中的NotificationManagerService以及AppWidgetServer进行通信。</li>\n<li>RemoteViews会通过Binder传递到SystemServer进程中，这是因为RemoteViews实现了Parcelable接口，因此它可以跨进程传输，系统会根据RemoteViews中的包名等信息去得到该应用的资源。</li>\n</ul>\n<h3 id=\"RemoteViews的意义\"><a href=\"#RemoteViews的意义\" class=\"headerlink\" title=\"RemoteViews的意义\"></a>RemoteViews的意义</h3><p>模拟通知栏效果实现跨进程跨进程的UI更新。<br>我们可以像系统一样使用Binder来实现，但是为了简单起见就采用广播。<br>实际：</p>\n<ul>\n<li>现在用两个应用，一个应用需要能够更新另一个应用的某个界面，这个时候我们当然可以选择AIDL去实现（<strong>跨应用更新UI</strong>），但是如果对界面的更新比较频繁，这个时候就会有效率的问题，如果采用RemoteViews来实现就没有这个问题了。（RemoteViews只支持一些常用的View,对于自定义的View是不支持的。）</li>\n</ul>\n<hr>\n<h2 id=\"Android动画深入分析\"><a href=\"#Android动画深入分析\" class=\"headerlink\" title=\"Android动画深入分析\"></a>Android动画深入分析</h2><p>Android动画分为三种：</p>\n<ul>\n<li>1.View动画（平移、缩放、旋转、透明度）</li>\n<li>2.帧动画（图片切换动画）</li>\n<li>3.属性动画（动态的改变对象的属性从而达到动画的效果）</li>\n</ul>\n<h3 id=\"View动画\"><a href=\"#View动画\" class=\"headerlink\" title=\"View动画\"></a>View动画</h3><p>View动画的作用对象是View，支持四种动画效果：</p>\n<ul>\n<li>1.平移</li>\n<li>2.缩放</li>\n<li>3.旋转</li>\n<li>4.透明</li>\n</ul>\n<h4 id=\"View动画的种类\"><a href=\"#View动画的种类\" class=\"headerlink\" title=\"View动画的种类\"></a>View动画的种类</h4><p>上述四种变换效果对应着Animation四个子类： TranslateAnimation 、 ScaleAnimation 、 RotateAnimation 和 AlphaAnimation 。这四种动画皆可以通过XML定义，也可以通过代码来动态创建。</p>\n<p><strong>xml定义动画:</strong></p>\n<ul>\n<li><p>1.<set> 标签表示动画集合，对应AnimationSet类，可以包含一个或若干个动画，内部还可以嵌套其他动画集合。两个属性：</set></p>\n<ul>\n<li>i. android:interpolator 表示动画集合所采用的插值器，插值器影响动画速度，比如非匀速动画就需要通过插值器来控制动画的播放过程。</li>\n<li>ii. android:shareInterpolator 表示集合中的动画是否和集合共享同一个插值器，如果集合不指定插值器，那么子动画就需要单独指定所需的插值器或默认值。</li>\n</ul>\n</li>\n<li><p>2.<code>&lt;translate&gt;</code>、<code>&lt;scale&gt;</code>、<code>&lt;rotate&gt;</code>、<code>&lt;alpha&gt;</code>这几个子标签分别代表四种变换效果。</p>\n</li>\n<li><p>3.定义完View动画的xml后，通过以下代码应用动画：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Aniamation anim = AnimationUtils.loadAnimation(context,R.anim.animation_test);</div><div class=\"line\">view.startAnimation(anim);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>代码动态创建动画：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">AlphaAnimation alphaAnimation = <span class=\"keyword\">new</span> AlphaAnimation(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</div><div class=\"line\">alphaAnimation.setDuration(<span class=\"number\">1500</span>);</div><div class=\"line\">view.startAnimation(alphaAnimation);</div></pre></td></tr></table></figure>\n<h4 id=\"自定义View动画\"><a href=\"#自定义View动画\" class=\"headerlink\" title=\"自定义View动画\"></a>自定义View动画</h4><p>需要继承 Animation 这个抽象类，重写它的 initialize 和 applyTransformation 方法。在 initialize 方法中做一些初始化工作，在 applyTransformation 中进行相应的矩阵变换即可，很多时候需要采用 Camera 来简化矩阵变换的过程。自定义View动画的过程主要是矩阵变换的过程。</p>\n<h4 id=\"帧动画\"><a href=\"#帧动画\" class=\"headerlink\" title=\"帧动画\"></a>帧动画</h4><p>帧动画是顺序播放一组预先定义好的图片，使用简单，但容易引起OOM，所以在使用帧动画时应尽量避免使用过多尺寸较大的图片。</p>\n<h3 id=\"View动画的特殊使用场景\"><a href=\"#View动画的特殊使用场景\" class=\"headerlink\" title=\"View动画的特殊使用场景\"></a>View动画的特殊使用场景</h3><h4 id=\"LayoutAnimation\"><a href=\"#LayoutAnimation\" class=\"headerlink\" title=\"LayoutAnimation\"></a>LayoutAnimation</h4><p>作用于ViewGroup，为ViewGroup指定一个动画，当它的子元素出场时都会具有这种动画效果，一般用在ListView上。</p>\n<h4 id=\"Activity的切换效果\"><a href=\"#Activity的切换效果\" class=\"headerlink\" title=\"Activity的切换效果\"></a>Activity的切换效果</h4><p>我们可以自定义Activity的切换效果，主要通过在 startActivity 或者 finish 的后面增加<code>overridePendingTransition(int enterAnim , int exitAnim)</code>方法</p>\n<h3 id=\"属性动画\"><a href=\"#属性动画\" class=\"headerlink\" title=\"属性动画\"></a>属性动画</h3><p>API 11后加入，可以在一个时间间隔内完成对象从一个属性值到另一个属性值的改变。因此与<br>View动画相比，属性动画几乎无所不能，只要对象有这个属性，它都能实现动画效果。API11<br>以下可以通过 nineoldandroids 库来兼容以前版本。</p>\n<h4 id=\"属性动画有以下三种使用方法：\"><a href=\"#属性动画有以下三种使用方法：\" class=\"headerlink\" title=\"属性动画有以下三种使用方法：\"></a><strong>属性动画有以下三种使用方法：</strong></h4><ul>\n<li>ObjectAnimator:<ul>\n<li><code>ObjectAnimator.ofFloat(view,&quot;translationY&quot;,values).start();</code></li>\n</ul>\n</li>\n<li><p>ValueAnimator</p>\n<ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ValueAnimator colorAnim = ObjectAnimator.ofInt(view,<span class=\"string\">\"backgroundColor\"</span>,<span class=\"comment\">/*red*/</span><span class=\"number\">0xffff8080</span>,<span class=\"comment\">/*blue*/</span><span class=\"number\">0xff8080ff</span>);</div><div class=\"line\">colorAnim.setDuration(<span class=\"number\">2000</span>);</div><div class=\"line\">colorAnim.setEvaluator(<span class=\"keyword\">new</span> ArgbEvaluator());</div><div class=\"line\">colorAnim.setRepeatCount(ValueAnimator.INFINITE);</div><div class=\"line\">colorAnim.setRepeatMode(ValueAnimator.REVERSE);</div><div class=\"line\">colorAnim.start();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>AnimatorSet</p>\n<ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">set.playTogether(animator1,animator2,animator3);</div><div class=\"line\">set.setDuration(<span class=\"number\">3</span>*<span class=\"number\">1000</span>).start();</div></pre></td></tr></table></figure>\n</li>\n<li><p>也可以通过在xml中定义在 res/animator/ 目录下。具体如下:</p>\n<ul>\n<li><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;</div><div class=\"line\">&lt;objectAnimator</div><div class=\"line\">....../&gt;</div><div class=\"line\">&lt;animator</div><div class=\"line\">....../&gt;</div><div class=\"line\">&lt;/set&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnimatorSet set = (AnimatorSet)AnimatorInflater.loadAnimator(context , R.animator.anim);</div><div class=\"line\">set.setTarget(view);</div><div class=\"line\">set.start();</div><div class=\"line\">&lt;set&gt; 标签对应 AnimatorSet,&lt;animator&gt;对应ValueAnimator,</div><div class=\"line\">而&lt;objectAnimator&gt;则对应 ObjectAnimator。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"理解差值器和估值器\"><a href=\"#理解差值器和估值器\" class=\"headerlink\" title=\"理解差值器和估值器\"></a>理解差值器和估值器</h4><ul>\n<li><p>时间插值器（ TimeInterpolator） 的作用是根据时间流逝的百分比来计算出当前属性值改变的百分比，系统预置的有LinearInterpolator（<strong>线性插值器：匀速动画</strong>),AccelerateDecelerateInterpolator（<strong>加速减速插值器：动画两头慢中间快</strong>）,DecelerateInterpolator(<strong>减速插值器：动画越来越慢</strong>）。</p>\n</li>\n<li><p>估值器（ TypeEvaluator） 的作用是根据当前属性改变的百分比来计算改变后的属性值。<br>系统预置有IntEvaluator 、FloatEvaluator 、ArgbEvaluator。</p>\n</li>\n<li><p>具体来说 对于一个作用在view上改变其宽度属性、持续40ms的属性动画来说，就是当时间t=20ms时，时间流逝了50%，那么view的宽度属性应该改变了多少呢？这个就由Interpolator和Evaluator的算法来决定。</p>\n</li>\n</ul>\n<h4 id=\"属性动画的监听器\"><a href=\"#属性动画的监听器\" class=\"headerlink\" title=\"属性动画的监听器\"></a>属性动画的监听器</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AnimatorListener</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animation)</span></span>; <span class=\"comment\">//动画开始</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span></span>; <span class=\"comment\">//动画结束</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span></span>; <span class=\"comment\">//动画取消</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animation)</span></span>; <span class=\"comment\">//动画重复播放</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了方便开发，系统提供了AnimatorListenerAdapter类，它是AnimatorListener的适配器类，可以有选择的实现以上4个方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Implementors of this interface can add themselves as update listeners</div><div class=\"line\">* to an &lt;code&gt;ValueAnimator&lt;/code&gt; instance to receive callbacks on every animation</div><div class=\"line\">* frame, after the current frame's values have been calculated for that</div><div class=\"line\">* &lt;code&gt;ValueAnimator&lt;/code&gt;.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AnimatorUpdateListener</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t* &lt;p&gt;Notifies the occurrence of another frame of the animation.&lt;/p&gt;</div><div class=\"line\">\t* *</div><div class=\"line\">\t<span class=\"doctag\">@param</span> animation The animation which was repeated.</div><div class=\"line\">\t*/</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>AnimatorUpdateListener会监听整个动画的过程，动画由许多帧组成的，每播放一帧，onAnimationUpdate就会调用一次。</p>\n<h4 id=\"对任意属性做动画\"><a href=\"#对任意属性做动画\" class=\"headerlink\" title=\"对任意属性做动画\"></a>对任意属性做动画</h4><ul>\n<li><p>1.属性动画要求作用的对象提供该属性的get和set方法，属性动画根据外界传递的该属性的初始值和最终值，通过多次调用set方法来实现动画效果。</p>\n</li>\n<li><p>2.如果被作用的对象没有set/get方法，可以：</p>\n<ul>\n<li>i.请给你的对象加上get和set方法，如果你有权限的话（ 对于SDK或者其他第三方类库<br>的类无法加上的） </li>\n<li>ii.用一个类来包装原始对象，间接为其提供get和set方法</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//包装View类 用于给属性动画调用 从而包装了set get</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewWrapper</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> View target;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewWrapper</span><span class=\"params\">(View target)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">\t&#125; </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> target.getLayoutParams().width;</div><div class=\"line\">\t&#125; </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWidth</span><span class=\"params\">(<span class=\"keyword\">int</span> width)</span> </span>&#123;</div><div class=\"line\">\t\ttarget.getLayoutParams().width = width;</div><div class=\"line\">\t\ttarget.requestLayout();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"comment\">//使用：</span></div><div class=\"line\">ViewWrapper wrapper = <span class=\"keyword\">new</span> ViewWrapper(mButton);</div><div class=\"line\">ObjectAnimator.ofInt(mButton,<span class=\"string\">\"width\"</span>,<span class=\"number\">500</span>).setDuration(<span class=\"number\">3000</span>).start();</div></pre></td></tr></table></figure>\n</li>\n<li><p>iii.采用ValueAnimator，监听动画过程，自己实现属性的改变；</p>\n<ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performAnimate</span><span class=\"params\">(<span class=\"keyword\">final</span> View target, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> start, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">\tValueAnimator valueAnimator = ValueAnimator.ofInt(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</div><div class=\"line\">\tvalueAnimator.addUpdateListener(<span class=\"keyword\">new</span> AnimatorUpdateListener() &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 持有一个IntEvaluator对象，方便下面估值的时候使用</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> IntEvaluator mEvaluator = <span class=\"keyword\">new</span> IntEvaluator();</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animator)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获得当前动画的进度值，整型，1-100之间</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> currentValue = (Integer) animator.getAnimatedValue();</div><div class=\"line\">\t\t\tLog.d(TAG, <span class=\"string\">\"current value: \"</span> + currentValue);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获得当前进度占整个动画过程的比例，浮点型，0-1之间</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">float</span> fraction = animator.getAnimatedFraction();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 直接调用整型估值器通过比例计算出宽度，然后再设给Button</span></div><div class=\"line\">\t\t\ttarget.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);</div><div class=\"line\">\t\t\ttarget.requestLayout();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tvalueAnimator.setDuration(<span class=\"number\">5000</span>).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"属性动画的工作原理\"><a href=\"#属性动画的工作原理\" class=\"headerlink\" title=\"属性动画的工作原理\"></a>属性动画的工作原理</h4><p>属性动画需要运行在有Looper的线程中，系统通过反射调用被作用对象get/set方法。</p>\n<h3 id=\"使用动画的注意事项\"><a href=\"#使用动画的注意事项\" class=\"headerlink\" title=\"使用动画的注意事项\"></a>使用动画的注意事项</h3><ul>\n<li>1.使用帧动画时，当图片数量较多且图片分辨率较大的时候容易出现OOM，需注意，尽量<br>避免使用帧动画。</li>\n<li>2.使用无限循环的属性动画时，在Activity退出时即使停止，否则将导致Activity无法释放从而造成内存泄露。</li>\n<li>3.动画在3.0以下的系统存在兼容性问题，特殊场景可能无法正常工作，需做好适配工作。</li>\n<li>4.View动画是对View的影像做动画，并不是真正的改变了View的状态，因此有时候会出现动画完成后View无法隐藏（ setVisibility(View.GONE） 失效）,这时候调用 view.clearAnimation() 清理View动画即可解决。</li>\n<li>5.不要使用px，使用px会导致不同设备上有不同的效果。</li>\n<li>6.View动画是对View的影像做动画，View的真实位置没有变动，动画完成后的新位置是无法触发点击事件的。属性动画是真实改变了View的属性，所以动画完成后的位置可以接受触摸事件。</li>\n<li>7.使用动画的过程中，使用硬件加速可以提高动画的流畅度。</li>\n</ul>\n<hr>\n<h2 id=\"Android的线程和线程池\"><a href=\"#Android的线程和线程池\" class=\"headerlink\" title=\"Android的线程和线程池\"></a>Android的线程和线程池</h2><ul>\n<li>1.在Android系统，线程主要分为主线程和子线程，主线程处理和界面相关的事情，而子线程一般用于执行耗时操作。</li>\n<li>2.在Android中，线程的形态有很多种：<ul>\n<li>i.AsyncTask封装了线程池和Handler。</li>\n<li>ii.HandlerThread是具有消息循环的线程，内部可以使用handler</li>\n<li>iii.IntentService是一种Service，内部采用HandlerThread来执行任务，当任务执行完毕后IntentService会自动退出。由于它是一种Service，所以不容易被系统杀死</li>\n</ul>\n</li>\n<li>3.操作系统中，线程是操作系统调度的最小单元，同时线程又是一种受限的系统资源，其创建和销毁都会有相应的开销。同时当系统存在大量线程时，系统会通过时间片轮转的方式调度每个线程，因此线程不可能做到绝对的并发，除非线程数量小于等于CPU的核心数。</li>\n<li>4.频繁创建销毁线程不明智，使用线程池是正确的做法。线程池会缓存一定数量的线程，通过线程池就可以避免因为频繁创建和销毁线程所带来的系统开销。</li>\n</ul>\n<h3 id=\"主线程和子线程\"><a href=\"#主线程和子线程\" class=\"headerlink\" title=\"主线程和子线程\"></a>主线程和子线程</h3><ul>\n<li>1.主线程主要处理界面交互逻辑，由于用户随时会和界面交互，所以主线程在任何时候都需要有较高响应速度，则不能执行耗时的任务；</li>\n<li>2.android3.0开始，网络访问将会失败并抛出NetworkOnMainThreadException这个异常，这样做是为了避免主线程由于被耗时操作所阻塞从而现ANR现象。</li>\n</ul>\n<h3 id=\"Android中的线程形态\"><a href=\"#Android中的线程形态\" class=\"headerlink\" title=\"Android中的线程形态\"></a>Android中的线程形态</h3><h4 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h4><p>1.三个参数（都可为Void)：</p>\n<ul>\n<li>i. Params：参数</li>\n<li>ii. Progress：执行进度</li>\n<li>iii. Result：返回值</li>\n</ul>\n<p>2.四个方法 ：</p>\n<ul>\n<li>i. onPreExecute() 主线程执行，异步方法执行前调用。</li>\n<li>ii. doInBackground(Params…params) 线程池中执行，用于执行异步任务；在方法内部用publishProgress 来更新任务进度。</li>\n<li>iii. onProgressUpdate(Progress…value) 主线程执行，后台任务进度状态改变时被调用。</li>\n<li>iv. onPostExecute(Result result) 主线程执行，异步任务执行之后被调用执行顺序： onPreExecute-&gt;doInBackground-&gt;onPostExecute 如果取消了异步任务，会回调onCancelled()，onPostExecute则不会被调用。</li>\n</ul>\n<p>AsyncTask的类必须在主线程加载，Android4.1及以上已经被系统自动完成了；AsyncTask对象必须在主线程创建；execute方法需要在UI线程调用；一个AsyncTask对象只能调用一次；Android1.6之前串行执行，Android1.6采用线程池并行处理任务，Android3.0开始，又采用一个线程来串行执行任务，但也可以通过 executeOnExecutor() 方法来并行执行任务。</p>\n<h4 id=\"AsyncTask的工作原理\"><a href=\"#AsyncTask的工作原理\" class=\"headerlink\" title=\"AsyncTask的工作原理\"></a>AsyncTask的工作原理</h4><ul>\n<li>1.AsyncTask中有两个线程池（ SerialExecutor 和 THREAD_POOL_EXECUTOR ）和一个 InternalHandler ，其中线程池SerialExecutor用于任务排队，THREAD_POOL_EXECUTOR用于真正执行任务，InternalHandler用于将执行环境切换到主线程。</li>\n<li>2.AsyncTask的排队过程：系统首先会把AsyncTask的Params参数封装成FutureTask对象，它充当Runnable的作用，接下来这个FutureTask会交给SerialExecutor的 execute() 方法处理，execute()方法首先会把FutereTask对象插入到任务队列 mTasks 中去；如果没有正在活动的AsyncTask任务，就会执行下一个AsyncTask任务；同时当一个AsyncTask任务执行完成后，AsyncTask会继续执行其他任务直到所有任务都执行为止，可以看出默认情况，AsyncTask是串行执行的（Android3.0后）。</li>\n</ul>\n<h4 id=\"HandlerThread\"><a href=\"#HandlerThread\" class=\"headerlink\" title=\"HandlerThread\"></a>HandlerThread</h4><ul>\n<li>1.HandlerThread继承了Thread,是一种可以使用Handler的Thread</li>\n<li>2.在run方法中通过 looper.prepare() 来开启消息循环，这样就可以在HandlerThread中创建Handler了</li>\n<li>3.外界可以通过一个Handler的消息方式来通知HandlerThread来执行具体任务；确定不使用之后，可以通过 quit 或 quitSafely 方法来终止线程执行</li>\n<li>4.具体使用场景是IntentService</li>\n</ul>\n<h4 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h4><p>IntentSercie是一种特殊的Service，继承了Service并且是抽象类，任务执行完成后会自动停止，优先级远高于普通线程，适合执行一些高优先级的后台任务； IntentService封装了 HandlerThread 和 Handler。</p>\n<ul>\n<li>1.onCreate 方法自动创建一个HandlerThread</li>\n<li>2.然后用它的Looper构造了一个Handler对象 mServiceHandler ，这样通过mServiceHandlerAndroid的线程和线程池发送的消息都会在HandlerThread执行；</li>\n<li>3.IntentServiced的 onHandlerIntent 方法是一个抽象方法，需要在子类实现，onHandlerIntent方法执行后，stopSelt(int startId)就会停止服务，如果存在多个后台任务，执行完最后一个stopSelf(int startId)才会停止服务。</li>\n</ul>\n<h3 id=\"Android线程池\"><a href=\"#Android线程池\" class=\"headerlink\" title=\"Android线程池\"></a>Android线程池</h3><p>优点：</p>\n<ol>\n<li>重用线程池的线程，减少线程创建和销毁带来的性能开销</li>\n<li>控制线程池的最大并发数，避免大量线程互相抢系统资源导致阻塞</li>\n<li>提供定时执行和间隔循环执行功能</li>\n</ol>\n<h4 id=\"ThreadPoolExecutor（熟悉后可自定义线程池）\"><a href=\"#ThreadPoolExecutor（熟悉后可自定义线程池）\" class=\"headerlink\" title=\"ThreadPoolExecutor（熟悉后可自定义线程池）\"></a>ThreadPoolExecutor（熟悉后可自定义线程池）</h4><p>Executor是一个接口，线程池的具体实现在ThreadPoolExecutor；它提供了一系列的参数来配置线程池；Android的线程池 大部分都是通 过Executor提供的工厂方法创建的。</p>\n<h5 id=\"ThreadPoolExecutor常见构造参数\"><a href=\"#ThreadPoolExecutor常见构造参数\" class=\"headerlink\" title=\"ThreadPoolExecutor常见构造参数\"></a>ThreadPoolExecutor常见构造参数</h5><ol>\n<li>corePoolSize： 线程池的核心线程数，默认情况下，核心线程会一直存活(设置了超时机制除外， allowCoreThreadTimeOut属性为true时开启）</li>\n<li>maxinmumPoolSize： 线程池能容纳的最大线程数，当活动的线程达到这个数值之后，后续新任务会被阻塞</li>\n<li>keepAliveTime： 非核心线程闲置的超时时长，超过这个时长，非核心线程就会被回收,当allowCoreThreadTimeOut为true时，keepAliveTime同样作用于核心线程。</li>\n<li>unit：keepAliveTime的时间单位，这是一个枚举，常用TimeUnit.MILLISECONDS(毫秒)、TimeUnit.SECONDS（秒）、TimeUnit.MINUTES(分钟)</li>\n<li>workQueue： 线程池中的任务队列，通过execute方法提交的Runnable对象会存储在这个参数中</li>\n<li>threadFactory： 线程工厂，为线程池提供创建线程的功能，是个接口，提供ThreadnewThread(Runnable r)方法</li>\n<li>RejectedExecutionHandle：当线程池无法执行新任务时，可能由于线程队列已满或无法成功执行任务，这时候 ThreadPoolExecutor会调用handler的 rejectedExecution的方法，默认会抛出RejectedExecutionException</li>\n</ol>\n<h5 id=\"ThreadPoolExecutor执行任务大致遵循如下规则\"><a href=\"#ThreadPoolExecutor执行任务大致遵循如下规则\" class=\"headerlink\" title=\"ThreadPoolExecutor执行任务大致遵循如下规则:\"></a>ThreadPoolExecutor执行任务大致遵循如下规则:</h5><ol>\n<li>如果线程池中的线程数量未达到核心线程的数量，那么会直接启动一个核心线程来执行任务Android的线程和线程池</li>\n<li>如果线程池中的线程数量已经达到或超过核心线程数量，那么任务会被插入到任务队列中排队等待执行</li>\n<li>如果步骤2中无法将任务插入到任务队列中，往往是因为任务队列已满，这个时候如果线程数量未达到线程池规定的最大值，那么会立刻启动一个非核心线程来执行任务</li>\n<li>如果步骤3中线程数量达到线程池规定的最大值，线程池会拒绝执行任务，并会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者</li>\n</ol>\n<h5 id=\"AsyncTask的THREAD-POOL-EXECUTOR线程池配置\"><a href=\"#AsyncTask的THREAD-POOL-EXECUTOR线程池配置\" class=\"headerlink\" title=\"AsyncTask的THREAD_POOL_EXECUTOR线程池配置:\"></a>AsyncTask的THREAD_POOL_EXECUTOR线程池配置:</h5><ol>\n<li>核心线程数等于CPU核心数+1</li>\n<li>线程池最大线程数为CPU核心数的2倍+1</li>\n<li>核心线程无超时机制，非核心线程的闲置超时时间为1秒</li>\n<li>任务队列容量是128</li>\n</ol>\n<h4 id=\"常见的4个线程池\"><a href=\"#常见的4个线程池\" class=\"headerlink\" title=\"常见的4个线程池\"></a>常见的4个线程池</h4><ul>\n<li>1、FixedThreadPool ：线程数量固定的线程池，当所有线程都处于活动状态时，新任务会处于等待状态，只有核心线程并且不会回收（无超时机制），能快速的响应外界请求。</li>\n<li>2、CachedThreadPool ：线程数量不定的线程池，最大线程数Integer.MAX_VALUE(相当于任意大),当所有线程都处于活动状态时，会创建新线程来处理任务；线程池的空闲进程超时时长为60秒，超过就会被回收；任何任务都会被立即执行，适合执行大量的耗时较少的任务。</li>\n<li>3、ScheduledThreadPool ：核心线程数量固定，非核心线程数量无限制，非核心线程闲置时会被立刻回收，用于执行定时任务和具有固定周期的重复任务。</li>\n<li>4、SingleThreadExecutor ：只有一个核心线程，所有任务都在这个线程中串行执行，不需要处理线程同步问题。</li>\n</ul>\n<hr>\n<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ul>\n<li><a href=\"https://github.com/zhuyongit/AndroidDevelopmentArt\" target=\"_blank\" rel=\"external\">Android开发艺术探索，脑图笔记</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","Books"]},{"title":"《Android群英传 神兵利器》读书笔记","url":"http://jinbeen.com/2018/02/04/《Android群英传-神兵利器》读书笔记/","content":"<blockquote>\n<p><a href=\"https://book.douban.com/subject/26855851/\" target=\"_blank\" rel=\"external\">《Android群英传 神兵利器》</a> - Android开发的工具使用</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>这是一本Android开发的工具书，里面的提到的工具基本上是每个Android开发者必备的技能，买这本书的起因是看到有介绍Gradle和性能优化。里面提到的很多工具之前都是用过，所以看得很快，只care自己不熟知的，所以这篇读书笔记是对自己不熟的地方的整理和摘录。</p>\n<h2 id=\"与Gradle的爱恨情仇\"><a href=\"#与Gradle的爱恨情仇\" class=\"headerlink\" title=\"与Gradle的爱恨情仇\"></a>与Gradle的爱恨情仇</h2><h3 id=\"配置全局参数\"><a href=\"#配置全局参数\" class=\"headerlink\" title=\"配置全局参数\"></a>配置全局参数</h3><blockquote>\n<p>配置后就可以统一管理<code>com.android.support:design</code>版本号了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">根目录的build.gradle中</div><div class=\"line\">ext &#123;</div><div class=\"line\">    <span class=\"comment\">// Support library and architecture components support minSdk 19 and above.</span></div><div class=\"line\">    minSdkVersion = <span class=\"number\">19</span></div><div class=\"line\">    targetSdkVersion = <span class=\"number\">26</span></div><div class=\"line\">    compileSdkVersion = <span class=\"number\">26</span></div><div class=\"line\">    buildToolsVersion = <span class=\"string\">'26.0.2'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// App dependencies</span></div><div class=\"line\">    supportLibraryVersion = <span class=\"string\">'27.0.2'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultConfig &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"com.example.jingbin.cloudreader\"</span></div><div class=\"line\">        minSdkVersion rootProject.ext.minSdkVersion</div><div class=\"line\">        targetSdkVersion rootProject.ext.targetSdkVersion</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">compile <span class=\"string\">\"com.android.support:design:$rootProject.supportLibraryVersion\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"构建defaultConfig\"><a href=\"#构建defaultConfig\" class=\"headerlink\" title=\"构建defaultConfig\"></a>构建defaultConfig</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultConfig&#123;</div><div class=\"line\">  <span class=\"function\">versionName <span class=\"title\">getCustomVersionName</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// build.gradle定义方法：</span></div><div class=\"line\">def getCustomVersionName&#123;</div><div class=\"line\"> ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"构建buildTypes\"><a href=\"#构建buildTypes\" class=\"headerlink\" title=\"构建buildTypes\"></a>构建buildTypes</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildTypes&#123;</div><div class=\"line\">  <span class=\"comment\">// xys.initWith(buildTypes.debug) 也可以继承其他的构建类型</span></div><div class=\"line\">  xys&#123;</div><div class=\"line\">     applicationIdSuffix <span class=\"string\">\".xys\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>gradle assembleDebug / assembleRelease / <code>assembleXys</code></p>\n<p>生成另一个包，在包名后加上”.xys”，这样就可以双开了，不用手动更改包名！</p>\n<h3 id=\"关于签名\"><a href=\"#关于签名\" class=\"headerlink\" title=\"关于签名\"></a>关于签名</h3><p>签名文件保存在住module的根目录下。<br>系统有一个默认的debug签名</p>\n<p>Android Studio中签名文件是“.jks”文件<br>Eclipse中签名文件是”.keystore”文件</p>\n<p>配置签名：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">signingConfigs&#123;</div><div class=\"line\">  xys&#123;</div><div class=\"line\">  \t\t...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"可选配置\"><a href=\"#可选配置\" class=\"headerlink\" title=\"可选配置\"></a>可选配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CompileOptions : 配置编译的选项 JDK</div><div class=\"line\"><span class=\"comment\">// 使用lint检查代码时错误的话停止，加上这个之后就会继续，但是一般不启动lint，因为启动后会编译很慢</span></div><div class=\"line\">lintOptions&#123;</div><div class=\"line\">\tabortOnError <span class=\"keyword\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"构建Proguard-混淆\"><a href=\"#构建Proguard-混淆\" class=\"headerlink\" title=\"构建Proguard 混淆\"></a>构建Proguard 混淆</h3><blockquote>\n<p>混淆能精简代码、资源、优化代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            <span class=\"comment\">// 混淆</span></div><div class=\"line\">            minifyEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            <span class=\"comment\">// Zipalign优化</span></div><div class=\"line\">            zipAlignEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            <span class=\"comment\">// 移除无用的resource文件</span></div><div class=\"line\">            shrinkResources <span class=\"keyword\">true</span></div><div class=\"line\">            <span class=\"comment\">// 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件</span></div><div class=\"line\">            <span class=\"function\">proguardFiles <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span></div><div class=\"line\">            signingConfig signingConfigs.release</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"动态设置参数\"><a href=\"#动态设置参数\" class=\"headerlink\" title=\"动态设置参数\"></a>动态设置参数</h3><p>使用key/value的方式，引入签名的配置，而不是直接写入，这样会增强安全性，特别是对于开源项目</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置签名文件</span></div><div class=\"line\">    signingConfigs &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            <span class=\"function\">storeFile <span class=\"title\">file</span><span class=\"params\">(pStoreFile)</span></span></div><div class=\"line\">            storePassword pStorePassword</div><div class=\"line\">            keyAlias pKeyAlias</div><div class=\"line\">            keyPassword pKeyPassword</div><div class=\"line\">        &#125;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            <span class=\"function\">storeFile <span class=\"title\">file</span><span class=\"params\">(pStoreFile)</span></span></div><div class=\"line\">            storePassword pStorePassword</div><div class=\"line\">            keyAlias pKeyAlias</div><div class=\"line\">            keyPassword pKeyPassword</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>然后在<code>gradle.properties</code>中配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 签名信息</div><div class=\"line\">pStoreFile = ./xxxxx.keystore</div><div class=\"line\">pStorePassword = xxxxx</div><div class=\"line\">pKeyAlias = xxxxx</div><div class=\"line\">pKeyPassword = xxxxx</div></pre></td></tr></table></figure>\n<h3 id=\"多渠道打包\"><a href=\"#多渠道打包\" class=\"headerlink\" title=\"多渠道打包\"></a>多渠道打包</h3><blockquote>\n<p>过程相对比较复杂，且网上很多教程，AS3.0和以上的版本略有不同就不列出详细信息</p>\n</blockquote>\n<p>在清单文件创建占位符 -&gt; 配脚本 -&gt; 生成重命名包(注意AS3.0变化)</p>\n<p><strong><em>系统有一个BuildConfig类文件，是无法改变值的。</em></strong>里面有一些常用的配置参数，比如版本号什么的，我们可以手动配置，然后从这个类里面取值。<br>手动配置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildTypes&#123;</div><div class=\"line\">  xys&#123;</div><div class=\"line\">     buildConfigField <span class=\"string\">\"boolean\"</span>,<span class=\"string\">\"testFlag\"</span>,<span class=\"string\">\"false\"</span></div><div class=\"line\">     signingConfig signingConfig.xys</div><div class=\"line\">     applicaitonIdSuffix <span class=\"string\">\".xys\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuildConfig</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG = Boolean.parseBoolean(<span class=\"string\">\"true\"</span>);</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String APPLICATION_ID = <span class=\"string\">\"com.example.jingbin.cloudreader\"</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BUILD_TYPE = <span class=\"string\">\"debug\"</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FLAVOR = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> VERSION_CODE = <span class=\"number\">14</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String VERSION_NAME = <span class=\"string\">\"2.0.0\"</span>;</div><div class=\"line\">  <span class=\"comment\">// Fields from build type: xys 额外生成了这个</span></div><div class=\"line\">  pubic <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> testFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h3><p>引用Maven中央库：</p>\n<ul>\n<li><a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"external\">http://mvnrepository.com/</a> 上传和使用</li>\n<li>使用Gradle上传aar到Maven库</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    gradle编译加速</span></div><div class=\"line\">    dexOptions &#123;</div><div class=\"line\">        incremental <span class=\"keyword\">true</span></div><div class=\"line\">        javaMaxHeapSize <span class=\"string\">\"4g\"</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>不同包或相同包下，最好不要出现相同的文件，Merge到一起时，相同的资源名就会发生冲突！</p>\n</blockquote>\n<h3 id=\"Grovvy\"><a href=\"#Grovvy\" class=\"headerlink\" title=\"Grovvy\"></a>Grovvy</h3><blockquote>\n<p>Grovvy(语言)对于Gradle(脚本)，好比于Java对于Android。</p>\n</blockquote>\n<p>Grovvy核心是Task。<br>Task依赖：增加一个依赖方法，连接起来，让不在一起的Task能够有一个先后执行的关系。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">三个阶段</th>\n<th style=\"text-align:center\">do Something</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Initiliacation</td>\n<td style=\"text-align:center\">初始化阶段，执行项目中的setting.gradle脚本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Configration</td>\n<td style=\"text-align:center\">解析每个Profect中的build.gradle脚本，生成有向关系图–tashgrash</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Build</td>\n<td style=\"text-align:center\">编译运行阶段，按照tashgraph执行编译</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"深藏功与名的开发者工具\"><a href=\"#深藏功与名的开发者工具\" class=\"headerlink\" title=\"深藏功与名的开发者工具\"></a>深藏功与名的开发者工具</h2><h3 id=\"AAPT\"><a href=\"#AAPT\" class=\"headerlink\" title=\"AAPT\"></a>AAPT</h3><blockquote>\n<p>Android Asset Packaging Tool  -&gt; SDK - build-tools</p>\n</blockquote>\n<p>可以查看，创建，修改压缩文件(Zip、jar、APK),也可将资源编译成二进制文件。<br>查看报信息，资源目录等。</p>\n<h3 id=\"Lint\"><a href=\"#Lint\" class=\"headerlink\" title=\"Lint\"></a>Lint</h3><p>用于检测各项目中(包含库)中的一些错误问题，比如资源未用或过时的api等。<br>在AS命令行使用<code>gradle lint</code>。(如果gradle版本更新则要更改配置)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用lint检查代码时错误的话停止，加上这个之后就会继续，但是一般不启动lint，因为启动后会编译很慢</span></div><div class=\"line\">lintOptions&#123;</div><div class=\"line\">\tabortOnError <span class=\"keyword\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"无线调试\"><a href=\"#无线调试\" class=\"headerlink\" title=\"无线调试\"></a>无线调试</h3><p>基于ADB的TCP/IP模式 - 《图解TCP/IP》</p>\n<h3 id=\"9Patch工具\"><a href=\"#9Patch工具\" class=\"headerlink\" title=\"9Patch工具\"></a>9Patch工具</h3><p>SDK -&gt; tools -&gt; draw9patch(画单边就行)<br>在AS中点击鼠标右键生成9patch图</p>\n<h3 id=\"Hierarchy-viewer\"><a href=\"#Hierarchy-viewer\" class=\"headerlink\" title=\"Hierarchy viewer\"></a>Hierarchy viewer</h3><p>检测UI性能的工具<br>testCompile 只有Debug生效，Release解除</p>\n<h3 id=\"查看UI\"><a href=\"#查看UI\" class=\"headerlink\" title=\"查看UI\"></a>查看UI</h3><blockquote>\n<p>iautomatorviewer</p>\n</blockquote>\n<h3 id=\"开发者模式\"><a href=\"#开发者模式\" class=\"headerlink\" title=\"开发者模式\"></a>开发者模式</h3><blockquote>\n<p>调试GPU过渡绘制</p>\n</blockquote>\n<h2 id=\"App背后的故事-性能检测与分析工具\"><a href=\"#App背后的故事-性能检测与分析工具\" class=\"headerlink\" title=\"App背后的故事 - 性能检测与分析工具\"></a>App背后的故事 - 性能检测与分析工具</h2><h3 id=\"UI性能分析\"><a href=\"#UI性能分析\" class=\"headerlink\" title=\"UI性能分析\"></a>UI性能分析</h3><ul>\n<li>调试GPU过渡绘制</li>\n<li>16ms黄金准则</li>\n<li>布局核心准则：<ul>\n<li>尽量使布局的view树扁平，降低布局的层次</li>\n<li><strong>Google建议View不宜超过8层</strong></li>\n<li>使用组合控件</li>\n</ul>\n</li>\n<li>LinearLayout与RelativeLayout<ul>\n<li>使用LinearLayout：保证层级不深</li>\n<li>使用RelativeLayout：避免嵌套</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Hierarchy viewer：检测UI性能的工具</li>\n<li>Merge与Viewstub  布局懒加载</li>\n<li>图片重绘 Overdraw<ul>\n<li>Debug Gpu Overdraw查看重绘界面</li>\n<li>1、改善布局，避免重叠</li>\n<li>2、控件与主背景颜色相同：可移除控件背景</li>\n<li>3、自定义view背景，使用dipRect属性减少重绘区域</li>\n</ul>\n</li>\n<li>Profile Gpu rendering<ul>\n<li>在开发者模式中，GPU呈现模式分析 -&gt; 在屏幕上显示条形图</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内存区分\"><a href=\"#内存区分\" class=\"headerlink\" title=\"内存区分\"></a>内存区分</h3><blockquote>\n<ul>\n<li>寄存器 Registers：用于存储指令、地址、数据。</li>\n<li>栈 Stack：存放基本类型的数据、对象的引用和函数地址等，由系统控制。</li>\n<li>堆 Heap：存放对象本身和数组，由开发者控制。</li>\n<li>静态域 static field：存储静态变量。</li>\n<li>常量池 constant pool：存储常量。</li>\n</ul>\n</blockquote>\n<p>开发者能够控制的内存，基本在于堆和栈区域，他们的区别如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">堆/栈</th>\n<th style=\"text-align:center\">GC管理</th>\n<th style=\"text-align:center\">存取速度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">推</td>\n<td style=\"text-align:center\">由GC系统控制。变量生命周期结束后，由GC系统决定何时回收</td>\n<td style=\"text-align:center\">慢</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">栈</td>\n<td style=\"text-align:center\">由虚拟机控制。变量生命周期结束后，由虚拟机释放该变量占用的内存空间</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n</tbody>\n</table>\n<p>常用的内存类型：</p>\n<ul>\n<li>VSS - Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）。</li>\n<li>RSS - Resident Set Size 实际使用物理内存（包含共享库占用的内存）。</li>\n<li>PSS - Proportinal Set size 实际使用的物理内存（比例分配共享库占用的内存）。</li>\n<li>USS - Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）。</li>\n</ul>\n<p>一般来说内存占用大小有如下规律：VSS≥RSS≥PSS≥USS</p>\n<h3 id=\"GC系统\"><a href=\"#GC系统\" class=\"headerlink\" title=\"GC系统\"></a>GC系统</h3><p>GC系统遵循GC Root搜索算法，根据是否包含其他对象的引用来判断是否需要进行GC。在Android2.3之后，系统修改了GC，将GC作为并发线程，同时每次GC并不会遍历整个Heap，而是只遍历一部分内存。</p>\n<p>GC系统根据GC Root算法进行GC工作，该算法会以一个GC Root对象为起点，搜索与之相关联的对象。如果某个对象与GC Root对象没有找到引用链，则表示該对象需要进行回收，常见的GCRoot对象有以下几种。</p>\n<ul>\n<li>class：由System class loader 加载的对象。</li>\n<li>JNI：jni相关调用的引用、变量、参数。</li>\n<li>Thread：活着的线程。</li>\n<li>Stack：栈中的对象。</li>\n<li>静态：方法区类的静态属性引用的对象。</li>\n<li>常量：方法区中的常量引用的对象（final类型）。</li>\n</ul>\n<h3 id=\"获取更多内存\"><a href=\"#获取更多内存\" class=\"headerlink\" title=\"获取更多内存\"></a>获取更多内存</h3><h4 id=\"通过子线程\"><a href=\"#通过子线程\" class=\"headerlink\" title=\"通过子线程\"></a>通过子线程</h4><blockquote>\n<p>安卓系统的内存分配通过进程分配。</p>\n</blockquote>\n<p>WebView内存回收非常麻烦，需要运行在单独进程中(android:process)。<br>然后通过kill process回收内存。</p>\n<h4 id=\"Native-Heap\"><a href=\"#Native-Heap\" class=\"headerlink\" title=\"Native Heap\"></a>Native Heap</h4><blockquote>\n<p>安卓系统限制的是JavaHeap的内存大小。</p>\n</blockquote>\n<p>系统控制的，不受大小限制  -&gt; Fresco.</p>\n<h4 id=\"openGL\"><a href=\"#openGL\" class=\"headerlink\" title=\"openGL\"></a>openGL</h4><blockquote>\n<p>图像处理</p>\n</blockquote>\n<h4 id=\"LargeHeap\"><a href=\"#LargeHeap\" class=\"headerlink\" title=\"LargeHeap\"></a>LargeHeap</h4><p>通过清单文件配置<br>加大GC难度，使GC变慢，退到后台时，很容易被回收。</p>\n<h4 id=\"系统内存警告\"><a href=\"#系统内存警告\" class=\"headerlink\" title=\"系统内存警告\"></a>系统内存警告</h4><blockquote>\n<p>根据情况释放内存</p>\n</blockquote>\n<ul>\n<li>onLowMemory</li>\n<li>onTrimMemory</li>\n</ul>\n<h4 id=\"检测内存泄漏工具\"><a href=\"#检测内存泄漏工具\" class=\"headerlink\" title=\"检测内存泄漏工具\"></a>检测内存泄漏工具</h4><ul>\n<li>MAT - Memory Analysis Tool</li>\n<li>LeakCanary</li>\n</ul>\n","categories":["Android"],"tags":["Android","Books","工具"]},{"title":"京东CPS商品推广接入流程","url":"http://jinbeen.com/2018/02/02/京东CPS商品推广接入流程/","content":"<blockquote>\n<p>京东CPS与阿里百川CPS有很大不同，认清基本概念后集成时就容易的多。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h4><p>京东CPS，只需要一个链接足以，这条链接放在自身的WebViewActivity中，如果设置了唤起App，则链接会返回一个打开京东App的规则字符串，我们获取到后跳转到京东App就可以了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-3e1438db83abe8c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"京东cps，设置推广位\"></p>\n<p>设置后得到一个链接，然后用自身的<code>WebView</code>请求，当然也可以用系统自带的浏览器打开，可以直接唤起App。有时候我们不想用户离开自己的应用，使用自身的App的<code>WebView</code>控件打开就成了首选，这里就需要配置一些参数。</p>\n<p><a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebViewClient.java\" target=\"_blank\" rel=\"external\">继承<code>WebViewClient</code>复写里面的<code>shouldOverrideUrlLoading</code>方法：</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"deprecation\"</span>)</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//        DebugUtil.error(\"----url:\"+url);</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(url)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (url.startsWith(<span class=\"string\">\"http:\"</span>) || url.startsWith(<span class=\"string\">\"https:\"</span>)) &#123;</div><div class=\"line\">            <span class=\"comment\">// 可能有提示下载Apk文件</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (url.contains(<span class=\"string\">\".apk\"</span>)) &#123;</div><div class=\"line\">                startActivity(url);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        startActivity(url);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Intent intent1 = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">            intent1.setAction(<span class=\"string\">\"android.intent.action.VIEW\"</span>);</div><div class=\"line\">            Uri uri = Uri.parse(url);</div><div class=\"line\">            intent1.setData(uri);</div><div class=\"line\">            intent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">            mActivity.startActivity(intent1);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>请求京东的推广url后，会返回一串这样的URL SCHEME：<code>openApp.jdMobile://virtual?params={参数}</code><br>这就是跳转京东页面的SCHEME</p>\n<h4 id=\"另外其他App的URL-SCHEME\"><a href=\"#另外其他App的URL-SCHEME\" class=\"headerlink\" title=\"另外其他App的URL SCHEME\"></a>另外其他App的URL SCHEME</h4><blockquote>\n<p>淘宝： taobao://<br>微博： weibo://qrcode<br>微信： weixin://scanqrcode<br>支付宝： alipayqr://platformapi/startapp?saId=10000007<br>豆瓣： douban://<br>京东： openApp.jdMobile://virtual?params={参数}<br>电话： mobilephone://<br>备忘录： mobilenotes://<br>Chrome谷歌浏览器： googlechrome://<br>12306订票助手： trainassist://<br>飞信： fetion://<br>豆瓣FM： doubanradio://<br>爱奇艺PPS： ppstream://<br>哔哩哔哩动画： bilibili://<br>56视频： com.56Video://<br>365日历： rili365://<br>58同城： wbmain://<br>遇见： iaround://<br>陌陌： momochat://<br>有道词典： yddict://<br>优酷： youku://<br>掌阅iReader： iReader://<br>天涯社区： tianya://<br>天气通Pro： sinaweatherpro://<br>天气通： sinaweather://<br>墨迹天气： rm434209233MojiWeather://<br>腾讯新闻： qqnews://<br>腾讯微云： weiyun://<br>腾讯地图： sosomap://<br>淘宝旅行： taobaotravel://<br>人人： renrenios://</p>\n</blockquote>\n<h4 id=\"阿里百川CPS与京东CPS两者对比：\"><a href=\"#阿里百川CPS与京东CPS两者对比：\" class=\"headerlink\" title=\"阿里百川CPS与京东CPS两者对比：\"></a>阿里百川CPS与京东CPS两者对比：</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CPS类别</th>\n<th style=\"text-align:center\">是否需要SDK</th>\n<th style=\"text-align:center\">WebView处理</th>\n<th style=\"text-align:center\">打开App方式</th>\n<th style=\"text-align:center\">App左侧是否有标识</th>\n<th style=\"text-align:center\">接入复杂程度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">阿里百川</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">无需处理</td>\n<td style=\"text-align:center\">通过SDK打开</td>\n<td style=\"text-align:center\">有</td>\n<td style=\"text-align:center\">相对复杂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">京东</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">要处理</td>\n<td style=\"text-align:center\">使用规则协议打开</td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">简单</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>联系我：<a href=\"https://github.com/youlookwhat\" target=\"_blank\" rel=\"external\">GitHub</a>、<a href=\"https://www.jianshu.com/u/e43c6e979831\" target=\"_blank\" rel=\"external\">简书</a></p>\n</blockquote>\n","categories":["Android"],"tags":["Android"]},{"title":"Toolbar去除标题与返回键间的间距","url":"http://jinbeen.com/2018/01/22/Toolbar去除标题与返回键间的间距/","content":"<p>很早就遇到一个问题，如下图：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-13ece64c14c7ace4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"间距过大\"></p>\n<a id=\"more\"></a>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-72bee3d8782a0948.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"间距正常\"></p>\n<p>标题和左侧的返回键间距过大，之前在做<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">CloudReader</a>的时候就遇到了，一直没有解决，由于自身强迫症，心里始终和这个过不去，就研究了很久终于解决了。</p>\n<p>之前在网上找了各种解决方法，比如给ToolBar设置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:contentInsetLeft=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">app:contentInsetStart=<span class=\"string\">\"0dp\"</span></div></pre></td></tr></table></figure></p>\n<p>不直接给ToolBar设置字体，在ToolBar里面包裹TextView，还是不行。<br>等等…</p>\n<p>最后：<br>将<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mTitleToolBar.setNavigationIcon(R.drawable.icon_back);</div></pre></td></tr></table></figure></p>\n<p>去掉后，发现标题顶格了，于是怀疑是NavigationIcon的问题。将<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:navigationIcon=<span class=\"string\">\"@drawable/icon_back\"</span></div></pre></td></tr></table></figure></p>\n<p>设置在ToolBar属性上后可以直接看到效果，开始考虑是不是有一个属性是设置NavigationIcon与title之间的间距，果然发现了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:contentInsetStartWithNavigation=<span class=\"string\">\"0dp\"</span></div></pre></td></tr></table></figure></p>\n<p>附上完整代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v7.widget.Toolbar xmlns:app=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">            android:id=<span class=\"string\">\"@+id/title_tool_bar\"</span></div><div class=\"line\">            android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            android:layout_height=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            android:background=<span class=\"string\">\"@color/colorTheme\"</span></div><div class=\"line\">            app:contentInsetLeft=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            app:contentInsetStart=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            app:contentInsetStartWithNavigation=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">            app:layout_scrollFlags=<span class=\"string\">\"enterAlways|scroll\"</span></div><div class=\"line\">            app:navigationIcon=<span class=\"string\">\"@drawable/icon_back\"</span></div><div class=\"line\">            app:popupTheme=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></div><div class=\"line\">            app:theme=<span class=\"string\">\"@style/ToolbarStyle\"</span></div><div class=\"line\">            app:title=<span class=\"string\">\"标题\"</span></div><div class=\"line\">            app:titleTextColor=<span class=\"string\">\"@color/colorWhite\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>后来直接搜了这个属性查了一下，发现之前还是有很多人遇到过，只不过我没检索出来，推荐一个分析的很好的：</p>\n<ul>\n<li><a href=\"http://blog.qiji.tech/archives/15899\" target=\"_blank\" rel=\"external\">关于Toolbar中navigationIcon和title之间距离及展开</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40155239/appcontentinsetstartwithnavigation-0dp-isnt-working-in-toolbar\" target=\"_blank\" rel=\"external\">app:contentInsetStartWithNavigation=“0dp” isn’t working in ToolBar</a> - 在外面包裹<code>AppBarLayout</code>应该也能达到效果</li>\n</ul>\n","categories":["Android"],"tags":["Android"]},{"title":"Android 阿里百川cps SDK接入流程","url":"http://jinbeen.com/2018/01/19/Android-阿里百川cps-SDK接入流程/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>因公司业务需求，需接入阿里百川SDK和京东联盟cps相关服务，为了跳到淘宝和京东，用户购买后得到佣金。接入过程中遇到很多坑，网上相关资料也甚少，虽然东西不算多，但花了不少时间，在此记录下来，为了以后的人能有个参考。<br>这里只跳转到天猫，淘宝的产品详情页，京东产品详情会另作文章分享。</p>\n<a id=\"more\"></a>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><blockquote>\n<p><a href=\"http://console.baichuan.taobao.com/applications.htm?spm=a3c0d.8115327.0.0\" target=\"_blank\" rel=\"external\">阿里百川 开发者控制台</a></p>\n</blockquote>\n<h4 id=\"1-申请百川无线应用\"><a href=\"#1-申请百川无线应用\" class=\"headerlink\" title=\"1.申请百川无线应用\"></a>1.申请百川无线应用</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-ad909bb9727b6ca0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开发者控制台 应用管理\"></p>\n<p>注意：Android端和IOS端各申请一个应用，虽然会提示名字不能重复但不影响，也是可以正常使用的。</p>\n<h4 id=\"2-开通业务产品的使用权限\"><a href=\"#2-开通业务产品的使用权限\" class=\"headerlink\" title=\"2.开通业务产品的使用权限\"></a>2.开通业务产品的使用权限</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-32afda3a479b56e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"业务产品的使用权限\"></p>\n<h4 id=\"3-获取安全图片\"><a href=\"#3-获取安全图片\" class=\"headerlink\" title=\"3.获取安全图片\"></a>3.获取安全图片</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-a03a525632aaa5f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"获取安全图片\"></p>\n<p><strong>注意：<br>1.一定要使用gradle3.0以下的编译环境的包，不然会提示“上传失败”(这个坑了我好长时间)。<br>2.对应的keystore要一致，虽然我没有遇到问题，但看到其他人反馈过，小心为妙。</strong></p>\n<h3 id=\"接入\"><a href=\"#接入\" class=\"headerlink\" title=\"接入\"></a>接入</h3><hr>\n<p><a href=\"http://console.baichuan.taobao.com/sdkdownload.htm?spm=a3c0d.8115327.0.0&amp;appId=71718\" target=\"_blank\" rel=\"external\">下载百川电商SDK</a><br>里面会有很详细的说明，这里只快速的过一遍，总结一下自己遇到的坑及解决方法。</p>\n<h4 id=\"添加安全图片-yw1222-jpg\"><a href=\"#添加安全图片-yw1222-jpg\" class=\"headerlink\" title=\"添加安全图片 yw1222.jpg\"></a>添加安全图片 yw1222.jpg</h4><p>获得安全图片，并放在/res/drawable目录下，如果已经有安全图片，需要替换。</p>\n<h4 id=\"项目中的build-gradle文件\"><a href=\"#项目中的build-gradle文件\" class=\"headerlink\" title=\"项目中的build.gradle文件\"></a>项目中的build.gradle文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">  maven &#123;</div><div class=\"line\">            url <span class=\"string\">'http://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">classpath <span class=\"string\">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span><span class=\"comment\">//Added line</span></div><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">        maven &#123;</div><div class=\"line\">            url <span class=\"string\">'https://maven.google.com/'</span></div><div class=\"line\">            name <span class=\"string\">'Google'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        maven &#123;</div><div class=\"line\">            url <span class=\"string\">'http://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"modle的build-gradle文件\"><a href=\"#modle的build-gradle文件\" class=\"headerlink\" title=\"modle的build.gradle文件\"></a>modle的build.gradle文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\"></div><div class=\"line\">    maven &#123;</div><div class=\"line\">        url <span class=\"string\">\"http://mvnrepo.alibaba-inc.com/mvn/repository\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs <span class=\"string\">'libs'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//fastjson</span></div><div class=\"line\">    compile <span class=\"string\">'com.alibaba:fastjson:1.2.9'</span></div><div class=\"line\">    <span class=\"comment\">//支付</span></div><div class=\"line\">    compile <span class=\"string\">'com.alibaba.alipay:alipaySingle:20160825@jar'</span></div><div class=\"line\">    <span class=\"comment\">//登陆</span></div><div class=\"line\">    compile <span class=\"string\">'com.ali.auth.sdk:alibabauth_core:1.4.3@jar'</span></div><div class=\"line\">    compile <span class=\"string\">'com.ali.auth.sdk:alibabauth_ui:1.4.3@aar'</span></div><div class=\"line\">    compile <span class=\"string\">'com.ali.auth.sdk:alibabauth_ext:1.4.3@jar'</span></div><div class=\"line\">    <span class=\"comment\">//安全基础</span></div><div class=\"line\">    compile <span class=\"string\">'com.taobao.android:securityguardaar3:5.1.81@aar'</span></div><div class=\"line\">    <span class=\"comment\">//Mtop网关</span></div><div class=\"line\">    compile <span class=\"string\">'com.taobao.android:mtopsdk_allinone_open:1.2.2.4@jar'</span></div><div class=\"line\">    <span class=\"comment\">//applink</span></div><div class=\"line\">    compile <span class=\"string\">'com.alibaba.sdk.android:alibc_link_partner:1.1.0.0'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//UT (因为和友盟推送的jar重复，所以去掉，不然会报错！！！)</span></div><div class=\"line\">    <span class=\"comment\">//compile 'com.taobao.android:utdid4all:1.1.5.3_proguard@jar'</span></div><div class=\"line\">    compile <span class=\"string\">'com.alibaba.mtl:app-monitor-sdk:2.5.1.3_for_bc_proguard@jar'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//联盟SDK</span></div><div class=\"line\">    compile <span class=\"string\">'com.alimama.tunion.sdk:tuniontradesdk:0.3.2'</span></div><div class=\"line\">    <span class=\"comment\">//电商SDK</span></div><div class=\"line\">    compile <span class=\"string\">'com.alibaba.sdk.android:alibc_trade_common:3.1.1.206'</span></div><div class=\"line\">    compile <span class=\"string\">'com.alibaba.sdk.android:alibc_trade_biz:3.1.1.206'</span></div><div class=\"line\">    compile <span class=\"string\">'com.alibaba.sdk.android:alibc_trade_sdk:3.1.1.206'</span></div></pre></td></tr></table></figure>\n<h4 id=\"Proguard-规则\"><a href=\"#Proguard-规则\" class=\"headerlink\" title=\"Proguard 规则\"></a>Proguard 规则</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">-keepattributes Signature</div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sun</span>.<span class=\"title\">misc</span>.<span class=\"title\">Unsafe</span> </span>&#123; *; &#125;</div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">taobao</span>.** </span>&#123;*;&#125;</div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">alibaba</span>.** </span>&#123;*;&#125;</div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">alipay</span>.** </span>&#123;*;&#125;</div><div class=\"line\">-dontwarn com.taobao.**</div><div class=\"line\">-dontwarn com.alibaba.**</div><div class=\"line\">-dontwarn com.alipay.**</div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">ut</span>.** </span>&#123;*;&#125;</div><div class=\"line\">-dontwarn com.ut.**</div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">ta</span>.** </span>&#123;*;&#125;</div><div class=\"line\">-dontwarn com.ta.**</div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">org</span>.<span class=\"title\">json</span>.** </span>&#123;*;&#125;</div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">ali</span>.<span class=\"title\">auth</span>.**  </span>&#123;*;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--cps--&gt;</div><div class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"</span> /&gt;</div><div class=\"line\">tools:replace=<span class=\"string\">\"android:allowBackup\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"Application初始化\"><a href=\"#Application初始化\" class=\"headerlink\" title=\"Application初始化\"></a>Application初始化</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// AlibcTradeCommon.turnOnDebug();</span></div><div class=\"line\"><span class=\"comment\">// AlibcTradeBiz.turnOnDebug();</span></div><div class=\"line\"><span class=\"comment\">//电商SDK初始化</span></div><div class=\"line\">AlibcTradeSDK.asyncInit(app, <span class=\"keyword\">new</span> AlibcTradeInitCallback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(app, <span class=\"string\">\"初始化成功\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(app, <span class=\"string\">\"初始化失败,错误码=\"</span>+code+<span class=\"string\">\" / 错误消息=\"</span>+msg, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String H5 = <span class=\"string\">\"H5\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TAOBAO = <span class=\"string\">\"taobao\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TMALL = <span class=\"string\">\"tmall\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String AUTO = <span class=\"string\">\"auto\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showDetailPage</span><span class=\"params\">(Activity activity, String id, String type)</span> </span>&#123;</div><div class=\"line\">        AlibcShowParams alibcShowParams;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> H5:</div><div class=\"line\">                alibcShowParams = <span class=\"keyword\">new</span> AlibcShowParams(OpenType.H5, <span class=\"keyword\">false</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> TAOBAO:</div><div class=\"line\">                alibcShowParams = <span class=\"keyword\">new</span> AlibcShowParams(OpenType.Native, <span class=\"keyword\">false</span>);</div><div class=\"line\">                alibcShowParams.setClientType(<span class=\"string\">\"taobao_scheme\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> TMALL:</div><div class=\"line\">                alibcShowParams = <span class=\"keyword\">new</span> AlibcShowParams(OpenType.Native, <span class=\"keyword\">false</span>);</div><div class=\"line\">                alibcShowParams.setClientType(<span class=\"string\">\"tmall_scheme\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> AUTO:</div><div class=\"line\">                alibcShowParams = <span class=\"keyword\">new</span> AlibcShowParams(OpenType.Auto, <span class=\"keyword\">false</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                alibcShowParams = <span class=\"keyword\">new</span> AlibcShowParams(OpenType.Auto, <span class=\"keyword\">false</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        AlibcBasePage alibcBasePage = <span class=\"keyword\">new</span> AlibcDetailPage(id);</div><div class=\"line\">        HashMap&lt;String, String&gt; exParams = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">        <span class=\"comment\">// 固定写法</span></div><div class=\"line\">        exParams.put(AlibcConstants.ISV_CODE, <span class=\"string\">\"appisvcode\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若非淘客taokeParams设置为null即可   mm_memberId_siteId_adzoneId</span></div><div class=\"line\">        <span class=\"comment\">// pid:广告位id</span></div><div class=\"line\">        AlibcTaokeParams alibcTaokeParams = <span class=\"keyword\">new</span> AlibcTaokeParams();</div><div class=\"line\">        <span class=\"comment\">// adzoneid 为mm_memberId_siteId_adzoneId最后一位</span></div><div class=\"line\">        alibcTaokeParams.adzoneid = <span class=\"string\">\"33333\"</span>;</div><div class=\"line\">        alibcTaokeParams.pid = <span class=\"string\">\"mm_11111_22222_33333\"</span>;</div><div class=\"line\">        alibcTaokeParams.subPid = <span class=\"string\">\"mm_11111_22222_33333\"</span>;</div><div class=\"line\">        alibcTaokeParams.extraParams = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">        alibcTaokeParams.extraParams.put(<span class=\"string\">\"taokeAppkey\"</span>, <span class=\"string\">\"xxxxxxx\"</span>);</div><div class=\"line\"></div><div class=\"line\">        AlibcTrade.show(activity, alibcBasePage, alibcShowParams, alibcTaokeParams, exParams, <span class=\"keyword\">new</span> AlibcTradeCallback() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTradeSuccess</span><span class=\"params\">(AlibcTradeResult alibcTradeResult)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String s)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//                Toast.makeText(App.getInstance(), \"初始化失败,错误码=\" + i + \" / 错误消息=\" + s, Toast.LENGTH_SHORT).show();</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 跳淘宝详情</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showTaobaoDetail</span><span class=\"params\">(Activity activity, String id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Tools.isApplicationAvilible(activity, <span class=\"string\">\"com.taobao.taobao\"</span>)) &#123;</div><div class=\"line\">            showDetailPage(activity, id, TAOBAO);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            showDetailPage(activity, id, AUTO);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 跳天猫详情</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showTmallDetail</span><span class=\"params\">(Activity activity, String id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Tools.isApplicationAvilible(activity, <span class=\"string\">\"com.tmall.wireless\"</span>)) &#123;</div><div class=\"line\">            showDetailPage(activity, id, TMALL);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            showDetailPage(activity, id, AUTO);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"资源销毁\"><a href=\"#资源销毁\" class=\"headerlink\" title=\"资源销毁\"></a>资源销毁</h4><p>在使用完成后，可以调用destroy方法，释放百川相应的资源引用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AlibcTradeSDK.destroy();</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/e8d1fad84d3f\" target=\"_blank\" rel=\"external\">阿里百川电商SDK(3.1)接入与使用</a></li>\n<li><a href=\"http://baichuan.taobao.com/doc2/detail.htm?spm=a3c0d.7629140.0.0.KgnVV1&amp;treeId=129&amp;articleId=104306&amp;docType=1\" target=\"_blank\" rel=\"external\">电商交易功能详解－Android</a></li>\n<li><a href=\"http://bigdata.taobao.com/docs/doc.htm?spm=a219a.7629140.0.0.L8mb8G&amp;treeId=129&amp;articleId=106491&amp;docType=1\" target=\"_blank\" rel=\"external\">百川电商SDK接入Android常见问题</a></li>\n<li><a href=\"http://bigdata.taobao.com/docs/api.htm?scopeId=11655&amp;apiId=26616\" target=\"_blank\" rel=\"external\"> 淘宝客基础API</a></li>\n</ul>\n<blockquote>\n<p>联系我：<a href=\"https://github.com/youlookwhat\" target=\"_blank\" rel=\"external\">GitHub</a>、<a href=\"https://www.jianshu.com/u/e43c6e979831\" target=\"_blank\" rel=\"external\">简书</a></p>\n</blockquote>\n","categories":["Android"],"tags":["Android"]},{"title":"《非暴力沟通》读书笔记","url":"http://jinbeen.com/2018/01/07/《非暴力沟通》读书笔记/","content":"<p><a href=\"https://book.douban.com/subject/3533221/\" target=\"_blank\" rel=\"external\">《非暴力沟通》</a>是2009年1月华夏出版社出版的图书，作者是马歇尔·卢森堡。著名的马歇尔·卢森堡博士发现了一种沟通方式，依照它来谈话和聆听，能使人们情意相通，和谐相处，这就是”非暴力沟通”。<br><strong><em>非暴力最重要的应用也许是培养对自己的爱。</em></strong><br><a id=\"more\"></a></p>\n<blockquote>\n<p>很早之前就看了，大约大半年了，之前记录日记本上，现在整理出来。</p>\n</blockquote>\n<h3 id=\"听到不中听的话时，我们有四种选择：\"><a href=\"#听到不中听的话时，我们有四种选择：\" class=\"headerlink\" title=\"听到不中听的话时，我们有四种选择：\"></a>听到不中听的话时，我们有四种选择：</h3><ul>\n<li>责备自己</li>\n<li>指责他人</li>\n<li>体会自己的感受和需要 √</li>\n<li>体会他人的感受和需要 √</li>\n</ul>\n<blockquote>\n<p><strong>观察 - 感受 - 需要 - 请求</strong></p>\n</blockquote>\n<h3 id=\"需要的三个阶段\"><a href=\"#需要的三个阶段\" class=\"headerlink\" title=\"需要的三个阶段:\"></a>需要的三个阶段:</h3><table>\n<thead>\n<tr>\n<th>“情感的奴隶”</th>\n<th>“面部可憎”</th>\n<th>“生活的主人”</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>委曲求全</td>\n<td>说出心里话</td>\n<td>尊重他人的需要</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>既表达自己，又关心他人</p>\n</blockquote>\n<p>我希望你告诉我，即使不喜欢我做的一些事情，你仍然会和我在一起，<strong><em>请让我成为我自己</em></strong>的明确要求。</p>\n<p>如果一个人想要别人了解他的处境，听到的却是安慰和建议，那么，他就有可能觉得不太舒服。</p>\n<p>沟通可以是一扇窗，也可以是一面墙。</p>\n<p>我们无法给别人我们自己都没做的东西。</p>\n<ul>\n<li>1.体会自己的感受和需要。</li>\n<li>2.大声地提出请求。</li>\n<li>3.换一个环境。</li>\n</ul>\n<h3 id=\"观察\"><a href=\"#观察\" class=\"headerlink\" title=\"观察\"></a>观察</h3><p>我们仔细观察正在发生的事情，并清楚地说出观察结果<br>注意观察和评论的区别。<br><strong>不带评论的观察是人类智力的最高形式</strong></p>\n<h3 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h3><h4 id=\"需要得到满足时的感受\"><a href=\"#需要得到满足时的感受\" class=\"headerlink\" title=\"需要得到满足时的感受\"></a>需要得到满足时的感受</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">兴奋</th>\n<th style=\"text-align:center\">喜悦</th>\n<th style=\"text-align:center\">欣喜</th>\n<th style=\"text-align:center\">甜蜜</th>\n<th style=\"text-align:center\">精力充沛</th>\n<th style=\"text-align:center\">兴高采烈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">感激</td>\n<td style=\"text-align:center\">感动</td>\n<td style=\"text-align:center\">乐观</td>\n<td style=\"text-align:center\">自信</td>\n<td style=\"text-align:center\">振作</td>\n<td style=\"text-align:center\">开心</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">高兴</td>\n<td style=\"text-align:center\">快乐</td>\n<td style=\"text-align:center\">愉快</td>\n<td style=\"text-align:center\">幸福</td>\n<td style=\"text-align:center\">陶醉</td>\n<td style=\"text-align:center\">满足</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">平静</td>\n<td style=\"text-align:center\">自在</td>\n<td style=\"text-align:center\">舒适</td>\n<td style=\"text-align:center\">放松</td>\n<td style=\"text-align:center\">踏实</td>\n<td style=\"text-align:center\">安全</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">温暖</td>\n<td style=\"text-align:center\">放心</td>\n<td style=\"text-align:center\">心旷神怡</td>\n<td style=\"text-align:center\">喜出望外</td>\n<td style=\"text-align:center\">无忧无虑</td>\n<td style=\"text-align:center\">安心</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"需要没有得到满足时的感受\"><a href=\"#需要没有得到满足时的感受\" class=\"headerlink\" title=\"需要没有得到满足时的感受\"></a>需要没有得到满足时的感受</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">害怕</th>\n<th style=\"text-align:center\">担心</th>\n<th style=\"text-align:center\">焦虑</th>\n<th style=\"text-align:center\">着急</th>\n<th style=\"text-align:center\">紧张</th>\n<th style=\"text-align:center\">心神不灵</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">心烦意乱</td>\n<td style=\"text-align:center\">忧伤</td>\n<td style=\"text-align:center\">沮丧</td>\n<td style=\"text-align:center\">灰心</td>\n<td style=\"text-align:center\">气馁</td>\n<td style=\"text-align:center\">泄气</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">绝望</td>\n<td style=\"text-align:center\">伤感</td>\n<td style=\"text-align:center\">凄凉</td>\n<td style=\"text-align:center\">悲伤</td>\n<td style=\"text-align:center\">恼怒</td>\n<td style=\"text-align:center\">愤怒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">烦恼</td>\n<td style=\"text-align:center\">苦恼</td>\n<td style=\"text-align:center\">生气</td>\n<td style=\"text-align:center\">厌烦</td>\n<td style=\"text-align:center\">不满</td>\n<td style=\"text-align:center\">不快</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">不耐烦</td>\n<td style=\"text-align:center\">不高兴</td>\n<td style=\"text-align:center\">震惊</td>\n<td style=\"text-align:center\">失望</td>\n<td style=\"text-align:center\">困惑</td>\n<td style=\"text-align:center\">茫然</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">寂寞</td>\n<td style=\"text-align:center\">孤独</td>\n<td style=\"text-align:center\">郁闷</td>\n<td style=\"text-align:center\">难过</td>\n<td style=\"text-align:center\">悲观</td>\n<td style=\"text-align:center\">沉重</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">麻木</td>\n<td style=\"text-align:center\">精疲力竭</td>\n<td style=\"text-align:center\">萎靡不振</td>\n<td style=\"text-align:center\">疲惫不堪</td>\n<td style=\"text-align:center\">昏昏欲睡</td>\n<td style=\"text-align:center\">不舒服</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">无精打采</td>\n<td style=\"text-align:center\">尴尬</td>\n<td style=\"text-align:center\">惭愧</td>\n<td style=\"text-align:center\">内疚</td>\n<td style=\"text-align:center\">嫉妒</td>\n<td style=\"text-align:center\">遗憾</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"基本需要\"><a href=\"#基本需要\" class=\"headerlink\" title=\"基本需要\"></a>基本需要</h3><p>非暴力沟通把需要看作是有助于生命健康成长的要素。</p>\n<h4 id=\"1-自由选择\"><a href=\"#1-自由选择\" class=\"headerlink\" title=\"1.自由选择\"></a>1.自由选择</h4><p>选择梦想/目标/方向<br>自由制定计划来实现这些梦想、目标和方向</p>\n<h4 id=\"2-庆祝\"><a href=\"#2-庆祝\" class=\"headerlink\" title=\"2.庆祝\"></a>2.庆祝</h4><p>庆祝生命的创造力以及梦想的实现<br>纪念人生的失落：亲人的去世或梦想的破灭等(表达悲伤)</p>\n<h4 id=\"3-言行一致\"><a href=\"#3-言行一致\" class=\"headerlink\" title=\"3.言行一致\"></a>3.言行一致</h4><p>真诚  创造   意义  自我肯定</p>\n<h4 id=\"4-滋养身体\"><a href=\"#4-滋养身体\" class=\"headerlink\" title=\"4.滋养身体\"></a>4.滋养身体</h4><p>空气  食物  运动<br>免于病毒、细菌、昆虫及肉食性动物的伤害。<br>休息  住所  触摸 水</p>\n<h4 id=\"5-玩耍\"><a href=\"#5-玩耍\" class=\"headerlink\" title=\"5.玩耍\"></a>5.玩耍</h4><p>乐趣  欢笑</p>\n<h4 id=\"6-情意想通\"><a href=\"#6-情意想通\" class=\"headerlink\" title=\"6.情意想通\"></a>6.情意想通</h4><p>美 和谐 激励 秩序 平静</p>\n<h4 id=\"7-相互依存\"><a href=\"#7-相互依存\" class=\"headerlink\" title=\"7.相互依存\"></a>7.相互依存</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">接纳</th>\n<th style=\"text-align:center\">欣赏</th>\n<th style=\"text-align:center\">亲密关系</th>\n<th style=\"text-align:center\">社区</th>\n<th style=\"text-align:center\">体贴</th>\n<th style=\"text-align:center\">成长</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">安全感</td>\n<td style=\"text-align:center\">倾听</td>\n<td style=\"text-align:center\">诚实</td>\n<td style=\"text-align:center\">爱</td>\n<td style=\"text-align:center\">信心</td>\n<td style=\"text-align:center\">尊重</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">信任</td>\n<td style=\"text-align:center\">理解</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>诚实使我们能够认识和超越自己的局限性。</p>\n</blockquote>\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><p>我们告诉人们，为了改善生活，我们希望他们做什么。<br>我们避免使用抽象的语言，而借助具体的描述，来提出要求。</p>\n","categories":["Books"],"tags":["Books"]},{"title":"《前任3:再见前任》观后感","url":"http://jinbeen.com/2018/01/07/《前任3：再见前任》观后感/","content":"<a id=\"more\"></a>\n<h3 id=\"多余的话\"><a href=\"#多余的话\" class=\"headerlink\" title=\"多余的话\"></a>多余的话</h3><p>本来定位的是个人博客，无非是自己生活所感所想发泄之所。因为不想一个人写了自己锁起来，想有些人看见有个倾述，又有些东西不想发出来给人看，心理有时候会很矛盾。不像很多人那么有才华，写的幽默并有内涵，自持喜欢读书，看着书架很舒服，但感觉也没有读多少书。</p>\n<p>以前的很多博客都是凌晨之后更新的，我看有很多作品也是，也许经过了一天的事务，凌晨是沉淀的最佳时刻。自从健身以后凌晨就很少进行剧烈的脑力运动了，很担心会失去了健身效果，今天是健身后的第一天晚睡，就放肆一回。</p>\n<p>今天和一个高中同学的初中女同学去看了《前任3:再见前任》，第二次见面第一次约出去看电影，至于什么关系我也搞不清楚。看了之后心情很沉重，送别人回去后，回来又把《前任攻略》、《前任2:备胎大作战》刷了，看完后就很想理清楚什么。</p>\n<h3 id=\"曾经的感情\"><a href=\"#曾经的感情\" class=\"headerlink\" title=\"曾经的感情\"></a>曾经的感情</h3><blockquote>\n<p>这是一段很长的故事，之前已经写了很多很多，后来隔了一夜看了觉得好幼稚，所以这里只写重点吧。</p>\n</blockquote>\n<p>之后看了《前任2》，我觉得我错太多了。<br>女主当初那么单纯的感受就是我最初恋爱的感受。因为当时我是一个弱鸡，我觉得自己还没有能力说那句话，我给自己的定位就是我来好好努力让你接受我，和我结婚。而这就是导致我们分手的罪魁祸首。</p>\n<p>搞清自己的定位非常关键，两个人在一起不是谁对谁的好是理所当然的，我喜欢你所以我对你这么好，我愿意付出，愿意花心思在你身上。当然两个人在一起的技巧也就是套路非常重要，直白点就是会撩，可惜的是我不是这块料，不会说特好听的话，做一些暖心的事，曾经以为每个人不一样，有些人不用说很好听得话就能在一起，后来知道这样想就太错了，这是懒惰的借口。</p>\n<p>开始想改善自己的这方面的缺点，我不会演讲所以我报了专门改善演讲的课程，而两个人之间的相处天天发生，我却对这没有足够的重视。之前买了这类型的书籍，也没有看完，现在准备慢慢看这方面的，心理学，沟通类及收集一些情话。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/202104031614168.png\" alt=\"心理学系列\">   </p>\n<h3 id=\"结\"><a href=\"#结\" class=\"headerlink\" title=\"结\"></a>结</h3><p>今年除了Android方面的书籍外，开始慢慢看心理学相关的书籍。很早之前就有这个打算，今年定为学习的一年，技术和心理学，如果有时间再扩展其他的学科。</p>\n","categories":["life"],"tags":["life"]},{"title":"云阅：一个基于网易云音乐UI，使用Gank.Io及豆瓣Api开发的开源项目","url":"http://jinbeen.com/2018/01/03/云阅：一个基于网易云音乐UI，使用Gank-Io及豆瓣Api开发的开源项目/","content":"<h2 id=\"CloudReader\"><a href=\"#CloudReader\" class=\"headerlink\" title=\"CloudReader\"></a>CloudReader</h2><p>一款基于网易云音乐UI，使用GankIo及豆瓣api开发的符合Google Material Desgin阅读类的开源项目。项目采取的是Retrofit + RxJava + MVVM-DataBinding架构开发。开发中所遇到的各种问题已归纳在<a href=\"http://jinbeen.com/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/\">这里</a>。</p>\n<p>github地址：<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">CloudReader</a></p>\n<blockquote>\n<p><a href=\"http://jinbeen.com/2016/12/30/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97-%E4%BA%91%E9%98%85/\">版本更新日志</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><ul>\n<li>部分效果图</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-6d119cdf55036fce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"cloudreader.png\"></p>\n<ul>\n<li>gif演示</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-d3c4ed3d57d58db7.gif?imageMogr2/auto-orient/strip\" alt=\"cloudreader.gif\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>网易云音乐于2013年4月23日正式发布，是一款主打发现和分享，带有浓厚社交基因的网络音乐产品。相信用过的人都知道它给人的体验是极好的，我看过了绝大多数仿写的案例，基本UI都不够细致，于是决定自己动手写一个，起初也不知道具体它是怎么布局的，后来使用SDK提供的工具<code>uiautomatorviewer</code>慢慢分析后再逐渐完善的，争取效果一致~ </p>\n<h2 id=\"模块分析\"><a href=\"#模块分析\" class=\"headerlink\" title=\"模块分析\"></a>模块分析</h2><h3 id=\"干货（gank-io）\"><a href=\"#干货（gank-io）\" class=\"headerlink\" title=\"干货（gank.io）\"></a>干货（gank.io）</h3><blockquote>\n<p>API使用的是动听（轮播图）和代码家的Gank.Io。</p>\n</blockquote>\n<ul>\n<li><p><strong>每日推荐：</strong> 干货集中营推送的每日内容，包括每天一个妹子图，相关Android、IOS等其他干货。每天第12：30之后更新，因为双休不更新所以内容缓存三天网络取不到就取缓存。</p>\n</li>\n<li><p><strong>福利：</strong> Glide加载图片，点击查看大图，支持双指缩放，一下可查看列表的所有图片，再也不用逐个点击每张图啦。</p>\n</li>\n<li><p><strong>干货订制：</strong> 可以筛选自己喜欢干货的类别，有全部、IOS、App、前端、休息视频和拓展资源。</p>\n</li>\n<li><p><strong>大安卓：</strong> 显示安卓的全部资讯。支持下拉刷新方便查看最新的资源。</p>\n</li>\n</ul>\n<h3 id=\"电影（豆瓣）\"><a href=\"#电影（豆瓣）\" class=\"headerlink\" title=\"电影（豆瓣）\"></a>电影（豆瓣）</h3><blockquote>\n<p>API是豆瓣提供的，因为限制了每个ip每分钟请求的次数，所以请酌情使用，由此带来的不便请见谅。</p>\n</blockquote>\n<ul>\n<li><strong>电影热映区：</strong> 每日更新，展示最新上映的电影热度排行榜。</li>\n<li><strong>豆瓣电影Top250：</strong> 豆瓣高分电影集锦，让你放心找好片~</li>\n</ul>\n<h3 id=\"书籍（豆瓣）\"><a href=\"#书籍（豆瓣）\" class=\"headerlink\" title=\"书籍（豆瓣）\"></a>书籍（豆瓣）</h3><blockquote>\n<p>使用的是豆瓣的搜索API。更多订制内容由于时间原因第一版还未添加，第二版会加上。</p>\n</blockquote>\n<ul>\n<li><strong>综合：</strong> 检索豆瓣综合类的书籍并展示。</li>\n<li><strong>文学：</strong> 检索豆瓣文学类的书籍并展示。</li>\n<li><strong>生活：</strong> 检索豆瓣生活类的书籍并展示。</li>\n</ul>\n<h3 id=\"抽屉界面\"><a href=\"#抽屉界面\" class=\"headerlink\" title=\"抽屉界面\"></a>抽屉界面</h3><blockquote>\n<p>完全仿网易云音乐抽屉界面，包括诸多细节如透明标题栏，背景透明度，水波纹颜色等。</p>\n</blockquote>\n<ul>\n<li><strong>项目主页：</strong>展示项目介绍信息，及内容说明，可以分享给你的好友哦。</li>\n<li><strong>扫码下载：</strong>扫码即可下载App，帮助您快速试用~</li>\n<li><strong>问题反馈：</strong>常见问题归纳，反馈地方，联系方式都在这里哦！</li>\n<li><strong>关于云阅：</strong>更新日志在这里可见，主人是利用工作外时间做的，周期较长，满意的小伙伴给个Star吧，这将是我继续迭代的动力，谢谢~</li>\n</ul>\n<h2 id=\"Features-特性\"><a href=\"#Features-特性\" class=\"headerlink\" title=\"Features 特性\"></a>Features 特性</h2><ul>\n<li>1、干货集中营内容与豆瓣电影书籍内容。</li>\n<li>2、高仿网易云音乐歌单详情页。</li>\n<li>3、<code>NavigationView</code>搭配<code>DrawerLayout</code>的具体使用。</li>\n<li>4、MvvM-DataBing的项目应用。</li>\n<li>5、RxBus代替EventBus进行组件之间通讯。</li>\n<li>6、<code>ToolBar</code>及<code>TabLayout</code>的使用姿势。</li>\n<li>7、<code>Glide</code>加载监听，获取缓存，圆角图片，高斯模糊。</li>\n<li>8、水波纹点击效果详细使用与适配。</li>\n<li>9、<code>RecyclerView</code>下拉刷新上拉加载。</li>\n<li>10、基于<code>DataBinding</code>的<code>ViewHolder</code>。</li>\n<li>11、基于<code>DataBinding</code>的<code>BaseActivity</code>和<code>BaseFragment</code>。</li>\n<li>12、<code>Fragment</code>懒加载模式。</li>\n<li>13、透明状态栏使用与版本适配。</li>\n<li>14、<code>SwipeRefreshLayout</code>结合<code>RecyclerView</code>下拉刷新上拉加载。</li>\n<li>15、<code>CoordinatorLayout + Behavior</code>实现标题栏渐变。</li>\n<li>16、<code>NestedScrollView</code>嵌套<code>RecyclerView</code>的使用。</li>\n</ul>\n<h2 id=\"细节分析-ToolBar-上的按钮点击效果\"><a href=\"#细节分析-ToolBar-上的按钮点击效果\" class=\"headerlink\" title=\"细节分析 - ToolBar 上的按钮点击效果\"></a>细节分析 - ToolBar 上的按钮点击效果</h2><p>仔细研究的人知道，网易云音乐的UI做的很精致，就拿一个<code>ToolBar</code>为例，上面的每个按钮的点击操作都有各自的效果。这给了用户一个很好的反馈，就是如下的效果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-71e53682c8ce9706.gif?imageMogr2/auto-orient/strip\" alt=\"toolbar_click.gif\"></p>\n<p>上图是在android 5.1系统下的效果图。在6.0上搜索的点击效果有些许改变，其他基本类似；5.0以下点击则都表现出一般选择器的效果。</p>\n<p>然而做到以上的效果并不容易，需要你对<code>ToolBar</code>有深入的了解；不仅如此，水波纹的点击效果在不同的主题下是有不同的表现。下面一起来谈谈如何达到以上的效果。</p>\n<h3 id=\"关于ToolBar的布局\"><a href=\"#关于ToolBar的布局\" class=\"headerlink\" title=\"关于ToolBar的布局\"></a>关于ToolBar的布局</h3><p>看到上图我们了解到一个<code>ToolBar</code>上有三种点击效果..</p>\n<p>这就有点尴尬了..不急，我们慢慢来分析。利用SDK下的工具<code>uiautomatorviewer</code>可得知：左边的<strong>菜单</strong>按钮是<code>ToolBar</code>内部包裹的一个<code>Fragment</code>,其中是一个<code>ImageView</code>和一个小红点；然后中间是<code>HorizontalScrollView</code>，其中是三个<code>ImageView</code>；右边的搜索键则是通过设置<code>Menu</code>菜单而来，这样会有长按弹出“搜索”二字的提示。</p>\n<p>现总结出两个问题：1、<code>ToolBar</code>上按钮的设置；2、不同按钮点击的水波纹效果</p>\n<p><strong>对于1：</strong> <code>ToolBar</code>上按钮的设置</p>\n<p>些许研究了<code>ToolBar</code>的使用后得知，可以直接在其内部包裹<code>Imageview</code>外，还可以通过菜单文件设置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">    getMenuInflater().inflate(R.menu.main, menu);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，<code>main.xml</code>内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=\"@+id/action_search\"</div><div class=\"line\">        android:icon=\"@drawable/actionbar_search\"// 显示图标</div><div class=\"line\">        android:orderInCategory=\"100\"// 菜单显示优先级</div><div class=\"line\">        android:title=\"@string/actionbar_search\"// Toast文字“搜索”</div><div class=\"line\">        app:showAsAction=\"always\" /&gt;// 总是显示，其中还有\"never\"点击后弹出显示；``ifRoom``根据空间判断是否显示</div><div class=\"line\">&lt;/menu&gt;</div></pre></td></tr></table></figure>\n<p>然后再找到菜单相应的<code>id</code>处理点击事件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.action_search:</div><div class=\"line\"><span class=\"comment\">//                Toast.makeText(this, \"打开搜索页面\", Toast.LENGTH_SHORT).show();</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">        &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>这样就完成了两者点击效果不同的处理。</p>\n<p><strong>对于2：</strong>不同按钮点击的水波纹效果</p>\n<p>这里不是使用<code>ripple</code>属性了，而是使用系统自带的点击水波纹选择器，给要产生点击效果的控件设置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:background=<span class=\"string\">\"?attr/selectableItemBackgroundBorderless\"</span></div></pre></td></tr></table></figure>\n<p>然而设置后你会发现所有点击的颜色都是一致的，如果你使用主题：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme=<span class=\"string\">\"@style/Theme.AppCompat.Light.NoActionBar\"</span></div></pre></td></tr></table></figure></p>\n<p>点击效果就会全部是黑灰的，就是中间三个按钮的那种效果，如果想要点击效果是白色的话，需要设置主题：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></div></pre></td></tr></table></figure></p>\n<p>知道这样后我们给不同的布局设置不同的主题就解决了这个问题。最终布局文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v7.widget.Toolbar</div><div class=\"line\">\t    android:id=\"@+id/toolbar\"</div><div class=\"line\">\t    android:layout_width=\"match_parent\"</div><div class=\"line\">\t    android:layout_height=\"?attr/actionBarSize\"</div><div class=\"line\">\t    android:background=\"@color/colorTheme\"</div><div class=\"line\">\t    app:contentInsetStart=\"0.0dp\"</div><div class=\"line\">\t    app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"</div><div class=\"line\">\t    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t    &lt;FrameLayout</div><div class=\"line\">\t        android:id=\"@+id/ll_title_menu\"</div><div class=\"line\">\t        android:layout_width=\"wrap_content\"</div><div class=\"line\">\t        android:layout_height=\"match_parent\"</div><div class=\"line\">\t        android:background=\"?attr/selectableItemBackgroundBorderless\"</div><div class=\"line\">\t        android:paddingLeft=\"15dp\"</div><div class=\"line\">\t        android:paddingRight=\"15dp\"&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t        &lt;ImageView</div><div class=\"line\">\t            android:id=\"@+id/iv_title_menu\"</div><div class=\"line\">\t            android:layout_width=\"23dp\"</div><div class=\"line\">\t            android:layout_height=\"wrap_content\"</div><div class=\"line\">\t            android:layout_gravity=\"center\"</div><div class=\"line\">\t            android:src=\"@drawable/titlebar_menu\" /&gt;</div><div class=\"line\">\t    &lt;/FrameLayout&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t    &lt;HorizontalScrollView</div><div class=\"line\">\t        android:layout_width=\"wrap_content\"</div><div class=\"line\">\t        android:layout_height=\"match_parent\"</div><div class=\"line\">\t        android:layout_gravity=\"center\"&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t        &lt;LinearLayout</div><div class=\"line\">\t            android:layout_width=\"wrap_content\"</div><div class=\"line\">\t            android:layout_height=\"match_parent\"</div><div class=\"line\">\t            android:background=\"?attr/selectableItemBackgroundBorderless\"</div><div class=\"line\">\t            app:theme=\"@style/Theme.AppCompat.Light.NoActionBar\"&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t            &lt;ImageView</div><div class=\"line\">\t                android:id=\"@+id/iv_title_gank\"</div><div class=\"line\">\t                android:layout_width=\"55dp\"</div><div class=\"line\">\t                android:layout_height=\"wrap_content\"</div><div class=\"line\">\t                android:layout_gravity=\"center\"</div><div class=\"line\">\t                android:background=\"?attr/selectableItemBackgroundBorderless\"</div><div class=\"line\">\t                android:src=\"@drawable/titlebar_disco\" /&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t            &lt;ImageView</div><div class=\"line\">\t                android:id=\"@+id/iv_title_one\"</div><div class=\"line\">\t                android:layout_width=\"55dp\"</div><div class=\"line\">\t                android:layout_height=\"match_parent\"</div><div class=\"line\">\t                android:background=\"?attr/selectableItemBackgroundBorderless\"</div><div class=\"line\">\t                android:src=\"@drawable/titlebar_music\" /&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t            &lt;ImageView</div><div class=\"line\">\t                android:id=\"@+id/iv_title_dou\"</div><div class=\"line\">\t                android:layout_width=\"55dp\"</div><div class=\"line\">\t                android:layout_height=\"match_parent\"</div><div class=\"line\">\t                android:background=\"?attr/selectableItemBackgroundBorderless\"</div><div class=\"line\">\t                android:src=\"@drawable/titlebar_friends\" /&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t        &lt;/LinearLayout&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t    &lt;/HorizontalScrollView&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;/android.support.v7.widget.Toolbar&gt;</div></pre></td></tr></table></figure>\n<p>这样就得到了我们想要的效果~<br>更多细节优化我会慢慢整理在<a href=\"https://github.com/youlookwhat/CloudReader/wiki\" target=\"_blank\" rel=\"external\">Wiki文档</a>，或你也可以直接查看源代码。</p>\n<h2 id=\"DownLoad\"><a href=\"#DownLoad\" class=\"headerlink\" title=\"DownLoad\"></a>DownLoad</h2><p>　<a href=\"https://fir.im/cloudreader\" target=\"_blank\" rel=\"external\">火速跳转</a><br><img src=\"http://upload-images.jianshu.io/upload_images/1354448-502cceae1674e70a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340\" alt=\"download.png\"></p>\n<h2 id=\"宝贵意见\"><a href=\"#宝贵意见\" class=\"headerlink\" title=\"宝贵意见\"></a>宝贵意见</h2><p>如果有任何问题，请到github的<a href=\"https://github.com/youlookwhat/CloudReader/issues\" target=\"_blank\" rel=\"external\">issue处</a>写上你不明白的地方，也可以通过下面提供的方式联系我，我会及时给予帮助。另外常见的问题已总结在<a href=\"http://jinbeen.com/2016/12/25/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-%E4%BA%91%E9%98%85/\">这里</a>。</p>\n<h2 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h2><ul>\n<li><p>图片来源：<a href=\"http://www.iconfont.cn/plus\" target=\"_blank\" rel=\"external\">iconfont</a>、UI工程师<a href=\"https://github.com/Sandawang\" target=\"_blank\" rel=\"external\">Sandawang</a>和网易云音乐App。</p>\n</li>\n<li><p>参考项目：<a href=\"https://github.com/GiitSmile/ImitateNetEasyCloud\" target=\"_blank\" rel=\"external\">ImitateNetEasyCloud</a>、<a href=\"https://github.com/forezp/banya\" target=\"_blank\" rel=\"external\">banya</a>；主要数据来源：<a href=\"https://gank.io/api\" target=\"_blank\" rel=\"external\">Gank.Io</a>、<a href=\"https://developers.douban.com/wiki/?title=terms\" target=\"_blank\" rel=\"external\">豆瓣Api</a>。</p>\n</li>\n<li><p>使用到的开源库：<a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"external\">glide</a>、<a href=\"https://github.com/Flipboard/bottomsheet\" target=\"_blank\" rel=\"external\">bottomsheet</a>、<a href=\"https://github.com/JakeWharton/NineOldAndroids\" target=\"_blank\" rel=\"external\">nineoldandroids</a>、<a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">rxandroid</a>等等。</p>\n</li>\n<li><p>感谢<a href=\"https://github.com/daimajia\" target=\"_blank\" rel=\"external\">代码家</a>、<a href=\"https://github.com/hongyangAndroid\" target=\"_blank\" rel=\"external\">张鸿洋</a>、<a href=\"https://github.com/drakeet\" target=\"_blank\" rel=\"external\">drakeet</a>、<a href=\"https://github.com/yang747046912\" target=\"_blank\" rel=\"external\">yang747046912</a>、<a href=\"https://github.com/GiitSmile\" target=\"_blank\" rel=\"external\">GiitSmile</a>、<a href=\"https://github.com/forezp\" target=\"_blank\" rel=\"external\">forezp</a>等众多开发者贡献的开源项目，让我从中学到了很多!</p>\n</li>\n</ul>\n<h3 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><p>感谢<a href=\"https://play.google.com/store/apps/details?id=com.netease.cloudmusic\" target=\"_blank\" rel=\"external\">网易云音乐App</a>提供参考，附上<a href=\"http://www.25xt.com/appdesign/12385.html\" target=\"_blank\" rel=\"external\">《网易云音乐Android 3.0视觉设计规范文档》</a>。本人是网易云音乐的粉丝，使用了其中的部分素材，并非攻击，如构成侵权请及时通知我修改或删除。大部分数据来自于干货集中营和豆瓣APIV2.0，一切数据解释权都归代码家和豆瓣所有。</p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>如果你觉得不错，对你有帮助，可以帮忙分享给你更多的朋友，这是给我们最大的动力与支持，同时希望你多多fork，star，follow，我将贡献更多的开源项目O(∩_∩)O~。开源使生活更美好！</p>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><ul>\n<li><strong>CSDN：</strong><a href=\"http://blog.csdn.net/jingbin_\" target=\"_blank\" rel=\"external\">Jingbin_</a></li>\n<li><strong>Blog：</strong><a href=\"http://jinbeen.com\">http://jinbeen.com</a></li>\n<li><strong>Email：</strong>jingbin127@163.com</li>\n<li><strong>GitHub：</strong><a href=\"https://github.com/youlookwhat\" target=\"_blank\" rel=\"external\">https://github.com/youlookwhat</a></li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-c282b9a84637ea73.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n","categories":["开源项目"],"tags":["cloudreader","开源项目"]},{"title":"2018不畏将来 | 2017不念过往","url":"http://jinbeen.com/2018/01/02/2018不畏将来 | 2017不念过往/","content":"<h3 id=\"2017年终总结\"><a href=\"#2017年终总结\" class=\"headerlink\" title=\"2017年终总结\"></a>2017年终总结</h3><p>2016年也准备写年终总结，忙着写云阅就没有写，之后写了<a href=\"http://jinbeen.com/2017/02/27/%E5%9C%A8%E5%B8%9D%E9%83%BD%E7%8B%AC%E5%B1%85%E4%B8%80%E5%B9%B4%E5%A4%9A%EF%BC%8C%E8%AE%A9%E6%88%91%E4%BD%93%E4%BC%9A%E5%88%B0%E4%BB%80%E4%B9%88/\">《在帝都独居一年多，让我体会到什么<br>》</a>,算了离开和年终总结一起了。<br>2017年发生太多的事，真的需要好好的回想梳理一下。工作，身体都有很大的改变。<br>本打算在2018年之前，将CloudReader架构规范一下，看来要延期了，不过也是最近一端时间的事。<br>很庆幸自己当初选择这份职业，工作了近三年，现在依然对它非常热爱，前面的路也越来越清晰。</p>\n<a id=\"more\"></a>\n<h3 id=\"深圳找工作的两个月\"><a href=\"#深圳找工作的两个月\" class=\"headerlink\" title=\"深圳找工作的两个月\"></a>深圳找工作的两个月</h3><p>自从三月份离职去了深圳，在那找了大约两个月的工作，现将能记得的归纳于此。</p>\n<p>3月份去了之后住在我一个叔叔那里，在龙华区，记得大二暑假打完暑期工后去那里玩了两天，现在还在那一块但是搬了一点距离，感觉没有多大的变化，他在那边已经住了四年左右。</p>\n<!-- \n**起初打算是这样的：**去深圳找前女友的，在那边找一份工作，尽量在她工作的周围（后来由于没有预想的那么好找和她马上要换工作的原因就开始没有考虑地区的投简历了），然后每周去找她希望能复合，在一起后在那边工作然后有时间一起去香港澳门旅游，在武汉买一套房付个首付，在那边挣钱还这边的房贷也基本不会吃力。\n\n\n**然而现实是这样的：**她准备马上换工作的，我找的工作也不是很顺利就开始不考虑地区，没有复合也没有去香港澳门旅游，在武汉看了房子因为隔主城区很远就放弃了在那边买房子(因为限购的原因只能在不限购的地方买)，做了一个决定就是回武汉，然后分道扬镳。\n\n-->\n<h4 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h4><blockquote>\n<p>直接进入找工作吧，<br>刚开始在拉钩上投简历，但基本上没有面试的，有时候真怀疑那个平台有问题，投了将近百来份邀请面试的差不多3家。在智联投的最多，也邀请面试的最多。前程无忧投了很多但没有一次邀请面试的。</p>\n</blockquote>\n<p>最初面试的一家是一家做智能硬件的，深圳有很多做智能硬件的，面试了好几家都是。他们的需求很简单，就是一个智能摄像头，厂家给了开发这个摄像头的SDK文档，然后你用它的文档开发一个Android上运行的软件，在上面操作摄像头的上下左右旋转来达到监控的作用。<br>公司是一层大厅是办公区域，其中隔了一部分，那一部分应该是车间，里面有很多设备。过去后老板直接给了一个软件和文档给我看，软件是厂家提供的但是没有源码，公司之前也没有开发类似的软件，因为自己也没有这方面的经验而且公司也不适合长期发展随便聊了一下就走了。</p>\n<p>因为面的太多，之后的就不记录顺序了。</p>\n<p>有一家是在关内 南山区，关内的规划很好，道路，环境，建筑都和关外有很大差别。面试是在一家高楼里，里面的人都穿西服打领带很正式，但一家互联网公司一般不会穿如此。进去是CTO接待的我，因为公司想出了一个idea，就差程序员了。这仿佛是一个段子，哈哈哈。<br>CTO是做全栈的，Android端的基本实现了功能，只是UI和性能需要重新优化，各方面都问了，当然基本没有问题，谈薪资时发现公司是初创公司，正在招人而且是独立开发，就叫的16K，处于两点考虑，第一自己不是很想进这家公司，说不定公司马上就没了，第二这活很麻烦而且得不到多大的提升，不适合长待。公司招聘上面写的是10-15k，叫16k也不过分，多了可以要求降低嘛。<br>事实并非如此，过了大约十天，没有联系我，我再次看了一个招聘信息，薪资改为8-10k了…之后面了很多公司，他们都写的10-15k，然而他们根本不能给这个范围的工资，关外的基本是这样。</p>\n<p>期间面试，遇到各种奇葩公司，当然也有几家很好的。</p>\n<p>有一家位置有点偏，那个地方是个科技园，楼栋编排的很好，而且每一栋都有它的别名，很文艺。进去后，那家公司有自己的Android团队，公司是一整层楼，布局很优雅，还带有一个大的阳台，面试我的是一个小组组长，问了一些工作中的遇到的问题和内存优化方面的问题，他表示很满意，只是那时候已经是午饭时间，人事和CTO去吃饭了就把简历留下了说会通知下一轮面试，但是也是没有结果了。</p>\n<p>有一家是做订制外包的，在猪八戒网有店铺。地方在稍微中心一点的一个科技园，在那个科技园面试了三家，这个还算靠谱，面试了估计有一个小时左右，知道了我的能力范围，觉得可以，然后让我和人事沟通，本以为到这一轮很稳了，但没想到的是居然被人事pass了，不知道是不是工资要高了，后来问了一个做ios的，他的工资是8-9k，我要的是12k，当然还可能是其他的原因，具体也不清楚。<br>那地方有一个公司刚成立，公司还没有10个人，正在组建团队，面试的是老板也没有技术面，也是无果。<br>还有一个更奇葩了，去了以后让我在茶水室坐了一会儿，然后过来跟我说今天面试技术的没有来，让我回去，WTF，跑了几个小时过来得到这句话，真TM有病的公司。</p>\n<h4 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h4><ul>\n<li>一家做摄像头智能硬件的，由于没有相关经验和公司没有人带无果。</li>\n<li>一家关内的做<strong>手画板</strong>的，就是聊天的时候可以自己画东西发给对方的那种。</li>\n<li>一家做订制外包的，被人事Pass了。</li>\n<li>一家公司刚起步，忘了做什么的了，10人以内。</li>\n<li>一家去了后，说面技术的没来，呵呵🙂</li>\n<li>一家不知道做什么的，应该不止一个App，无果。</li>\n<li>一家做语音的，差不多和科大讯飞业务一致，得到阿里的投资。两个人问了几个问题就让我走了(是不是人事为了kpi？)。</li>\n<li>一家集团的分公司，做智能硬件的，不过之前有人做了接着优化，面了满意，工资最高给的是10k，我只能要10K那就10k，公司条件也很差。无果。</li>\n<li>一家去了后有大约7个人左右一起笔试，android端估计爆了，招了这么多人来面。</li>\n<li>还有一家还可以，不过公司的位置不大，但人员很多，比较拥挤，面试了以后我之后很明确的问了她有没有录用的可能，那边说工资给不了那么高，我当时要的12K，她说最多只能给到7K。</li>\n<li>之前可能还有忘记写的，说最后一个吧。最后一个在龙岗，一家自己在家开的公司…位置不大，招了二十个左右的人，聊了很长时间，想了想还是拿一份offer吧，就答应了。</li>\n</ul>\n<p>面试资料：<a href=\"http://jinbeen.com/2017/02/20/Android%20%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99%E9%9B%86%E9%94%A6/\">Android 面试资料集锦</a></p>\n<h3 id=\"武汉房价\"><a href=\"#武汉房价\" class=\"headerlink\" title=\"武汉房价\"></a>武汉房价</h3><blockquote>\n<p>2015年没买，2016年涨疯，2017年持续。</p>\n</blockquote>\n<p>本打算在武汉远城区买套房，深圳工作还房贷，可事实是残酷的。远城区太远以后居住根本不现实，买了也不会增值多少，深圳工作工资也比预想中的少很多，看了一下武汉的Android开发工资和深圳差不多。于是思考后觉得最靠谱的是，马上回武汉。</p>\n<ul>\n<li>远城区房价也不便宜，平均1w一平，本来不贵，因为限购所以涨了起来。反而主城区的价格还不是很贵，但是就是限购。于是当时想的是工作两年，然后转为武汉户口再在主城区买。</li>\n<li>工资差不多，关键是离家近，而且弟弟马上来武汉读书，可以有个照顾。</li>\n<li>迟早会回武汉，如果以后回武汉，那在深圳积累的人脉关系就又断了，在武汉还得重新开始。<!-- 既然在那边两个月 感情的起色也不大，再下去作用感觉也就那样了。-->\n</li>\n</ul>\n<p>后来出乎意料的是，武汉出台了300万大学生留汉的政策，放宽了落户标准，很快就落户武汉了。然后经过一些波折看中了武昌理工学院的一套房子，虽说交通现在不太方便，但距离光谷，软件园和金融港不远，价格相对不贵性价比很高，但很难买到，武汉现在楼市万象，各种内定的，不给茶水费基本拿不到房子。刚好有一个同学再做个，找了帮了个忙，但由于出了点问题，现在还是没有没有拿到房子，开盘秒，内定的也都没有拿到，现在等待后续的预留房源在。</p>\n<p>那边房子出了问题，房子暂时没看到合适的，看了年后的几个盘，等年后再考虑了。</p>\n<h3 id=\"健康\"><a href=\"#健康\" class=\"headerlink\" title=\"健康\"></a>健康</h3><p>自己的身材一直是偏瘦型，身高177cm，体重基本没有突破60kg，今年是实在看不下去了，刚好看见住的附近有一家健身房，果断进去办了健身卡，并买了私教会员。花费的钱是在不少，有2W左右，因为实在想改变。<br>之后锻炼基本每周三四次，工作日晚上九点过去，周末抽时间去上两节课，从以前的57kg，到现在68kg，今天是02月03日，体重基本在70kg左右，很喜欢那种有肉的感觉，哈哈！健身真的很需要坚持，生活作息，饮食和锻炼是一体的。</p>\n<p>锻炼这么久深有感触的是：</p>\n<ul>\n<li>1.每天12点左右休息(根据每个人生活习惯了)。因为我是10点上班起床较晚，所以睡的相对较晚。不休息好会影响食欲和精神，这是个恶性循环，可个人感觉很难坚持，坚持了四个月还是开始晚睡了，总感觉时间不够用。现在开始慢慢调整。</li>\n<li>2.早餐一定要吃，而且最好是上午8-9点吃。吃晚了就没有食欲吃午饭了。</li>\n<li>3.锻炼频率每周3次足矣，每次一个小时左右，强度尽量每次比上次重点，有所突破，有氧和无氧合理把握。(这个看个人的，因为我们时间不多，这个时间已经比较难坚持了，相对于锻炼后期我个人来说)</li>\n<li>4.饮食很重要，尽量吃高蛋白的食物，用于肌肉生长，买鸡胸肉自己在家做最好了。没有条件买蛋白粉也可以，在锻炼完之后喝一勺，多了吸收不了对身体是个负担。多吃鸡蛋，前四个月我每天早餐四个鸡蛋，一杯豆浆，一个馒头。</li>\n</ul>\n<p>基本做到上面四点，自己坚持几个月基本就会有效果，健身前期进度很快，从57涨到65用了2个月，但从65涨到69用了5个多月。</p>\n<p>这会另外写一个健身记录，用于记录锻炼哪个部位做的什么动作等，肌肉有记忆力，尽量前几次动作做规范，做错误动作有时候不但没锻炼好，而且会对身体不好，产生形体错位。</p>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><p>今年定的目标是<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">CloudReader</a>达到2000start，算是超额完成了，帮助了很多人感到非常高兴，但发现MVVM架构不规范，只是使用了databinding而已，与之前自己理解的有出入，于是决定结合官方的demo规范一下，现在正在进行中。</p>\n<p>现在已经基本完成了，参考了官方的Demo，但是Demo过于简单，没有使用到列表的情况，看了很多其他人写的也没有一个完善的解决方案，根据自己的理解重构了。感觉现在更多的像是MVP-databing，P–VM，写的VM像P层，由于列表刷新不好和数据联动，还是要通过Adapter，而设置Adapter还是要使用那部分设置逻辑，将数据显示到UI上则使用了databinding。</p>\n<h3 id=\"2018学习计划\"><a href=\"#2018学习计划\" class=\"headerlink\" title=\"2018学习计划\"></a>2018学习计划</h3><p>今年的计划主要是深耕Android和Java类知识，然后浅尝Kotlin，部分时间看心理学相关知识。</p>\n<p>现在在看《Effective Java中文版》、《Android群英传 神兵利器》<br>《Effective Java中文版》：记录的java一些重要的知识点，很值得学习。如果想要更系统的了解java还是推荐《Java编程思想》。<br>《Android群英传 神兵利器》：一本工具书，里面的提到的每个点，几乎都需要掌握，很多之前都用到过，现在在看gradle部分。</p>\n<blockquote>\n<p> 2018.01.02 23:53  ——–   2018.02.02 续</p>\n</blockquote>\n","categories":["life"],"tags":["life"]},{"title":"Android 记一次清除缓存所导致的bug","url":"http://jinbeen.com/2017/12/21/Android-记一次清除缓存所导致的bug/","content":"<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>Android五种数据存储方式：</p>\n<ol>\n<li>使用SharedPreferences存储数据</li>\n<li>文件存储数据</li>\n<li>SQLite存储数据</li>\n<li>ContentProvider</li>\n<li>网络存储</li>\n</ol>\n<p><a href=\"http://blog.csdn.net/zhangxichao100/article/details/52123396\" target=\"_blank\" rel=\"external\">Android几种数据存储方式的应用场景</a></p>\n<a id=\"more\"></a>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>前段时间由于很多人反馈页面无数据的bug，对此考究了一段时间，遂将结果记录于此。</p>\n<p><strong>之前：</strong><br>设计的是，一个存储在SharedPreferences的状态值，控制页面是否取本地页面缓存，本地页面缓存也存储在SharedPreferences里。</p>\n<p>这样如果用户清除了SharedPreferences的状态值，那就会请求网络数据，如果没有清除状态值，就会取本地页面缓存数据，也是取保存在SharedPreferences里的数据，这样是没有问题的。</p>\n<p><strong>之后：</strong><br>由于可能页面缓存数据有点多，将存储方式改为了<strong>文件存储</strong>方式，而没有做取不到缓存数据的措施。误认为用户清空本地页面缓存数据的同时也清空了SharedPreferences里的数据，而没有采取取不到数据时的措施。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-1b5c3ed2b91bebb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"应用信息\"><br><strong>清除数据：</strong><br>清除数据主要是清除用户配置，比如SharedPreferences、数据库、文件储存等等，这些数据都是在程序运行过程中保存的用户配置信息，清除数据后，下次进入程序就和第一次进入程序时一样；</p>\n<p><strong>清除缓存：</strong><br>缓存是程序运行时的临时存储空间，只会清空文件存储数据。</p>\n<blockquote>\n<p><strong>文件缓存</strong>是不稳定的，手机存储空间不足时，可能会删除文件缓存中的内容。</p>\n</blockquote>\n<p>另外，如果需要持久化数据到本地且不可轻易更改的，还是使用数据库储存为宜。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/536ca489a7f4\" target=\"_blank\" rel=\"external\">Android五种数据存储方式</a></li>\n<li><a href=\"https://zmywly8866.github.io/2015/03/22/difference-between-clear-data-clear-cache-clean-up.html\" target=\"_blank\" rel=\"external\">Android清除数据、清除缓存、一键清理的区别</a></li>\n</ul>\n","categories":["Android"],"tags":["Android"]},{"title":"开发中所遇问题归纳","url":"http://jinbeen.com/2017/11/23/开发中所遇问题归纳/","content":"<blockquote>\n<p>持续更新，主要记录<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">CloudReader</a>及工作上所遇到的问题。</p>\n</blockquote>\n<h2 id=\"DataBinding\"><a href=\"#DataBinding\" class=\"headerlink\" title=\"DataBinding\"></a>DataBinding</h2><ul>\n<li><p><strong>DataBindingHelper.jar</strong>的使用：作为<a href=\"http://blog.csdn.net/yy1300326388/article/details/46409637\" target=\"_blank\" rel=\"external\">插件导入</a>后，和生成<code>Get、Set方法</code>的使用类似。在对应的<code>Bean</code>里，可自动生成<code>@Bindable</code>和<code>notifyPropertyChanged(BR.title);</code>。此杰作是同事做的。网上也有类似的插件可以使用。</p>\n</li>\n<li><p><strong>神坑！windows下<a href=\"http://www.th7.cn/Program/Android/201608/944362.shtml\" target=\"_blank\" rel=\"external\">databinding引入文字</a>会有问题，而mac上没有！使用<code>@string/string_type</code>引入字符串！</strong></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p><code>layout</code>节点写了<code>xmlns:android=&quot;http://schemas.android.com/apk/res/android</code>后，子布局不能写.</p>\n</li>\n<li><p>include 子布局时子布局根节点也要声明id，不然引用不到子布局id</p>\n</li>\n<li><p><strong>内部类加”private”,导致编译不通过,DataBinding出问题的bug。</strong>Adapter里有多个Holder，Holder类前加<code>private</code>后编译不通过，去掉就好了。暂时不清楚具体原因！</p>\n</li>\n<li><p>databinding 绑定子布局。先绑定,后父布局再<code>addView()</code></p>\n</li>\n<li><p>注入 databinding 后，AndriodStudio包结构变乱。解决：Android Studio2.2会出现此情况，升级到2.2.2就可以了。</p>\n</li>\n<li><p>databinding绑定<code>bean</code>时，里面的子类也需要继承<code>BaseObservable</code>,否则会报错。</p>\n</li>\n<li><p>recyclerview 的viewhodler 里，获得绑定 view 的databinding:<code>DataBindingUtil.getBinding(this.itemView);</code>。</p>\n</li>\n<li><p>布局里没有声明<code>id</code>,则对应的 ItemEverydayBinding 无法生成。</p>\n</li>\n<li><p>更改包名之后（rename – gradle.applicationId）， databinding 相关文件会报错，进入<code>Build --&gt; Rebuild Project</code>就好了！</p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/zuiwuyuan/article/details/48201171\" target=\"_blank\" rel=\"external\"><strong>AS里更改包名</strong></a>：保险的方法(费了几个小时的时间的总结)：在目录下新建想要的工程目录，把<code>activity</code>等包拖到新建的目录底下，然后修改<code>gradle</code>下的<code>applicationId</code>。这时候已经好了，可以跑起来了。但是<code>AndroidManifest.xml</code>未更改<code>package</code>，更改后你会发现项目中的<code>databinding</code>会报错，需要使用全局替换，将之前的包名替换成想要的包名，然后进入<code>Build --&gt; Rebuild Project</code>就好了！</p>\n</li>\n<li><p>注意：引用如：android:showImg=’@{bean.images.large}’时，里面的<code>bean</code>写错会造成编译错误！</p>\n</li>\n<li><p>注意：<code>text=&#39;@{xx}&#39;</code>里面的值应为<code>String</code>类型。引用方法里的参数类型应一致。报错是不告诉具体的哪行代码，写多了只能自己一个个地方找。</p>\n</li>\n<li><p>android:showImg=’@{bean.images.large}’这样设置图片会闪一下！尤其是在recyclerview里面，效果很不好，如果是写在 adapter里就好了：ImgLoadUtil.displayEspImage(bean.getImages().getLarge(), binding.ivTopPhoto, 0);。不仅仅图片，文字也会闪。加上这句就好了：<code>binding.executePendingBindings();</code>，意思是：<strong>当数据改变时，binding会在下一帧去改变数据，如果我们需要立即改变，就去调用executePendingBindings方法。</strong></p>\n</li>\n<li><p>布局里面的子布局里引用的bean可以一样（type一样），但是最好name不一样，不然可能会导致<code>setBean()</code>无效。改变name名就好了。</p>\n</li>\n<li><p>布局里使用了引用方法，一定要生成该布局的databinding类，不然方法会失效。</p>\n</li>\n</ul>\n<ol>\n<li><p>文件里引用bean:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;variable</div><div class=\"line\">       name=<span class=\"string\">\"subjectsBean\"</span></div><div class=\"line\">\t    type=<span class=\"string\">\"com.example.jingbin.bean.moviechild.SubjectsBean\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>文件里调用静态方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">import</span> type=<span class=\"string\">\"com.example.yunyue.utils.StringFormatUtil\"</span>/&gt;</div><div class=\"line\"><span class=\"comment\">// 布局调用</span></div><div class=\"line\">android:text=<span class=\"string\">\"@&#123;StringFormatUtil.formatName(subjectsBean.directors)&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>字符串和静态方法拼接(注意外层引号的区别，里面没有字符串时任意都行，有则使用单引号)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=<span class=\"string\">'@&#123;\"类型：\"+StringFormatUtil.formatGenres(subjectsBean.genres)&#125;'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>@BindingAdapter()</code>，自定义loader用来异步载入图像：</p>\n<ul>\n<li>一个参数时：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">// 任意类里声明</span></div><div class=\"line\"> <span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:showImgBg\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showImgBg</span><span class=\"params\">(ImageView imageView,String url)</span> </span>&#123;</div><div class=\"line\">        displayGaussian(imageView.getContext(),url,imageView);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">// 布局调用</span></div><div class=\"line\">android:showImgBg=<span class=\"string\">'@&#123;subjectsBean.images.large&#125;'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>两个或多个参数时：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 妹子，电影列表图</div><div class=\"line\"> * <span class=\"doctag\">@param</span> defaultPicType 妹子：1 电影：0</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"android:displayFadeImage\"</span>,<span class=\"string\">\"android:defaultPicType\"</span>&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">displayFadeImage</span><span class=\"params\">(ImageView imageView, String url,<span class=\"keyword\">int</span> defaultPicType)</span> </span>&#123;</div><div class=\"line\">    displayEspImage(url, imageView, defaultPicType);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// XML里使用：</span></div><div class=\"line\">android:defaultPicType=<span class=\"string\">\"@&#123;1&#125;\"</span></div><div class=\"line\">android:displayFadeImage=<span class=\"string\">\"@&#123;bean.url&#125;\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li><strong>1.</strong> 方法参数第一个是控件声明,放在第二位不可以！</li>\n<li><strong>2.</strong> 布局调用时，命名空间可自动生成。</li>\n</ul>\n<p>建议：</p>\n<ul>\n<li><strong>1.</strong> <code>android:showImgBg</code>可任意写，但是项目里不能出现相同的命名，否则会被后来的覆盖掉！</li>\n<li><strong>2.</strong> 如果 imgload:showImgBg 这样写,第一次编译会提示找不到该命名空间，跳到声明处。建议写成 android:showImgBg。</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>三元运算法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">导入：&lt;<span class=\"keyword\">import</span> type=<span class=\"string\">\"android.text.TextUtils\"</span> /&gt;</div><div class=\"line\">使用：android:text=<span class=\"string\">'@&#123;TextUtils.isEmpty(resultsBean.who)?\"佚名\":resultsBean.who&#125;'</span></div><div class=\"line\">也可以直接使用这时返回为<span class=\"keyword\">null</span>会不显示。</div></pre></td></tr></table></figure>\n</li>\n<li><p>若在EditText中使用双向绑定，则设置值的时候要使用<code>android:text=&quot;@={viewmodel.username}&quot;</code>,注意中间的<code>=</code>不然会达不到双向绑定的效果。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h2><ul>\n<li><p>✔️ <code>NestedScrollView</code>里嵌套 RecyclerView 官方后期已经解决了显示不全问题！看引用的包是什么版本的！还需要加上这两行代码：(<strong>这样不推荐，会把内容全部一次性的加载进内存，造成卡顿</strong>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">recyclerView.setNestedScrollingEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">recyclerView.setHasFixedSize(<span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>❌ NestedScrollView里嵌套 RecyclerView ,在<code>recyclerView.setLayoutManager(new FullyLinearLayoutManager(getActivity()));</code>之后，需要加上,不然滑动不流畅: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">recyclerView.setNestedScrollingEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">recyclerView.setHasFixedSize(<span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<p>以上切换还是会卡顿，原因是角标越界，虽然<code>try</code>了，还是会卡。使用<code>MyScrollView</code>也不可以。显示不全！<a href=\"http://blog.csdn.net/fangchao3652/article/details/46914987\" target=\"_blank\" rel=\"external\">FullyLinearLayoutManager&amp; MyScrollView</a></p>\n</li>\n<li>RecyclerView 的item显示出现控件显示不全,item只显示一部分，非常怪异！在adapter中的onCreateViewHolder()中<br><code>View inflate = layoutInflater.inflate(R.layout.xxx, parent, false);</code>注意要依附于parent。这样就好了！</li>\n</ul>\n<ul>\n<li>RecyclerView: No adapter attached; skipping layout 没有数据时，<code>gone</code>掉，不然一直会提示这个！</li>\n<li><p><code>addFooterView</code>时，使用LinearLayout 包裹时会显示部分，改为RelativeLayout或FrameLayout正常。</p>\n</li>\n<li><p><code>NestedScrollView</code>包裹<code>RecyclerView</code>如果没关联下面design包会显示不出，加了就好了！</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'com.android.support:design:24.2.1'</span></div></pre></td></tr></table></figure>\n<p>同时此包里还含有<code>Toolbar</code>的属性：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">app:layout_collapseMode=<span class=\"string\">\"pin\"</span></div><div class=\"line\">  app:layout_scrollFlags=<span class=\"string\">\"enterAlways|scroll\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>NestedScrollView里嵌套 RecyclerView 需要在<code>onResume</code>里加上<code>.setFocusable(false)</code>，不然进入页面会定位到列表第一条或其他问题。</p>\n</li>\n<li><p>添加<code>headerview</code>后，隐藏显示，进度条不会到达屏幕顶端。</p>\n</li>\n<li><p><a href=\"http://www.voidcn.com/blog/ming2316780/article/p-5999345.html\" target=\"_blank\" rel=\"external\">完美解决隐藏Listview和RecyclerView去掉滚动条和滑动到边界阴影的方案</a></p>\n</li>\n<li><p>把WebView做为headerview添加，会有很多问题：</p>\n<ul>\n<li>1.有时候webview底部会显示会出现一大片的空白区域：把WebView的<code>layout_height</code>设置为<code>wrap_content</code>。</li>\n<li>2.加载完成后，点击webview区域，会滚动到webview的顶部：使其失去焦点，在headerview的根布局里加上：<code>android:descendantFocusability=&quot;blocksDescendants&quot;</code></li>\n<li>3.点击item进入详情后返回，会自动滚动到webview的顶部，在activity里加上：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">    <span class=\"keyword\">if</span> (detailBinding!=<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        detailBinding.getRoot().setFocusable(<span class=\"keyword\">false</span>);</div><div class=\"line\">        detailBinding.getRoot().setFocusableInTouchMode(<span class=\"keyword\">false</span>);</div><div class=\"line\">        detailBinding.wvDetail.setFocusable(<span class=\"keyword\">false</span>);</div><div class=\"line\">        detailBinding.wvDetail.setFocusableInTouchMode(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"ViewPager-与-Fragment\"><a href=\"#ViewPager-与-Fragment\" class=\"headerlink\" title=\"ViewPager 与 Fragment\"></a>ViewPager 与 Fragment</h2><ul>\n<li><p>父布局使用<code>FrameLayout</code>或<code>Scrollview</code>下拉会有阴影效果，颜色是你配置的主题上指定的颜色。</p>\n</li>\n<li><p>viewpager左右预加载页面的个数设置：<code>setOffscreenPageLimit(3);</code>,设置后保证页面不被销毁，切换时就不会卡顿了（显示时加载数据）。注意，如果是这个viewpager本身就在父一个viewpager的一个页面里，则设置adapter时，应传<code>getChildFragmentManager()</code>,不然以上会设置不上，非法状态异常！</p>\n</li>\n<li><p>Fragment 和当前自身所在的Activity 走一套生命周期，意思就是<code>Activity</code>走了<code>onResume()</code>,<code>fragment</code>才会走自身的<code>onResume()</code>，多个Fragment 相互切换是不走onResume()和onDestroy()的。</p>\n</li>\n<li><p>如果listview 里<code>addHeaderView()</code>添加轮播图，则轮播图滚动时会调用 listview 的滚动监听，且返回的<code>firstVisiblePosition = 0</code>。</p>\n</li>\n<li><p>Activity 里放多个fragment，当加载过其中一个<code>fragment A</code>后，切到其他的fragment，直至销毁fragment A后,再直接切到fragment A，这时<code>fragmentA.getUserVisibleHint() = false</code>。所以依赖getUserVisibleHint() = true的逻辑要注意了！最好的方式是在 viewpager 的监听里，手动<code>fragment.setUserVisibleHint(true)</code>。</p>\n</li>\n<li><p>根据<code>setUserVisibleHint()</code>方法的调用时间，来实现 fragment 的懒加载。setUserVisibleHint() 会在<code>onActivityCreated()</code>之前调用，所以可以在onActivityCreated() 进行一系列初始化的操作，然后在 setUserVisibleHint() 里请求数据。具体请见<a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1021/1813.html\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n</li>\n<li><p>如从子页面回到主页面并切到对应type的fragment里，这里的<code>.commit()</code>要改为<code>.commitAllowingStateLoss()</code>，不然会出现<code>Can not perform this action after onSaveInstanceState</code>错误。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Retrofit\"><a href=\"#Retrofit\" class=\"headerlink\" title=\"Retrofit\"></a>Retrofit</h2><ul>\n<li><p>使用<code>retrofit</code>请求时，Bean里如有<code>Drawable</code>字段，而且没有赋值，会数据解析异常，出现<code>StackOverflowError</code>错误。</p>\n</li>\n<li><p>使用<code>retrofit</code>请求时，若请求成功且有数据返回还报错，看<code>Bean</code>里字段或字段类型是否写错。</p>\n</li>\n<li><p><code>retrofit</code>设置<code>post</code>请求时，传数组时使用<code>image_ids[]</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FormUrlEncoded</span></div><div class=\"line\"><span class=\"meta\">@POST</span>(<span class=\"string\">\"/vip/diagnostic_explains\"</span>)</div><div class=\"line\"><span class=\"function\">Observable&lt;ErrorBean&gt; <span class=\"title\">postDiagnosticExplains</span><span class=\"params\">(@Header(<span class=\"string\">\"a\"</span>)</span> String a, </span></div><div class=\"line\">\t\t@<span class=\"title\">Field</span><span class=\"params\">(<span class=\"string\">\"userkey\"</span>)</span> String userkey, @<span class=\"title\">Field</span><span class=\"params\">(<span class=\"string\">\"comment\"</span>)</span> String comment,  </div><div class=\"line\">\t\t@<span class=\"title\">Field</span><span class=\"params\">(<span class=\"string\">\"image_ids[]\"</span>)</span> List&lt;Integer&gt; image_ids);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>自己搭建服务端，<a href=\"http://blog.csdn.net/wangzhen19891010/article/details/52368396\" target=\"_blank\" rel=\"external\">Post传值出现中文乱码问题</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FormUrlEncoded</span></div><div class=\"line\"><span class=\"meta\">@POST</span>(<span class=\"string\">\"&#123;user&#125;/setDeviceName\"</span>)</div><div class=\"line\"><span class=\"meta\">@Headers</span>(<span class=\"string\">\"Content-Type:application/x-www-form-urlencoded; charset=utf-8\"</span>) <span class=\"comment\">//添加</span></div><div class=\"line\"><span class=\"function\">Observable&lt;String&gt; <span class=\"title\">updateName</span><span class=\"params\">(@Header(<span class=\"string\">\"Authorization\"</span>)</span> String header,@<span class=\"title\">Path</span><span class=\"params\">(<span class=\"string\">\"user\"</span>)</span> String user</span></div><div class=\"line\">, @<span class=\"title\">Field</span><span class=\"params\">(<span class=\"string\">\"deviceMac\"</span>)</span> String mac, @<span class=\"title\">Field</span><span class=\"params\">(<span class=\"string\">\"type\"</span>)</span> String type, @<span class=\"title\">Field</span><span class=\"params\">(<span class=\"string\">\"name\"</span>)</span> String name);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"ACache\"><a href=\"#ACache\" class=\"headerlink\" title=\"ACache\"></a>ACache</h2><ul>\n<li><p>使用<code>ACache</code>工具缓存时，如果缓存的<code>bean</code>类名一致，或类里面的内部类一致，这时logcat会提示有两个相同bean的id，就是<strong>无效的类</strong>，或<strong>找不到该类</strong>。所以：<strong><em>缓存的文件里的类名最好不要一样！</em></strong></p>\n</li>\n<li><p>使用<code>ACache</code>工具缓存时，subList没有实现序列化！缓存<code>List</code>时会出错！<a href=\"http://liyin-rookie.iteye.com/blog/1147284\" target=\"_blank\" rel=\"external\">详情</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h2><ul>\n<li><p>使<code>TextView</code>实现长按复制文本的功能，加上属性：<code>android:textIsSelectable=&quot;true&quot;</code></p>\n</li>\n<li><p><code>textView</code>中间加横线:<code>textView .getPaint().setFlags(Paint. STRIKE_THRU_TEXT_FLAG );</code></p>\n</li>\n<li><p><code>EditText</code>如设置搜索模式，还要加上单行显示，不然可以一直换行。</p>\n</li>\n<li><p><code>TextView</code>增加属性<code>maxEms、maxLines=1、ellipsize</code>这样会出现”…”。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><ul>\n<li><p>给域名加上https,有的页面没有显示【安全】的绿色标识，是因为页面内有“http”的链接，给相关链接全改为https就好了！</p>\n</li>\n<li><p><code>[Jingbin_](http://blog.csdn.net/jingbin_)</code> 用<code>hexo d</code>上传时会报错，因为中间的<code>_</code>原因。</p>\n</li>\n<li><p>用markdown写文章时，想要呈现多级关系，比如<strong>在引用代码时</strong>，要注意格式，清除最后残留的空格，不然会出现错乱的情况。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Material-Desgin\"><a href=\"#Material-Desgin\" class=\"headerlink\" title=\"Material Desgin\"></a>Material Desgin</h2><ul>\n<li><p>兼容5.0以下水波纹效果：新建drawable-21文件，里面放ripple文件，其他正常，<a href=\"http://blog.csdn.net/u012156512/article/details/50585193\" target=\"_blank\" rel=\"external\">详情</a>。</p>\n</li>\n<li><p>Android 5.1的SDK把<code>Button</code>的默认Style改了，使Button上显示因为全为大写，加上属性<code>android:textAllCaps=&quot;false&quot;</code>就好了,<a href=\"http://blog.csdn.net/u010746364/article/details/50378056\" target=\"_blank\" rel=\"external\">详情</a>。</p>\n</li>\n<li><p><code>toolbar</code>中设置标题和副标题文字颜色和大小时，在<strong>xml</strong>文件配置<code>app:titleTextAppearance=&quot;@style/ToolBar.Title&quot;</code>可以，其中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=\"ToolBar.Title\" parent=\"@style/TextAppearance.Widget.AppCompat.Toolbar.Title\"&gt;</div><div class=\"line\">      &lt;item name=\"android:textSize\"&gt;18.0sp&lt;/item&gt;</div><div class=\"line\">      &lt;item name=\"android:textColor\"&gt;@color/colorWhite&lt;/item&gt;</div><div class=\"line\">  &lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>也可以在activity中设置：<br><code>binding.titleToolBar.setTitleTextAppearance(this, R.style.ToolBar_Title);</code></p>\n</li>\n<li><p>如何删除默认 button 中的样式android? 加上属性：<code>style=&quot;?android:attr/borderlessButtonStyle&quot;</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Android7-0\"><a href=\"#Android7-0\" class=\"headerlink\" title=\"Android7.0\"></a>Android7.0</h2><ul>\n<li><p>WebView在Android7.0中会显示不全，这是WebView本身的控件大小应<code>wrap_content</code>，父布局为<code>match_parent</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayout</div><div class=\"line\">        android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        android:layout_height=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        android:descendantFocusability=<span class=\"string\">\"blocksDescendants\"</span></div><div class=\"line\">        android:orientation=<span class=\"string\">\"vertical\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;WebView</div><div class=\"line\">            android:id=<span class=\"string\">\"@+id/wv_apply\"</span></div><div class=\"line\">            android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            android:layout_height=<span class=\"string\">\"wrap_content\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>太大的数据不要通过Intent之间传递，传递的数据最好不要超过1M,不然会报错，报错的地方不一定是当前传值的地方，可能是下一个页面。<code>Do not exchange huge data (&gt;1MB) between services and application</code>，可以通过<code>SharedPreferences</code>转json转bean来解决。</p>\n</li>\n<li><p>popuwindow显示有两个方法，每个方法只能在Android7.0之前或之后适应，需要辨别版本使用两和方法。<a href=\"https://www.oschina.net/question/588216_2210921\" target=\"_blank\" rel=\"external\">链接</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><code>listview</code>某图标显示亮或不亮的问题：先全部不亮，再根据条件变亮。</li>\n<li>当ScrollView里的元素想填满ScrollView时，使用 fill_parent 是不管用的，必需为ScrollView设置：<code>android:fillViewport=&quot;true&quot;</code>。</li>\n</ul>\n<ul>\n<li><p>设置透明状态栏时，布局根节点不要设置<code>android:fitsSystemWindows=&quot;true&quot;</code>否则状态栏会一直存在，被这个问题坑了一整天！！还有整块布局也不要给设置颜色。 </p>\n</li>\n<li><p><code>ImageView</code>图片直接<code>src</code>会内存泄漏，图片宽高大时会很严重，建议代码设置。</p>\n</li>\n<li><p>1920*1080(1080p) 小米3，小米5等，属于xxhdpi，将图片放在这个文件夹内，这个分辨率的手机显示图片会很清晰，放在xhdpi清晰度会降低。</p>\n</li>\n<li><p>1.文字颜色选择器：里面的根节点应为<code>color</code>且最好放在新建<code>color</code>文件下。2.作为背景选择器来说，根节点应该是<code>drawble</code>，最好放在<code>drawble</code>文件夹下。</p>\n</li>\n<li><p><code>Glide</code>加载图片：自动缓存当前图片的尺寸，如果其他地方取这个比例的图片则取的是缓存。不缓存等比例的图片！如果其他地方想要取当前图片的缓存，可加载时设置当前图片的宽高，用这个方法：<code>override(300,400)</code>,值在<code>dimens</code>里取，直接设置会损失清晰度。</p>\n</li>\n<li><p>引用的库文件里，关于gradle配置<code>compileSdkVersion</code>,<code>buildToolsVersion</code>需和主工程配置一致，不然可能还会出现无法编译及点击xml文件失效等问题。</p>\n</li>\n<li><p>adapter使用多种类别的item时，<code>getItemViewType</code>要从0开始，不然会出现<a href=\"http://www.jianshu.com/p/e441c0362364\" target=\"_blank\" rel=\"external\">角标越界异常</a>。</p>\n</li>\n<li><p><code>RatingBar</code>不设置半星:<code>android:stepSize=&quot;1&quot;</code>,不可滑动:<code>android:isIndicator=&quot;true&quot;</code></p>\n</li>\n<li><p>后台返回值为<code>Integer</code>类型的话，不能直接以<code>!=0</code>判断，而是以<code>!=null</code>判断，不然会调用请求失败的方法<code>showErr()</code>。</p>\n</li>\n<li><p>Postman请求出现<code>Invalid CORS request</code>，解决方法：<code>Then add a header to your request. The header Key should be &quot;Origin&quot; and the header Value should be the full URL of your server (Do not forget the http:// or https://).</code></p>\n</li>\n<li><p>sourcetree “重置”是丢弃所有修改。</p>\n</li>\n<li><p>webview与js交互中，“遍历所有的a节点,将节点里的属性传递过去(属性自定义,用于页面跳转) ”，如果遍历两次a节点，最后一次的会覆盖前面的。</p>\n</li>\n</ul>\n<ul>\n<li><p>mac更新后git出错<strong>can’t start git:usr/bin/git</strong>（Android Studio2.3.3版本）出现这个问题是因为该目录下的git无法执行，解决方法：在终端界面输入<code>sudo /usr/bin/git</code>这个命令，时候会提示<code>invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</code>,然后再输入<code>xcode-select --install</code>就解决了！</p>\n</li>\n<li><p>阿里百川CPS上传apk包，只能使用编译环境为gradle3.0以下的包</p>\n</li>\n<li><p>selector 里 <code>android:drawable=&quot;@color/color_theme&quot;</code>这样使用可能导致颜色变色，应使用<code>android:color=&quot;@color/color_theme&quot;</code>。</p>\n</li>\n<li><p>Mac下使用 <code>java -jar cracker2017.jar</code>打开jar包</p>\n</li>\n<li><p>打开cmd命令界面，输入ping www.baidu.com,查询网站ip</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><ul>\n<li>Blog：<a href=\"http://jinbeen.com\">http://jinbeen.com</a></li>\n<li>GitHub：<a href=\"https://github.com/youlookwhat\" target=\"_blank\" rel=\"external\">https://github.com/youlookwhat</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","databinding"]},{"title":"看火影有感","url":"http://jinbeen.com/2017/10/06/看火影有感/","content":"<object width=\"340\" height=\"86\" data=\"http://music.163.com/style/swf/widget.swf?sid=784555&type=2&auto=0&width=320&height=66\" type=\"application/x-shockwave-flash\"></object>\n\n<a id=\"more\"></a>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>今天是十一长假的第六天，每年的十一基本都回家了除了2015年在北京外。因为下雨就一直在家窝着，把火影看到快100集。</p>\n<h4 id=\"感悟\"><a href=\"#感悟\" class=\"headerlink\" title=\"感悟\"></a>感悟</h4><p>鸣人、卡卡西、白有一个目标就是“为生命中重要的人而活”。</p>\n<p>卡卡西说过：我不会让我的伙伴受到伤害。就现在的剧情来看，卡卡西曾经能力也是很弱，而导致没有及时帮助队友，使队友丧生，所以很自责，一直秉承着这个理念。(还有个有趣的事就是卡卡西看的是《亲热天堂》，而好色仙人就是这本书的作者..)</p>\n<p>鸣人：和我爱罗决斗的时候，我爱罗说的是为自己而活，这样使他自己找到了活着的目标，他的目标是杀掉所有除他自己以外的人，因为小时候的悲伤故事使他一直在孤单中，而鸣人比较幸运，因为他的老师和他有相同的境遇，受到了他的老师的肯定。<br>之后还和卡卡西，佐助，小樱成为伙伴，这样才不那么痛苦。看到我爱罗后，使他更确定自己的生活目标，为保护自己的伙伴而战。而恰恰木叶村的宗旨就是，为保护自己最重要的人而活。通过师生教导使一个理念逐步传递下去。</p>\n<p>我曾几何时不是这样想的呢，找一个自己想保护一生的人，然后为之奋斗终生。这使我想到了结婚，而心乱如麻。</p>\n<h4 id=\"摘录网易云音乐评论\"><a href=\"#摘录网易云音乐评论\" class=\"headerlink\" title=\"摘录网易云音乐评论\"></a>摘录网易云音乐评论</h4><ul>\n<li><p>好色仙人死了，一个人呆在家里，泡面熟了，没有胃口的鸣人出了门，夜色中经过没关门的商店，买了一支双棍冰棒，坐在路灯下，想起师徒俩人的时光，……</p>\n</li>\n<li><p>第一集鸣人一个人坐在黄昏时的秋千上，旁边的小孩子都有父母来接。他一个人坐在旁边荡秋千，插入的就是这个曲子。名为孤独。</p>\n</li>\n</ul>\n<blockquote>\n<p>MV： <a href=\"http://music.163.com/#/mv?id=335176\" target=\"_blank\" rel=\"external\">My ANSWER</a></p>\n</blockquote>\n<embed src=\"http://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=m0178qd1etl&auto=0\" allowfullscreen=\"true\" quality=\"high\" width=\"480\" height=\"400\" align=\"middle\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\">\n\n","categories":["life"],"tags":["life"]},{"title":"Macbook Pro键帽拆解安装图文教程","url":"http://jinbeen.com/2017/08/05/Macbook-Pro键帽拆解安装图文教程/","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-7b8f5e2646e56223.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"keyboard.png\"></p>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前段时间把可乐洒在电脑上了，大概有1/5的罐装可乐，紧急之下把电脑翻转过来，万幸的是电脑没出问题。就是过了两天之后，键盘黏黏的，特别是空格键。<br>送修的话，这属于人为的，不再保修范围之内，关键是来回时周期很长，耽误了工作，于是决定自己拆解，网上有很多发了类似的教程，但自己还是遇到了一些坑。</p>\n<p>在此发出来，希望之后遇到类似事情的人有一个参考。</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><h4 id=\"拆解工具\"><a href=\"#拆解工具\" class=\"headerlink\" title=\"拆解工具\"></a>拆解工具</h4><ul>\n<li>1、镊子</li>\n<li>2、屏幕清洗液(一般清水也可替代)</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-e94a627226044ff3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"镊子.png\"><br>网上有很多栗子说要专业的拔键帽工具，楼主也在网上找了类似的工具，但是这个工具和拆解电脑的其他配件是一起的，但我又不需要那些工具，就没有购买，想了镊子应该也可以完成，就开始试了。</p>\n<h4 id=\"拆解普通字母按键\"><a href=\"#拆解普通字母按键\" class=\"headerlink\" title=\"拆解普通字母按键\"></a>拆解普通字母按键</h4><p>先看拆解之后的样子：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-132a3d6dcfea1983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"普通字母按键1.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-e9577d464963b09c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"普通字母按键2.png\"></p>\n<p>拆第一个字母按键的时候弄断了右边的一个塑料角！但装上去之后基本不影响后感。在卸下来后找到了经验，算是换了点经验。所有的按键都有X支架，它们的拆解方法都是一样的。<br><strong>步骤</strong>：<br>先将镊子的一脚放在按键的<strong>底部中间</strong>(中间处有空隙)，然后往上翘，看见一个脚起来后，再翘底部另一个脚，等到底部两个脚都起来后，就可以轻轻地将键帽拿起来了。<br>（之前在网上看的是将镊子放在右边的脚上，其实这是错误的，塑料角很脆弱，很容易断，如果直接掰右边的脚，很容易掰断。如果放在中间，然后慢慢抬起镊子，这之后两边的X支架的脚受力会轻一些，这样断的可能会小很多。）</p>\n<h4 id=\"拆解command键\"><a href=\"#拆解command键\" class=\"headerlink\" title=\"拆解command键\"></a>拆解command键</h4><p>我们来看command键的结构</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-14a8b8706b393250.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"command键.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-684bcf4aece9b0f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"command键2.png\"></p>\n<p>注意：command键是有挂钩的，shift键应该也会有。<br>之前看到有的博客说空格间才是双挂钩，后来拆的时候发现command键也是双挂钩。</p>\n<p><strong>步骤</strong>：<br>1、先和拆解普通按键一样，插接X支架。<br>2、然后你会看见挂钩了，这时候需要一点耐心，用镊子的一脚将挂钩的一边推出去，然后再推另一边。同样第二个挂钩也是。</p>\n<h4 id=\"拆解空格键\"><a href=\"#拆解空格键\" class=\"headerlink\" title=\"拆解空格键\"></a>拆解空格键</h4><p>空格键是最难的，应该放在最后来进行，可以先在前面的拆解中学学经验。</p>\n<p>同样先上图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-c93c42d768c16a83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"空格键.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-ccdc7be37b073a3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"空格键2.png\"></p>\n<p>空格键结构和command键相似，不同的是它有两个X支架，挂钩长一些。</p>\n<p><strong>步骤</strong>：<br>1、先依次拆两个X支架，这时候比较容易弄断角，恩，尽管我很小心了，还是弄断了两个角，不过安装上去了后影响并不是很大。<br>2、然后拆挂钩，这个挂钩比cmmand键难拆，但只要细心和有点耐心花点时间也是没问题的。</p>\n<h4 id=\"清洗\"><a href=\"#清洗\" class=\"headerlink\" title=\"清洗\"></a>清洗</h4><p>1、先可以把键帽拿去用水冲洗了，我拆解下来后，发现里面还有一点污渍，冲洗后晒干后即可。<br>2、还有就是用镊子清晰按键的边缘，如图处：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-832da07cfbbdb880.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"边缘.png\"></p>\n<p>清洗完之后等待键帽上的水干了就可以安装了。</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-219c3d2d6dc188e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"金属片.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-cdeefd3e93b24ea8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"X支架.png\"></p>\n<blockquote>\n<p>特别注意：<br>1、注意X支架的正反面，有凹槽的地方朝下，因为这个原因我把两个金属脚都按弯了……，最后用镊子将它掰正的!!<br>2、图中有两个金属角，需要先将X支架放上去，第一步应该是将金属脚对准，如果歪了可能和我一样把金属脚压弯，我相信你不喜欢看到那一幕。</p>\n</blockquote>\n<p><strong>步骤</strong>：<br>1、普通按键，安装好X支架，然后将键帽扣上去，听到咔一声证明好了。<br>2、空格键和command键类似，先安装好X支架后，将两个挂钩勾上去，让挂钩和键帽上面的槽对准，然后按下，还是听到咔一声就好了。</p>\n<h3 id=\"注意要点\"><a href=\"#注意要点\" class=\"headerlink\" title=\"注意要点\"></a>注意要点</h3><ul>\n<li>不要硬掰，强按。</li>\n<li>镊子从X支架的中间翘起。</li>\n<li>安装的时候注意X支架的正反面，且先对其金属片。</li>\n</ul>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"http://bbs.feng.com/read-htm-tid-6404498.html\" target=\"_blank\" rel=\"external\">MacBook（非蝶式键盘）键帽拆解教程【多图+详细说明】</a></li>\n<li><a href=\"http://www.apple21.com/article.php?id=77\" target=\"_blank\" rel=\"external\">新款MacBook Pro、MacBook Air键盘、键帽拆卸清洗视频教程</a></li>\n<li><a href=\"https://bbs.feng.com/forum.php?mod=viewthread&amp;tid=11095755\" target=\"_blank\" rel=\"external\">16款MacBook Pro 空格键卡键修复教程 简约教程</a></li>\n<li><a href=\"http://my.tv.sohu.com/us/63361417/55235770.shtml\" target=\"_blank\" rel=\"external\">Macbook pro 拆键盘方法</a></li>\n</ul>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>安装好之后打开电脑，发现“B”键的一右下脚是凹下去的，是在看不下去，就又用镊子将键帽拔了出来，这时候发现键盘灯熄灭了！！！心里想会不会是将什么线路弄断了，又重新安装好之后开机，发现键盘灯一直是熄灭的，也不能调光，键盘上的背光灯键是个禁止符号了。</p>\n<p>心想，呵呵，这次把线路弄断了。习惯性的google了一下，发现<strong>外界亮的情况下，背光灯会不让亮的</strong>。真惊喜真刺激🙄</p>\n<blockquote>\n<p>每个键盘的内部结构也能有差别，且不止一种拆卸方法，此方法不一定完美，仅供参考。</p>\n</blockquote>\n<p>最后附一张结果图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-97f1d891b1450b00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"键盘.png\"></p>\n","categories":["Macbook Pro"],"tags":["Macbook Pro"]},{"title":"《醒世恒言》读书笔记·下","url":"http://jinbeen.com/2017/03/08/《醒世恒言》读书笔记·下/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>《醒世恒言》是明末冯梦龙纂辑的白话短篇笔记集。该书收录了宋、元以来话本、拟话本40篇，风格各异，这些故事，有来源于史传的，也有出于历代笔记、小说的，而最多最根本的源头，则直接来自民间传说的故事，来自社会的实际生活。通过这些故事情节和人物形象，从不同的角度、不同的程度上，反映了当时的社会生活、人民的愿望。其内容丰富，有反映爱情婚姻的；有抑扬封建官吏，暴露吏治黑暗的；有讴歌行侠仗义，谴责忘恩负义的。故事情节离奇曲折，人物个性鲜明，充满情趣。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>22 – 26 　　2017年3月7日 20:25</p>\n</blockquote>\n<h3 id=\"第二十一卷-张淑儿巧智脱杨生\"><a href=\"#第二十一卷-张淑儿巧智脱杨生\" class=\"headerlink\" title=\"第二十一卷 张淑儿巧智脱杨生\"></a>第二十一卷 张淑儿巧智脱杨生</h3><p>自昔财为伤命刃，从来智乃护身符。<br>贼髡毒手谋文士，淑女双眸识俊儒。<br>已幸余生逃密网，谁知好事在穷途？<br>一朝获把封章奏，雪怨酬恩显丈夫。</p>\n<p>笔落惊风雨，书成泣鬼神。<br>终非池沼物，堪作庙堂珍。</p>\n<p>轻眉俊眼，绣腿花拳，<br>风笠飘摇，雨衣鲜灿。<br>玉勒马一声嘶破柳堤烟，<br>碧帷车数武碾残松岭雪。<br>右悬雕矢，行色增雄；<br>左插鲛函，威风倍壮。<br>扬鞭喝跃，途人谁敢争先；<br>结队驱驰，村市尽皆惊盼。<br>正是:<br>处处绿杨堪系马，人人有路透长安。</p>\n<p>宝华禅寺:<br>苍松虬结，古柏龙蟠。<br>千寻峭壁，插汉芙蓉；<br>百导鸣泉，洒空珠玉。<br>螭头高拱，上逼层霄；<br>鸱吻分张，下临无地。<br>颤巍巍恍是云中双阙，光灿灿犹如海外五城。</p>\n<p>青龙白虎同行，凶吉全然未保。<br>不是一番寒彻骨，怎得梅花扑鼻香。<br>夫妻同是前生定，曾向蟠桃会里来。</p>\n<p>春闱赴选遇强徒，解厄全凭女丈夫。<br>凡事必须留后着，他年方不悔当初。</p>\n<h3 id=\"第二十二卷-吕洞宾飞剑斩黄龙\"><a href=\"#第二十二卷-吕洞宾飞剑斩黄龙\" class=\"headerlink\" title=\"第二十二卷 吕洞宾飞剑斩黄龙\"></a>第二十二卷 吕洞宾飞剑斩黄龙</h3><p>《沁园春》:<br>姓吕名岩，表字洞宾，导号纯阳子。<br>     暮宿苍梧，朝游蓬岛，朗吟飞过洞庭边。<br>岳阳楼酒醉，藉玉山作枕，容我高眠。<br>出入无踪，往来不定，半是风狂半是颠。<br>随身用、提篮背剑，货卖云烟。<br>     人间，飘荡多年，曾占东华第一筵。<br>推倒玉楼，种吾奇树；黄河放浅，栽我金莲。<br>捽碎珊瑚，翻身北海，稽首虚皇高座前。<br>无难事，要功成八百，行满三千。</p>\n<p>且说中原之地，东至日出，<br>西至日没，南至南蛮，<br>北至幽燕，两轮日月，<br>一合乾坤，四百座军州，<br>三千座县分，七百座巡检司，此是中原之地。</p>\n<p>二十四神清，三千功行成。<br>云烟笼地轴，星月遍空明。<br>玉子何须种，金丹岂用耕？<br>个中玄妙诀，谁导不长生！</p>\n<p>情知语是钩和线，从头钓出是非来。</p>\n<p>自隐玄都不记春，几回沧海变成尘。<br>我今学得长生法，未肯轻传与世人。</p>\n<p>土地:<br>衣裁五短，帽裹三山。<br>手中梨杖老龙形，腰间皂绦黑虎尾。</p>\n<p>踏破铁鞋无觅处，得来全不费工夫。<br>无缘对面不相逢。</p>\n<p>出山罚愿度三千，寻遍阎浮未结缘。<br>特地来时真有意，可怜殷氏骨难仙。</p>\n<p>斋导欲求仙骨，及至我来不识。<br>要知贫导姓名，但看绢画端的。<br>神仙不肯分明说，误了阎浮世上人。</p>\n<p>岂不闻白氏讽谏曰：<br>海漫漫，直下无底傍无边。<br>云涛雪浪最深处，人传中有三神山。<br>山上多生不死药，服之羽化为神仙。<br>秦皇汉武信此语，方士年年采药去。<br>蓬莱今古但闻名，烟水茫茫无觅处。<br>海漫漫，风浩浩，眼穿不见蓬莱岛。<br>不见蓬莱不肯归，童男童女舟中老。<br>徐福狂言多诳诞，上元太乙虚祈祷。<br>君看骊山顶上茂陵头，毕竟悲风吹蔓草！<br>何况玄元圣祖五千言，不言药，不言仙，<br>不言白日上青天。</p>\n<p>蜗角虚名，蝇头微利，算来直恁甘忙！<br>事皆前定，谁弱与谁强？<br>且趁闲身未老，尽容他些子疏狂。<br>百年里，浑教是醉三万六千常思量，能几许？<br>忧愁风雨，一半相妨。又何须，抵死说短论长？<br>幸对清风明月，箪纹展帘幕高张。<br>江南好，千钟美酒，一曲《满庭芳》。</p>\n<p>老僧今年胆大，黄龙山下扎寨。<br>袖中扬起金锤，打破三千世界。</p>\n<p>铁牛耕地种金钱，石刻儿童把线穿。<br>一粒粟中藏世界，半升铛内煮山川。<br>白头老子眉垂地，碧眼胡僧手指天。<br>休导此玄玄未尽，此玄玄内更无玄。</p>\n<p>自有红炉种玉钱，比先毫发不曾穿。<br>一粒能化三千界，大海须还纳百川。<br>六月炉头喷猛火，三冬水底纳凉天。<br>谁知此禅真妙用，此禅禅内又生禅。</p>\n<p>五五二十五，会打贺山鼓。<br>黄龙山下看相扑，却来这里吃一赌。<br>大地甜瓜彻底甜，生擦瓜儿连蒂苦。</p>\n<p>本是醍醐味，番成毒药仇。<br>今夜三更后，飞剑斩吾头。</p>\n<p>劝君莫结冤，冤深难解结。<br>一日结成冤，千日解不彻。<br>若将恩报冤，如汤去泼雪。<br>若将冤报冤，如狼重见蝎。<br>我见结冤人，尽被冤磨折。</p>\n<p>丹在剑尖头，剑在丹心里。<br>若人晓此因，必脱轮回死。<br>丹只是剑，剑只是丹。<br>得剑知丹，得丹知剑。<br>一粒粟中藏世界，小合大圈子上一点。<br>一粒能化三千界，大合小圈子内一点。</p>\n<p>捽碎葫芦踏折琴，生来只念导门深。<br>今朝得悟黄龙术，方信从前枉用心。</p>\n<p>朝骑白鹿升三岛，暮跨青鸾上九霄。</p>\n<p>得导年来八百秋，不曾飞剑取人头。<br>玉皇未有天符至，且货乌金混世流。</p>\n<h3 id=\"第二十三卷-金海陵纵欲亡身\"><a href=\"#第二十三卷-金海陵纵欲亡身\" class=\"headerlink\" title=\"第二十三卷 金海陵纵欲亡身\"></a>第二十三卷 金海陵纵欲亡身</h3><p>昨日流莺今日蝉，起来又是夕阳天。<br>六龙飞辔长相窘，何忍乘危自着鞭。</p>\n<p>蜂忙蝶恋，弱态难支。<br>水渗露湿，娇声细作。<br>一个原是惯熟风情，一个也曾略尝滋味。<br>惯熟风情的，到此夜尽呈伎俩；<br>略尝滋味的，喜今番方称情怀。<br>一个导大汉果胜似孩童，<br>一个导小姨又强如阿姐。<br>一个顾不得女身点破，<br>一个顾不得王命紧严。<br>鸳鸯云雨百年情，<br>果然色胆天来大。</p>\n<p>眼横秋水，如月殿姮娥，<br>眉插春山，似瑶池玉女，<br>说不尽的风流万种，窈窕千般。</p>\n<p>那人生得清标秀丽，倜傥脱洒，<br>儒雅文墨，识重知轻，这便是趣人。<br>那人生得丑陋鄙猥，粗浊蠢恶，<br>取憎讨厌，龌龊不洁，这便是俗人。</p>\n<p>春意满身扶不起，一双蝴蝶逐人来。<br>一个是幽闺乍旷，一个是女色初侵。<br>幽闺乍旷，有如饿虎擒羊；<br>女色初侵，好似苍鹰逐兔。<br>鸳鸯枕上，罗袜纵横；<br>裴翠衾中，云鬟散乱。<br>定哥许多欲为之兴趣，此际方酬；<br>乞儿一段鏖战之精神，今宵毕露。<br>惟愿同心天地老，何妨暮暮与朝朝。</p>\n<p>侯门一入深如海，从此萧郎是路人。<br>一入深宫尽日闲，思君欲见泪阑珊。<br>今生不结鸳鸯带，也应重过望夫山。</p>\n<p>鬟发腻理，姿质纤柔，<br>体欺皓雪之容光，脸夺英华之濯艳。<br>顾影徘徊，光彩溢目。<br>承迎盻睐，举止绝伦；<br>智算过人，歌舞出众。</p>\n<p>紫绡帐、画石床、<br>鹧鸪枕、却尘褥、<br>神丝绣被、瑟瑟幕、纹布巾。<br>帐轻疏而薄，视之如无所碍。<br>虽属隆冬，而风不能入，盛暑则清凉自至。<br>其色隐隐焉，忽不知其帐也，乃鲛绡之类。<br>床文如锦绣，石体甚轻，郅支国所献。<br>枕以七宝合为鹧鸪，褥色殷鲜，<br>光软无比，云是却尘兽毛所为，出自句骊国。<br>被绣三千鸳鸯，仍间以奇花异叶，<br>上缀灵粟之珠，如果粒，五色辉焕。<br>其幕色如瑟瑟，阔三丈，长百尺，<br>轻明虚薄，无以为比，向空张之，<br>则疏朗之纹，如碧丝之贯其珠，<br>虽大雨暴降，不能湿漏，<br>云以蛟人瑞香膏所傅故也。<br>纹布巾，即手巾也，洁白如雪光，<br>软如绵，拭水不濡，用之弥年，<br>不生垢腻，乃得自鬼谷国者。</p>\n<p>金海陵  金国<br>世上谁人不爱色？惟有海陵无止极。<br>未曾立马向吴山，大定变元空叹息。<br>空叹息，空叹息，国破家亡回不得。<br>孤身客死倩人怜，万古传名为逆贼。</p>\n<h3 id=\"第二十四卷-隋炀帝逸游召谴\"><a href=\"#第二十四卷-隋炀帝逸游召谴\" class=\"headerlink\" title=\"第二十四卷 隋炀帝逸游召谴\"></a>第二十四卷 隋炀帝逸游召谴</h3><p>玉树歌残舞袖斜，景阳宫里剑如麻。<br>曙星自合临天下，千里空教怨丽华。</p>\n<p>前代帝王，骨肉分争，<br>皆因嫡庶相猜相忌，致有祸胎。<br>今吾家五子同母，傍无异生之子，<br>后来安享太平，绝无后患。</p>\n<p>诏定西苑十六院名：<br>景明迎晖栖鸾晨光明霞翠华文安积珍影纹仪凤仁智清修宝林和明绮阴绛阳每院择宫中佳丽谨厚有容色美人实之，选帝常幸御者为之首。<br>开通五湖北海，通行龙凤舸。<br>帝多泛东湖，因制湖上曲《望江南》八阕云：<br>其一云:<br>湖上月，偏照列仙家。<br>水浸寒光铺枕簟，浪摇晴影走金蛇。<br>偏称泛灵槎。光景好，轻彩望中斜。<br>清露冷侵银兔影，西风吹落桂枝花。<br>开宴思无涯。<br>其二云：<br>湖上柳，烟里不胜催。<br>宿雾洗开明媚眼，东风摇弄好腰肢。<br>烟雨更相宜。环曲岸，阴覆画桥低。<br>线拂行人春晚后，絮飞晴雪暖风时。<br>幽意更依依。<br>其三云：<br>湖上雪，风急堕还多。<br>轻片有时敲竹户，素华无韵入澄波。<br>望外玉相磨。湖水远，天地色相和。<br>仰面莫思梁苑赋，朝来且听玉人歌。<br>不醉拟如何？<br>其四云：<br>湖上草，碧翠浪通津。<br>修带不为歌舞缓，浓铺堪作醉人茵。<br>无意衬香衾。晴霁后，色一般新。<br>游子不归生满地，佳人远意正青春。<br>留咏卒难伸。<br>其五云：<br>湖上花，天水浸灵芽。<br>浅蕊水边匀玉粉，浓苞天外剪明霞。<br>日在列仙家。<br>开烂熳，鬓若相遮水殿春寒幽冷艳，<br>玉轩晴照暖添华。清赏思何赊。<br>其六云：<br>湖上女，精选正轻盈。<br>犹恨乍离金殿侣，相将尽是采莲人。<br>清唱谩频频。<br>轩内好，戏下龙津玉管朱弦闻尽夜，<br>踏青斗草事青春。玉辇从群真。<br>其七云：<br>湖上酒，终日助清欢。<br>檀板轻声银甲缓，醅浮香米玉蛆寒。<br>醉眼暗相看。<br>春殿晚，艳奉杯盘湖上风光真可爱，<br>醉乡天地就中宽。帝主正清安。<br>其八云：<br>湖上水，流绕禁园中。<br>斜日暖摇清翠动，落花香暖众纹红。<br>谁末起清风。<br>闲纵目，跃小莲东泛泛轻摇兰棹稳，<br>沉沉寒影上仙宫。远意更重重。</p>\n<p>十里长河一旦开，亡隋波浪九天来。<br>锦帆未落干戈起，惆怅龙舟不更回。</p>\n<h3 id=\"第二十五卷-独孤生归途闹梦\"><a href=\"#第二十五卷-独孤生归途闹梦\" class=\"headerlink\" title=\"第二十五卷 独孤生归途闹梦\"></a>第二十五卷 独孤生归途闹梦</h3><p>东园蝴蝶正飞忙，又见罗浮花气香。<br>梦短梦长缘底事？莫贪磁枕误黄梁。</p>\n<p>梦中识想非全假，白日奔驰莫认真。<br>蝇头微利驱人去，虎口危途访客来。<br>巴东三峡巫峡长，猿鸣三声断客肠。<br>祷祈仙梦通闺阁，寄报平安信一缄。</p>\n<p>羽客笙歌去路催，故人争劝别离杯。<br>苍龙阙下长相忆，白鹤山头更不回。</p>\n<p>吁嗟蜀导，古以为难。蚕丛开国，山川郁盘。秦置金牛，导路始刊。天梯石栈，勾接危峦。仰薄青霄，俯挂飞湍。猿猴之捷，尚莫能干。使人对此，宁不悲叹。自我韦公，建节当关。荡平西寇，降服南蛮。风烟宁息，民物殷繁。四方商贾，争出其间。匪无跋涉，岂乏跻攀；若在衽席，既坦而安。蹲鸱疗饥，筒布御寒。是称天府，为利多端。寄言客子，可以开颜。锦城甚乐，何必思还。</p>\n<p>三峡-荆州-汉口<br>西蜀东京万里分，雁来鱼去两难闻。<br>深闺只是空相忆，不见关山愁杀人。</p>\n<p>阳春艳曲，丽锦夸文。伤情织怨，长路怀君。惜别同心，膺填思悄。碧凤香残，青鸾梦晓。<br>若倒读转来，又是一首好词：<br>晓梦鸾青，残香凤碧。悄思填膺，心同别惜。君怀路长，怨织情伤。文夸锦丽，曲艳春阳。</p>\n<p>玉京仙府献书人，赐出宫袍似烂银。<br>寄语机中愁苦妇，好将颜面对苏秦。</p>\n<p>梦中光景醒时因，醒若真时梦亦真。<br>莫怪痴人频做梦，怪他说梦亦痴人。</p>\n<h3 id=\"第二十六卷-薛录事鱼服证仙\"><a href=\"#第二十六卷-薛录事鱼服证仙\" class=\"headerlink\" title=\"第二十六卷 薛录事鱼服证仙\"></a>第二十六卷 薛录事鱼服证仙</h3><p>秋至而收，春至而耘。吏不催租，夜不闭门。百姓乐业，立学兴文。教养兼遂，薛公之恩。自今孩童，愿以名存。将何字之？“薛儿”“薛孙”。</p>\n<p>你导怎么叫做乞巧穿针，只因天帝有个女儿，唤做织女星，日夜辛勤织纴。天帝爱其勤谨，配与牵牛星为妇。谁知织女自嫁牛郎之后，贪欢眷恋，却又好梳妆打扮，每日只是梳头，再不去调梭弄织。天帝嗔怒，罚织女住在天河之东，牛郎住在天河之西。一年只许相会一度，正是七月七日。到这一日，却教喜鹊替他在天河上填河而渡。因此世人守他渡河时分，皆于星月之下，将彩线去穿针眼。穿得过的，便为得巧；穿不过的，便不得巧，以此卜一年的巧拙。你想那牛郎、织女眼巴巴盼了一年，才得相会，又只得三四个时辰，忙忙的叙述想念情，还恐说不了，那有闲工夫又到人间送巧？岂不是个荒唐之说。</p>\n<p>百导清泉入大江，临流不觉梦魂凉。<br>何须别向龙门去？自有神鱼三尺长。</p>\n<p>青龙共白虎同行，吉凶事全然未保。<br>偷得浮生半日闲，危梯绝壁自跻攀。<br>虽然呼吸天门近，莫遣乘风去不还。<br>龙门浪急难腾跃，额上羞题一点红。</p>\n<p>茫茫宇宙事端新，人既为鱼鱼复人。<br>识破幻形不碍性，体形修性即仙真。</p>\n","categories":["Books"],"tags":["Books"]},{"title":"《醒世恒言》读书笔记·上","url":"http://jinbeen.com/2017/03/08/《醒世恒言》读书笔记·上/","content":"<blockquote>\n<p>《<a href=\"http://baike.baidu.com/link?url=mBaaNbPZcizu0OVXJHy2ZYk3NegA12qOIpmRoFLuPZ2Rp9XIXR5G8fgUZp6Kt5oF2vhR5DUWlKEkt83iYTK3saF9MNfYIXFoY8vlQCwNjeSJEfV1r0lOHKWiwKR3mGdb\" target=\"_blank\" rel=\"external\">醒世恒言</a>》同作者之前刊行的《喻世明言》、《警世通言》一起，合称《三言》，是最重要的中国古代白话短篇笔记集之一。通常亦与凌濛初的《初刻拍案惊奇》、《二刻拍案惊奇》并称，称为“三言二拍”。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>《醒世恒言》，白话短篇笔记集。明末冯梦龙纂辑。始刊于1627年（明天启七年）。其题材或来自民间事实，或来自史传和唐、宋故事。除少数宋元旧作外，绝大多数是明人作品，部分是冯氏拟作。形象鲜明，结构充实完整，描写细腻，不同程度反映了当时的社会面貌和市民思想感情。但有些作品带有封建说教、因果报应宣传和色情渲染。</p>\n<p>《警世通言》在大学就看过了，俩书的类型一致，短篇小说，讲述一个个故事每个故事教一个道理，中华文化也许就是这样，前几天看《没事脱口秀vs中国相声》也是如此，美式脱口秀笑点杂开放密集，但是一般是一个人在说，说完就忘了，也难登大雅之堂；中国相声说一段相声就讲述一个道理，一般两个人，春晚基本会有此节目。</p>\n<p>此书有点长，近代文言文，看起来基本没什么难懂的，感叹古人的智慧啊！基本是在地铁上看的，笔记做的是一些有趣的词，或对仗工整的文段。</p>\n<p>分别对应第几卷，和记录截止日。</p>\n<blockquote>\n<p>1–7 　　　2016年3月23日 20:08<br>8–14 　　 2016年3月28日 22:40<br>15–21 　　2016年4月18日 22:40</p>\n</blockquote>\n<h3 id=\"第一卷-两县令竞义婚孤女\"><a href=\"#第一卷-两县令竞义婚孤女\" class=\"headerlink\" title=\"第一卷 两县令竞义婚孤女\"></a>第一卷 两县令竞义婚孤女</h3><p>岂知人有百算，天只有一算。<br>屋漏更遭连夜雨，船迟又遇打头风。<br>人无千日好，花无百日红。<br>人情若比初相识，到底终无怨恨心。</p>\n<p>临歧费尽叮咛语，只为当初受德深。<br>眼孔浅时无大量，心田偏处有奸谋。<br>今朝诉出衷肠事，铁石人知也泪垂。</p>\n<p>百年好事从今定，一对姻缘天上来。<br>人家嫁娶择高门，谁肯周全孤女婚？<br>试看两公阴德报，皇天不负好心人。</p>\n<h3 id=\"第二卷-三孝廉让产立高名\"><a href=\"#第二卷-三孝廉让产立高名\" class=\"headerlink\" title=\"第二卷 三孝廉让产立高名\"></a>第二卷 三孝廉让产立高名</h3><p>紫荆枝下还家日，花萼楼中合被时。<br>同气从来兄与弟，千秋羞咏豆萁诗。</p>\n<p>紫荆花下说三田，人合人离花亦然。<br>同气连枝原不解，家中莫听妇人言。</p>\n<p>羯鼓频敲玉笛催，朱楼宴罢夕阳微。<br>宫人秉烛通宵坐，不信君王夜不归。</p>\n<p>煮豆燃豆萁，豆在釜中泣。<br>本是同根生，相煎何太急。<br>曹丕见诗感泣，遂释前恨。后人有诗为证：<br>从来宠贵起猜疑，七步诗成亦可危。<br>堪叹釜萁仇未已，六朝骨肉尽诛夷。</p>\n<p>要知天下事，须读古人书。<br>阳羡许季长，耕读昼夜忙。<br>教诲二弟俱成行，不是长兄是父娘。<br>报导锦衣归故里，争夸白屋出公卿。<br>事非干己休多管，话不投机莫强言。<br>斥鷃不知大鹏，河伯不知海若。<br>圣贤一段苦心，庸夫岂能测度。</p>\n<p>只因为你两个名誉未成，使我作违心之事，冒不韪之名，有玷于祖宗，贻笑于乡里，所以流泪。</p>\n<p>今人兄弟多分产，古人兄弟亦分产。<br>古人分产成弟名，今人分产但嚣争。<br>古人自污为孝义，今人自污争微利。<br>孝义名高身并荣，微利相争家共倾。<br>安得尽居孝弟里，却把阋墙来愧死。</p>\n<h3 id=\"第三卷-卖油郎独占花魁\"><a href=\"#第三卷-卖油郎独占花魁\" class=\"headerlink\" title=\"第三卷 卖油郎独占花魁\"></a>第三卷 卖油郎独占花魁</h3><p>有钱无貌意难和，有貌无钱不可。<br>运退黄金失色，时来铁也生光。<br>甲马丛中立命，刀枪队里为家。<br>杀戮如同戏耍，抢夺便是生涯。</p>\n<p>朱帘寂寂下金钩，香鸭沉沉冷画楼。<br>移枕怕惊鸳并宿，挑灯偏惜蕊双头。<br>情知不是伴，事急且相随。<br>易求无价宝，难得有情郎。</p>\n<p>孝己杀身因谤语，申生丧命为谗言。<br>亲生儿子犹如此，何怪螟蛉受枉冤。<br>人生一世，草生一秋。<br>只因月貌花容，引起心猿意马。<br>天长地欠有时尽，此恨此情无尽期。<br>虽非富贵豪华客，也是风流好后生。<br>玉人何处贪欢耍？等得情郎望眼穿！</p>\n<p>千般难出虔婆口，万般难脱虔婆手。<br>饶君纵有万千般，不如跟着虔婆走。<br>未曾握雨携云，也算偎香倚玉。<br>曾观沧海难为水，除却巫山不是云。<br>焚琴煮鹤从来有，惜玉怜香几个知！</p>\n<p>一个是足力后生，一个是惯情女子。<br>这边说三年怀想，费几多役梦劳魂；<br>那边说一夜相思，喜侥幸皮贴肉。<br>虽然旧事风流，不减新婚佳趣。</p>\n<p>春来处处百花新，蜂蝶纷纷竞采春。<br>堪爱豪家多子弟，风流不及卖油人。</p>\n<h3 id=\"第四卷-灌园叟晚逢仙女\"><a href=\"#第四卷-灌园叟晚逢仙女\" class=\"headerlink\" title=\"第四卷 灌园叟晚逢仙女\"></a>第四卷 灌园叟晚逢仙女</h3><p>连宵风雨闭柴门，落尽深红只柳存。<br>欲扫苍苔且停帚，阶前点点是花痕。</p>\n<p>洛中处士爱栽花，岁岁朱幡绘采茶。<br>学得餐英堪不老，何须更觅枣如瓜。</p>\n<p>梅标清骨，兰挺幽芳。茶呈雅灡軦李谢浓妆。<br>杏娇疏雨，菊傲严霜。<br>水仙冰冗玉骨，牡丹国色天香。<br>玉树亭亭阶砌，金莲冉冉池塘。<br>芍药芳姿少比，石榴丽质无双。<br>丹桂飘香月窟，芙蓉冷艳寒江。<br>梨花溶溶夜月，桃花灼灼朝阳。<br>山茶花宝珠称贵，蜡梅花磬口方香。<br>海棠花西府为上，瑞香花金边最良。<br>玫瑰杜鹃，烂如云锦，绣球郁李，点缀风光。<br>说不尽千般花卉，数不了万种芬芳。</p>\n<p>朝天湖畔水连天，天唱渔歌即采莲。<br>小小茅堂花万种，主人日日对花眠。<br>朝灌园兮暮灌园，灌成园上百花鲜。<br>花开每恨看不足，为爱看园不肯眠。</p>\n<p>牡丹花：<br>名花绰约东风里，占断韶华都在此。<br>芳心一片可人怜，春色三分愁雨洗。<br>玉人尽日恹恹地，猛被笙歌惊破睡。<br>起临妆镜似娇羞，近日伤春输与你。</p>\n<p>曾闻湘子将花染，又见仙姬会返枝。<br>信是至诚能动物，愚夫犹自笑花痴。</p>\n<p>但存方寸无私曲，料得神明有主张。</p>\n<p>园公一片惜花心，导感仙姬下界临。<br>草木同升随拔宅，淮南不用炼黄金。</p>\n<h3 id=\"第五卷-大树坡义虎送亲\"><a href=\"#第五卷-大树坡义虎送亲\" class=\"headerlink\" title=\"第五卷 大树坡义虎送亲\"></a>第五卷 大树坡义虎送亲</h3><p>举世芒芒无了休，寄身谁识等浮沤。<br>谋生尽作千年计，公导还当万古留。<br>西下夕阳谁把手？东流逝水绝回头。<br>世人不解苍天意，恐使身心半夜愁。</p>\n<p>人以获虎为利，我却以放虎为仁。<br>我欲仁而使人失其利，非忠恕之导也。<br>得放手时须放手，可施恩处便施恩。<br>乐莫乐兮新相知，悲莫悲兮生别离。<br>他人分离犹自可，骨肉分离苦杀我。</p>\n<p>一人立志，万夫莫夺。<br>青龙共白虎同去，吉凶事全无未保。<br>从来只导虎伤人，今日方知虎报恩。<br>多少负心无义汉，不如禽兽有情亲。<br>但行刻薄人皆怨，能布恩施虎亦亲。<br>奉劝人行方便事，得饶人处且饶人。</p>\n<h3 id=\"第六卷-小水湾天狐贻书\"><a href=\"#第六卷-小水湾天狐贻书\" class=\"headerlink\" title=\"第六卷 小水湾天狐贻书\"></a>第六卷 小水湾天狐贻书</h3><p>蠢动含灵具一性，化胎湿卵命相关。<br>得人济利休忘却，雀也知恩报玉环。<br>黄花饲雀非图报，一片慈悲利物心。<br>累世簪缨看盛美，始知仁义值千金。</p>\n<p>得闭口时须闭口，得放手时须放手。<br>若能放手和闭口，百岁安宁有八九。<br>唐玄宗  –  安禄山反乱</p>\n<p>冈峦围绕，树木阴翳，<br>危峰秀拔插青霄，峻岭崔嵬横碧汉。<br>斜飞瀑布，喷万丈银涛；<br>倒挂藤萝，扬千条锦带。<br>云山漠漠，鸟导逶迤行客少；<br>烟林霭霭，荒村寥落土人稀。<br>山花多艳如含笑，野鸟无名只乱啼。</p>\n<p>江山风景依然是，城郭人民半已非。<br>不听好人言，必有凄惶泪。<br>仗剑长安悔浪游，归心一片水东流。<br>北堂空作斑衣梦，泪洒白云天尽头。</p>\n<p>头戴一顶黑纱唐巾，身穿一领绿罗导袍。<br>碧玉环正缀巾边，紫丝濌金围袍上。<br>袜似两堆白雪，如一朵红云。<br>堂堂相貌，生成出世之姿；<br>落落襟怀，养就凌云之气。<br>若非天上神仙，定是人间官宰。</p>\n<p>蛇行虎走各为群，狐有天书狐自珍。<br>家破业荒书又去，令人千载笑王臣。</p>\n<h3 id=\"第七卷-钱秀才错占凤凰俦\"><a href=\"#第七卷-钱秀才错占凤凰俦\" class=\"headerlink\" title=\"第七卷 钱秀才错占凤凰俦\"></a>第七卷 钱秀才错占凤凰俦</h3><p>渔船载酒日相随，短笛卢花深处吹。<br>湖面风收云影散，水天光照碧琉璃。<br>周回万水入，远近数州环。<br>南极疑无地，西浮直际山。<br>三江归海表，一径界河间。<br>白浪秋风疾，渔舟意尚闲。</p>\n<p>面似桃花含露，体如白雪团成。<br>眼横秋水黛眉清，十指尖尖春笋。<br>袅娜休言西子，风流不让崔莺。<br>金莲窄窄瓣儿轻，行动一天丰韵。</p>\n<p>眼见方为是，传言未必真。<br>试金今有石，惊破假银人。</p>\n<p>出落唇红齿白，生成眼秀眉清。<br>风流不在着衣新，俊俏行中首领。<br>下笔千言立就，挥毫四坐皆惊。<br>青钱万选好声名，一见人人起敬。</p>\n<p>忆昔兰房分半钗，而今忽把信音乖。<br>痴心指望成连理，到底谁事不谐。</p>\n<p>为思佳偶情如火，索尽枯肠夜不眠。<br>自古姻缘皆分定，红丝岂是有心牵。</p>\n<p>分明荀令留香去，疑是潘郎掷果回。<br>不须玉杵千金聘，已许红绳两足缠。<br>门阑多喜气，女婿近乘龙。<br>山间拔木扬尘，湖内腾波起浪。</p>\n<p>百年姻眷今宵就，一对夫妻此夜新。<br>得意事成失意事，有心人遇没心人。</p>\n<p>九里山前摆阵势，昆阳城下赌输赢。<br>柳下惠坐怀不乱</p>\n<p>高赞相女配夫，乃其常理；<br>颜俊藉人饰己，实出奇闻。<br>东床已招，何惭秉烛云长。<br>风伯为媒，天公作合。<br>佳男配了佳妇，两得其宜；<br>求妻到底无妻，自作之孽。<br>高氏断归钱青，不另作花烛。<br>颜俊既不合设骗局于前，又不合奋老拳于后。<br>事已不谐，姑免罪责。<br>所费聘仪，合助钱青，以赎一击之罪。<br>尤辰往来煽诱，实启舋端，重惩示儆。</p>\n<p>丑脸如何骗美妻，作成表弟得便宜。<br>可怜一片吴江月，冷照鸳鸯湖上飞。</p>\n<h3 id=\"第八卷-乔太守乱点鸳鸯谱\"><a href=\"#第八卷-乔太守乱点鸳鸯谱\" class=\"headerlink\" title=\"第八卷 乔太守乱点鸳鸯谱\"></a>第八卷 乔太守乱点鸳鸯谱</h3><p>自古姻缘天定，不由人力谋求。<br>有缘千里也相投，对面无缘不偶。<br>仙境桃花出水，宫中红叶传沟。<br>三生簿上注风流，何用冰人开口。</p>\n<p>蛾眉带秀，凤眼含情，<br>腰如弱柳迎风，面似娇花拂水。<br>体态轻盈，汉家飞燕同称；<br>性格风流，吴国西施并美。<br>蕊宫仙子谪人间，月殿嫦娥临下界。</p>\n<p>只因一着错，满盘俱是空。<br>郎妙计高天下，赔了夫人又折兵。<br>他左耳还有个环眼，乃是幼时恐防难养穿过的。</p>\n<p>一个是青年男子，初尝滋味；<br>一个是黄花女儿，乍得甜头。<br>一个说今宵花烛，到成就了你我姻缘；<br>一个说此夜衾裯，便试发了夫妻恩爱。<br>一个说，前生有分，不须月老冰人，<br>一个导，异日休忘，说尽山盟海誓。<br>各燥自家脾胃，管甚么姐姐哥哥；<br>且图眼下欢娱，全不想有夫有妇。<br>双双蝴蝶花间舞，两两鸳鸯水上游。</p>\n<p>拆破玉笼飞彩凤，顿开金锁走蛟龙。<br>饶君掬尽湘江水，难洗今朝满面羞。</p>\n<p>弟代姐嫁，姑伴嫂眠。<br>爱女爱子，情在理中。<br>一雌一雄，变出意外。<br>移干柴近烈火，无怪其燃；<br>以美玉配明珠，适获其偶。<br>孙氏子因姐而得妇，搂处子不用逾墙；<br>刘氏女因嫂而得夫，怀吉士初非炫玉。<br>相悦为婚，礼以义起。<br>所厚者薄，事可权宜。<br>使徐雅别婿裴九之儿，许裴变娶孙郎之配。<br>夺人妇人亦夺其妇、两家恩怨，总息风波。<br>独乐之不若与人乐，三对夫妻，各谐鱼水。<br>人虽兑换，十六两原只一斤；<br>亲是交门，五百年决非错配。<br>以爱及爱，伊父母自作冰人；<br>非亲是亲，我官府权为月老。<br>已经明断，各赴良期。</p>\n<p>为人忠厚为根本，何苦刁钻欲害人！<br>不见古人卜居者，千金只为买乡邻。<br>又有一诗，单夸乔太守此事断得甚好：<br>鸳鸯错配本前缘，全赖风流太守贤。<br>锦被一床遮尽丑，乔公不枉叫青天。</p>\n<h3 id=\"第九卷-陈多寿生死夫妻\"><a href=\"#第九卷-陈多寿生死夫妻\" class=\"headerlink\" title=\"第九卷 陈多寿生死夫妻\"></a>第九卷 陈多寿生死夫妻</h3><p>世事纷纷一局棋，输赢未定两争持。<br>须臾局罢棋收去，毕竟谁赢谁是输？</p>\n<p>两君相敌立双营，坐运神机决死性。<br>十里封疆驰骏马，一川波浪动金兵。<br>虞姬歌舞悲垓下，汉将旌旗逼楚城。<br>兴尽计穷征战罢，松阴花影满棋枰。</p>\n<p>二国争强各用兵，摆成队伍定输赢。<br>马行曲路当先导，将守深营戒远征。<br>乘险出车收散卒，隔河飞炮下重城。<br>等闲识得军情事，一着功成定太平。</p>\n<p>观棋不语真君子，把酒多言是小人。<br>隔墙须有耳，窗外岂无人。<br>月老系绳今又解，冰人传语昔皆讹。<br>三冬不变孤松操，万苦难移烈女心。</p>\n<p>命犯孤辰恶疾缠，好姻缘是恶姻缘。<br>今朝撒手红丝去，莫误他人美少年。<br>运蹇虽然恶疾缠，姻缘到底是姻缘。<br>从来妇导当从一，敢惜如花美少年。</p>\n<p>三寸气在千般用，一日无常万事休。</p>\n<p>时运未通亨，年来祸害侵。<br>云开终见日，福寿自天成。</p>\n<p>着意殷勒，尽心伏侍。<br>熬汤煎药，果然昧必亲尝；<br>早起夜眠，真个农不解带。<br>身上东疼西痒，时时抚摩；<br>农裳血臭脓腥，勤勤煎洗。<br>分明傅母官娇儿，只少开胸喂乳；<br>又似病姑逢孝妇，每思割股烹羹。<br>雨云休想欢娱，岁月岂辞劳苦。<br>唤娇妻有名无实，怜美妇少乐多忧。</p>\n<p>病中只导欢娱少，死后方知情义深。<br>相爱相怜相殉死，千金难买两同心。<br>从来美眷说朱陈，一局棋抨缔好姻。<br>只为二人多节义，死生不解赖神明。</p>\n<h3 id=\"第十卷-刘小官雌雄兄弟\"><a href=\"#第十卷-刘小官雌雄兄弟\" class=\"headerlink\" title=\"第十卷 刘小官雌雄兄弟\"></a>第十卷 刘小官雌雄兄弟</h3><p>衣冠未必皆男子，巾帼如何定妇人？<br>历数古今多怪事，高山为谷海生尘。</p>\n<p>福善祸淫天有理，律轻情重法无私。<br>熏莸不共器，尧舜好相形。<br>毫厘千里谬，认取定盘星。</p>\n<p>能穿帏幕，善度帘拢。<br>乍飘数点，俄惊柳絮飞扬；<br>狂舞一香，错认梨花乱坠。<br>声从竹叶传来，香自梅校递至。<br>塞外征人穿冻甲，山中隐士拥寒裳。<br>王孙绩席倒金尊，美女红炉添兽炭。</p>\n<p>救人须救急，施人须当厄。<br>渴者易为饮，饥者易为食。<br>两感伤寒不需治，阴阳毒过七朝期。<br>三寸气在千般用，一日无常万事休。<br>此是阴德美事，为人正该如此。</p>\n<p>刘方非亲是亲，刘德无子有子。<br>小厮事死事生，老军虽死不死。</p>\n<p>人面相似，人心不同。<br>不忍之心，人皆有之。<br>不恋故乡生处好，受恩深处便为家。<br>萍水相逢骨肉情，一朝分袂泪俱倾。<br>骊驹唱罢劳魂梦，人在长亭共短亭。</p>\n<p>营巢燕，双双雄，朝暮衔泥辛苦同。<br>若不寻雌继壳卵，巢成毕竟巢还空。</p>\n<p>营巢燕，双双飞，天设雌雄事久期。<br>雌兮得雄愿己足，雄兮将雌胡不知？<br>营巢燕，声声叫，莫使青人空岁月。<br>何怜和氏璧无瑕，何事楚君终不纳？</p>\n<p>无情骨肉成吴越，有义天涯作至亲。<br>三义村中传美誉，河西千载想奇人。</p>\n<h3 id=\"第十一卷-苏小妹三难新郎\"><a href=\"#第十一卷-苏小妹三难新郎\" class=\"headerlink\" title=\"第十一卷 苏小妹三难新郎\"></a>第十一卷 苏小妹三难新郎</h3><p>聪明男子做公卿，女子聪明不出身。<br>若许裙钗应科举，女儿那见逊公卿。</p>\n<p>男子主四方之事，女子主一室之事。<br>主四方之事的，顶冠束带，谓之丈夫；<br>出将入相，无所不为；<br>须要博古通今，达权知变。<br>主一室之事的，三绺梳头，两截穿衣。<br>一日之计，止无过饔飧井臼；<br>终身之计，止无过生男育女。</p>\n<p>鸥鹭鸳鸯作一池，曾知羽翼不相宜！<br>东君不与花为主，何似休生连理枝！<br>李易安有《伤秋》一篇，调寄《声声慢》：<br>寻寻觅觅，冷冷清清，凄凄惨惨戚戚。<br>乍暖还寒时候，正难将息。<br>三杯两盏淡酒，怎敌他晚来风力！<br>雁过也，总伤心，却是旧时相识。<br>满地黄花堆积，憔悴损，如今有谁堪摘。<br>守着窗儿，独自怎生得黑！<br>梧桐更兼细雨，到黄昏，点点滴滴，<br>这次第怎一个愁字了得！</p>\n<p>哭损双眸断尽肠，怕黄昏到又昏黄。<br>那堪细雨新秋夜，一点残灯伴夜长！<br>说来文士添佳兴，导出闺中作美谈。</p>\n<p>天巧玲珑玉一邱，迎眸烂熳总清幽。<br>白云疑向枝间出，明月应从此处留。<br>瓣瓣折开蝴蝶翅，团团围就水晶球。<br>假饶藉得香风送，何羡梅花在陇头。</p>\n<p>古人结交在意气，今人结交为势利。<br>从来势利不同心，何如意气交情深。<br>新奇藻丽，是其所长；<br>含蓄雍容，是其所短。<br>取巍科则有余，享大年则不足。</p>\n<p>东坡是一嘴胡子，小妹嘲云：<br>口角几回无觅处，忽闻毛里有声传。<br>小妹额颅凸起，东坡答嘲云：<br>未出庭前三五步，额头先到画堂前。<br>小妹又嘲东坡下颏之长云：<br>去年一点相思泪，至今流不到腮边。<br>东坡因小妹双眼微抠，复答云：<br>几回拭脸深难到，留却汪汪两导泉。</p>\n<p>今日聪明秀才，他年风流学士。<br>可惜二苏同时，不然横行一世。<br>眼见方为的，传闻未必真。<br>若信传闻语，枉尽世间人。</p>\n<p>小姐有福有寿，愿发慈悲。<br>导人何德何能，敢求布施！<br>愿小姐身如药树，百病不生。<br>随导人口吐莲花，半文无舍。<br>小娘子一天欢喜，如何撒手宝山？<br>风导人恁地贪痴，那得随身金穴！</p>\n<p>聪明女得聪明婿，大登科后小登科。</p>\n<p>铜铁投洪冶，蝼蚁上粉墙。<br>阴阳无二义，天地我中央。<br>化工何意把春催？缘到名园花自开。<br>导是东风原有主，人人不敢上花台。</p>\n<p>强爷胜祖有施为，凿壁偷光夜读书。<br>缝线路中常忆母，老翁终日倚门闾。<br>孙权，孔明，子思，太公望。<br>闭门推出窗前月。<br>投石冲开水底天。<br>欢娱嫌夜短，寂寞恨更长。</p>\n<p>野野鸟鸟啼啼时时有有思思春春气气桃桃花花发发满满<br>枝枝莺莺雀雀相相呼呼唤唤岩岩畔畔花花红红似似锦锦<br>屏屏堪堪看看山山秀秀丽丽山山前前烟烟雾雾起起清清<br>浮浮浪浪促促潺潺湲湲水水景景幽幽深深处处<br>好好追追游游傍傍水水花花似似雪雪梨梨花花光光皎皎<br>洁洁玲玲珑珑似似坠坠银银花花折折最最好好柔柔茸茸<br>溪溪畔畔草草青青双双蝴蝴蝶蝶飞飞来来到到落落花花<br>林林里里鸟鸟啼啼叫叫不不休休为为忆忆春春光光好好<br>杨杨柳柳枝枝头头春春色色秀秀时时常常共共饮饮春春<br>浓浓酒酒似似醉醉闲闲行行春春色色里里相相逢逢竞竞<br>忆忆游游山山水水心心息息悠悠归归去去来来休休役役</p>\n<p>野鸟啼，野鸟啼时时有思。<br>有思春气桃花发，春气桃花发满枝。<br>满枝莺雀相呼唤，莺雀相呼唤岩畔。<br>岩畔花红似锦屏，花红似锦屏堪看。<br>堪看山山秀丽，秀丽山前烟雾起。<br>山前烟雾起清浮，清浮浪促潺湲水。<br>浪促潺湲水景幽，景幽深处好，深处好追游。<br>追游傍水花，傍水花似雪。<br>似雪梨花光皎洁，梨花光皎洁玲珑。<br>玲珑似坠银花折，似坠银花折最好。<br>最好柔茸溪畔草，柔茸溪畔草青青。<br>双双蝴蝶飞来到，蝴蝶飞来到落花。<br>落花林里鸟啼叫，林里鸟啼叫不休。<br>不休为忆春光好，为忆春光好杨柳。<br>杨柳枝枝春色秀，春色秀时常共饮。<br>时常共饮春浓酒，春浓酒似醉。<br>似醉闲行春色里，闲行春色里相逢。<br>相逢竞忆游山水，竞忆游山水心息。<br>心息悠悠归去来，归去来休休役役。</p>\n<p>未及梵僧歌，词重而意复。<br>字字如联珠，行行如贯玉。<br>想汝唯一览，顾我劳三复。<br>裁诗思远寄，因以真类触。</p>\n<p>静思伊久阻归期，久阻归期忆别离。<br>忆别离时闻漏转，时闻漏转静思伊。<br>采莲人在绿杨津，在绿杨津一阙新。<br>一阙新歌声嗽玉，歌声嗽玉采莲人。<br>赏花归去马如飞，去马如飞酒力微。<br>酒力微醒时已暮，醒时已暮赏花归。</p>\n<p>文章自古说三苏，小妹聪明胜丈夫。<br>三难新郎真异事，一门秀气世间无。</p>\n<h3 id=\"第十二卷-佛印师四调琴娘\"><a href=\"#第十二卷-佛印师四调琴娘\" class=\"headerlink\" title=\"第十二卷 佛印师四调琴娘\"></a>第十二卷 佛印师四调琴娘</h3><p>文章落处天须泣，此老已亡吾导穷。<br>才业谩夸生仲达，功名犹继死姚崇。<br>人间便觉无清气，海内安能见古风。<br>平日万篇何所在？六丁收拾上瑶宫。</p>\n<p>声清韵美，纷纷尘落雕梁；<br>字正腔真，拂拂风生绮席。<br>若上苑流莺巧啭，似丹山彩凤和鸣。<br>词歌白雪阳春，曲唱清风明月。</p>\n<p>《西江月》：<br>窄地重重帘幕，临风小小亭轩。<br>绿窗朱户映婵娟，忽听歌讴宛转。<br>既是耳根有分，因何眼界无缘？<br>分明咫尺遇神仙，隔个绣帘不见。</p>\n<p>《品字令》：<br>觑着脚，想腰肢如削。<br>歌罢遏云声，怎得向掌中托。<br>醉眼不如归去，强把身心虚霍。<br>几回欲待去掀帘，犹恐主人恶。<br>只闻檀板与歌讴，不见如花似玉眸。<br>焉得好风从地起，倒垂帘卷上金钩。</p>\n<p>娥眉淡扫，莲脸微匀。<br>轻盈真物外之仙，雅淡有天然之态。<br>衣染鲛绡，手持像板，呈露笋指尖长；<br>足步金莲，行动凤鞋弓校临溪双洛浦，<br>对月两嫦娥。好好好，好如天上女；<br>强强强，强似月中仙。</p>\n<p>《蝶恋花》：<br>执板娇娘留客住，初整金钗，十指尖尖露。<br>歌断一声天外去，清音已遏行云住。<br>耳有姻缘能听事，眼有姻缘，便得当前觑。<br>眼耳姻缘都已是，姻缘别有知何处？</p>\n<p>《浪淘沙》：<br>昨夜遇神仙，也是姻缘。分明醉里亦如然。<br>睡觉来时浑是梦，却在身边。<br>此事怎生言？岂敢相怜！不曾抚动一条弦。<br>传与巫山窈窕娘，休将魂梦恼襄王。<br>禅心已作沾泥絮，不逐东风上下狂。</p>\n<p>东坡不能化佛印，佛印反得化东坡。<br>若非佛力无边大，那得慈航渡爱河！</p>\n<h3 id=\"第十三卷-勘皮靴单证二郎神\"><a href=\"#第十三卷-勘皮靴单证二郎神\" class=\"headerlink\" title=\"第十三卷 勘皮靴单证二郎神\"></a>第十三卷 勘皮靴单证二郎神</h3><p>《柳梢青》:<br>柳色初浓，余寒似水，纤雨如尘。<br>一阵东风，縠纹微皱，碧波粼粼。<br>仙娥花月精神，奏凤管鸾箫斗新。<br>万岁声中，九霞杯内，长醉芳春。</p>\n<p>琼瑶错落密成林，竹桧交加尔有阴。<br>恩许尘凡时纵步，不知身在五云深。<br>保和新殿丽秋辉，诏许尘凡到绮闱。<br>雅宴酒酣添逸兴，玉真轩内看安妃。</p>\n<p>任东风老去，吹不断泪盈盈。<br>记春浅春深，春寒春暖，春雨春晴，<br>都断送佳人命。落花无定挽春心。<br>芳草犹迷舞蝶，绿杨空语流莺。<br>玄霜着意捣初成，回首失云英。<br>但如醉如痴，如狂如舞，如梦如惊。<br>香魂至今迷恋，问真仙消息最分明。<br>几夜相逢何处，清风明月蓬瀛。</p>\n<p>映阶碧草自春色，隔叶黄鹂空好音。<br>流水何太急？深宫尽日闲。<br>殷勤谢红叶，好去到人间。<br>屋漏更遭连夜雨，船迟偏遇打头风。<br>火到猪头烂，钱到公事办。<br>情知语是钩和线，从前钓出是非来。<br>头裹金花璞头，身穿赭衣绣袍，<br>腰系蓝田玉带，足登飞凤乌靴。<br>要知心腹事，但听口中言。</p>\n<p>龙眉凤目，皓齿鲜唇，<br>飘飘有出尘之姿，冉冉有惊人之貌。<br>若非阆苑瀛洲客，便是餐霞吸露人。</p>\n<p>姻缘分定，自然千里相逢。<br>欢娱嫌夜短，寂寞恨更长。<br>春为茶博士，酒是色媒人。<br>若要人不知，除非己莫为。</p>\n<p>左手如托泰山，右手如抱婴孩，<br>弓开如满月，弹发似流星。<br>说开天地怕，导破鬼神惊。<br>得意之事，不可再作，<br>得便宜处，不可再往。<br>眉头搭上双鐄锁，腹内新添万斛愁。<br>踏破铁鞋无觅处，得来全不费工夫。<br>日前不做亏心事，半夜敲门不吃惊。<br>鹿迷秦相应难辨，蝶梦庄周未可知。<br>浑似皂雕追紫燕，真如猛虎啖羊羔。<br>从前作过事，没兴一齐来。</p>\n<p>但存夫子三分礼，不犯萧何六尺条。<br>自古奸淫应横死，神通纵有不相饶。</p>\n<h3 id=\"第十四卷-闹樊楼多情周胜仙\"><a href=\"#第十四卷-闹樊楼多情周胜仙\" class=\"headerlink\" title=\"第十四卷 闹樊楼多情周胜仙\"></a>第十四卷 闹樊楼多情周胜仙</h3><p>太平时节日偏长，处处笙歌入醉乡。<br>闻说鸾舆且临幸，大家试目待君王。</p>\n<p>色，色，易迷，难拆。<br>隐深闺，藏柳陌。<br>足步金莲，腰肢一捻，<br>嫩脸映桃红，香肌晕玉白。<br>娇姿恨惹狂童，情态愁牵艳客。<br>芙蓉帐里作鸾凰，云雨此时何处觅？</p>\n<p>言可省时休便说，步宜留处莫胡行。<br>人逢喜信精神爽，话合心机意趣投。<br>未知性命如何，先见四肢不举。<br>可怜三尺无情土，盖却多情年少人。<br>曾观《前定录》，万事不由人。<br>小园昨夜东风恶，吹折江梅就地横。<br>金瓶落井全无信，铁枪磨针尚少功。</p>\n<p>情郎情女等情痴，只为情奇事亦奇。<br>若把无情有情比，无情翻似得便宜。</p>\n<h3 id=\"第十五卷-赫大卿遗恨鸳鸯绦\"><a href=\"#第十五卷-赫大卿遗恨鸳鸯绦\" class=\"headerlink\" title=\"第十五卷 赫大卿遗恨鸳鸯绦\"></a>第十五卷 赫大卿遗恨鸳鸯绦</h3><p>皮包血肉骨包身，强作娇妍诳惑人。<br>千古英雄皆坐此，百年同是一坑尘。</p>\n<p>一笑倾人城，再笑倾人国。<br>岂不顾倾城与倾国，佳人难再得！</p>\n<p>假如张敞画眉，相如病渴，<br>虽为儒者所讥，然夫妇之情，<br>人伦之本，此谓之正色；<br>又如娇妾美婢，倚翠偎红，<br>金钗十二行，锦障五十里，<br>樱桃杨柳，歌舞擅场，碧月紫云，风流姱艳，<br>虽非一马一鞍，毕竟有花有叶，此谓之傍色；<br>又如锦营献笑，花阵图欢，露水分司，<br>身到偶然留影，风云随例，颜开那惜缠头，<br>旅馆长途，堪消寂寞，花前月下，亦助襟怀，<br>虽市门之游，豪客不废，然女闾之遗，<br>正人耻言，不得不谓之邪色；<br>至如上蒸下报，同人导于兽禽，<br>钻穴逾墙，役心机于鬼蜮，偷暂时之欢乐，<br>为万世之罪人，明有人诛，<br>幽蒙鬼责，这谓之乱色。</p>\n<p>填塞了虚空圈套，污秽却清净门风，<br>惨同神面刮金，恶胜佛头浇粪，<br>远则地府填单，近则阳间业报。<br>不看僧面看佛面，休把淫心杂道心。</p>\n<p>春游千万家，美人颜如花。<br>三三两两映花立，飘飘似欲乘烟霞。</p>\n<p>茶诗:<br>玉蕊旗枪称绝品，僧家造法极工夫。<br>兔毛瓯浅香云白，虾眼汤翻细浪休。<br>断送睡魔离几席，增添清气入肌肤。<br>幽丛自落溪岩外，不肯移根入上都。</p>\n<p>潇洒亭轩，清虚户牖。<br>画展江南烟景，香焚真腊沉檀。<br>庭前修竹，风摇一派珇环声；<br>帘外奇花，日照千层锦绣色。<br>松阴入槛琴书润，山色侵轩枕簟凉。</p>\n<p>生于锦绣丛中，死在牡丹花下。</p>\n<p>两柄快斧不勾劈一块枯柴，<br>一个疲兵怎能当四员健将。<br>灯将灭而复明，纵是强阳之火；<br>漏已尽而犹滴，那有润泽之时。<br>任教铁汉也消熔，这个残生难过活。</p>\n<p>地下忽添贪色鬼，人间不见假尼姑。<br>贪淫浪子名回放，稔色尼姑祸忽临。<br>情知语似钩和线，从头钓出是非来。<br>老龟蒸不烂，移祸于空桑。</p>\n<p>可怜老和尚，不见了小和尚；<br>原来女和尚，私藏了男和尚。<br>分明雄和尚，错认了雌和尚。<br>为个假和尚，带累了真和尚。<br>断过死和尚，又明白了活和尚。<br>满堂只叫打和尚，满街争看迎和尚。<br>只为贪那一个莽和尚，<br>弄坏了庵院里娇滴滴许多骚和尚。</p>\n<p>野草闲花恣意贪，化为蜂蝶死犹甘。<br>名庵并入游仙梦，是色非空作笑谈。</p>\n<h3 id=\"第十六卷-陆五汉硬留合色鞋\"><a href=\"#第十六卷-陆五汉硬留合色鞋\" class=\"headerlink\" title=\"第十六卷 陆五汉硬留合色鞋\"></a>第十六卷 陆五汉硬留合色鞋</h3><p>得便宜处笑嘻嘻，不遂心时暗自悲。<br>谁识天公颠倒用，得便宜处失便宜。</p>\n<p>爽口食多应损胃，快心事过必为殃。</p>\n<p>《清江引》:<br>谁家女儿，委实的好，赛过西施貌。<br>面如白粉团，鬓似乌云绕。<br>若得他近身时，魂灵儿都掉了。<br>觑鞋儿三寸，轻罗软窄，胜蕖花片。<br>若还绣满花，只费分毫线。<br>怪他香喷喷不沾泥，只在楼上转。</p>\n<p>出外青山楼外楼，西湖歌舞几时休？<br>暖风熏得游人醉，错把杭州作汴州。</p>\n<p>要将撮合三杯酒，结就欢娱百岁缘。</p>\n<p>浪子心，佳人意，不禁眉来和眼去。<br>虽然色胆大如天，中间还要人传会。<br>伎俩熟，口舌利，握雨携云多巧计。<br>虎婆绰号马泊六，多少良家受他累？<br>不怕天，不怕地，不怕傍人闲放屁。<br>只须瞒却父和娘，暗中撮就鸳鸯对。<br>朝相对，暮相对，想得人如痴与醉。<br>不是冤家不聚头，杀却虔婆方出气。</p>\n<p>豆蔻包香，却被枯藤胡缠；<br>海棠含蕊，无端暴雨摧残。<br>鸺鶒占锦鸳之窠，凤凰作凡鸦之偶。<br>一个口里呼肉肉肝肝，还认做店中行货；<br>一个心里想亲亲爱爱，那知非楼下可人。<br>红娘约张珙，错订郑恒；<br>郭素学王轩，偶迷西子。<br>可怜美玉娇香体，轻付屠酤市井人。</p>\n<p>一念愿邀云雨梦，片时飞过凤凰楼。<br>理直千人必往，心亏寸步难移。<br>闭门家里坐，祸从天上来。<br>可怜慕色如花女，化作含冤带血魂。</p>\n<p>赌近盗兮奸近杀，古人说话不曾差。<br>奸赌两般得不染，太平无事做人家。</p>\n<h3 id=\"第十七卷-张孝基陈留认舅\"><a href=\"#第十七卷-张孝基陈留认舅\" class=\"headerlink\" title=\"第十七卷 张孝基陈留认舅\"></a>第十七卷 张孝基陈留认舅</h3><p>士子攻书农种田。工商勤苦挣家园。<br>世人切莫闲游荡，游荡从来误少年。</p>\n<p>世人尽导读书好，只恐读书读不了。<br>读书个个望公卿，几人能向金阶跑？<br>郎不郎时秀不秀，长衣一领遮前后。<br>畏寒畏暑畏风波，养成娇怯难生受。<br>算来事事不如人，气硬心高妄自尊。<br>稼穑不知贪逸乐，那知逸乐会亡身。<br>农工商贾虽然贱，各务营生不辞倦。<br>从来劳苦皆习成，习成劳苦筋力剑。<br>春风得力总繁华，不论桃花与菜花。<br>自古成人不自在，若贪安享岂成家？<br>老夫富贵虽然爱，戏场纱帽轮流戴。<br>子孙失势被人欺，不如及早均平派。<br>一脉书香付长房，诸儿恰好四民良。<br>暖衣饱食非容易，常把勤劳答上苍。</p>\n<p>五谷不熟，不如荑稗；<br>贪却赊钱，失却见在。<br>受用须从勤苦得，淫奢必定祸灾生。<br>世无百岁人，枉作千年调。<br>因无背后眼，只当耳边风。<br>水平不波，人平不言。<br>地府忽增不肖鬼，人间已少败家精。<br>忙忙如丧家之狗，急急如漏网之鱼。<br>种田不熟不如荒，养儿不肖不如无。<br>三寸气在千般用，一旦无常万事休。<br>临崖立马收缰晚，船到江心补漏迟。</p>\n<p>肖子流落卑污，玷辱家门，<br>生不能侍奉汤药，死不能送骨入土，<br>忤逆不导，粉骨难赎！</p>\n<p>昔年流落实堪伤，今日相逢转断肠。<br>不是一番寒彻骨，怎得梅花扑鼻香！</p>\n<p>钱财如粪土，仁义值千金。<br>曾记床头语，穷通不二心。<br>唐人罗隐先生有赞云：<br>能生之，不能富之；能富之，不能教之。<br>死而生之，贫而富之，小人而君子之。<br>呜呼孝基，真可为百世之师！</p>\n<p>还财阴德庆流长，千古名传义感乡。<br>多少竞财疏骨肉，应知无面向嵩山。</p>\n<h3 id=\"第十八卷-施润泽滩阙遇友\"><a href=\"#第十八卷-施润泽滩阙遇友\" class=\"headerlink\" title=\"第十八卷 施润泽滩阙遇友\"></a>第十八卷 施润泽滩阙遇友</h3><p>还带曾消纵理纹，返金种得桂枝芬。<br>从来阴骘能回福，举念须知有鬼神。</p>\n<p>第一句:<br>纵理纹生相可怜，香山还带竟安然。<br>淮西荡定功英伟，身系安危三十年。<br>第二句:<br>燕山窦十郎，教子有义方。<br>灵椿一株老，丹桂五枝芳。</p>\n<p>种瓜得瓜，种豆得豆。<br>一切祸福，自作自受。</p>\n<p>东风二月暖洋洋，江南处处蚕桑忙。<br>蚕欲温和桑欲干，明如良玉发奇光。<br>缲成万缕千丝长，大筐小筐随络床。<br>美人抽绎沾唾香，一经一纬机杼张。<br>咿咿轧轧谐宫商，花开锦簇成匹量。<br>莫忧八口无餐粮，朝来镇上添远商。</p>\n<p>多少恶念转善，多少善念转恶。<br>劝君诸善奉行，但是诸恶莫作。<br>横财不富命穷人<br>从来作事要同心，夫唱妻和种德深。<br>万贯钱财如粪土，一分仁义值千金。<br>江南有谣云:<br>朝暮类春秋，正昼如夏，<br>深夜如冬，故调护最难。<br>做天莫做四月天，蚕要温和麦要寒。<br>秧要日时麻要雨，采桑娘子要晴干。</p>\n<p>一叶浮萍归大海，人生何处不相逢。</p>\n<p>昔闻杨宝酬恩雀，今见施君报德鸡。<br>物性有知皆似此，人情好杀复何为？</p>\n<p>只为还金恩义重，今朝难舍弟兄情。<br>六亲合一运。<br>人逢喜事精神爽，月到中秋分外明。<br>六金还取事虽微，感德天心早鉴知。<br>滩阙巧逢恩义报，好人到底得便宜。</p>\n<h3 id=\"第十九卷-白玉娘忍苦成夫\"><a href=\"#第十九卷-白玉娘忍苦成夫\" class=\"headerlink\" title=\"第十九卷 白玉娘忍苦成夫\"></a>第十九卷 白玉娘忍苦成夫</h3><p>西江月:<br>两眼乾坤旧恨，一腔今古闲愁。<br>隋宫吴苑旧风流，寂寞斜阳渡口。<br>兴到豪吟百首，醉余凭吊千秋。<br>神仙迂怪总虚浮，只有纲常不朽。</p>\n<p>宋弘不弃糟糠，罗敷不从使君。<br>允欲娶高门，预逐其妇；<br>买臣室达太晚，见弃于妻。<br>王允弃妻名遂损，买臣离妇志堪悲。<br>夫妻本是鸳鸯鸟，一对栖时一对飞。</p>\n<p>片片晚霞迎落日，行行倦鸟盼归巢。<br>宁为太平犬，莫作离乱人。</p>\n<p>西江月:<br>两导眉弯新月，一双眼注微波。<br>青丝七尺挽盘螺，粉脸吹弹得破。<br>望日嫦娥盼夜，秋宵织女停梭。<br>画堂花烛听欢呼，兀自含羞怯步。</p>\n<p>夫妻且说三分话，未可全抛一片心。<br>分明指与平川路，反把忠言当恶言。<br>世上万般哀苦事，无非死别与生离。<br>鳌鱼脱却金钩去，摆尾摇头再不来。</p>\n<p>数载难忘养育恩，看经礼忏荐夫人。<br>为人若肯存忠厚，虽不关亲也是亲。<br>六日夫妻廿载别，刚肠一样坚如铁。<br>分鞋今日再成双，留与千秋作话说。</p>\n<h3 id=\"第二十卷-张廷秀逃生救父\"><a href=\"#第二十卷-张廷秀逃生救父\" class=\"headerlink\" title=\"第二十卷 张廷秀逃生救父\"></a>第二十卷 张廷秀逃生救父</h3><p>刀事由天莫强求，何须苦苦用机谋。<br>饱三餐饭常知足，得一帆风便可收。<br>生事事生何日了？害人人害几时休？<br>冤家宜解不宜结，各自回头看后头。</p>\n<p>任你官清似水，难逃吏滑如油。<br>《赘婿诗》:<br>入家赘婿一何痴！异种如何接本枝？<br>两口未曾沾孝顺，一心只想霸家私。<br>愁深只为防甥舅，念狠兼之妒小姨。<br>半子虚名空受气，不如安命没孩儿。</p>\n<p>着意栽花花不活，无心插柳柳成阴。<br>运退黄金失色，时来铁也增光。</p>\n<p>只因强盗设捕人，谁知捕人赛强盗！<br>买放真盗扳平民，官法纵免幽亦报。</p>\n<p>闭门家里坐，祸从天上来。<br>冤情说到伤心处，铁石人闻也断肠。<br>众口铄金，积毁销骨。<br>人情若比初相识，到底终无怨恨心。<br>机不密，祸先行。<br>怜世上聪明子，化作江中浪宕魂。<br>情知不是伴，事急且相随。<br>难将幽恨和人说，愿向泉台诉丈夫。<br>但愿应时还得见，须知胜似岳阳金。</p>\n<p>《千秋岁》:<br>琼台琪草，玄鹤翔云表，华筵上笙歌绕。<br>玉京瑶岛，客笑傲、乾坤校齐拍手唱导：<br>长春人不老。北阙龙章耀，南极祥光照，<br>海屋内、筹添了。青鸟衔笺至，传报群仙到，<br> 同嵩祝万年称寿考。</p>\n<p>未行雪耻酬凶事，先作攀花折桂人。<br>分明久旱逢甘雨，赛过他乡遇故知。<br>莫问洞房花烛夜，且看金榜挂名时。</p>\n<p>兄弟同榜，锦上添花；<br>母子相逢，雪中送炭。<br>兄弟同榜，锦上添花；母子相逢，雪中送炭。</p>\n<p>早知今日，悔不当初。<br>苦中得乐浑如梦，死里逃生喜欲狂。</p>\n<p>四姓亲家皆富贵，两双夫妇倍欢娱。<br>枕边忽叙伤心话，血泪犹然洒绣幮。</p>\n<p>善恶到头终有报，只争来早与来迟。<br>劝君莫把欺心使，湛湛青天不可欺。</p>\n<p>繇来白屋出公卿，到底穷通未可凭。<br>凡事但将天理念，安心自有福来迎。</p>\n","categories":["Books"],"tags":["Books"]},{"title":"Future","url":"http://jinbeen.com/2017/03/05/Future/","content":"<blockquote>\n<p>我在为孩子寻找母亲，为孙儿寻找奶奶，所以希望你少而美丽，中而强干，老而慈祥；我出差的时候，你能为我收拾行李，这样当我在异地他乡，打开箱子就能想起你；咱们爸妈年纪都大了，应该常去看他们，如果我忙糊涂了，你会记得提醒我；最后也是最重要的一点，你已经做好了一切准备进入婚姻，并经营好它。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>以上是在《得到》里听到的一篇关于讲文案的文章的其中一部分，内容是一个男士征婚的广告语。好的文案的特点是，它能给观众带来很强烈的画面感，就如同上面一样。事实证明，好的生活亦是如此，一个好的生活愿景能使你现在的生活更快乐，所以这里记录的是我对将来生活的愿景。</p>\n<blockquote>\n<p>弗兰克尔生命的意义就在于：帮助其他人找到生命的意义。<br>写给你。</p>\n</blockquote>\n<h3 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h3><p>由于时间紧张，现阶段临时记录一些，然后有时间具体记录。</p>\n<h4 id=\"房间\"><a href=\"#房间\" class=\"headerlink\" title=\"房间\"></a>房间</h4><blockquote>\n<p>人大部分的时间是在房间里度过的，休息的场所，所以一定要舒适。</p>\n</blockquote>\n<ul>\n<li><strong><em>一个书桌。</em></strong>一个好的书桌能提高工作效率。配一个好的台灯，暖光。平时学习看书就是它了，坐上去就有学习的冲动。</li>\n<li><strong><em>电视机。</em></strong>看到很多结婚的同学都配的大屏高清电视了，将来和你结婚也配一个，哈哈。我的电脑也可以接电视屏幕，那时候更好玩，哈哈。</li>\n<li><strong><em>健身房。</em></strong>将三楼的一个房间做成健身房，顶楼隔热，这样平时就可以锻炼了。</li>\n</ul>\n<h4 id=\"我和你\"><a href=\"#我和你\" class=\"headerlink\" title=\"我和你\"></a>我和你</h4><ul>\n<li>学一门按摩的手艺，在大学就在想了，这门手艺一定会学会的，这样平时就可以替你按摩了。</li>\n<li>每年只少写一篇记录我们生活的文章送给你。</li>\n</ul>\n<h3 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h3><blockquote>\n<p>2017-03-05 写了上部分，记录了之后的愿景<br>2018-04-28 现在，有缘遇到现在的女朋友</p>\n</blockquote>\n<p>已约定明天一起去南京，现在感情良好，愿终成眷属~<br><a href=\"https://jinbeen.com/love/\">https://jinbeen.com/love/</a></p>\n","categories":["life"],"tags":["life"]},{"title":"《大话数据结构》读书笔记","url":"http://jinbeen.com/2017/03/01/《大话数据结构》读书笔记/","content":"<blockquote>\n<p>如果你有梦想的话，就要去捍卫它。当别人做不到的时候，他们就想要告诉你，你也不能。如果你想要些什么，就得去努力争取。就这样！ – 《当幸福来敲门》</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><a href=\"https://book.douban.com/subject/6424904/\" target=\"_blank\" rel=\"external\">书籍链接点击</a> - 个人觉得可以用来入门，后面的路还很长。简要记录个人认为比较重要的内容。</p>\n<h3 id=\"数据结构绪论\"><a href=\"#数据结构绪论\" class=\"headerlink\" title=\"数据结构绪论\"></a>数据结构绪论</h3><p>数据结构：是相互之间存在一种或多种特点关系的数据元素的集合。<br>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。</p>\n<blockquote>\n<p>程序设计 = 数据结构 + 算法</p>\n</blockquote>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><h4 id=\"算法时间复杂度\"><a href=\"#算法时间复杂度\" class=\"headerlink\" title=\"算法时间复杂度\"></a>算法时间复杂度</h4><p>　　语句的总执行次数<code>T(n)</code>是一个关于问题规模<code>n</code>的函数，进而分析<code>T(n)</code>随<code>n</code>的变化情况并确定<code>T(n)</code>的数量级。时间复杂度，也就是算法的时间量度，记：<code>T(n) = O(f(n))</code>。<br>　　<br>　　它表示随问题规模<code>n</code>的增大，算法执行时间的增长率和<code>f(n)</code>的增长率相同，称作算法的渐进时间复杂度，简称为<strong>时间复杂度</strong>。其中<code>f(n)</code>是问题规模<code>n</code>的某个函数。<br>　　<br>　　这样用大写<code>O(　)</code>来体现算法时间复杂度记法，我们称之为<strong>大O记法</strong>。\n　　</p>\n<h5 id=\"大O记法推导：\"><a href=\"#大O记法推导：\" class=\"headerlink\" title=\"大O记法推导：\"></a>大O记法推导：</h5><ul>\n<li>1.用常数1取代运行时间中的所有加法常数。</li>\n<li>2.在修改后的运行次数函数中，只保留最高阶项。</li>\n<li>3.如果最高阶存在且不是1，则去除与这个项相乘的常数。得到的结果就是<strong>大O阶</strong>。</li>\n</ul>\n<h5 id=\"常用的时间复杂度：\"><a href=\"#常用的时间复杂度：\" class=\"headerlink\" title=\"常用的时间复杂度：\"></a>常用的时间复杂度：</h5><ul>\n<li>常数阶　　–　<code>O(1)</code></li>\n<li>线性阶　　–　<code>O(ｎ)</code></li>\n<li>对数阶　　–　<code>O(㏒ｎ)</code></li>\n<li>平方阶　　–　<code>O(ｎ²)</code></li>\n<li>ｎ㏒ｎ阶　　–　<code>O(ｎ㏒ｎ)</code></li>\n<li>指数阶　　–　<code>O(2º)</code>(º - n)</li>\n</ul>\n<p>常用的时间复杂度所耗费的时间从小到大依次是：<br><code>O(1)</code> &lt; <code>O(㏒ｎ)</code> &lt; <code>O(ｎ)</code> &lt; <code>O(ｎ㏒ｎ)</code> &lt; <code>O(ｎ²)</code> &lt; <code>O(ｎ³)</code> &lt; <code>O(2º)</code> &lt; <code>O(n!)</code> &lt; <code>O(ｎº)</code></p>\n<p> <code>O(n!)</code>：阶乘阶。<br> <code>O(ｎ)</code>：查找一个有n个随机数字数组中的某个数字。<br> <code>O(㏒ｎ)</code>：</p>\n<p> <img src=\"https://img-blog.csdnimg.cn/2021040316153545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"logn\"></p>\n<h4 id=\"算法空间复杂度\"><a href=\"#算法空间复杂度\" class=\"headerlink\" title=\"算法空间复杂度\"></a>算法空间复杂度</h4><p>算法的空间复杂度通过计算算法所需的<strong>存储空间</strong>实现，算法空间复杂度的计算公式记作：<strong><em>S(n) = O(f(n))</em></strong>，其中，<code>n</code>为问题的规模，<code>f(n)</code>为语句关于<code>n</code>所占存储空间的函数。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>时间复杂度 → 运行时间的需求<br>空间复杂度 → 运行空间的需求<br>不用限定词使用“复杂度”时，通常指时间复杂度。</p>\n<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><blockquote>\n<p>List：零个或多个数据元素的有限序列。(eg：幼儿园接儿子)</p>\n</blockquote>\n<h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><p>随着数据的插入，我们的线性表的长度开始变大，不过线性表的当前长度不能超过存储容量，即数组的长度。</p>\n<p>线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。</p>\n<p>线性表的长度 ≤ 数组的长度</p>\n<p><strong>数组</strong> → 读取：<code>O(1)</code>， 插入或删除：<code>O(n)</code></p>\n<h4 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h4><p>1.单链表结构：<br>　<strong>链表：</strong> → 读取：<code>O(n)</code>， 插入或删除：<code>O(1)</code><br>还有：2.静态链表结构、3.循环链表、4.双向链表</p>\n<h3 id=\"栈与队列\"><a href=\"#栈与队列\" class=\"headerlink\" title=\"栈与队列\"></a>栈与队列</h3><p>　　<strong><em>栈</em></strong>：是限定仅在表尾进行插入和删除操作的线性表。<br>　　<strong><em>队列</em></strong>：是只允许在一端操作、而在另一端进行删除操作的线性表。</p>\n<h4 id=\"栈的应用\"><a href=\"#栈的应用\" class=\"headerlink\" title=\"栈的应用\"></a>栈的应用</h4><p>四则运算表达式求值：<br>后缀（逆波兰）表示法定义 -&gt; 不需要括号<br><code>&quot;9 + (3 - 1) * 3 + 10 / 2&quot;</code>  →  <code>&quot;931 - 3 *+ 10 2 /+&quot;</code></p>\n<h5 id=\"知道中缀表达式-→-后缀表达式\"><a href=\"#知道中缀表达式-→-后缀表达式\" class=\"headerlink\" title=\"知道中缀表达式  → 后缀表达式\"></a>知道中缀表达式  → 后缀表达式</h5><ul>\n<li>数字 → 输出</li>\n<li>括号 → 等反括号，再输出反括号里的符号</li>\n<li><code>* /</code> → 优先级高先出栈</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>它们均可以用线性表的顺序存储结构来实现，但都存在着顺序存储的一些弊端，因此它们各自有各自的技巧来解决这个问题。<br>对于栈来说，如果是两个相同类型的栈，则可以用数组的两端作栈底的方法来让两个栈共享数据，这就可以最大化地利用数组的空间。<br>对于队列来说，为了避免数组插入和删除时需要移动数据，于是就引入了循环队列，是的队头和队尾可以在数组中循环变化。解决了移动数据的时间损耗，是的本来插入和删除是<code>O(n)</code>的时间复杂度变成了<code>O(1)</code>。</p>\n<h3 id=\"串\"><a href=\"#串\" class=\"headerlink\" title=\"串\"></a>串</h3><blockquote>\n<p>是由零个或多个字符组成的有限序列，又名叫字符串。</p>\n</blockquote>\n<h3 id=\"树-Tree\"><a href=\"#树-Tree\" class=\"headerlink\" title=\"树(Tree)\"></a>树(Tree)</h3><p>树是n(n≥0)个结点的有限集。n=0时称为空树。在任意一颗非空树中：<br>　　<1> 有且仅有一个特定的称为根(Root)的结点。<br>　　<2>当n &gt; 1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1、T2…、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。\n　　</2></1></p>\n<h4 id=\"二叉树（Binary-Tree）\"><a href=\"#二叉树（Binary-Tree）\" class=\"headerlink\" title=\"二叉树（Binary Tree）\"></a>二叉树（Binary Tree）</h4><p>二叉树是n(n≥0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根节点和两棵互不交换的、分别称为根节点的<strong><em>左子树</em></strong>和<strong><em>右子数</em></strong>的二叉树组成。</p>\n<p>特殊二叉树：<br>　　1、斜树<br>　　2、满二叉树<br>　　3、完全二叉树</p>\n<h4 id=\"二叉树的存储结构\"><a href=\"#二叉树的存储结构\" class=\"headerlink\" title=\"二叉树的存储结构\"></a>二叉树的存储结构</h4><h5 id=\"二叉树顺序存储结构\"><a href=\"#二叉树顺序存储结构\" class=\"headerlink\" title=\"二叉树顺序存储结构\"></a>二叉树顺序存储结构</h5><p>二叉树的顺序存储结构就是用一维数组存储二叉树中的结点，并且结点的存储位置，也就是数组的下标要能体现结点之间的逻辑关系，比如双亲与孩子的关系，左右兄弟的关系等。<br><img src=\"https://img-blog.csdnimg.cn/20210403161601434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"完全二叉树的顺序存储\"></p>\n<h5 id=\"二叉链表\"><a href=\"#二叉链表\" class=\"headerlink\" title=\"二叉链表\"></a>二叉链表</h5><p>既然顺序存储适用性不强，我们就要考虑链式存储结构。<strong>二叉树每个结点最多有连个孩子，所以为它设计一个数据域和指针域</strong>是比较自然的想法，<strong>我们称这样的链表叫做二叉链表。</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">lchild</th>\n<th style=\"text-align:center\">data</th>\n<th style=\"text-align:center\">rchild</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">r</td>\n</tr>\n</tbody>\n</table>\n<p>其中dataz是数据域，lchild 和 rchild 都是指针域，分别存放指向左孩子和右孩子的指针。<br><img src=\"https://img-blog.csdnimg.cn/20210403161626993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"二叉链表结构图\"></p>\n<h4 id=\"遍历二叉树\"><a href=\"#遍历二叉树\" class=\"headerlink\" title=\"遍历二叉树\"></a>遍历二叉树</h4><p>二叉树的遍历（traversing binary tree）是指从根节点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅访问一次。</p>\n<p>遍历方法：<br>　　1、前序遍历<br>　　2、中序遍历<br>　　3、后序遍历<br>　　4、层序遍历<br>　　<br>知道：前序：ABCDEF 中序：CBAEDF<br>推出：后序：CBEFDA<br>过程：<br>　　前序：可知[A]是根节点<br>　　中序：[CB]知道C是B的左孩子<br>　　<br>知道：中序：ABCDEFG  后序：BDCAFGE<br>推出：前序：EACBDGF<br>过程：<br>　　后序：[E]在尾端，知[E]为根节点。<br>　　…</p>\n<h4 id=\"线索二叉树\"><a href=\"#线索二叉树\" class=\"headerlink\" title=\"线索二叉树\"></a>线索二叉树</h4><h3 id=\"图-Graph\"><a href=\"#图-Graph\" class=\"headerlink\" title=\"图(Graph)\"></a>图(Graph)</h3><p>是由定点的有穷非空集合和顶点之间的集合组成，通常表示为G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p>\n<p>多对多的情况 → eg:人际关系</p>\n<p>无向边：若顶点Vi到Vj之间的边没有方向，则称这条边为无向边(Edge)，用无序偶对(Vi，Vj)来表示。<br>任意两个顶点之间的边都是无向的，则称该图为<strong>无向图</strong>。</p>\n<p>有向边：若顶点Vi到Vj之间的边有方向，则称这条边为有向边，也称为弧(Arc)。<br>任意两个顶点之间的边都是有向边，则称该图为<strong>有向图</strong>。</p>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><h4 id=\"顺序查找-O-n\"><a href=\"#顺序查找-O-n\" class=\"headerlink\" title=\"顺序查找 O(n)\"></a>顺序查找 O(n)</h4><h4 id=\"有序表查找\"><a href=\"#有序表查找\" class=\"headerlink\" title=\"有序表查找\"></a>有序表查找</h4><blockquote>\n<p>三者的区别是：中间数取的不一样。<br>具有n个结点的完全二叉树的深度为[log2n]+1。→ ㏒ｎ</p>\n</blockquote>\n<h5 id=\"二分差找-O-㏒n\"><a href=\"#二分差找-O-㏒n\" class=\"headerlink\" title=\"二分差找 O(㏒ｎ)\"></a>二分差找 O(㏒ｎ)</h5><h5 id=\"插值查找-O-㏒n\"><a href=\"#插值查找-O-㏒n\" class=\"headerlink\" title=\"插值查找 O(㏒ｎ)\"></a>插值查找 O(㏒ｎ)</h5><h5 id=\"斐波那契差找-O-㏒n\"><a href=\"#斐波那契差找-O-㏒n\" class=\"headerlink\" title=\"斐波那契差找 O(㏒ｎ)\"></a>斐波那契差找 O(㏒ｎ)</h5><h4 id=\"树表查找\"><a href=\"#树表查找\" class=\"headerlink\" title=\"树表查找\"></a>树表查找</h4><h5 id=\"二叉树查找-二叉排序树\"><a href=\"#二叉树查找-二叉排序树\" class=\"headerlink\" title=\"二叉树查找(二叉排序树)\"></a>二叉树查找(二叉排序树)</h5><p>插入和查找的时间复杂度为<code>O(㏒ｎ)</code>，最坏(长条)为<code>O(n)</code>。<br>优化：<br>　　平衡二叉树，为了避免上述最差的情况(<code>O(n)</code>)，构建时，让这棵二叉排序树是平衡二叉树，此时，查找、插入和删除都是<code>O(㏒ｎ)</code>。\n　　</p>\n<h5 id=\"平衡查找树之2-3查找树-2-3Tree-O-㏒n\"><a href=\"#平衡查找树之2-3查找树-2-3Tree-O-㏒n\" class=\"headerlink\" title=\"平衡查找树之2-3查找树(2-3Tree) O(㏒ｎ)\"></a>平衡查找树之2-3查找树(2-3Tree) O(㏒ｎ)</h5><blockquote>\n<p>属于二叉树查找优化。</p>\n</blockquote>\n<p><strong>性质：</strong><br>　　1、中序遍历2-3查找树，就可以得到好序的序列。<br>　　2、在一个完全平衡的2-3查找树中，根节点到每一个为空节点的距离都相同。</p>\n<p>最坏：所有都是2-node节点，时间复杂度：㏒ｎ<br>最好：所有都是3-node节点，时间复杂度：0.631㏒ｎ</p>\n<h5 id=\"平衡查找树之红黑树-Red-Black-Tree\"><a href=\"#平衡查找树之红黑树-Red-Black-Tree\" class=\"headerlink\" title=\"平衡查找树之红黑树(Red-Black-Tree)\"></a>平衡查找树之红黑树(Red-Black-Tree)</h5><p>2-3树实现起来比较复杂，于是有了一种简单实现的2-3树的数据结构 – 红黑树。</p>\n<p>红黑树中将节点之间的链接分为两种不同的类型：<br>　　红色链接：用来链接两个2-nodes节点来表示一个3-nodes节点。<br>　　黑色链接：用来链接普通的2-3节点。</p>\n<p>特性：<br>　　1、红色链接向左倾斜。<br>　　2、一个节点不可能有两个红色链接。<br>　　3、整个树完全黑色平衡。<br>　　<br>Java：TreeMap和TreeSet都是基于红黑二叉树。</p>\n<h5 id=\"B树和B-树（B-Tree-B-Tree）\"><a href=\"#B树和B-树（B-Tree-B-Tree）\" class=\"headerlink\" title=\"B树和B+树（B Tree/B+ Tree）\"></a>B树和B+树（B Tree/B+ Tree）</h5><p>用于：文件系统和数据库系统中（硬盘里的文件）。</p>\n<h4 id=\"分块查找\"><a href=\"#分块查找\" class=\"headerlink\" title=\"分块查找\"></a>分块查找</h4><p>哈希表查找： Map的本质是Hash表 → 以空间换时间。<br>key - indexed 键 - 值<br>时间复杂度：<code>O(1)</code></p>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>算法的复杂性：算法本身的复杂度，而不是指算法的时间负责度。</p>\n<p>内排序：插入排序、交换排序、选择排序、归并排序<br><strong>简单算法：</strong><br>　　　　冒泡排序：O(ｎ²)<br>　　　　简单选择排序：O(ｎ²)<br>　　　　直接插入排序：O(ｎ²)<br><strong>改进算法：</strong><br>　　　　希尔排序：O(ｎ³/²)  不稳定<br>　　　　堆排序：O(ｎ㏒ｎ) 不稳定<br>　　　　归并排序：O(ｎ㏒ｎ) 稳定<br>　　　　快速排序：\n　　　　</p>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>挨个比较，设置flag(优化)</p>\n<h4 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h4><p>比较n次，最小交换到第1位<br>比较n-1次，最小交换到第2位<br>比较n-2次，最小交换到第3位</p>\n<p>性能略高于冒泡排序</p>\n<h4 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h4><p>一个记录的辅助空间，比上两种性能好一些。向前插入依次向后移动。（适用于：基本有序、少数）</p>\n<h4 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><blockquote>\n<p>改进的直接插入排序。</p>\n</blockquote>\n<p>条件：基本有序（通过希尔排序达到基本有序）<br>将相隔某个“增量”的记录组成一个子序列，实现<strong><em>跳跃式的移动</em></strong>，使得排序的效率提高。<br><strong><em>跳跃式的移动</em></strong>：导致了不稳定。</p>\n<p>增量： increment = increment/3 + 1;</p>\n<h4 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><blockquote>\n<p>改进的简单选择排序。<br>不适合排序序列较少的情况。</p>\n</blockquote>\n<p>定义：根节点一定是堆中所有节点最大(小)值。<strong>大</strong>：大顶堆。<strong>小</strong>：小顶堆。<br>比较与交换跳跃式进行：导致了不稳定。</p>\n<p>先将无序序列构建成一个堆（大顶堆），根节点为最大值，移走，将剩余的<code>n-1</code><strong><em>重新构造</em></strong>成一个堆，再移走，反复执行。<br><strong>重新构造</strong>：调整的是非终端结点（非叶结点）</p>\n<blockquote>\n<p>堆排序操作的是完全二叉树（有两个子结点或无子结点），不必左小又大。<br>ps:平衡二叉树：高度一致，左大右小。</p>\n</blockquote>\n<p>运行时间主要消耗在初始构建堆和在重建堆时的反复筛选上。</p>\n<p>构建堆<code>O(n)</code>，重建堆<code>O(ｎ㏒ｎ)</code>，得到时间复杂度：<code>O(ｎ㏒ｎ)</code>。远远好于简单算法的时间复杂度。</p>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><blockquote>\n<p>两两比较不跳跃（稳定）<br>时间复杂度：<code>O(ｎ㏒ｎ)</code>，空间复杂度：<code>O(ｎ+㏒ｎ)</code></p>\n</blockquote>\n<p>n个有序的子序列，长度为1，两两合并，得到[n/2]。然后再两两合并….<br>一个无序序列，先分散我一个个单个序列，然后再合并。<br><img src=\"https://img-blog.csdnimg.cn/2021040316173389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"归并排序\"></p>\n<p><strong><em>比较占用内存，但却效率高且稳定的算法</em></strong><br>使用此算法时，尽量考虑非递归方法。</p>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><blockquote>\n<p>直接插入排序的升级。不稳定<br>时间复杂度：<br>　　　平均和最好：<code>O(ｎ㏒ｎ)</code>；<br>　　　最坏：<code>O(ｎ²)</code>；<br>空间复杂度：<br>　　　平均和最好：<code>O(㏒ｎ)</code>；　　　<br>　　　最坏：<code>O(ｎ)</code>；</p>\n</blockquote>\n<p>基本思想是：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序，以达到有序的目的。</p>\n<p>Partition函数：<br> 　　取一个关键字（pivot枢轴）。先定一个关键字，然后想尽办法让，左边的值都比它小，右边的值都比它大。<br><img src=\"https://img-blog.csdnimg.cn/20210403161751906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"快速排序_1\"></p>\n<blockquote>\n<p>50&gt;20 → 交换内容<br>交换后 20&lt;pivotkey，low++<br>high里的值为50，不大于50，high不动</p>\n</blockquote>\n<p>交换之后：<br><img src=\"https://img-blog.csdnimg.cn/20210403162005972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"快速排序_2\"></p>\n<blockquote>\n<p>到角标为3时：<br>low的值为90 &gt; high的值为50 → 交换内容<br>交换后 high里的值为90 &gt; 50, → high–</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20210403161815913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"快速排序_3\"><br><img src=\"https://img-blog.csdnimg.cn/20210403161838165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"快速排序_4\"><br><img src=\"https://img-blog.csdnimg.cn/20210403161859375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"快速排序_5\"><br><img src=\"https://img-blog.csdnimg.cn/2021040316191976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"快速排序_6\"></p>\n<h5 id=\"优化：\"><a href=\"#优化：\" class=\"headerlink\" title=\"优化：\"></a>优化：</h5><ul>\n<li>1、优化选取枢轴（三数取中，九数取中）</li>\n<li>2、优化不必要的交换（先备份在L.r[0]中(头中)，再直接替换，省掉中间交换）</li>\n<li>3、优化小数组时的排序方案（如只有7个或50个，用直接插入排序，大于则快速排序）</li>\n<li>4、优化递归操作（递归要时间，减少，使用<strong>尾递归</strong>）</li>\n</ul>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li><strong>插入排序类</strong>：<br>　　　直接插入排序<br>　　　希尔排序</li>\n<li><strong>选择排序类</strong>：<br>　　　简单选择排序<br>　　　堆排序</li>\n<li><strong>交换排序类</strong>：<br>　　　冒泡排序<br>　　　快速排序</li>\n<li><strong>归并排序类</strong>：<br>　　　归并排序\n　　　</li>\n</ul>\n<h3 id=\"推荐文章\"><a href=\"#推荐文章\" class=\"headerlink\" title=\"推荐文章\"></a>推荐文章</h3><ul>\n<li><a href=\"http://www.cnblogs.com/liuling/archive/2013/04/14/suanfa.html\" target=\"_blank\" rel=\"external\">常用的算法的时间复杂度和空间复杂度</a></li>\n<li><a href=\"http://blog.csdn.net/qy1387/article/details/7752973\" target=\"_blank\" rel=\"external\">Java常用排序算法/程序员必须掌握的8大排序算法</a></li>\n<li><a href=\"http://www.cnblogs.com/maybe2030/p/4715035.html\" target=\"_blank\" rel=\"external\">七大查找算法</a></li>\n<li><a href=\"http://www.jianshu.com/p/159426e2aaf6\" target=\"_blank\" rel=\"external\">Android的数据结构与算法—-ArrayList源码解析</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","Books","数据结构与算法"]},{"title":"《催眠师手记》读书笔记","url":"http://jinbeen.com/2017/03/01/《催眠师手记》读书笔记/","content":"<blockquote>\n<p>2016年2月29日 21：53 记录于备忘录。现如今归纳整理在此。</p>\n</blockquote>\n<p><a href=\"http://baike.baidu.com/link?url=xzhkzumMwlCk3zqNkvLZTkbmnKh7JEwJtEKnq_UJI3mc59XItcpnFChzT0ipLfQTg0u3qvBOIepIJd2rjqZ-8mEgGKKX3fjN9Tzv2IWIrGMw7oWdR4ttZMu5Tz1bDCoX1IEanUTmQ5pifbVbfksw2a\" target=\"_blank\" rel=\"external\">《催眠师手记：国内第一部心理推理纪实档案》</a>（《天才在左 疯子在右》姊妹篇）</p>\n<p><strong>高铭再次怀着强烈的好奇心深入催眠诊所、心理诊</strong>所，获悉珍贵一手资料，化身心理福尔摩斯，探寻埋藏在人内心深处的秘密，打造国内第一部心理推理纪实档案。</p>\n<a id=\"more\"></a>\n<h3 id=\"一位女士\"><a href=\"#一位女士\" class=\"headerlink\" title=\"一位女士\"></a>一位女士</h3><p>一位女士，小时候穷，母亲被继父逼着打她，生活所迫。找了一个年龄很大有钱的有妇之夫，做了小三。自己想逃走但很有压力，离不开，知道这样做的结果，所以更害怕。</p>\n<h3 id=\"一位男士\"><a href=\"#一位男士\" class=\"headerlink\" title=\"一位男士\"></a>一位男士</h3><p>以前事业顺利，一切都好，结婚后妻子离婚，开始怀疑自己了，第二人格是情感高手，但本体不是，有在人格分裂的迹象。应该找心理医生。</p>\n<h3 id=\"一个和尚\"><a href=\"#一个和尚\" class=\"headerlink\" title=\"一个和尚\"></a>一个和尚</h3><p>梦见千手观音，代表救赎。以前是一个赌徒，气死了母亲，杀了父亲，杀了劝他回头是岸的和尚。之后又跟了一位和尚，有悔悟之心但知道自己罪孽深重，才做噩梦，劝你自首。</p>\n<p>想想看，有那么几个人，把自己的思想和信念传播开，影响到整个人类社会，并且持续了几千年……还有比这更神奇的吗？没有了，这就是神迹。</p>\n<h3 id=\"一位曾经放弃自己梦想的女士\"><a href=\"#一位曾经放弃自己梦想的女士\" class=\"headerlink\" title=\"一位曾经放弃自己梦想的女士\"></a>一位曾经放弃自己梦想的女士</h3><p>“观察这个世界用一只眼睛足够了，另一只则用来多看看自己。”——这是当年我最喜欢的一个导师说的。</p>\n<p>梦见了无头人，独眼人，半面人，曾经为了家庭放弃了梦想，现在家庭美好，但年龄大了觉得不合适画画。现在无头绪的过着生活。治疗之后，追寻了自己的梦想，三个月后寄了一副油画过来。</p>\n<h3 id=\"一个体育运动员\"><a href=\"#一个体育运动员\" class=\"headerlink\" title=\"一个体育运动员\"></a>一个体育运动员</h3><p>以前红极一时，叱诧风云，因为年轻，自我膨胀，开始放纵自己，差点吸毒了。后来改过自新，一直强力训练，以以前的自己为目标，要战胜完美记忆，劳累过度。治疗三个月后，打败完美记忆，走向赛场。</p>\n<h3 id=\"一位从小被父母左右的女士\"><a href=\"#一位从小被父母左右的女士\" class=\"headerlink\" title=\"一位从小被父母左右的女士\"></a>一位从小被父母左右的女士</h3><p>结婚也是父母安排的，嫁给了一个有钱但不爱自己的人，出卖了自己的肉体给了父母吹牛的谈资。内心憎恨不满但自己又很自律。独自住在一个房间内，被别人偷窥，于是梦游手淫给别人看，以报复父母的不公平待遇。梦见一只大眼看着自己但没有反抗。推荐在家种了很多的花。</p>\n<h3 id=\"做梦与催眠\"><a href=\"#做梦与催眠\" class=\"headerlink\" title=\"做梦与催眠\"></a>做梦与催眠</h3><p>我点了点头：“梦中的景象都来自于你的记忆。也就是说，梦中你所经历的场景和事物，不过是对现实记忆的提取及再加工——记忆当然可以瞬间千里，跨越时间和空间——那些场景和事件实际上就是潜意识从记忆中抽取出场景和片段组成的，所以梦根本不需要时间流。打个不恰当的比方吧：这如同你打开电脑里存储的视频不需要漫长的缓冲……”</p>\n<p>催眠是通过某种手段让被催眠者交出部分意识，这样就能获取被催眠者潜意识中的一些想法或者某些记忆。<br>与一位记者的谈话。</p>\n<h3 id=\"少年与搭档的谈话\"><a href=\"#少年与搭档的谈话\" class=\"headerlink\" title=\"少年与搭档的谈话\"></a>少年与搭档的谈话</h3><p>搭档：“每个人都有不同的消遣方式，你可以不那么做，但是要接受不同于自己的存在。”</p>\n<p>少年：“你的搭档只带了一本书，而剩下那些都是你带来的。我注意到那几本书不是一个类型，各个领域都有，你的兴趣面很广，证明你的知识面很广。不过我很高兴没看到《天边的骷髅旗》，就是那天你在我那里看到的那本。”</p>\n<p>搭档：“你很清楚人类社会结构的理论，但是你并未置身于其中去体会那到底是怎么样的；你明白爱情是一种化学分泌的结果，但是你并不知道那能带给自己多么美妙的感受；你可以想象出美丽的风景，但是你却没经历过亲眼目睹的震撼；你从书中看到过历史，但你看不到字里行间的沧桑；你读懂了高等数学的深奥，但是你读不懂那曾经让人废寝忘食的数字屏障；你学会了两种以上的语言，可你并不了解藏在那节奏中的内涵；你明白什么是心理学，但你并未去探究过那些复杂的成因。你的聪明，让你能想象并推测出很多正确的结论，但也正是你的聪明，让你只是停留在想象。</p>\n<p>“你什么都没经历过，你不知道什么是残酷，什么是感动，什么是热情，什么是悲伤，你拥有的只是冷漠。你对战争的了解只是一些零碎的词汇，枪林弹雨、政治阴谋、军火商、部队编制？你不知道看着战友倒在身边，吐出最后一口气会是什么样的心情；你对男女之间的了解也只是另一些词汇，繁衍、荷尔蒙、肾上腺素？但你并不明白能够让你动心的那一刻足以影响到你的未来。</p>\n<p>“你只是个孩子，我打赌你没离开过这个城市。大多数情况下，你的活动半径不超过10公里，但是你的聪明和天赋让你通过书以及各种渠道将所获得的信息整合起来，并借此想象出了一个完整的世界，但是你确定真正的世界就是那样吗？没有任何验证就认定了？你之所以不知道自己要什么，也看不到自己的未来，是因为你的一切都停留在你认定的那些概念和结论上。除此之外，你什么也不知道。也是正因如此，甚至连你编造的谎言都是个标准的模式：白衣女鬼，劝人上吊自杀，只有你才能看到……不过我必须承认，你的确只有衣柜里的朋友——那些书。除此之外，你什么都没有。你甚至把自己的心和思维全部关在一个黑暗的小屋里，只需要，也只能由衣柜里的朋友陪着。你在看书吗？你看过很多书吗？可是你看懂了吗？”</p>\n<p>一个小男孩，被称为天才。被学校老师和自己家长，要求做了很多自己不爱做的事情。封闭他却让他创新，写更多的东西，还刁难他。</p>\n<p>他们剪掉我的翅膀，却又要我飞翔。</p>\n<h3 id=\"一个对生命看的过于清醒的美丽的女人\"><a href=\"#一个对生命看的过于清醒的美丽的女人\" class=\"headerlink\" title=\"一个对生命看的过于清醒的美丽的女人\"></a>一个对生命看的过于清醒的美丽的女人</h3><p>绑了一个人对他讲述了她对人一生进程的看法，人一出生就被操纵着，到结束这一生。</p>\n<p> “她过了好一会儿才转回头看着我：‘但基因，只是如同计算机编码一样的东西而已——它们只是工具，真正创造出编码的才是操纵者。以我们的智慧，是无法想象出那个真正的操纵者会是一种怎样的存在，它远远超出了我们思维的界限。’她长长地叹了一口气，‘真正可悲的是，我们宁愿相信没有那么一个存在，但是我们又无法违背心里的渴求——模仿它。你会对这句话感到费解吗？我想你会，因为这证明你还清醒。想想看吧，我们用计算机编程这种最直接的方式来模仿操纵者的行为——用简单至极的0和1，创造出复杂的系统，甚至还有应变能力。当然，只是在某种程度上的应变，在我们划定的范围内。除此之外，我们还有间接的方式来企图破解出什么。例如，占星？算命？颅相、手相、面相？风水八字？你对那些不屑一顾吗？我不那么看，我倒宁愿相信那些都是统计学而已——企图在庞杂且无序的数据中找出规律。他们当中有些人的确做得不错并因此而成为某个领域的大师。</p>\n<p> 但是，假如你能认识他们，并且和他们聊聊，你就会发现，他们将无一例外地告诉你：’我只是掌握了很少很少的一点儿。‘而且，你还会发现，其实他们比我更悲观，因为他们的认知已经超越了自己的身份——人类。跳出自己看自己是一件多可怕的事，你认为有多少人能接受？接受我们被囚困在无形的笼子里，一举一动、一言一行都是被规划好的，严格地按照程序在执行。创造力？想象力？当你不用人类的眼光来看时，会发现那些只是可笑、可怜、可悲的同义词罢了。’”</p>\n<h3 id=\"一个二十五六岁的很瘦的女孩\"><a href=\"#一个二十五六岁的很瘦的女孩\" class=\"headerlink\" title=\"一个二十五六岁的很瘦的女孩\"></a>一个二十五六岁的很瘦的女孩</h3><p>刚刚就在确定了那把“锁”之后，我和搭档商量了一下，决定把催眠的重点放在她的童年时代。因为童年的某些事件在心智尚未发育完全的孩子眼里，有可能会产生扭曲的印象和感受，之后随着时间的推移渐渐成为潜意识而被埋藏起来。慢慢地，记忆偏差以及成长等其他因素所造成的干扰，会无一例外让当初留在内心深处的扭曲印象及感受放大许多倍——大到足以能影响到一个人的行为。当然，不见得所有心理问题、行为异常都是这种情况造成的，但是这是嫌疑最大的。因此，我们决定从这里开始。</p>\n<p>小时候由于性别歧视，遭到亲戚父亲的嫌弃，母亲让她躲起来，这样就不会受到关注。二十岁左右后父母再次争吵，又提了出来，固化了她自己不重要的思想，想尽办法把自己隐藏起来，于是喜欢黑的环境。解决:让未婚夫与她谈，包括她的父母。</p>\n<h3 id=\"一位民航机长\"><a href=\"#一位民航机长\" class=\"headerlink\" title=\"一位民航机长\"></a>一位民航机长</h3><p>谢谢，这是我的职业。假如把我放到您所工作的飞机驾驶舱，看着满眼奇怪的开关和指示灯，我肯定不知所措，更别提遇到乱流一类的临时情况该怎么处理了。但是您就能娴熟地操作，对不对？我会认为您非常了不起。</p>\n<p>小时候母亲很强势，父亲很懦弱，一直信任母亲，有一天看到母亲出轨了，才反对母亲，自己做的一切行为都湿为了反对母亲的行为。自己的妻子慢慢的得到了家庭的主动权才使自己焦虑起来。怀疑妻子。解决:把一切向妻子坦明，包括调查的事。选择是双方的。</p>\n<h3 id=\"潜意识和意识-暗示\"><a href=\"#潜意识和意识-暗示\" class=\"headerlink\" title=\"潜意识和意识    暗示\"></a>潜意识和意识    暗示</h3><p>我们的潜意识能够使用意识来判断出哪一部分内容成为意识，哪一部分隐藏起来。其实，意识更像是电脑在处理文件时的缓存——把常用的东西从库房里搬出来存在中间地带，而不必每次都跑到库房去搬，以便加快电脑的处理速度。潜意识就是那个库房。而意识和电脑缓存最大的共同点是：断电即清空——有人能告诉我意识被清空意味着什么吗？嗯……非常正确，就是失忆。所以说，失忆并非是真的失忆了，而是我们的缓存部分被清空或者一部分被清理了而已。</p>\n<p>暗示本身并无强弱之分，我们通常所说的强暗示是指使用暗示的方式和方法。暗示的方式、方法有很多种，不仅仅限于语言，动作、表情等都可以有其暗示性。有些是我们生活中约定俗成的，例如摇头和摆手意味着拒绝。额外插一句，印度和新西兰土著的日常习惯正相反——点头是拒绝；还有一些是特定的暗示动作。</p>\n<p>一个说自己是时间维护者的女孩。很瘦。几年前被人催眠了，强化了意识。影响了身体的机能。通过催眠发现了破绽，给了搭档的师傅处理。</p>\n<h3 id=\"一位小时候目睹父亲杀了强势和出轨的母亲\"><a href=\"#一位小时候目睹父亲杀了强势和出轨的母亲\" class=\"headerlink\" title=\"一位小时候目睹父亲杀了强势和出轨的母亲\"></a>一位小时候目睹父亲杀了强势和出轨的母亲</h3><p>但母亲和父亲都很爱她，小时候受到很多指责，但都没有怪罪他人，梦到杀妻并处理尸体是因为，要为父亲掩盖罪行这样就不会再失去父亲了，同时也是希望母亲能好好离开。取一位温婉的女人是看到母亲这样不好，不想重蹈父亲的覆辙。建议告诉妻子不要背负太多。不一样妻子担忧决定自己扛，收入不错。</p>\n<h3 id=\"一个从小被家里的父亲和姐姐宠大的混蛋\"><a href=\"#一个从小被家里的父亲和姐姐宠大的混蛋\" class=\"headerlink\" title=\"一个从小被家里的父亲和姐姐宠大的混蛋\"></a>一个从小被家里的父亲和姐姐宠大的混蛋</h3><p>利欲熏心和自私到极致到处招摇撞骗，骚扰一个女孩七年，认为女人都是低贱的，被挂进去两次。向家里借钱开公司因为自己的说空话倒闭欠了很多钱，到心理诊所是想开一个证明躲避追债。</p>\n<h3 id=\"一个从医多年退休的医界老者\"><a href=\"#一个从医多年退休的医界老者\" class=\"headerlink\" title=\"一个从医多年退休的医界老者\"></a>一个从医多年退休的医界老者</h3><p>从医很多年，对生命已没有尊敬之心，人情味淡薄，看到的只是利益，教育自己的孩子也是如此。直到有一天看到天使与恶魔。发现自己一直被恶魔环绕，感到恐惧但没有忏悔之心。被天使环绕会感到一阵温暖，曾经有过一次，也许是有点悔悟。<br>您不会下地狱的，因为您已经在地狱了。我曾经看到天使。所以我不担心。</p>\n<h3 id=\"一个从小在刻板严肃的环境中长大的女孩\"><a href=\"#一个从小在刻板严肃的环境中长大的女孩\" class=\"headerlink\" title=\"一个从小在刻板严肃的环境中长大的女孩\"></a>一个从小在刻板严肃的环境中长大的女孩</h3><p>你看，她的家庭环境不用多解释了吧？催眠之前她自己形容过，是偏于刻板、严肃的那种，这意味着什么？一个框架，对吧？在这种环境下成长起来的孩子，通常会划分为两个极端，要么很反叛，要么很古板、固执。但有意思的是，通常反叛的那个内心是古板的，而看似古板的那类，内心却是极度反叛的，甚至充满了极端情绪和各种夸张的、蠢蠢欲动的念头。她就是第二种。说到这儿为止，已经有两个框架在限制她了。</p>\n<p>根据对梦的描述，她是有同性性取向的人。家庭两个方面和工作一方面，性取向一方面，导致或许压抑自己。我们要做的就是直接告诉她，让她赦免自己。</p>\n","categories":["Books"],"tags":["Books"]},{"title":"北京住房公积金与社保查询及转移指南","url":"http://jinbeen.com/2017/02/27/北京住房公积金与社保查询及转移指南/","content":"<h3 id=\"公积金\"><a href=\"#公积金\" class=\"headerlink\" title=\"公积金\"></a>公积金</h3><blockquote>\n<p><a href=\"http://www.bjgjj.gov.cn/wsyw/wscx/gjjcx-logineoor.jsp?id=7\" target=\"_blank\" rel=\"external\">北京住房公积金查询网站</a><br><a href=\"http://www.bjgjj.gov.cn/\" target=\"_blank\" rel=\"external\">北京市住房公积网</a></p>\n</blockquote>\n <a id=\"more\"></a>\n<h4 id=\"转移（官方）\"><a href=\"#转移（官方）\" class=\"headerlink\" title=\"转移（官方）\"></a>转移（官方）</h4><ul>\n<li><a href=\"http://www.bjgjj.gov.cn/wzlyxd/201606/t20160630_3973.html\" target=\"_blank\" rel=\"external\">【官方】公积金转到外地怎么办？</a></li>\n<li><a href=\"http://www.bjgjj.gov.cn/bszn/gjjbszn/201606/t20160623_3905.html\" target=\"_blank\" rel=\"external\"><strong>【官方】住房公积金个人账户转移的办理指南</strong></a></li>\n<li><a href=\"http://www.bjgjj.gov.cn/xztw/201501/t20150120_3431.html\" target=\"_blank\" rel=\"external\">【官方】转移业务（除西城、海淀管理部）</a></li>\n</ul>\n<h4 id=\"提取（官方）\"><a href=\"#提取（官方）\" class=\"headerlink\" title=\"提取（官方）\"></a>提取（官方）</h4><ul>\n<li><a href=\"https://wenku.baidu.com/view/2164f7fd650e52ea54189802.html\" target=\"_blank\" rel=\"external\">《住房公积金提取申请书》</a></li>\n<li><a href=\"http://www.bjgjj.gov.cn/bszn/gjjbszn/201606/t20160623_3907.html\" target=\"_blank\" rel=\"external\">北京住房公积金提取办理指南</a></li>\n<li><a href=\"http://www.bjgjj.gov.cn/ywwd/201512/t20151221_3620.html\" target=\"_blank\" rel=\"external\">住房公积金–通州管理部</a></li>\n<li><a href=\"http://www.bjgjj.gov.cn/wzlyxd/201606/t20160630_3972.html\" target=\"_blank\" rel=\"external\">离职怎么提公积金？(其中，进城务工人员指的是农业户口的职工。)</a></li>\n</ul>\n<hr>\n<h3 id=\"社保\"><a href=\"#社保\" class=\"headerlink\" title=\"社保\"></a>社保</h3><blockquote>\n<p><a href=\"http://www.bjrbj.gov.cn/csibiz/indinfo/login.jsp\" target=\"_blank\" rel=\"external\">北京市社保查询网站</a><br><a href=\"http://www.bjrbj.gov.cn/\" target=\"_blank\" rel=\"external\">北京市人力资源和社会保障局</a></p>\n</blockquote>\n<h4 id=\"医保金额提取\"><a href=\"#医保金额提取\" class=\"headerlink\" title=\"医保金额提取\"></a>医保金额提取</h4><p>医保里的钱是可以提取的，拿自己的社会保障卡和身份证去北京银行(先查询自己的社保是哪个银行管理的，一般是北京银行)，说要取医保里的钱，会先办理一张存折（需要单位先到社保局领存折，银行只是补办存折的地方），然后拿着存折去取钱。</p>\n<h4 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h4><ul>\n<li><a href=\"http://www.bjrbj.gov.cn/mtgz/mtgz_1714/201608/t20160805_59128.html\" target=\"_blank\" rel=\"external\">【官方】社保转移手续简化 办理只需两个材料</a></li>\n<li><a href=\"http://www.bjrbj.gov.cn/bsfw/shbx/qt/201510/t20151010_52568.html\" target=\"_blank\" rel=\"external\">【官方】参保人员转移接续信息定制业务(每月5日至月末) – 似乎不是转移到外省？</a></li>\n<li><a href=\"http://jingyan.baidu.com/article/a24b33cd01a7c619fe002bab.html\" target=\"_blank\" rel=\"external\">【百科】2016年社保跨省转移流程及注意事项</a></li>\n</ul>\n<hr>\n<h4 id=\"深圳市社保接收\"><a href=\"#深圳市社保接收\" class=\"headerlink\" title=\"深圳市社保接收\"></a>深圳市社保接收</h4><ul>\n<li><a href=\"http://www.szsi.gov.cn/zxbs/bszn/sitz/\" target=\"_blank\" rel=\"external\">深圳市社会保险基金管理局 - 社保转移</a></li>\n<li>异地的社保转入深圳的办理流程是？<ul>\n<li>提供以下资料： （1）《深圳市社会保险关系转移/结算申请表》（单位员工需加盖单位公章，个人参保人员需本人签名）； （2）《基本养老保险参保缴费凭证》（外地社保局开具）； （3）身份证和社保卡（验原件、收复印件，单位员工需加盖单位公章）； （4）如果养老保险存在重复缴费的，另需提供参保人本人在本市中、农、工、建四大国有商业银行开具的存折或者借记卡原件及复印件（单位员工需加盖单位公章）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"答疑\"><a href=\"#答疑\" class=\"headerlink\" title=\"答疑\"></a>答疑</h3><ul>\n<li><a href=\"http://jingyan.baidu.com/article/642c9d34c182bd644a46f715.html\" target=\"_blank\" rel=\"external\">北京住房公积金转移到广州 - 百度百科</a></li>\n<li><a href=\"https://zhidao.baidu.com/question/185330360.html\" target=\"_blank\" rel=\"external\">社会保险是不是只能转到户口所在地？</a></li>\n<li><a href=\"https://zhidao.baidu.com/question/97331733.html?fr=qrl&amp;index=0&amp;qbl=topic_question_0&amp;word=%CD%CB%D0%DD%C1%CB%BD%C9%B5%C4%C9%E7%B1%A3%BB%E1%D7%AA%B5%BD%BB%A7%BF%DA%CB%F9%D4%DA%B5%D8%C2%F0\" target=\"_blank\" rel=\"external\">外地人在北京工作，在户口所在地交社保划算吗？</a></li>\n<li><a href=\"http://www.hb.xinhuanet.com/zhengwu/2003-08/26/content_888130.htm\" target=\"_blank\" rel=\"external\">湖北户籍制度取消农业和非农业之分</a></li>\n<li><a href=\"http://www.nahehuo.com/office/2437\" target=\"_blank\" rel=\"external\">社保转移需要哪些手续</a></li>\n<li><a href=\"http://www.huicaiba.com/ask/1799616.html\" target=\"_blank\" rel=\"external\">转发社保转移申请表及需要的资料</a></li>\n<li><a href=\"http://www.xyz.cn/study/yibaozhanghu-news-2156388.html\" target=\"_blank\" rel=\"external\">北京医保政策重上正轨 自由支取变为封闭账户</a></li>\n<li><a href=\"http://bj.bendibao.com/bjsi/201388/112940.shtm\" target=\"_blank\" rel=\"external\">北京社保卡到哪领、如何领（以朝阳区为例）</a></li>\n</ul>\n","categories":["life"],"tags":["life"]},{"title":"在帝都独居一年多，让我体会到什么","url":"http://jinbeen.com/2017/02/27/living-alone-in-beijing/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><img src=\"https://jinbeen.com/images/2017/life-beijijng-天安门.png\" alt=\"天安门\"></p>\n<p>今天是2017年2月27日，写在即将离开北京的前几天。在帝都漂了这么久，在离去之时总要做点总结回忆一下之前度过的时光。在此记录用以将来缅怀。</p>\n<a id=\"more\"></a>\n<h3 id=\"为何独居\"><a href=\"#为何独居\" class=\"headerlink\" title=\"为何独居\"></a>为何独居</h3><p>我本不想独居。关键是条件不允许。最初人本在海淀，和几个要好的朋友一起，偶尔一起出去玩，探讨一下学术，很惬意。然而由于工作找的是朝阳四惠东附近，到公司需要2个小时左右的时间，<strong>先坐公交到西二旗地铁站–13号线到西直门–2号线到复兴门–1号线到四惠东</strong>，在坚持一个月后不得不换了。其实最初感觉是比较好的，我喜欢坐一趟时间比较久的车，因为在中途可以看会书，当时就把<a href=\"http://baike.baidu.com/link?url=tRy56r03qJqM_iepTZyTQfuFLdsaC08bSdE8UGgKSC6NOoLkWhR3xxpOSo-clsgi_d3Q7uBepya0jIibiIv8GIOw4vqVOTfjVfMDx1q0n_1KPhNX8h4jIwb_Im6i4k74b0VhFpFO7RcUKKE94MQ8-_\" target=\"_blank\" rel=\"external\">《催眠师手记》</a>看完了，还要一部分《醒世恒言》。</p>\n<h3 id=\"选址\"><a href=\"#选址\" class=\"headerlink\" title=\"选址\"></a>选址</h3><p>在决定搬到公司附近居住后开始考虑居住的地方，因为懒得找民房，因为没有人一起合租，一起的同事基本都已经住好了，一般租房一下租的是一年，所以也不好一起再合租，所以还是决定一个人住了。问了比较多的同事后，他们大部分住的是<em>八通线</em>，又由于之前听一个朋友提及过，八通线的通州北苑那里的租房的价格不贵，最初就考虑在那了。</p>\n<p>然后在自如(一个租房软件)里联系管家开始找房，看中一个房源，管家会带你去房间，如果可以的话就在网上签约。一次性签约至少一年，有押一付一和押一付三，当然付的越多每月的租金就越便宜，我选择的是押一付三，平均一个月的租金的1430元，然后一年的服务费(里面包括一个月两次的情节，暖气费，宽带费还有维修什么的)是一个月的房租。当时一下出了5个月的房租，也就是7150元。</p>\n<p>当时是双休带我去看的，看了一间我就定下来了。房子在万达广场的斜对面，一个小区XX家园，这里由于隐私就不透露了。因为看到了万达影城就在对面，所以一眼就定下来了，没办法就这点追求啊！爱看电影！当时租的时间是2015年12月12日，一年之后房价开始涨到1760元每月，过年后涨到1960元每月，可真是租不起了。</p>\n<p>确定住址以后，托好友把一点行李寄到这边来，开始了一个人独居的旅程…</p>\n<h3 id=\"最初独居的心情\"><a href=\"#最初独居的心情\" class=\"headerlink\" title=\"最初独居的心情\"></a>最初独居的心情</h3><p>以往都住的是集体宿舍，就算在家里也有人管着，现在一个人住想干嘛干嘛，从未感到如此的Free。真是嗨上天了！那时候的大约四个月，我享受到了前期的愉悦，就像刚谈恋爱的人一样。我们公司是十点上班七点下班双休。最初没有搬位置的时候是7点起床，现在可以8点办起床了，而且每天早上去上班时都会去路边的早餐店坐着吃早餐，那个师傅早就认识我了，每天基本点的是：一碗甜的豆腐脑，一笼包子或饺子，一个茶叶蛋。</p>\n<p>每天工作的效率也不错，大家都很融洽，刚开始不懂的可以咨询一下同事，大家很和睦。我们一般中午下午会一起聚餐，去餐馆点几个菜，然后吃完后回公司睡个午觉继续干活。</p>\n<p>晚上7点下班，到12点休息，中间还有很多时间。把以前一个人没机会做的事都拿出来做。于是开始，写日记…</p>\n<p><img src=\"https://jinbeen.com/images/2017/life-beijijng-日记.png\" alt=\"日记\"></p>\n<p>还有看一些动漫，如《进击的巨人》，《寄生兽》，《冬季食尸鬼》等。</p>\n<p>周末一般中午起床，在床上听很长时间的音乐，电音系列~去周围的饭店吃了以后到处逛一下，夜晚一般去电影院或在附近的通惠河的路边跑会步。看起来那么健康吗？哈哈，不！附近有一个网吧，活动期间冲一百送一百，于是我卡里面就有两百了，基本没两周会去网吧一次，一次玩大几十块钱的时间，一般会到凌晨四五点左右，玩到尽兴，不想玩了为止，虽然之后大半年没有去了，当然这是后文了。</p>\n<p>之后和同事一起去了鄂尔多斯市沙漠玩~<br><img src=\"https://jinbeen.com/images/2017/life-beijijng-鄂尔多斯市沙漠.png\" alt=\"鄂尔多斯市沙漠\"></p>\n<p>没错，这基本就是那段时间所做的事和心情了，心情相当舒适，自由，海阔凭鱼跃。电影院，跑步，通宵上网，上班期间合理作息，吃早餐了去上班。</p>\n<h3 id=\"焦虑期\"><a href=\"#焦虑期\" class=\"headerlink\" title=\"焦虑期\"></a>焦虑期</h3><p>没有恒久的稳定，只有不停地变化。这时公司要加班了，1075变成了1096，就是强节奏的加班，对于之前的我们是强节奏，在其他的互联网公司这应该算是正常的。这时候的节奏完全被打乱了，上班比较累，早上就难起，从此就改变了在路上吃早餐的好习惯，晚上也没有什么具体活动了。从四月下旬开始，这样一直持续了两个多月。</p>\n<p><img src=\"https://jinbeen.com/images/2017/life-beijijng-时间.png\" alt=\"时间\"><br><img src=\"https://jinbeen.com/images/2017/life-beijijng-提示.png\" alt=\"提示语\"></p>\n<p>在加班期间一直是比较难受的，第一只工作负荷，第二是生活作息变了，第三人和人相处也不那么和谐了，大家都有各自的抱怨。</p>\n<p>往后面一直持续到十月份左右，那段时间很难受，想要找到生活的目标，不是简单的这样上网，看电影而已，而且一个人住开始觉得无聊，没有人交流。要知道周围是没有一个可以交流的人，和朋友之间聚会也是几个月一次去海淀，大部分之间都是一个人。以前觉得舒适的生活，现在反而成了一种累赘，有点像情侣开始互不讨厌对方的一样。开始觉得生活没意思，寻找不到生活的乐趣。</p>\n<blockquote>\n<p>生活本就没有意义，看你赋予它什么意义。</p>\n</blockquote>\n<p>这段期间，做事开始来使生活有意义。</p>\n<h4 id=\"视频日记\"><a href=\"#视频日记\" class=\"headerlink\" title=\"视频日记\"></a>视频日记</h4><p>四月份左右陆续买了MacPro和Ipad之后，之前的windows电脑就给同学用了，所以写日记用了pages.</p>\n<p><img src=\"https://jinbeen.com/images/2017/life-beijijng-pages日记.png\" alt=\"pages日记\"></p>\n<p>然而由于加班原因就没写了，在看了《阿凡达》后，男主使用视频日记觉得很cool，于是尝试录制视频日记：</p>\n<p><img src=\"https://jinbeen.com/images/2017/life-beijijng-视频日记.png\" alt=\"视频日记\"></p>\n<p>其中有间隔的时间是用ipad在录没有传到电脑上。</p>\n<h4 id=\"看电影\"><a href=\"#看电影\" class=\"headerlink\" title=\"看电影\"></a>看电影</h4><p>为了寻找生活的趣点，使生活变得有趣，让自己成为一个有趣的人，我也是煞费苦心。这时候开始琢磨看电影了，一系列的看。我在空间建立了一个《影视》相册，专门用来分享看过的比较好的电影：</p>\n<p><img src=\"https://jinbeen.com/images/2017/life-beijijng-空间相册.png\" alt=\"空间相册\"></p>\n<p>看电影时我喜欢把一些好的画面截图，才有了这些照片，不是网上找的哦，当然有些烂片是没有截图的，凡是有点价值的电影基本都截图了吧。相册里的图片只是冰山一角，很多图片在ipad或电脑上并没有上传。</p>\n<p><img src=\"https://jinbeen.com/images/2017/life-beijijng-电影截图相册.png\" alt=\"电影截图相册\"></p>\n<p>我喜欢一个系列的看，比如漫威系列，漫威系列的英雄电影有很多，基本都看完了，还特意总结了一篇文章：<a href=\"http://jinbeen.com/2016/12/04/%E6%BC%AB%E5%A8%81%E5%AE%87%E5%AE%99/\">《漫威电影宇宙》</a>。最初看《钢铁侠》时还看一部自己总结一个剧情或感受，到最后因为太多了，可能一天连续看大几部电影，之后基本就没有写了。当找不到电影看时，就去评分排行榜找，然后选没有看过的，依次往下面看。<strong>科幻、动作、爱情、剧情、喜剧</strong>，一般关注这些类型。</p>\n<ul>\n<li>漫威系列</li>\n<li>古惑仔系列</li>\n<li>大话西游系列</li>\n<li>教父</li>\n<li>沉默的羔羊</li>\n<li>…</li>\n</ul>\n<p>因为片源不一样，开通了爱奇艺会员和腾讯会员，优酷之后支付宝做活动送了几个月的会员。那时候网吧很少去就是为了看电影。</p>\n<h4 id=\"看书\"><a href=\"#看书\" class=\"headerlink\" title=\"看书\"></a>看书</h4><p>没办法，爱好就这么多，看书兴趣很广泛。然而我想说的是：然并卵。我买了很多书，当时当当网活动，买100送100，所以两百的书，然而到现在为止，我看了大约三本而已。时间太宝贵，我还要看电影呢，看一本书需要几天的时间，而这几天我可以看n部电影，没有很大的必要性去看一本书，所以很多时间都没看。除非这本书非常吸引我，觉得非看不可。</p>\n<p>《非暴力沟通》就是这样。这本书我花了三天时间看完了，精读，而且还做了很多笔记，改变了我很多认识和看法，也看清了很多，管理情绪和进行有效沟通很好。之后还没了实践篇来看，不过实践篇没有看完，感觉大同小异，主要是领会其中的思想。然后付诸于行动。只有付诸于实际才叫学习，不然就是读死书了。</p>\n<h4 id=\"得到\"><a href=\"#得到\" class=\"headerlink\" title=\"得到\"></a>得到</h4><p>通过朋友的介绍，知道一个软件，得到。也就是现在一直谈到了知识付费，里面是很多领域的资深人士，分享自己的看书笔记或者心得。订阅了《樊登读书会》、《万维钢·精英日课》、《罗辑思维》。当觉得生活不是自己想要的时候，都会去里面寻找答案，总能得到意想不到的东西。每个订阅差不多199元/年，罗辑思维除外。个人认为非常值得。</p>\n<ul>\n<li>学习方式：<strong>刻意练习，及时反馈。</strong></li>\n<li>非暴力沟通</li>\n<li>胜者通吃</li>\n<li>…</li>\n</ul>\n<h4 id=\"感情\"><a href=\"#感情\" class=\"headerlink\" title=\"感情\"></a>感情</h4><blockquote>\n<p>道路是拥挤的，但它是孤独的，因为它不是被爱的。</p>\n</blockquote>\n<p>虽然我一直未提，但毫无疑问，很多时候感情是一个人的精神支柱。</p>\n<p>由于我是一条单身狗，而且是一只独居的单身狗，这是多么的可怕，特别容易堕落。感情没有一个寄托，对于我来说是恐怖的。于是开始各种打电话。。每当觉得快失陷的时候，我就和好友打电话，好友很多时候也会说下生活的不愉快，我心里也就好受多了，原来不是我一个人觉得生活很难没意思，大家都这样觉得，哈哈，有没有很贱。。但确实如此，你会发现，很多人对生活是迷茫的，我曾经也是，缺失目标后就会感觉很迷茫，感觉生活无意义。</p>\n<h3 id=\"曙光\"><a href=\"#曙光\" class=\"headerlink\" title=\"曙光\"></a>曙光</h3><blockquote>\n<p>在得到里看到一句话：在影响圈里活动，而不是关注圈。</p>\n</blockquote>\n<h4 id=\"简书写作\"><a href=\"#简书写作\" class=\"headerlink\" title=\"简书写作\"></a>简书写作</h4><p>简书是很早之前下载的，最初只是用来看别人的文章而已。后来才尝试在里面写些东西。其实很多时候人的能力是被逼出来的，在加班结束之后，公司开始降薪，大家都开始注意提升自己的能力，准备找工作了。我也开始这样做，于是慢慢在学。当学习完后，总结一下，发到简书里，起初是写一些简单的文章，得到被人的“喜欢”之后，就会很有动力。这也符合“及时反馈”的效果吧。</p>\n<p><img src=\"https://jinbeen.com/images/2017/life-beijijng-简书个人资料.png\" alt=\"简书个人资料\"></p>\n<p>之后就陆续开始写一些文章了，还有在CSDN上。被“喜欢”上的感觉，远远比打游戏来的过瘾。每篇文章都经过深思熟虑反复修改后发表的，发表之后有错误然而再重新编辑。</p>\n<h4 id=\"个人博客\"><a href=\"#个人博客\" class=\"headerlink\" title=\"个人博客\"></a>个人博客</h4><p>在GitHub逛多了以后，基本会发现，牛人一般会有自己的博客，就是像这样<a href=\"jinbeen.com\"><strong>jinbeen.com</strong></a>。为了跟上牛人的脚步，提升自己和找到一份好工作，花了两天时间，其中有一晚忙到了凌晨5点左右，终于搭建好了，高兴了好一阵子。</p>\n<p><img src=\"https://jinbeen.com/images/2017/life-beijijng-博客搭建完成时间.png\" alt=\"博客搭建完成时间\"></p>\n<p>之后为了帮助其他小伙伴，避免他们走太多弯路，写了一遍博客，也是第一篇博客：<a href=\"http://jinbeen.com/2016/11/19/Mac%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95%EF%BC%8C%E6%8E%92%E9%9B%B7%E5%AE%8C%E6%88%90/\">《Mac搭建Hexo博客流程记录，排雷完成》</a>（怎么感觉标题很low…），从此踏上了学习分享的路上，分享更是反馈，这样才是一个有效的系统，对于我来说不分享很难坚持下去，【刻意练习，及时反馈】，缺一不可。</p>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><p><img src=\"https://jinbeen.com/images/2017/life-beijijng-云阅摘要.png\" alt=\"云阅摘要\"></p>\n<p><strong><a href=\"http://www.jianshu.com/p/69a229fb6e1d\" target=\"_blank\" rel=\"external\">《云阅》一个仿网易云音乐UI，使用Gank.Io及豆瓣Api开发的开源项目</a></strong><br>这必须专门来说一下，这个项目花了大约三个月的时间，从最初准备到实施还有一系列文档，花费了大量的时间。几乎每天都忙到凌晨2点左右，包括双休，从那时候大概半年我就再没有去过网吧了。</p>\n<p>撰写文档就花了元旦假期三天的时间，之后陆续发到简书，掘金和泡网上。因为自定义控件和设计模式都照着张鸿洋的CSDN博客写的，所以我马上投给了鸿洋的微信公众号上，由于投了以后就不能投在其他的公众号里，之后有很多人找我都被我拒绝了。</p>\n<p>通过这个项目，我看了很多大牛的博客和开源项目，让我明确了自己的学习方式和学习路线。</p>\n<h3 id=\"离开\"><a href=\"#离开\" class=\"headerlink\" title=\"离开\"></a>离开</h3><p>公司原因，很多以前在一起的同事都慢慢离开了公司，有点伤感，工作上一直教我的辣公公上周五也走了。这段时间一直在准备简历和学习，为了找工作做准备。</p>\n<p>准备南下去深圳了，一个人独居的时候应该已经结束了，深圳的有亲戚、同学，到时候可以一起耍，这段时间每个周末都会去一个景点，在北京这些时间把北京的景点几乎都逛完了，<strong><em>天安门、故宫、天坛、长城、什刹海、后海、南锣鼓巷、香山公园、王府井步行街</em></strong>，基本都结束了。</p>\n<p>花了大半天时间写了这篇博客为在北京画一个完美的句号。</p>\n<h3 id=\"总结与体会\"><a href=\"#总结与体会\" class=\"headerlink\" title=\"总结与体会\"></a>总结与体会</h3><ul>\n<li>1.不知道干什么的时候，在网上查找这个阶段自己该做点什么，每天进步一点点，始终保持在正确的路上前进。</li>\n<li>2.没有目标时会感到迷茫，需要设立阶段性的目标和短期目标。如做开源项目时，做出来发表这是阶段性目标，拆分成一个个短期目标就是界面搭建，api接入，文档整理，发表等。</li>\n<li>3.从<strong><em>得到</em></strong>里看到，在影响圈里活动，而不是关注圈。尽量自己参与，如写作，写开源项目等。</li>\n<li>4.学习要诀：<strong><em>刻意练习，及时反馈。</em></strong>学习使我快乐，使自己保持在学习状态中，停留在学习区，在学习区和舒适区里合理切换。</li>\n<li>5.培养记录的习惯。在“奇妙清单”或“备忘录”里记录要做的事和一些临时的想法，然后一个个实施。脑袋是用来思考的，不是用来记事的，把事情交给这些记录软件。</li>\n<li>6.找个感情基石。要有自己喜欢或爱着的人，没有试着去培养，赶快找个女朋友，哈哈。</li>\n</ul>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>2017-02-28 12:03 补：<strong>总结与体会</strong><br>2017-03-08 13:25 改：《喻世明言》→《醒世恒言》<br>先到此为止，以后想到漏写了内容再补上。</p>\n<blockquote>\n<p>起始时间：2017-02-27 周一 17:32  公司<br>最后编辑：2017-03-08 周三 13:25  公司</p>\n</blockquote>\n","categories":["life"],"tags":["life"]},{"title":"Android 面试资料集锦","url":"http://jinbeen.com/2017/02/20/Android 面试资料集锦/","content":"<blockquote>\n<p>犹太法典:当你挽救了一条生命，你就等于挽救了全世界。 - 《辛德勒名单》</p>\n</blockquote>\n<h3 id=\"资源集\"><a href=\"#资源集\" class=\"headerlink\" title=\"资源集\"></a>资源集</h3><ul>\n<li><strong><a href=\"https://github.com/GeniusVJR/LearningNotes\" target=\"_blank\" rel=\"external\">LearningNotes</a></strong></li>\n<li><a href=\"https://github.com/suzeyu1992/repo\" target=\"_blank\" rel=\"external\">记录一个自己的知识库</a></li>\n<li><a href=\"http://www.jianshu.com/p/735be5ece9e8?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=qq\" target=\"_blank\" rel=\"external\">Android 名企面试题及涉及知识点整理</a></li>\n<li><a href=\"http://www.jackywang.tech/AndroidInterview-Q-A/interview/\" target=\"_blank\" rel=\"external\">国内一线互联网公司内部面试题库</a></li>\n<li><a href=\"http://www.jianshu.com/p/d1efe2f31b6d\" target=\"_blank\" rel=\"external\">史上最全 Android 面试资料集合</a></li>\n<li><a href=\"https://github.com/Freelander/Android_Data\" target=\"_blank\" rel=\"external\">Android 学习资料收集</a></li>\n<li><a href=\"http://www.jianshu.com/nb/3450453\" target=\"_blank\" rel=\"external\">Android面试一天一题</a></li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/94e0f9ab3f1d\" target=\"_blank\" rel=\"external\">Context都没弄明白，还怎么做Android开发？</a></li>\n<li><a href=\"http://www.jianshu.com/p/8a7d059da746\" target=\"_blank\" rel=\"external\">Android中RelativeLayout和LinearLayout性能分析</a></li>\n<li><a href=\"http://www.jianshu.com/p/ef892323e68f\" target=\"_blank\" rel=\"external\">TCP协议详解</a></li>\n<li><a href=\"http://www.jianshu.com/p/e99b5e8bd67b?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weixin\" target=\"_blank\" rel=\"external\">图解 Android 事件分发机制</a></li>\n<li><a href=\"http://blog.csdn.net/qq_22329521/article/details/51934783\" target=\"_blank\" rel=\"external\">垃圾收集器与内存分配策略</a></li>\n<li><a href=\"http://www.cnblogs.com/liuling/archive/2015/09/24/2015-9-24-1.html\" target=\"_blank\" rel=\"external\">内存缓存LruCache实现原理</a></li>\n<li><a href=\"http://blog.csdn.net/vking_wang/article/details/14166593\" target=\"_blank\" rel=\"external\">HashMap实现原理分析</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-11775320-id-3143919.html\" target=\"_blank\" rel=\"external\">java面试题-HashMap原理</a></li>\n<li><a href=\"http://szysky.com/2017/02/08/%E9%9D%A2%E8%AF%95%E4%B9%8BBinder%E7%9A%84%E8%AE%A4%E7%9F%A5/\" target=\"_blank\" rel=\"external\">面试之Binder的认知</a></li>\n<li><a href=\"http://www.jianshu.com/p/c20de49d8d9a\" target=\"_blank\" rel=\"external\">浅析HandlerThread</a></li>\n<li><a href=\"http://droidyue.com/blog/2016/02/21/thinking-of-getting-the-current-activity-in-android/index.html\" target=\"_blank\" rel=\"external\">关于获取当前Activity的一些思考</a> - 弱引用相关</li>\n</ul>\n<h4 id=\"官方\"><a href=\"#官方\" class=\"headerlink\" title=\"官方\"></a>官方</h4><ul>\n<li><a href=\"http://hukai.me/android-training-course-in-chinese/ux/search/setup.html\" target=\"_blank\" rel=\"external\">Android官方培训课程中文版</a>：熟悉Android开发基础知识</li>\n</ul>\n<h4 id=\"面试题集\"><a href=\"#面试题集\" class=\"headerlink\" title=\"面试题集\"></a>面试题集</h4><ul>\n<li><a href=\"http://blog.csdn.net/dd864140130/article/details/55833087\" target=\"_blank\" rel=\"external\">要换工作? 来看看面试题吧,Java 面试题集\n</a></li>\n<li><a href=\"http://www.jianshu.com/p/bd1bfc0c34b8\" target=\"_blank\" rel=\"external\">java面试题整理(更新…)</a></li>\n<li><a href=\"http://www.jianshu.com/p/1c9a55e3fa89\" target=\"_blank\" rel=\"external\">Android基础面试题</a></li>\n</ul>\n<h4 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h4><ul>\n<li><a href=\"http://www.cnblogs.com/liuling/archive/2013/04/14/suanfa.html\" target=\"_blank\" rel=\"external\">常用的算法的时间复杂度和空间复杂度</a></li>\n<li><a href=\"http://blog.csdn.net/qy1387/article/details/7752973\" target=\"_blank\" rel=\"external\">Java常用排序算法/程序员必须掌握的8大排序算法</a></li>\n<li><a href=\"http://www.cnblogs.com/maybe2030/p/4715035.html\" target=\"_blank\" rel=\"external\">七大查找算法</a></li>\n<li><a href=\"http://www.jianshu.com/p/159426e2aaf6\" target=\"_blank\" rel=\"external\">Android的数据结构与算法—-ArrayList源码解析</a></li>\n</ul>\n<h4 id=\"安卓App热补丁动态修复\"><a href=\"#安卓App热补丁动态修复\" class=\"headerlink\" title=\"安卓App热补丁动态修复\"></a>安卓App热补丁动态修复</h4><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a\" target=\"_blank\" rel=\"external\">安卓App热补丁动态修复技术介绍</a></li>\n<li><a href=\"https://www.diycode.cc/topics/280\" target=\"_blank\" rel=\"external\">Android Hotfix 新方案——Amigo 源码解读</a> - 饿了么热修复框架</li>\n<li><a href=\"http://blog.csdn.net/hmg25/article/details/8100896\" target=\"_blank\" rel=\"external\">浅析android应用增量升级</a></li>\n</ul>\n<h4 id=\"多渠道打包\"><a href=\"#多渠道打包\" class=\"headerlink\" title=\"多渠道打包\"></a>多渠道打包</h4><ul>\n<li><a href=\"http://yifeiyuan.me/2017/01/16/muitl-channel-pkg-compare/\" target=\"_blank\" rel=\"external\">Android多渠道打包技术对比</a></li>\n<li><a href=\"http://tech.meituan.com/mt-apk-packaging.html\" target=\"_blank\" rel=\"external\">美团Android自动化之旅—生成渠道包</a></li>\n<li><a href=\"https://github.com/mcxiaoke/packer-ng-plugin\" target=\"_blank\" rel=\"external\">下一代Android打包工具，100个渠道包只需要10秒钟【推荐】</a></li>\n</ul>\n<h3 id=\"面试经验\"><a href=\"#面试经验\" class=\"headerlink\" title=\"面试经验\"></a>面试经验</h3><ul>\n<li><a href=\"http://gdky005.com/2016/07/08/%E4%B8%80%E4%B8%AA%E4%BA%94%E5%B9%B4Android%E5%BC%80%E5%8F%91%E8%80%85%E7%99%BE%E5%BA%A6%E3%80%81%E9%98%BF%E9%87%8C%E3%80%81%E8%81%9A%E7%BE%8E%E3%80%81%E6%98%A0%E5%AE%A2%E7%9A%84%E9%9D%A2%E8%AF%95%E5%BF%83%E7%BB%8F/\" target=\"_blank\" rel=\"external\">一个五年Android开发者百度、阿里、聚美、映客的面试心经</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21565914\" target=\"_blank\" rel=\"external\">Android 面试那些事儿</a></li>\n<li><a href=\"http://www.jianshu.com/p/c3965e82b164?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">震惊!这年Android面试的那些套路</a></li>\n</ul>\n<h3 id=\"简历模板\"><a href=\"#简历模板\" class=\"headerlink\" title=\"简历模板\"></a>简历模板</h3><ul>\n<li><a href=\"https://github.com/geekcompany/ResumeSample/blob/master/android.md\" target=\"_blank\" rel=\"external\">Android程序员简历模板</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402970472&amp;idx=1&amp;sn=b9738c66fb5750c2515d57357c01a83f&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">你真的会写简历么？</a></li>\n<li><a href=\"http://www.jianshu.com/p/99f890ef36d4?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">写好一份技术简历很重要</a></li>\n<li><a href=\"http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef4770\" target=\"_blank\" rel=\"external\">80% 以上简历都是不合格的</a></li>\n<li><a href=\"http://j.codekk.com/blogs/detail/5705bcdf4a38205862ef476f\" target=\"_blank\" rel=\"external\">推荐两个技术简历模板</a></li>\n<li><a href=\"https://mdluo.github.io/blog/about-resume/\" target=\"_blank\" rel=\"external\">关于程序员求职简历</a></li>\n</ul>\n<hr>\n<h3 id=\"复习点备忘\"><a href=\"#复习点备忘\" class=\"headerlink\" title=\"复习点备忘\"></a>复习点备忘</h3><ul>\n<li>主界面viewpager嵌套viewpager滑动冲突（自己处理的还是Drawlayout处理的)</li>\n<li>事件分发机制、消息机制</li>\n<li>说到mvvm 你怎么看待mvp呢</li>\n<li>开源的那个项目难点是啥</li>\n<li>rxjava和retrofit，它们实现原理是啥</li>\n<li>内存泄漏 性能优化</li>\n<li>增量更新啊 热修复 插件化开发</li>\n<li>apk瘦身技术</li>\n<li>目前你知道事件冲突解决方式有哪几种</li>\n<li>事件机制用到设计模式什么模式（责任链模式–&gt;源码）</li>\n<li>结合android源码来分析设计模式</li>\n<li>什么对象会被GCRoot引用</li>\n<li>为什么butterkinfe效率高</li>\n<li>databinding优缺点</li>\n<li><strong>写一个自定义控件</strong></li>\n<li>缓存和线程</li>\n<li>md5，rsaa，RSA加密</li>\n</ul>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><ul>\n<li>Thinking in Java</li>\n<li>Effective Java</li>\n<li>Android 开发艺术探索(进阶必备)</li>\n<li>第一行代码</li>\n<li>阅读Android源码，理解一些高级概念（activity、view的内部运行机制：比如：aidl、JNI）</li>\n</ul>\n","categories":["Android"],"tags":["Android"]},{"title":"♪ Music 如何在个人主页里插入音乐","url":"http://jinbeen.com/2017/01/17/♪ Music 如何在个人主页里插入音乐/","content":"<p>在自己的个人主页里插入喜欢的音乐有木有感觉很Cool呢，这里推荐四种形式：</p>\n<ul>\n<li>1、MarkDown里插入单曲</li>\n<li>2、MarkDown里插入歌单列表</li>\n<li>3、MarkDown里插入歌单列表，宽度自适应且自动播放</li>\n<li>4、新建菜单栏，以网页的形式插入</li>\n</ul>\n<h2 id=\"MarkDown里插入单曲\"><a href=\"#MarkDown里插入单曲\" class=\"headerlink\" title=\"MarkDown里插入单曲\"></a>MarkDown里插入单曲</h2><object width=\"340\" height=\"86\" data=\"https://music.163.com/style/swf/widget.swf?sid=36492196&type=2&auto=0&width=320&height=66\" type=\"application/x-shockwave-flash\"></object>  \n\n<a id=\"more\"></a>\n<p>对应的字符串：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;object width=\"340\" height=\"86\" data=\"http://music.163.com/style/swf/widget.swf?</div><div class=\"line\">sid=445154960&amp;type=2&amp;auto=0&amp;width=320&amp;height=66\" </div><div class=\"line\">type=\"application/x-shockwave-flash\"&gt;&lt;/object&gt;</div></pre></td></tr></table></figure>\n<p>注意<strong>删掉中间的换行符</strong>。<br>然后进入<code>https://music.163.com/</code>搜索自己要添加的音乐然后找到id，替换即可。\u0001见下图：<br><img src=\"https://img-blog.csdnimg.cn/20210403160838422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"music.png\"></p>\n<h2 id=\"MarkDown里插入歌单列表\"><a href=\"#MarkDown里插入歌单列表\" class=\"headerlink\" title=\"MarkDown里插入歌单列表\"></a>MarkDown里插入歌单列表</h2><object width=\"330\" height=\"450\" data=\"https://music.163.com/style/swf/widget.swf?sid=108250019&type=0&auto=0&width=310&height=430\" type=\"application/x-shockwave-flash\"></object>\n\n<p>对应字符串：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;object width=\"330\" height=\"450\" data=\"http://music.163.com/style/swf/widget.swf?</div><div class=\"line\">sid=108250019&amp;type=0&amp;auto=0&amp;width=310&amp;height=430\" </div><div class=\"line\">type=\"application/x-shockwave-flash\"&gt;&lt;/object&gt;</div></pre></td></tr></table></figure>\n<p>与上面的步骤类似，找到要添加的歌单的id，更换即可：<br>\u0001<img src=\"https://img-blog.csdnimg.cn/20210403160913778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"playlist.png\"></p>\n<h2 id=\"MarkDown里插入歌单列表，宽度自适应且自动播放\"><a href=\"#MarkDown里插入歌单列表，宽度自适应且自动播放\" class=\"headerlink\" title=\"MarkDown里插入歌单列表，宽度自适应且自动播放\"></a>MarkDown里插入歌单列表，宽度自适应且自动播放</h2><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"600\" height=\"330\" src=\"https://music.163.com/outchain/player?type=0&id=572758458&auto=1&height=430\"></iframe>\n\n<p>对应字符串：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" </div><div class=\"line\">marginheight=\"0\" width=\"600\" height=\"330\" src=\"http://music.</div><div class=\"line\">163.com/outchain/player?</div><div class=\"line\">type=0&amp;id=572758458&amp;auto=1&amp;height=430\"&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>\n<p>操作一样，只是引入的字符串变了而已。</p>\n<h2 id=\"新建菜单栏，以网页的形式插入\"><a href=\"#新建菜单栏，以网页的形式插入\" class=\"headerlink\" title=\"新建菜单栏，以网页的形式插入\"></a>新建菜单栏，以网页的形式插入</h2><p>这个有些许麻烦，以添加“云音乐”菜单为例：</p>\n<h3 id=\"主题-config-yml配置\"><a href=\"#主题-config-yml配置\" class=\"headerlink\" title=\"主题_config.yml配置\"></a>主题<code>_config.yml</code>配置</h3><p>在主题文件夹的<code>_config.yml</code>里，添加需要添加的网页<br><img src=\"https://img-blog.csdnimg.cn/20210403160949934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"主题配置.png\"></p>\n<h3 id=\"source文件夹下\"><a href=\"#source文件夹下\" class=\"headerlink\" title=\"source文件夹下\"></a><code>source</code>文件夹下</h3><p>然后在主题文件夹的<code>source</code>文件夹下，新建名为<code>music.html</code>的网页<br><img src=\"https://img-blog.csdnimg.cn/20210403161010587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"source.png\"></p>\n<h3 id=\"music-html里的内容\"><a href=\"#music-html里的内容\" class=\"headerlink\" title=\"music.html里的内容\"></a><code>music.html</code>里的内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;  </div><div class=\"line\"> &lt;html&gt;  </div><div class=\"line\">  &lt;head&gt;  </div><div class=\"line\">   &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;  </div><div class=\"line\">    &lt;/head&gt;  </div><div class=\"line\">     &lt;body&gt;  </div><div class=\"line\">        &lt;div&gt;  </div><div class=\"line\">            &lt;object width=&quot;340&quot; height=&quot;86&quot; data=&quot;http://music.163.com/style/swf/widget.swf?sid=188900&amp;type=2&amp;auto=0&amp;width=320&amp;height=66&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/object&gt;  </div><div class=\"line\">        &lt;/div&gt;  </div><div class=\"line\">        &lt;hr /&gt;  </div><div class=\"line\">        &lt;div&gt;  </div><div class=\"line\">        &lt;object width=&quot;330&quot; height=&quot;450&quot; data=&quot;http://music.163.com/style/swf/widget.swf?sid=108250019&amp;type=0&amp;auto=0&amp;width=310&amp;height=430&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/object&gt;  </div><div class=\"line\">        &lt;/div&gt;  </div><div class=\"line\">            &lt;hr /&gt;  </div><div class=\"line\">        &lt;div&gt;  </div><div class=\"line\">        &lt;object width=&quot;330&quot; height=&quot;450&quot; data=&quot;http://music.163.com/style/swf/widget.swf?sid=19971812&amp;type=0&amp;auto=0&amp;width=310&amp;height=430&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/object&gt;  </div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;600&quot; height=&quot;450&quot; src=&quot;http://music.163.com/outchain/player?type=0&amp;id=108250019&amp;auto=1&amp;height=430&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  </div><div class=\"line\">     &lt;/body&gt;  </div><div class=\"line\">      &lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>里面内容的跟上面所述的基本一致，只是放在了网页而已，这种方式快捷，但是不易扩展，比如要添加图片不方便，建议以md文档的形式新建一个菜单栏。</p>\n<h3 id=\"更改菜单名\"><a href=\"#更改菜单名\" class=\"headerlink\" title=\"更改菜单名\"></a>更改菜单名</h3><p>这样设置以后网页就可以正常开启了，只是菜单名默认为<code>Menu.Music</code>，不太美观，为了和其他的名称效果一致，需要修改为对应的字符串。这时候在站点的配置文件里找到你之前设置过的显示的语言<br><img src=\"https://img-blog.csdnimg.cn/20210403161032798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"language.png\"></p>\n<p>然后找到对应的语言的文件夹内修改为自己想要的菜单名即可，示例请见：<a href=\"https://jinbeen.com\">https://jinbeen.com</a><br><img src=\"https://img-blog.csdnimg.cn/20210403161050769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmdiaW5f,size_16,color_FFFFFF,t_70\" alt=\"txt.png\"></p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><blockquote>\n<p>注意：如果你网站是https的，要把里面的播放的网络链接也改为https!</p>\n</blockquote>\n<p>是不是很简单呢，动起手来吧~<br>遇到什么问题可以联系我：<br>　　个人主页：<a href=\"https://jinbeen.com\">https://jinbeen.com</a><br>　　简书：<a href=\"http://www.jianshu.com/u/e43c6e979831\" target=\"_blank\" rel=\"external\">Jinbeen</a>  </p>\n","categories":["hexo"],"tags":["markdown","html"]},{"title":"Android - 仿网易云音乐歌单详情页","url":"http://jinbeen.com/2017/01/13/Android - 仿网易云音乐歌单详情页/","content":"<p>前段时间模仿网易云音乐UI使用DataBinding做了一个App：<a href=\"http://www.jianshu.com/p/69a229fb6e1d\" target=\"_blank\" rel=\"external\">CloudReader</a>，今天把其中的类似歌单详情页单独拿出来说一下，我觉得其中还是有些干货的，关联到的知识点还比较有价值，而且也有很多需要注意的地方。</p>\n<p>本次项目地址：<a href=\"https://github.com/youlookwhat/ScrollShapeUI\" target=\"_blank\" rel=\"external\">ScrollShapeUI</a></p>\n<a id=\"more\"></a>\n<h3 id=\"效果图对比：\"><a href=\"#效果图对比：\" class=\"headerlink\" title=\"效果图对比：\"></a>效果图对比：</h3><ul>\n<li><p>网易云音乐App原图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-761770bdf2e2ab04.gif?imageMogr2/auto-orient/strip\" alt=\"网易云音乐App原图.gif\"></p>\n</li>\n<li><p>模仿的效果图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-9aeef33cf3721aa6.gif?imageMogr2/auto-orient/strip\" alt=\"模仿的效果图.gif\"></p>\n</li>\n</ul>\n<p>建议大家直接看<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">CloudReader项目应用</a>里的效果，里面的内容部分有加载中的loading图，效果更逼真。</p>\n<h3 id=\"基本布局：\"><a href=\"#基本布局：\" class=\"headerlink\" title=\"基本布局：\"></a>基本布局：</h3><p>FrameLayout　<br>　—– MyNestedScrollView // 为了Api23下的滑动兼容<br>　　　—- LinearLayout // 内容部分<br>　—– RelativeLayout<br>　　　—- ImageView // Toolbar后面的背景图<br>　　　—- Toolbar // 标题栏</p>\n<p>由于篇幅原因，不能做详细的介绍，这里就简单介绍实现这种效果的思路：</p>\n<h3 id=\"实现思路：\"><a href=\"#实现思路：\" class=\"headerlink\" title=\"实现思路：\"></a>实现思路：</h3><ul>\n<li>1、Activity设置自定义Shared Element切换动画</li>\n<li>2、透明状态栏（透明Toolbar,使背景图上移）</li>\n<li>3、Toolbar底部增加和背景一样的高斯模糊图，并上移图片（为了使背景图的底部作为Toolbar的背景）</li>\n<li>4、上下滑动，通过NestedScrollView拿到移动的高度，同时调整Toolbar的背景图透明度</li>\n</ul>\n<h4 id=\"1、Activity设置自定义元素共享切换动画\"><a href=\"#1、Activity设置自定义元素共享切换动画\" class=\"headerlink\" title=\"1、Activity设置自定义元素共享切换动画\"></a>1、Activity设置自定义元素共享切换动画</h4><p>大家可以发现页面跳转时图片移动的是一个<strong>曲线路径</strong>，我们可以定制View的过渡切换效果，这是Material Design中比较常见的用法，Api21以上才有效。需要在开启页面时使用<code>ActivityOptions.makeSceneTransitionAnimation()</code>，其中定义共享的view和transitionName。然后在对应的Activity里创建<code>ArcMotion</code>对象。ArcMotion是<code>PathMotion</code>子类，是个曲线路径，对应代码片：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">// Activity设置自定义 Shared Element切换动画</span></div><div class=\"line\"> <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">        <span class=\"comment\">//定义ArcMotion</span></div><div class=\"line\">        ArcMotion arcMotion = <span class=\"keyword\">new</span> ArcMotion();</div><div class=\"line\">        arcMotion.setMinimumHorizontalAngle(<span class=\"number\">50f</span>);</div><div class=\"line\">        arcMotion.setMinimumVerticalAngle(<span class=\"number\">50f</span>);</div><div class=\"line\">        <span class=\"comment\">//插值器，控制速度</span></div><div class=\"line\">        Interpolator interpolator = AnimationUtils.loadInterpolator(<span class=\"keyword\">this</span>, android.R.interpolator.fast_out_slow_in);</div><div class=\"line\">        <span class=\"comment\">//实例化自定义的ChangeBounds</span></div><div class=\"line\">        CustomChangeBounds changeBounds = <span class=\"keyword\">new</span> CustomChangeBounds();</div><div class=\"line\">        changeBounds.setPathMotion(arcMotion);</div><div class=\"line\">        changeBounds.setInterpolator(interpolator);</div><div class=\"line\">        changeBounds.addTarget(binding.include.ivOnePhoto);</div><div class=\"line\">        <span class=\"comment\">//将切换动画应用到当前的Activity的进入和返回</span></div><div class=\"line\">        getWindow().setSharedElementEnterTransition(changeBounds);</div><div class=\"line\">        getWindow().setSharedElementReturnTransition(changeBounds);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 开启</span></div><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(context, MovieDetailActivity.class);</div><div class=\"line\">intent.putExtra(<span class=\"string\">\"bean\"</span>, positionData);</div><div class=\"line\">ActivityOptionsCompat options =</div><div class=\"line\">\t\t\tActivityOptionsCompat.makeSceneTransitionAnimation(context,imageView, CommonUtils.getString(R.string.transition_book_img));<span class=\"comment\">//与xml文件对应</span></div><div class=\"line\"> ActivityCompat.startActivity(context, intent, options.toBundle());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>值得注意的是：因为加载图片要一点时间，切换页面时就会出现闪烁的情况，而如果取的是缓存就不会有这样的问题，所以这里有个小技巧，就是起初Glide加载的图片就指定固定的大小（<code>.override(120,120)</code>），这样图片就会被缓存起来，等到跳转时就取缓存。具体还请大家看项目源码。</p>\n</blockquote>\n<h4 id=\"2、透明状态栏\"><a href=\"#2、透明状态栏\" class=\"headerlink\" title=\"2、透明状态栏\"></a>2、透明状态栏</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 为头部是View的界面设置状态栏透明</span></div><div class=\"line\">StatusBarUtil.setTranslucentImageHeader(<span class=\"keyword\">this</span>, <span class=\"number\">0</span>, binding.titleToolBar);</div></pre></td></tr></table></figure>\n<p>其中内容根布局不要设置<code>android:fitsSystemWindows=&quot;true&quot;</code>,这样会额外添加一个状态栏。其中<a href=\"https://github.com/youlookwhat/ScrollShapeUI/blob/master/app/src/main/java/com/example/jingbin/scrollshapeui/utils/StatusBarUtil.java\" target=\"_blank\" rel=\"external\">StatusBarUtil</a>，是一个为Android App 设置状态栏的工具类。这里向大家推荐郭霖大神的一篇文章：<a href=\"http://blog.csdn.net/guolin_blog/article/details/51763825\" target=\"_blank\" rel=\"external\">Android状态栏微技巧，带你真正理解沉浸式模式</a>，里面讲解了透明状态栏和沉浸式状态栏的渊源和有关设置用法。</p>\n<h4 id=\"3、Toolbar的背景图\"><a href=\"#3、Toolbar的背景图\" class=\"headerlink\" title=\"3、Toolbar的背景图\"></a>3、Toolbar的背景图</h4><p>仔细分析后发现网易云音乐的Toolbar的背景其实显示的是高斯模糊图的底部，所以这里基本套路是Toolbar是透明的，后面背景图取的是高斯模糊图的底部一部分。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-fb6286fe506cadcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640\" alt=\"\"></p>\n<h5 id=\"调整Toolbar背景图位置\"><a href=\"#调整Toolbar背景图位置\" class=\"headerlink\" title=\"调整Toolbar背景图位置\"></a>调整Toolbar背景图位置</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Toolbar的高度</span></div><div class=\"line\"><span class=\"keyword\">int</span> toolbarHeight = binding.titleToolBar.getLayoutParams().height;</div><div class=\"line\"><span class=\"comment\">// Toolbar+状态栏的高度　</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> headerBgHeight = toolbarHeight + StatusBarUtil.getStatusBarHeight(<span class=\"keyword\">this</span>);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">// 使背景图向上移动到图片的最底端，保留Toolbar+状态栏的高度</span></div><div class=\"line\">binding.ivTitleHeadBg.setVisibility(View.VISIBLE);</div><div class=\"line\">ViewGroup.LayoutParams params = binding.ivTitleHeadBg.getLayoutParams();</div><div class=\"line\">ViewGroup.MarginLayoutParams ivTitleHeadBgParams = (ViewGroup.MarginLayoutParams) binding.ivTitleHeadBg.getLayoutParams();</div><div class=\"line\"><span class=\"keyword\">int</span> marginTop = params.height - headerBgHeight;</div><div class=\"line\">ivTitleHeadBgParams.setMargins(<span class=\"number\">0</span>, -marginTop, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">binding.ivTitleHeadBg.setImageAlpha(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"显示Toolbar背景图\"><a href=\"#显示Toolbar背景图\" class=\"headerlink\" title=\"显示Toolbar背景图\"></a>显示Toolbar背景图</h5><p>监听图片显示，在显示之后将其设置为透明色，然后在滑动的时候渐变。这里值得注意的是在设置图片时不要设置加载中的图片，不然初始化时达不到透明的效果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 高斯模糊背景，加载后将背景设为透明</span></div><div class=\"line\"> Glide.with(<span class=\"keyword\">this</span>).load(NeteasePlaylistActivity.IMAGE_URL_MEDIUM)</div><div class=\"line\">         <span class=\"comment\">//.placeholder(R.drawable.stackblur_default)</span></div><div class=\"line\">         .error(R.drawable.stackblur_default)</div><div class=\"line\">         .bitmapTransform(<span class=\"keyword\">new</span> BlurTransformation(<span class=\"keyword\">this</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>))<span class=\"comment\">// 设置高斯模糊</span></div><div class=\"line\">         .listener(<span class=\"keyword\">new</span> RequestListener&lt;String, GlideDrawable&gt;() &#123;<span class=\"comment\">//监听加载状态</span></div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onException</span><span class=\"params\">(Exception e, String model, Target&lt;GlideDrawable&gt; target, <span class=\"keyword\">boolean</span> isFirstResource)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, <span class=\"keyword\">boolean</span> isFromMemoryCache, <span class=\"keyword\">boolean</span> isFirstResource)</span> </span>&#123;</div><div class=\"line\">         <span class=\"comment\">// Toolbar背景设为透明</span></div><div class=\"line\">         binding.titleToolBar.setBackgroundColor(Color.TRANSPARENT);</div><div class=\"line\">         <span class=\"comment\">// 背景图初始化为全透明</span></div><div class=\"line\">         binding.ivTitleHeadBg.setImageAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">         binding.ivTitleHeadBg.setVisibility(View.VISIBLE);</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;).into(binding.ivTitleHeadBg);</div></pre></td></tr></table></figure>\n<p>其中引入的库应为如下，将官方Glide的额外扩展了，使其可以支持高斯模糊。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'jp.wasabeef:glide-transformations:2.0.1'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4、上下滑动，渐变背景图透明度\"><a href=\"#4、上下滑动，渐变背景图透明度\" class=\"headerlink\" title=\"4、上下滑动，渐变背景图透明度\"></a>4、上下滑动，渐变背景图透明度</h4><p>由于<code>NestedScrollView</code>滚动监听只能在API23以上才能使用，这里为了兼容需要额外处理，定义滚动接口，具体：<a href=\"https://github.com/youlookwhat/ScrollShapeUI/blob/master/app/src/main/java/com/example/jingbin/scrollshapeui/view/MyNestedScrollView.java\" target=\"_blank\" rel=\"external\">MyNestedScrollView</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 根据页面滑动距离改变Header透明度方法</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollChangeHeader</span><span class=\"params\">(<span class=\"keyword\">int</span> scrolledY)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (scrolledY &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        scrolledY = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">float</span> alpha = Math.abs(scrolledY) * <span class=\"number\">1.0f</span> / (slidingDistance);</div><div class=\"line\">    Drawable drawable = binding.ivTitleHeadBg.getDrawable();</div><div class=\"line\">    <span class=\"keyword\">if</span> (drawable != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (scrolledY &lt;= slidingDistance) &#123;</div><div class=\"line\">            <span class=\"comment\">// title部分的渐变</span></div><div class=\"line\">            drawable.mutate().setAlpha((<span class=\"keyword\">int</span>) (alpha * <span class=\"number\">255</span>));</div><div class=\"line\">            binding.ivTitleHeadBg.setImageDrawable(drawable);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            drawable.mutate().setAlpha(<span class=\"number\">255</span>);</div><div class=\"line\">            binding.ivTitleHeadBg.setImageDrawable(drawable);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样基本的效果就实现啦，其中如有需要还可以做些额外的处理，如当背景图不透明时切换标题等~</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/37e94f8b6f59\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/37e94f8b6f59</a></li>\n<li><a href=\"https://github.com/pinguo-zhouwei/YunMusicUI\" target=\"_blank\" rel=\"external\">https://github.com/pinguo-zhouwei/YunMusicUI</a></li>\n<li><a href=\"http://blog.csdn.net/u011734444/article/details/51471182\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u011734444/article/details/51471182</a></li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本人思考并实践了很多实现这个页面的方法，目前为止这个方案是最好的，效果体验几乎是一样，其中涉及到的知识点有：1、页面跳转共享元素曲线动画；2、透明状态栏；3、Glide监听图片加载状态和加载固定大小图片等；4、NestedScrollView在Api23下的滑动兼容。如果有更好的方案还请联系我，本次项目的源代码：<a href=\"https://github.com/youlookwhat/ScrollShapeUI\" target=\"_blank\" rel=\"external\">https://github.com/youlookwhat/ScrollShapeUI</a>。</p>\n<blockquote>\n<p>欢迎关注我的<a href=\"http://www.jianshu.com/u/e43c6e979831\" target=\"_blank\" rel=\"external\">简书</a>和<a href=\"https://github.com/youlookwhat\" target=\"_blank\" rel=\"external\">Gayhub</a></p>\n</blockquote>\n","categories":["Android"],"tags":["Android","cloudreader"]},{"title":"更新日志-云阅","url":"http://jinbeen.com/2016/12/30/更新日志-云阅/","content":"<blockquote>\n<p><strong><em>最后更新：2019-05-21　23：19</em></strong></p>\n</blockquote>\n<h3 id=\"版本-2-9-0（2019-05-16）\"><a href=\"#版本-2-9-0（2019-05-16）\" class=\"headerlink\" title=\"版本 2.9.0（2019-05-16）\"></a>版本 2.9.0（2019-05-16）</h3><ul>\n<li>1、[新增] 时光网电影模块</li>\n<li>2、[修复] 隐藏豆瓣电影页面(api失效)</li>\n<li>3、[修复] 代码优化及修改部分bug</li>\n</ul>\n<h3 id=\"版本-2-8-5（2019-05-06）\"><a href=\"#版本-2-8-5（2019-05-06）\" class=\"headerlink\" title=\"版本 2.8.5（2019-05-06）\"></a>版本 2.8.5（2019-05-06）</h3><ul>\n<li>1、[新增] 问题反馈内加入QQ群</li>\n<li>2、[升级] glide升级到4.9.0</li>\n<li>3、[优化] ui部分优化</li>\n<li>4、[修复] 修复若干bug</li>\n</ul>\n<h3 id=\"版本-2-8-0（2019-03-21）\"><a href=\"#版本-2-8-0（2019-03-21）\" class=\"headerlink\" title=\"版本 2.8.0（2019-03-21）\"></a>版本 2.8.0（2019-03-21）</h3><ul>\n<li>1、[新增] 搜索页面</li>\n<li>2、[修复] 隐藏书籍分类页面(api失效)</li>\n<li>3、[修复] 修复收藏页面星星未选中的bug</li>\n</ul>\n<h3 id=\"版本-2-7-5（2019-03-13）\"><a href=\"#版本-2-7-5（2019-03-13）\" class=\"headerlink\" title=\"版本 2.7.5（2019-03-13）\"></a>版本 2.7.5（2019-03-13）</h3><ul>\n<li>1、[升级] 玩android接口升级为https</li>\n<li>2、[升级] RxJava2.x升级</li>\n<li>3、[优化] 设置不能修改字体</li>\n<li>4、[优化] 优化导航数据等页面</li>\n<li>5、[修复] 代码优化及修改部分bug</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"版本-2-7-0（2019-02-14）\"><a href=\"#版本-2-7-0（2019-02-14）\" class=\"headerlink\" title=\"版本 2.7.0（2019-02-14）\"></a>版本 2.7.0（2019-02-14）</h3><ul>\n<li>1、[新增] 知识体系详情页</li>\n<li>2、[优化] 项目主页优化</li>\n</ul>\n<h3 id=\"版本-2-6-0（2019-01-16）\"><a href=\"#版本-2-6-0（2019-01-16）\" class=\"headerlink\" title=\"版本 2.6.0（2019-01-16）\"></a>版本 2.6.0（2019-01-16）</h3><ul>\n<li>1、[新增] 豆瓣即将上映电影数据</li>\n<li>2、[优化] 启动白屏问题优化</li>\n<li>3、[优化] RecyclerView列表加载优化</li>\n<li>4、[修复] 修复无邮箱应用时点击跳转崩溃问题</li>\n</ul>\n<h3 id=\"版本-V2-5-0（12-28）\"><a href=\"#版本-V2-5-0（12-28）\" class=\"headerlink\" title=\"版本 V2.5.0（12-28）\"></a>版本 V2.5.0（12-28）</h3><ul>\n<li>1、[规范] 所有页面mvvm架构修正</li>\n<li>2、[优化] 将电影和书籍放置在一块</li>\n<li>3、[新增] 可<a href=\"https://www.jianshu.com/p/272bfb6c0779\" target=\"_blank\" rel=\"external\">为三方浏览器打开外部链接</a></li>\n<li>4、[修复] 修复部分兼容性bug</li>\n</ul>\n<h3 id=\"版本-V2-2（12-05）\"><a href=\"#版本-V2-2（12-05）\" class=\"headerlink\" title=\"版本 V2.2（12-05）\"></a>版本 V2.2（12-05）</h3><ul>\n<li>1、[新增] 进入首页可以获取剪切板的链接</li>\n<li>2、[规范] 玩安卓模块mvvm修正</li>\n<li>3、[优化] 导航数据界面显示优化</li>\n<li>4、[优化] 电影、书籍和玩安卓首页等item点击效果</li>\n<li>5、[修复] 保存图片权限问题、上拉加载逻辑问题</li>\n</ul>\n<h3 id=\"版本-V2-0（10-26）\"><a href=\"#版本-V2-0（10-26）\" class=\"headerlink\" title=\"版本 V2.0（10-26）\"></a>版本 V2.0（10-26）</h3><ul>\n<li>1、[新增] 知识体系页面</li>\n<li>2、[新增] 导航数据页面</li>\n<li>3、[新增] 收藏网址功能</li>\n<li>4、[更改] 固定图片链接替换</li>\n<li>5、[更改] 暂时将书籍/段子页面移入我的收藏里</li>\n<li>6、[修复] 段子头像显示不全修复</li>\n<li>7、[优化] 首页ui及部分图片显示比例优化</li>\n</ul>\n<h3 id=\"版本-V1-9-6（08-21）\"><a href=\"#版本-V1-9-6（08-21）\" class=\"headerlink\" title=\"版本 V1.9.6（08-21）\"></a>版本 V1.9.6（08-21）</h3><ul>\n<li>1、[优化] 界面优化</li>\n<li>2、[优化] 代码优化</li>\n</ul>\n<h3 id=\"版本-V1-9-4（05-21）\"><a href=\"#版本-V1-9-4（05-21）\" class=\"headerlink\" title=\"版本 V1.9.4（05-21）\"></a>版本 V1.9.4（05-21）</h3><ul>\n<li>1、[修复] 修复干货订制点击“选择分类”崩溃的bug</li>\n<li>2、[新增] 干货订制页面长按item增加<a href=\"https://jinbeen.com/2018/05/20/Android%20%E6%B0%B4%E6%B3%A2%E7%BA%B9%E6%95%88%E6%9E%9C%E7%9A%84%E6%8E%A2%E7%A9%B6/\">水波纹扩散效果</a></li>\n</ul>\n<h3 id=\"版本-V1-9-3（05-18）\"><a href=\"#版本-V1-9-3（05-18）\" class=\"headerlink\" title=\"版本 V1.9.3（05-18）\"></a>版本 V1.9.3（05-18）</h3><blockquote>\n<p>TODO：玩安卓 知识体系/导航</p>\n</blockquote>\n<ul>\n<li>1、[新增] 玩安卓模块增加登录与收藏文章的功能</li>\n<li>2、[新增] 增加Room的使用</li>\n<li>3、[修复] 修复7.0以上系统主页显示错乱的bug</li>\n<li>4、[完善] 性能优化之布局大幅优化</li>\n<li>5、[完善] 完善体验修复若干bug</li>\n</ul>\n<h3 id=\"版本-V1-9-2（05-06）\"><a href=\"#版本-V1-9-2（05-06）\" class=\"headerlink\" title=\"版本 V1.9.2（05-06）\"></a>版本 V1.9.2（05-06）</h3><blockquote>\n<p><del>TODO：玩安卓登录/收藏网页等功能；</del></p>\n</blockquote>\n<ul>\n<li>1、[完善] 主页显示结构修改</li>\n<li>2、[修复] 去掉内涵段子数据</li>\n<li>3、[修复] 解决“项目主页”页面两个布局的问题</li>\n<li>4、[完善] 布局优化及解决部分bug</li>\n</ul>\n<h3 id=\"版本-V1-9-1（02-27）\"><a href=\"#版本-V1-9-1（02-27）\" class=\"headerlink\" title=\"版本 V1.9.1（02-27）\"></a>版本 V1.9.1（02-27）</h3><blockquote>\n<p>TODO：玩安卓登录/收藏网页等功能；书籍页面订制</p>\n</blockquote>\n<ul>\n<li>1、[新增] 新增段子页面，长按条目可选择复制或分享</li>\n<li>2、提示：app里的build.gradle pToken报错请用<code>&quot;&quot;</code>替代pToken。</li>\n</ul>\n<h3 id=\"版本-V1-9-0（2018-02-08）\"><a href=\"#版本-V1-9-0（2018-02-08）\" class=\"headerlink\" title=\"版本 V1.9.0（2018-02-08）\"></a>版本 V1.9.0（2018-02-08）</h3><blockquote>\n<p>TODO：玩安卓登录/收藏网页等功能；段子页面等</p>\n</blockquote>\n<ul>\n<li>1、首页大幅调整，增加进入玩安卓页面和Trending页面的入口</li>\n<li>2、新增鸿洋玩安卓模块(部分功能)</li>\n<li>3、优化WebView网页显示，解决大部分问题,<a href=\"https://github.com/youlookwhat/WebViewStudy\" target=\"_blank\" rel=\"external\">详细</a></li>\n<li>4、尽可能规范MvvM框架，后期会慢慢调整</li>\n<li>5、使用fir.im更新接口，完善更新功能</li>\n</ul>\n<h3 id=\"版本-V1-8-3（11-14）\"><a href=\"#版本-V1-8-3（11-14）\" class=\"headerlink\" title=\"版本 V1.8.3（11-14）\"></a>版本 V1.8.3（11-14）</h3><ul>\n<li>1、[修复] 已选择分类退出App再次进入,type失效的问题</li>\n<li>2、[修复] 跳转B站视频显示网页错误的问题</li>\n</ul>\n<h3 id=\"版本-V1-8-2（3-30）\"><a href=\"#版本-V1-8-2（3-30）\" class=\"headerlink\" title=\"版本 V1.8.2（3-30）\"></a>版本 V1.8.2（3-30）</h3><ul>\n<li>1、[修复] 首页轮播图显示异常问题</li>\n<li>2、[修复] 干货订制页，刷新内容到底无内容后切换到其他类别，无法上拉加载的情况</li>\n</ul>\n<h3 id=\"版本-V1-8-1（3-7）\"><a href=\"#版本-V1-8-1（3-7）\" class=\"headerlink\" title=\"版本 V1.8.1（3-7）\"></a>版本 V1.8.1（3-7）</h3><ul>\n<li>1、[修复]修复首页有六个以上item时，图片显示不出的bug</li>\n</ul>\n<h3 id=\"版本-V1-8-0（3-3）\"><a href=\"#版本-V1-8-0（3-3）\" class=\"headerlink\" title=\"版本 V1.8.0（3-3）\"></a>版本 V1.8.0（3-3）</h3><ul>\n<li>1、[新增] 侧边栏增加“<strong>登录GitHub账号</strong>”和“<strong>退出应用</strong>”功能</li>\n<li>2、[新增] WebView新增“<strong>分享到</strong>”、“<strong>复制链接</strong>”、“<strong>打开链接</strong>”功能</li>\n<li>3、[新增] 使其系统更改字体无效</li>\n<li>4、[改进] 网络请求更换成<code>retrofit 2.x</code></li>\n<li>5、[改进] 首页轮播图更换显示链接</li>\n<li>6、[优化] 进入主界面动画优化</li>\n<li>7、[优化] 兼容至7.0、升级关联库和代码优化等</li>\n</ul>\n<blockquote>\n<p><strong><em>由于换肤模块内存泄漏严重，已移除。以下不用看！</em></strong><br>包里面包含换肤相关文件。如要删除其文件可按下面步骤逐一删除。</p>\n</blockquote>\n<h4 id=\"换肤相关\"><a href=\"#换肤相关\" class=\"headerlink\" title=\"换肤相关\"></a>换肤相关</h4><p>换肤由于关联的资源较多，正在完善中，但不影响正常的使用。<br>如需查看换肤调试详情，可去菜单栏布局景“夜间模式”部分显示出来。<br>植入夜间模式步骤与注意事项：<br>步骤：<br>1.关联：<br>　　compile ‘skin.support:skin-support:1.0.1’<br>　　compile ‘skin.support:skin-support-design:0.0.2’<br>　　<br>2.“CloudReaderApplication.java”<br>// 皮肤<br>SkinMaterialManager.init(this);<br>SkinCompatManager.init(this).loadSkin();</p>\n<p>3.BaseActivity和MainActivity继承“SkinCompatActivity.java”</p>\n<p>4.新建”assets”，里面再建文件夹:”skins”，里面放置“night.skin”<br>“night.skin”：是一个单独的app，只是改了后缀名，里面只存放<strong><em>要替换的资源文件。</em></strong></p>\n<p>5.加入开关和相关逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getNightMode</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SPUtils.getNightMode();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNightModeClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!SPUtils.getNightMode()) &#123;</div><div class=\"line\">            SkinCompatManager.getInstance().loadSkin(Constants.NIGHT_SKIN);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 恢复应用默认皮肤</span></div><div class=\"line\">            SkinCompatManager.getInstance().restoreDefaultTheme();</div><div class=\"line\">        &#125;</div><div class=\"line\">        SPUtils.setNightMode(!SPUtils.getNightMode());</div><div class=\"line\">        bind.dayNightSwitch.setChecked(SPUtils.getNightMode());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>6.由于不支持状态栏切换，所以需要手动加状态块，布局文件里已加入，但隐藏了，因为这样长按搜索图标提示会在下面不美观。暂时不实现此功能。</p>\n<p>7.暂不支持TabLayout:tabBackground属性<br>所以此部分的点击效果使用的是系统的，但觉得可以优化，没有这样做，还是想使用自己的选择器。</p>\n<h4 id=\"待更新内容（部分）\"><a href=\"#待更新内容（部分）\" class=\"headerlink\" title=\"待更新内容（部分）\"></a>待更新内容（部分）</h4><ul>\n<li>1、完善换肤功能</li>\n<li>2、更换轮播图显示控件</li>\n<li>3、新增段子和文章内容</li>\n</ul>\n<hr>\n<h3 id=\"版本-V1-5-0（1-29）\"><a href=\"#版本-V1-5-0（1-29）\" class=\"headerlink\" title=\"版本 V1.5.0（1-29）\"></a>版本 V1.5.0（1-29）</h3><ul>\n<li>1、<strong>App体积大小从16M降到5.8M！</strong></li>\n<li>2、将App里固定的图片以移动到七牛。</li>\n<li>3、更改项目主页透明状态栏显示方式。</li>\n<li>4、更改每日推荐图片显示规则，使其不重复显示。</li>\n<li>5、更换过渡图图片。</li>\n<li>6、代码优化；删除多余资源。</li>\n</ul>\n<hr>\n<h3 id=\"版本-V1-2-0（1-18）\"><a href=\"#版本-V1-2-0（1-18）\" class=\"headerlink\" title=\"版本 V1.2.0（1-18）\"></a>版本 V1.2.0（1-18）</h3><ul>\n<li>1、更改每日推荐逻辑，使其一定有数据</li>\n<li>2、干货集中营的item改为CardView展示</li>\n<li>3、代码优化</li>\n</ul>\n<hr>\n<h3 id=\"版本-V1-1-0（1-15）\"><a href=\"#版本-V1-1-0（1-15）\" class=\"headerlink\" title=\"版本 V1.1.0（1-15）\"></a>版本 V1.1.0（1-15）</h3><ul>\n<li>1.书籍详情页面增加自定义元素共享切换动画，并可简单添加需要支持的详情页</li>\n<li>2.代码优化</li>\n<li>3.其他</li>\n</ul>\n<hr>\n<h3 id=\"版本-V1-0-0（2017-1-1）\"><a href=\"#版本-V1-0-0（2017-1-1）\" class=\"headerlink\" title=\"版本 V1.0.0（2017-1-1）\"></a>版本 V1.0.0（2017-1-1）</h3><blockquote>\n<p>此版的具体说明请见项目主页：<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">点击这里</a>。</p>\n</blockquote>\n<h4 id=\"干货区（gank-io）\"><a href=\"#干货区（gank-io）\" class=\"headerlink\" title=\"干货区（gank.io）\"></a>干货区（gank.io）</h4><ul>\n<li>每日推荐</li>\n<li>福利</li>\n<li>干货订制</li>\n<li>大安卓</li>\n</ul>\n<h4 id=\"电影区（豆瓣）\"><a href=\"#电影区（豆瓣）\" class=\"headerlink\" title=\"电影区（豆瓣）\"></a>电影区（豆瓣）</h4><ul>\n<li>电影热映区 &amp; 豆瓣电影Top250</li>\n</ul>\n<h4 id=\"书籍区（豆瓣）\"><a href=\"#书籍区（豆瓣）\" class=\"headerlink\" title=\"书籍区（豆瓣）\"></a>书籍区（豆瓣）</h4><ul>\n<li>综合</li>\n<li>文学</li>\n<li>生活</li>\n</ul>\n<h4 id=\"抽屉界面\"><a href=\"#抽屉界面\" class=\"headerlink\" title=\"抽屉界面\"></a>抽屉界面</h4><ul>\n<li>项目主页</li>\n<li>扫码下载</li>\n<li>问题反馈</li>\n<li>关于云阅</li>\n</ul>\n<hr>\n<h3 id=\"待完善\"><a href=\"#待完善\" class=\"headerlink\" title=\"待完善\"></a>待完善</h3><blockquote>\n<p>不一定更新，依重要性而定。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-fb01487f2b010800.gif?imageMogr2/auto-orient/strip\" alt=\"乱世佳人.gif\"></p>\n<ul>\n<li><del>每日推荐可输入日期来显示当日内容</del></li>\n<li><del>保存图片按钮UI优化</del></li>\n<li><del>toolbar标题栏文字滚动显示</del></li>\n<li><del>增加干货、电影、书籍搜索功能。</del></li>\n<li><del>书籍部分增加多个类别供更多数据选择，样式参考网易云音乐歌单筛选页</del></li>\n<li><del>书籍部分adapter优化</del></li>\n<li><del>每日推荐使用固定图是否太追求UI效果，改为一般的item阅读效果更佳？</del></li>\n</ul>\n<blockquote>\n<p>感谢您的关注~</p>\n</blockquote>\n","categories":["开源项目"],"tags":["cloudreader","开源项目"]},{"title":"常见问题-云阅","url":"http://jinbeen.com/2016/12/25/常见问题-云阅/","content":"<p>大家好，为了帮助大家更加愉快的使用<a href=\"https://github.com/youlookwhat/CloudReader\" target=\"_blank\" rel=\"external\">云阅开源项目</a>，现将大家可能遇到的问题及产生原因列举在这里，希望能帮到大家。</p>\n <a id=\"more\"></a>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-f689de2ba9720db9.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<hr>\n<h3 id=\"1-为什么我安装不上App？\"><a href=\"#1-为什么我安装不上App？\" class=\"headerlink\" title=\"1.为什么我安装不上App？\"></a>1.为什么我安装不上App？</h3><p>本APP只支持Android 4.4及以上系统版本，低于这之下的版本是安装不上的哦。</p>\n<h3 id=\"2-为了网页一直显示“加载中…”？\"><a href=\"#2-为了网页一直显示“加载中…”？\" class=\"headerlink\" title=\"2.为了网页一直显示“加载中…”？\"></a>2.为了网页一直显示“加载中…”？</h3><p>在App中打开的网页皆是外链，由于网速慢，或限时访问等问题有可能会导致访问失败，这时不妨试试其他网页或等一段时间再访问。</p>\n<h3 id=\"3-首页没有内容展示？\"><a href=\"#3-首页没有内容展示？\" class=\"headerlink\" title=\"3.首页没有内容展示？\"></a>3.首页没有内容展示？</h3><p>由于使用的代码家gank.io提供的api，双休时是不更新的，如果双休有数据取得则是之前的缓存。</p>\n<h3 id=\"4-书籍或电影详情页一直访问失败？\"><a href=\"#4-书籍或电影详情页一直访问失败？\" class=\"headerlink\" title=\"4.书籍或电影详情页一直访问失败？\"></a>4.书籍或电影详情页一直访问失败？</h3><p>因为豆瓣api限制普通用于，每个ip每分钟请求次数是40次，超过ip会被暂时停用，一般为半小时左右，建议换到其他网络，或过一段时间再次访问。</p>\n<h3 id=\"5-点击更多进入详情页后返回要快速返回两次才有效。\"><a href=\"#5-点击更多进入详情页后返回要快速返回两次才有效。\" class=\"headerlink\" title=\"5.点击更多进入详情页后返回要快速返回两次才有效。\"></a>5.点击更多进入详情页后返回要快速返回两次才有效。</h3><p>因为详情页是豆瓣提供的网页链接，我们这边无法处理，其他页面可能是正常的，谢谢。</p>\n<h3 id=\"6-部分页面卡顿\"><a href=\"#6-部分页面卡顿\" class=\"headerlink\" title=\"6.部分页面卡顿\"></a>6.部分页面卡顿</h3><p>由于作者是花费额外时间来开发此项目，所以有些地方没有优化完善，请多包容谅解。<br>此项目已经经历了2年多的时间，诸多功能、代码规范和性能已基本完善，如对你有帮助，还请Star一下，谢谢！</p>\n<!-- \n### 1.为什么我安装不上App？\n本APP只支持Android 4.4及以上系统版本，低于这之下的版本是安装不上的哦。\n\n### 2.搜索，调整栏目等其他按钮点击没效果？\n由于项目需要做的功能点比较多，为了每个功能点做的精细，所以耗时较长，导致没有完善每个功能。后期将逐步的完善其中的功能，完善后会及时更新。\n\n### 3.为了网页一直显示“加载中...”？\n在App中打开的网页皆是外链，由于网速慢，或限时访问等问题有可能会导致访问失败，这时不妨试试其他网页或等一段时间再访问。\n\n\n### 4.问题反馈中点击QQ跳转错误。\n点击QQ直接跳转的是QQ会话页面，没有加好友可能导致此问题出现，可以加我的qq:770413277,然后再向我反馈即可。\n\n\n### 5.首页没有内容展示？\n由于使用的代码家gank.io提供的api，双休时是不更新的，如果双休有数据取得则是之前的缓存。\n\n### 6.上下迅速滑动后轮播图会跳动。\n这是暂时的一个问题所在，因为没有产生比较大的问题，所以被延后处理，后期将修复。\n\n### 7.书籍或电影详情页一直访问失败？\n因为豆瓣api限制普通用于，每个ip每分钟请求次数是40次，超过ip会被暂时停用，一般为半小时左右，建议换到其他网络，或过一段时间再次访问。\n\n### 8.点击更多进入详情页后返回要快速返回两次才有效。\n因为详情页是豆瓣提供的网页链接，我们这边无法处理，其他页面可能是正常的，谢谢。\n\n### 9.有比较多的书籍详情的部分内容缺失。\n因为是展示的豆瓣提供的书籍页面，一切的数据内容都是豆瓣提供，如出现此类情况不能满足您的需要，请采用其他搜索引擎搜索，给您带来的不变深感抱歉。\n\n-->\n","categories":["开源项目"],"tags":["cloudreader","开源项目"]},{"title":"漫威电影宇宙","url":"http://jinbeen.com/2016/12/04/漫威宇宙/","content":"<p><img src=\"http://img.blog.csdn.net/20161204183656050\" alt=\"漫威人物\"></p>\n<a id=\"more\"></a>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-00f5756578bf3609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"漫威1\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-b81905fe1bd56424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"漫威2\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-dc9e3e6daf42bd63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"漫威3\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-0e63b234ca368f8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"漫威4\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-b32edaf7034f0c60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"漫威5\"></p>\n<h1 id=\"漫威电影宇宙\"><a href=\"#漫威电影宇宙\" class=\"headerlink\" title=\"漫威电影宇宙\"></a><a href=\"http://baike.baidu.com/link?url=0BLdaJHhuSUf8hljv9fmZX4Q7bEjneoYarz-7ijbZLocLqD0wwr2QoMFcJFQLrZwHRWPXzhRRFMh_haOWpmpuFLwHcj3bPrNZwQZFUCxV6OsvU9AfZKkrEaPYQY4lj3EJep0CGX-QH2h-GwDiWn3Wa#1\" target=\"_blank\" rel=\"external\">漫威电影宇宙</a></h1><p>漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU），是由漫威影业（Marvel Studios）基于漫威漫画出版物中的角色独立制作的一系列电影所构成的共同的架空世界。它像漫画中的漫威主宇宙一样，是由共同的元素、设定、表演和角色通过跨界作品所建立的。</p>\n<p>漫威电影宇宙独立于漫威宇宙（Earth-616）和终极宇宙（Earth-1610），编号为Earth-199999。</p>\n<h2 id=\"平行宇宙\"><a href=\"#平行宇宙\" class=\"headerlink\" title=\"平行宇宙\"></a>平行宇宙</h2><p>   漫威平行宇宙，例如616，199999这些，都是漫威宏大宇宙观里不同平行世界的地球编号。也许你们已经知道，钢铁侠，雷神，美国队长，这些我们所熟悉的伟大漫画英雄共同战斗在同一个世界中，相互往来，互相穿插，这，也是美漫的魅力之一。而简单来说，相对于我们真正生活的这个世界而言，漫画人物所身处的世界就是一个平行宇宙。他们的纽约，也有克莱斯勒大厦高高耸立，但与我们不同的是，那里，是黑帮老大，金并的资产;他们的地球，也曾遭受过两次世界大战的创伤，但与我们不同的是，众多的超级英雄们投身进入与纳粹的战斗。</p>\n<h2 id=\"地球199999\"><a href=\"#地球199999\" class=\"headerlink\" title=\"地球199999\"></a>地球199999</h2><p>MCU是漫威的复仇者联盟电影系列作品所在时空的简称，即Marvel Cinematic Universe，宇宙编号为Earth-199999。MCU 这个世界年龄很小，诞生至今，最多不过十年，但却用七年的成长书写了属于它的宇宙，千年的背景，未来的每周，它都会继续着讲述自己的故事，直到英雄落幕。</p>\n<h2 id=\"推荐观看顺序\"><a href=\"#推荐观看顺序\" class=\"headerlink\" title=\"推荐观看顺序\"></a>推荐观看顺序</h2><p>时间轴仅为时间发展顺序，仅作参考：《美国队长》→《探员卡特》→《特工卡特》→《钢铁侠》→《钢铁侠2》=&gt;《无敌浩克》→《神盾顾问》→《寻找雷神锤子路上发生的趣事》→《雷神》→《复仇者联盟》→《47号物品》→《钢铁侠3》→《王者万岁》→《神盾局特工》1-7集→《雷神2：黑暗世界》→《神盾局特工》8-16集→《美国队长2》→《神盾局特工》17-22集→《银河护卫队》→《神盾局特工第二季》1-19集→《复仇者联盟2：奥创纪元》→《神盾局特工第二季》20-22集<br>（剧透部分已删，时间轴将《钢铁侠2》调整至《无敌浩克》之前，二者基本同时发生，从片尾来看《钢铁侠2》略早一点。将《顾问》调整至《无敌浩克》之后。）</p>\n<blockquote>\n<p>拷贝了很多百度百科的描述之后，开始正式记录了.. </p>\n</blockquote>\n<h1 id=\"漫威漫画电影\"><a href=\"#漫威漫画电影\" class=\"headerlink\" title=\"漫威漫画电影\"></a>漫威漫画电影</h1><p><img src=\"http://img.blog.csdn.net/20161204185854111\" alt=\"漫威漫画电影\"></p>\n<h2 id=\"复仇者\"><a href=\"#复仇者\" class=\"headerlink\" title=\"复仇者\"></a>复仇者</h2><h3 id=\"复仇者联盟（2012年）\"><a href=\"#复仇者联盟（2012年）\" class=\"headerlink\" title=\"复仇者联盟（2012年）\"></a><a href=\"http://baike.baidu.com/item/%E5%A4%8D%E4%BB%87%E8%80%85%E8%81%94%E7%9B%9F/17609141\" target=\"_blank\" rel=\"external\">复仇者联盟（2012年）</a></h3><ul>\n<li>基于 宇宙魔方的战斗。宇宙魔方，拥有无穷的能量，是钢铁人把美国队长找回来时在海洋里带回来的，神盾局意在研究它制造武器。结果来自外星球（神域）的人（雷神的星球，他是雷神的弟弟）的抢夺。神盾局应付不来，于是请来了 美国队长，钢铁人，绿巨人，绿箭侠，黑寡妇，雷神众多的英雄一起对付，虽然刚开始有摩擦，到最后终究是齐心协力战胜了。最后，是钢铁侠推着原子弹进入了外星球把原子弹扔过去了，和他女朋友商量怎样重建他的工业大厦。</li>\n</ul>\n<h3 id=\"复仇者联盟2：奥创纪元\"><a href=\"#复仇者联盟2：奥创纪元\" class=\"headerlink\" title=\"复仇者联盟2：奥创纪元\"></a><a href=\"http://baike.baidu.com/view/14403977.htm\" target=\"_blank\" rel=\"external\">复仇者联盟2：奥创纪元</a></h3><ul>\n<li>出现了双胞胎超能力的俩人（是美国队长2最后预示的），最初复仇者联盟成立之后一直在铲除九头蛇的人。遇到一个组织正在做奥创相关事情，这里面有一直存在里面的双胞胎姐弟。搞笑的一段是雷神在美国队长的盾牌上捶了一下把坦克给炸了。雷神的锤子没有人能拿得起，除了被钢铁侠创造出来的 幻，也是靠这个让大家服了，有一颗宝石在幻的头上，共有五颗宝石。他们去那组织带回来了奥创 ，即将完成的，然后放在斯塔克的大厦里，准备拿来创造新的纪元。然后被那个坏的把钢铁侠的人工智能机器人弄碎封闭了起来。最后双胞胎知道坏的那个想要毁灭地球，就背叛了他，弟弟为救“绿箭侠”牺牲了，姐姐使用魔法停住了火车，帮了很多。最后的奥创是被幻把电路的同化了。。剩下最后一个机器人，在谈话后也解决了。雷神和钢铁侠把在天空中的城市毁灭，才拯救了地球。</li>\n</ul>\n<h3 id=\"复仇者联盟3：无限之战I-2018年\"><a href=\"#复仇者联盟3：无限之战I-2018年\" class=\"headerlink\" title=\"复仇者联盟3：无限之战I(2018年)\"></a><a href=\"http://baike.baidu.com/view/15211374.htm\" target=\"_blank\" rel=\"external\"><font color=\"red\">复仇者联盟3：无限之战I(2018年)</font></a></h3><ul>\n<li>复仇者联盟3：无限战争》是复仇者联盟系列电影的第三部，是漫威电影宇宙的第十九部电影，本片将与《银河护卫队2》剧情连接[1]  ，本片将会集齐所有漫威电影宇宙的超级英雄进行对抗灭霸，上演一场史无前例的拯救宇宙大战。<br>漫威电影有史以来最强反派：灭霸登场。</li>\n</ul>\n<h3 id=\"复仇者联盟3：无限之战II-2019年\"><a href=\"#复仇者联盟3：无限之战II-2019年\" class=\"headerlink\" title=\"复仇者联盟3：无限之战II(2019年)\"></a><a href=\"http://baike.baidu.com/view/15210240.htm\" target=\"_blank\" rel=\"external\"><font color=\"red\">复仇者联盟3：无限之战II(2019年)</font></a></h3><ul>\n<li>《复仇者联盟3：无限战争（下）》（Avengers: Infinity War - Part II）是漫威影业出品的一部科幻动作电影，取材自漫威漫画，是漫威电影宇宙的第二十二部电影、同时也是《复仇者联盟》系列电影第三部的下集。由安东尼·罗素、乔·罗素兄弟执导，定于2019年5月3日美国上映。</li>\n</ul>\n<h2 id=\"银河护卫队\"><a href=\"#银河护卫队\" class=\"headerlink\" title=\"银河护卫队\"></a>银河护卫队</h2><h3 id=\"银河护卫队-2014年\"><a href=\"#银河护卫队-2014年\" class=\"headerlink\" title=\"银河护卫队(2014年)\"></a><a href=\"http://baike.baidu.com/link?url=LB4_cE9RUes8_OUh-w-yrONgxCOxBKq_CttSAziOItnmu_7UooW6CfuvNo3nLt0zdqWjeqwwp5jOR7UGe51GlAsFEI2w_WwNfIbJQkvfjMyRVNcb42Ls0njF1fwB9mVM3bM5zpZFnMUpECZ9L61PO_\" target=\"_blank\" rel=\"external\">银河护卫队(2014年)</a></h3><ul>\n<li>自以为是的冒险家“星爵”彼得·奎尔在偷走一块神秘球体后成为赏金猎人的头号目标，原来<br>邪恶反派罗南对此物体垂涎已久。为了逃脱无休止的追杀，奎尔被迫和四个格格不入的乌合之众结成同盟——手持机枪的火箭浣熊、树人格鲁特、凶残神秘的加美拉，以及复仇心切的毁灭者德拉克斯。然而当奎尔发现这颗球体蕴含的真正能量，以及它能给宇宙带来的巨大威胁时，他必须团结这群不入流的队友，破釜沉舟、决一死战，才有可能解救整个银河系。</li>\n</ul>\n<h3 id=\"银河护卫队：第二章-2017年\"><a href=\"#银河护卫队：第二章-2017年\" class=\"headerlink\" title=\"银河护卫队：第二章(2017年)\"></a><a href=\"http://baike.baidu.com/item/%E9%93%B6%E6%B2%B3%E6%8A%A4%E5%8D%AB%E9%98%9F2\" target=\"_blank\" rel=\"external\">银河护卫队：第二章(2017年)</a></h3><ul>\n<li>在《银河护卫队》中，星爵的父亲惊鸿一瞥，被称为“古老的外星人”而被人所惦记。而《银河护卫队2》或许会从这位神秘的人物身上开始自己故事的讲述。影片的导演詹姆斯·古恩表示，这部电影将继续把故事主线放在星爵一家的关系之上，这次，将讲述的是星爵的父亲。他说：“这会是一个关于父亲们（fathers）的故事，所以我很期待故事的进展和最终的成品。”另外，由于银河护卫队系列联系到漫威宇宙，《银河护卫队2》中可能会出现未曾出现的最后一颗无限宝石。</li>\n</ul>\n<h2 id=\"异人族（延期）\"><a href=\"#异人族（延期）\" class=\"headerlink\" title=\"异人族（延期）\"></a><a href=\"http://baike.baidu.com/view/15210240.htm\" target=\"_blank\" rel=\"external\"><font color=\"red\">异人族（延期）</font></a></h2><ul>\n<li>地球时间数百万年前，宇宙两大种族Kree人和Skrull人发生了战争，为战略需要，Kree人来到太阳系，在天王星上设立了工作站。不久他们对当时地球生命的遗传潜能发生了兴趣，于是他们在当时的智人身上进行了一系列试验。这类试验的显然有双重意义，一是为了研究并防止自身进化中可能出现的停滞现象，同时为当时的战场制造一种强大的变种士兵。然而，当他们成功地创造出一群拥有非凡能力的人形物种时，不知什么原因，Kree人遗弃了他们的试验产物。</li>\n</ul>\n<ul>\n<li>这个种群——异人族（Inhumans），在之后的日子里开始自我发展，他们发展出了自己的社会制度；与世隔离的生活使得他们拥有超越人类的先进技术。通过Terrigen雾，他们得到了各式各样的超能力，但同时也造成了基因的损坏与畸形。这导致一个长期的选育计划的实施，目的是为了减轻这些变异。他们的城市Attilan经常迁移，截至2005年的故事，Attilan已搬迁到了月球上的Blue Area。</li>\n</ul>\n<h2 id=\"浩克\"><a href=\"#浩克\" class=\"headerlink\" title=\"浩克\"></a>浩克</h2><h3 id=\"环球影业-绿巨人（2003年）\"><a href=\"#环球影业-绿巨人（2003年）\" class=\"headerlink\" title=\"环球影业 绿巨人（2003年）\"></a>环球影业 <a href=\"http://baike.baidu.com/link?url=873gAdzCIJoCrpfc9FRt2tzHpqQpy-5jZxEGtG3IQInoQT9PoVxd9ZONAOWWyaxTwJIwCCG6EhSqancP11SqbvqM5tiBsI5lq1Hfd6VqSGMFWApH3B8hkb9gkZVtjbH-\" target=\"_blank\" rel=\"external\">绿巨人（2003年）</a></h3><ul>\n<li>本名罗伯特·布鲁斯·班纳（Robert Bruce Banner），是一位天才核子物理学博士，在一次意外中为了保护同事而被自己制造出的伽玛炸弹（Gamma Bomb）放射线大量辐射，身体产生异变，后每当他情绪激动心跳加速的时候就会变成名为浩克的绿色怪物。由于变身后往往不受控制、所以为了不伤害自己周围的人、班纳游走于世界各地寻找控制愤怒的方法、即便如此班纳的浩克身份还是时常会造成毁灭性的破坏、因此常成为警方与有关单位追捕的对象。</li>\n</ul>\n<h3 id=\"漫威电影宇宙-无敌浩克（2008年）\"><a href=\"#漫威电影宇宙-无敌浩克（2008年）\" class=\"headerlink\" title=\"漫威电影宇宙 无敌浩克（2008年）\"></a>漫威电影宇宙 <a href=\"http://baike.baidu.com/link?url=L0MGkIldJsCyebfb8XKI46IqQdm5md77kt79CxULfosDXVJHkEeSqkwxKfk3Ca5qtuS0rW4kAe2vURCykEKToH6hyyublwySfxNV1P0I-toBd22BkSVqx6M4a-H5rb23\" target=\"_blank\" rel=\"external\">无敌浩克（2008年）</a></h3><ul>\n<li><p>故事讲述科学家布鲁斯·班纳（爱德华·诺顿饰）继续绝望地寻找能治愈他那被γ辐射毒害的体内细胞之疗法，以及解除那蕴藏体内、不受约束的另一个自己──绿巨人。</p>\n</li>\n<li><p>活在孤独及没有爱人的阴霾之下，布斯在治疗过程中还需过五关斩六将，一方面需逃避不断找寻他、扰人的复仇者霹雳将军罗斯（威廉·赫特饰）；另一方面要逃离一直欲捉拿他、利用他的异能之残暴军方。当布鲁斯在治疗上有了重大突破，变回常人的日子近在眼前之际，另一股同样拥有恐怖摧毁程度的力量突然出现。布斯眼看一切努力与心血快要毁于一旦，决定作出一次前所未有的反击。</p>\n</li>\n</ul>\n<h2 id=\"钢铁侠\"><a href=\"#钢铁侠\" class=\"headerlink\" title=\"钢铁侠\"></a>钢铁侠</h2><h3 id=\"钢铁侠（2008年）\"><a href=\"#钢铁侠（2008年）\" class=\"headerlink\" title=\"钢铁侠（2008年）\"></a><a href=\"http://baike.baidu.com/link?url=VNxKkJ3oTb3PlqUiaJrqiPD57BL1fBCiVYIU-b6ZjkEse0PYoish9Phym0uFMAuykbub6anV1LAT8U9CCPQVc-Ho-j8vZ7XbKTxKYi0AfQ_\" target=\"_blank\" rel=\"external\">钢铁侠（2008年）</a></h3><ul>\n<li>被绑架时，被迫制造了第一个钢铁人，绑架的他是他的公司合伙人，然后挖走了他的供能芯片，最后基地爆炸把合伙人终结（女主引爆）。</li>\n</ul>\n<h3 id=\"钢铁侠2（2010年）\"><a href=\"#钢铁侠2（2010年）\" class=\"headerlink\" title=\"钢铁侠2（2010年）\"></a><a href=\"http://baike.baidu.com/item/%E9%92%A2%E9%93%81%E4%BE%A02\" target=\"_blank\" rel=\"external\">钢铁侠2（2010年）</a></h3><ul>\n<li>又一天才物理学家，因四十年前对他父亲造成惨败，怀恨在心，制造出一个仿冒的供能芯片，在赛车场和他决斗，被抓住后，被一位参议院解救，并利用他的资源，做了很多钢铁人（并会自爆）。最后和少尉的钢铁侠冲击波对冲炸掉了那个自制的仿冒钢铁侠。并在危急时刻解救了女主，抱到了阳台上，正式确定关系。</li>\n</ul>\n<h3 id=\"钢铁侠3（2013年）\"><a href=\"#钢铁侠3（2013年）\" class=\"headerlink\" title=\"钢铁侠3（2013年）\"></a><a href=\"http://baike.baidu.com/item/%E9%92%A2%E9%93%81%E4%BE%A03\" target=\"_blank\" rel=\"external\">钢铁侠3（2013年）</a></h3><ul>\n<li>因自己的自大，伤害了一位做人脑DNA研究的人（AIM），让他在阳台等了一晚上。后来变成恶人，和副总统合作，意在杀死总统。对方能是自己的NDA重组，不怕伤害，自动修复，身体能达到3000℃的高温，爆炸找不到弹片且威力巨大。将药打入女主的身体里，最后使得女主变体。干掉了攻击她的钢铁人，和那个恶人。最后，女主被治好，钢铁侠也取出了身体里一直存在的弹片（第一部被自己的炸弹爆炸植入）。</li>\n</ul>\n<h2 id=\"雷神\"><a href=\"#雷神\" class=\"headerlink\" title=\"雷神\"></a>雷神</h2><h3 id=\"雷神（2011年）\"><a href=\"#雷神（2011年）\" class=\"headerlink\" title=\"雷神（2011年）\"></a><a href=\"http://baike.baidu.com/link?url=FEn9jUM_35YKVLqTQziOBl_dh0LMp52EjDYhoMYZhIcQKyUdOcWtXowRmsgKJfx_i_Le5kMsVV6NiWOvkoof4t0VHIqEizMGHGG3qR7fdSa\" target=\"_blank\" rel=\"external\">雷神（2011年）</a></h3><ul>\n<li>《雷神》的故事发生在现今的地球以及艾斯卡的奇幻世界。故事的中心人物是拥有强大神力的雷神托尔（Thor），但是他自大鲁莽的行为掀起了一场古老的战争，他也因此被贬入凡间作为惩罚，被迫与人类一同生活。托尔必须学会如何成为一个真正的英雄，才能对抗来自神界的强大黑暗势力。《雷神》一片探讨一个人的传奇冒险，他从一个傲慢自大的神界王位继承人被贬入凡间，他必须成为一名超级英雄才能登上王位。</li>\n</ul>\n<h3 id=\"雷神2：黑暗世界（2013年）\"><a href=\"#雷神2：黑暗世界（2013年）\" class=\"headerlink\" title=\"雷神2：黑暗世界（2013年）\"></a><a href=\"http://baike.baidu.com/link?url=Hy3_rOlSP4NMWIRE04cBEMxG1trLM5bDiHX_DvoDmjiH47yNGmUr41fHIYkOK2ET7aFHxK54UM2YRVtVrmGyO9JQrTaJwPwXoXfTgu7lLFDX5cQxi9x9X8tZiNrBsfleXNWH7yU3lbQpzviOe0lLNC0EL4HHoBGyHrA85r8uUtrgF7mWxgppamgWbyriMwoW-3Sc5TlVhANKC-nabBqtkt-aMmpN4BIU99lvVnrVUO_\" target=\"_blank\" rel=\"external\">雷神2：黑暗世界（2013年）</a></h3><ul>\n<li>剧情承接《复仇者联盟》，讲诉了在纽约大战结束一年后，押送着弟弟洛基（<br>汤姆·希德勒斯顿 Tom Hiddleston 饰）回到神域接受审判的雷神托尔（克里斯·海姆斯沃斯 Chris Hemsworth 饰）将面对一股远古黑暗势力的挑战——复仇心切的黑暗精灵首领马勒凯斯（克里斯托弗·埃克莱斯顿 Christopher Eccleston 饰）率领神秘而强大的种族卷土重来，了解他们的人只有一个——洛基。托尔不得不向洛基寻求帮助，并与之结盟，踏上有生以来最危险的征程——这次旅途固然会令他与地球恋人简·福斯特（娜塔丽·波特曼 Natalie Portman 饰）久别重逢，但也将迫使他牺牲一切，唯此才能拯救整个宇宙。</li>\n</ul>\n<h3 id=\"雷神3：诸神黄昏（2017年）\"><a href=\"#雷神3：诸神黄昏（2017年）\" class=\"headerlink\" title=\"雷神3：诸神黄昏（2017年）\"></a><a href=\"http://baike.baidu.com/link?url=OSBBeT9iUH2VZSMhXLwF2Eg2LfVWRImWUQSBolZ4a2PDgQhBEuqN7J0iko187b7FxjpGsmet4wXmXNal_hZIAOlYF8sSrtpbddXMpfwBH5CjFtP_m_Dkg2sqstQIwz_GWZrohq0DkS8CikkAkhwxKAngyY-oOF-M1bd7iqe9efKQfp0YFsyN6aG-Ybv9rpQMBFzY2WFEvXCcg8Mu4MFuLwDQ-BW_cFjmcSPwL4fj_6G\" target=\"_blank\" rel=\"external\"><font color=\"red\">雷神3：诸神黄昏（2017年）</font></a></h3><ul>\n<li>漫威旗下的超级英雄电影系列已经成为了迪士尼的摇钱树，目前，《雷神》系列第3部已经正在前期准备中。漫威日前宣布了担任这部续作的编剧人选：克里斯托弗·约斯特（《雷神2：黑暗世界》的编剧）与克雷格·凯尔。后者其实是漫威影业制片部的高级副总裁。</li>\n</ul>\n<h2 id=\"美国队长\"><a href=\"#美国队长\" class=\"headerlink\" title=\"美国队长\"></a>美国队长</h2><h3 id=\"1990年系列\"><a href=\"#1990年系列\" class=\"headerlink\" title=\"1990年系列\"></a>1990年系列</h3><h4 id=\"美国队长（1990年）\"><a href=\"#美国队长（1990年）\" class=\"headerlink\" title=\"美国队长（1990年）\"></a><a href=\"http://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF/3472\" target=\"_blank\" rel=\"external\">美国队长（1990年）</a></h4><ul>\n<li>无具体记录</li>\n</ul>\n<h3 id=\"漫威电影宇宙-1\"><a href=\"#漫威电影宇宙-1\" class=\"headerlink\" title=\"漫威电影宇宙\"></a>漫威电影宇宙</h3><h4 id=\"美国队长：复仇者先锋（2011年）\"><a href=\"#美国队长：复仇者先锋（2011年）\" class=\"headerlink\" title=\"美国队长：复仇者先锋（2011年）\"></a><a href=\"http://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF/3442263?fromtitle=%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF1&amp;type=syn\" target=\"_blank\" rel=\"external\">美国队长：复仇者先锋（2011年）</a></h4><ul>\n<li><p>美国队长小的时候目标明确:保卫国家。但因为身体不好一直难以入选当兵。他一起的叫“冬兵”，是美队3里面的称呼。比他高大，做到了中尉级别。然后队长被博士发觉，看他善良，深刻的一幕是:扔了一个手榴弹过去，其他人都跑开了，队长把手榴弹跑在怀里，让别人走开。然后队长进行实验，成了很强壮，能力很强的人。在“冬兵”的帮助下，打败了红骷髅将军，宇宙魔方掉在了海里，将军消失了。冬兵掉在了悬崖下，但他是经过实验的，被九头蛇的人发现了，用来作为杀手。出现在美队2。（自己记录）</p>\n</li>\n<li><p>斯蒂夫·罗杰斯是出生于经济大萧条时期的一个家境贫寒的脆弱青年。因为看到纳粹在欧洲肆虐侵略的新闻而想入伍参军。但因为体弱多病被拒绝了。无意中得知了斯蒂夫·罗杰斯真心愿望的切斯特·菲利普斯将军决定给他一个机会，让他参加“重生计划”。经过几个星期的测试，斯蒂夫·罗杰斯被注射了超级士兵的血清并被用紫外线照射轰击，终于拥有了人类可能拥有的最完美躯体。</p>\n</li>\n<li>接着他接受了身体和战术上的训练。三个月后，他得到了作为“美国队长”的第一份任务，带着坚不可摧的盾牌和深谙战术的头脑，他投入了与红骷髅的斗争，最终阻止了红骷髅的邪恶计划，但是自己也因此被冰封，直到70年后才醒来。</li>\n</ul>\n<h4 id=\"美国队长2（2014年）\"><a href=\"#美国队长2（2014年）\" class=\"headerlink\" title=\"美国队长2（2014年）\"></a><a href=\"http://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF2\" target=\"_blank\" rel=\"external\">美国队长2（2014年）</a></h4><ul>\n<li><p>九头蛇的人渗透在神盾局。美国队长，猎鹰（有翅膀的那个），黑寡妇，神盾局局长（独眼龙）三人，闯入神盾局，安放三个芯片，使三个航母互相开火毁灭可。冬兵被派去打美国队长，但最后由于美国队长的一再劝说，美队掉入水中也是冬兵救的。（最后，钢铁侠中，一直针对他的一个官员也是九头蛇的，也被逮捕了。在《钢铁侠》中，那个官员被要求，给钢铁侠颁发奖章）（自己记录）</p>\n</li>\n<li><p>在经历了《复仇者联盟》的纽约大战后，美国队长史蒂夫·罗杰斯如今在华盛顿过着恬淡的生活，努力尝试着融入现代社会。然而当一名神盾局同事遭遇袭击后，史蒂夫被迫卷入了一场威胁全球安危的阴谋。他与黑寡妇携手出击，一边防备欲将自己灭口的杀手，一边努力揭露这个巨大阴谋的真面目。而当敌人的邪恶计划全局曝光后，美国队长和黑寡妇得到了一位新同盟“猎鹰”的协助。然而他们也发现自己将要面临的，是前所未遇、出乎意料的黑暗劲敌——冬兵。</p>\n</li>\n</ul>\n<h4 id=\"美国队长3：内战（2016年）\"><a href=\"#美国队长3：内战（2016年）\" class=\"headerlink\" title=\"美国队长3：内战（2016年）\"></a><a href=\"http://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF3\" target=\"_blank\" rel=\"external\">美国队长3：内战（2016年）</a></h4><ul>\n<li><p>因为解救人时出现了很多伤害民众的事件，复仇者联盟被要求被组织制约。美队不同意，也许是之前被组织背叛过。钢铁侠同意。国王被炸身亡后，出现了冬兵的影子，误认为是冬兵行动了，化身“黑豹”要杀了冬兵，被美队救下。最后冬兵被抓，一名被意外杀害了父母的人，找到了冬兵的“激活码”，让冬兵制造了杀戮。钢铁侠领着一批人和美队引着的一批人对打。最后钢铁侠发现自己错了，一起和美队去抓那个背后的人。那个人给看了一段视频，放的是，钢铁侠的父母被 九头蛇操控了的冬兵杀害了的事实。然后就彻底开战了。打到最后钢铁侠被打道，美队用盾牌打掉了钢铁侠胸前的电源。钢铁侠说盾牌是他父亲造的，然后就把盾牌丢了。背后的人 被黑豹交给了神盾局。冬兵也被美国队长带到黑豹那冰冻了起来。（自己记录）</p>\n</li>\n<li><p>在奥创对这个世界造成了巨大的影响之后，复仇者联盟还是团结一致保护人类的。但是在一些政治角力的背后，政府中有人认为是有必要控制一下这些超级英雄的超自然能力和他们的行动了。于是，一项管控措施出台。这个措施就是要求复联按照政府的要求来行动。任务的开展、进程和结束，都要由政府主导。这个管控措施在复联中引起了极大的争议。意见最极端、最两极分化不可调和的，就是钢铁侠和美国队长之间的问题，于是，这两个同盟者之间的矛盾就此爆发了出来。而复联的“内战”也不可避免的爆发。</p>\n</li>\n</ul>\n<h2 id=\"蚁人\"><a href=\"#蚁人\" class=\"headerlink\" title=\"蚁人\"></a>蚁人</h2><h3 id=\"蚁人（2015年）\"><a href=\"#蚁人（2015年）\" class=\"headerlink\" title=\"蚁人（2015年）\"></a><a href=\"http://baike.baidu.com/item/%E8%9A%81%E4%BA%BA/16272\" target=\"_blank\" rel=\"external\">蚁人（2015年）</a></h3><ul>\n<li>行骗为生的斯科特·朗（保罗·路德饰），在偷了生化学家汉克·皮姆博士（迈克尔·道格拉斯饰）发明的蚁人战服后，拥有了自由收缩身体大小的超能力。汉克·皮姆博士开发出一种“皮姆粒子”，并和斯科特·朗一同成为“蚁人”。斯科特也不得不接受自己的英雄身份，并帮助皮姆博士守护蚁人技术之谜。在强大的敌人威胁下，两人必须精心策划并执行一场惊天骗局来拯救世界维护和平。</li>\n</ul>\n<h3 id=\"蚁人与黄蜂女（2018年）\"><a href=\"#蚁人与黄蜂女（2018年）\" class=\"headerlink\" title=\"蚁人与黄蜂女（2018年）\"></a><a href=\"http://baike.baidu.com/item/%E8%9A%81%E4%BA%BA%E4%B8%8E%E9%BB%84%E8%9C%82%E5%A5%B3\" target=\"_blank\" rel=\"external\"><font color=\"red\">蚁人与黄蜂女（2018年）</font></a></h3><ul>\n<li>《蚁人与黄蜂女》（Ant-Man and the Wasp），是漫威影业出品的一部科幻动作电影，取材自漫威漫画，是漫威电影宇宙的第二十部电影、同时也是《蚁人》系列电影的第二部。影片将在2018年7月6日上映。</li>\n</ul>\n<h2 id=\"奇异博士\"><a href=\"#奇异博士\" class=\"headerlink\" title=\"奇异博士\"></a>奇异博士</h2><h3 id=\"电视电影：奇异博士（1978年）\"><a href=\"#电视电影：奇异博士（1978年）\" class=\"headerlink\" title=\"电视电影：奇异博士（1978年）\"></a>电视电影：<a href=\"\">奇异博士（1978年）</a></h3><ul>\n<li>无记录</li>\n</ul>\n<h3 id=\"漫威电影宇宙：奇异博士（2016年）\"><a href=\"#漫威电影宇宙：奇异博士（2016年）\" class=\"headerlink\" title=\"漫威电影宇宙：奇异博士（2016年）\"></a>漫威电影宇宙：<a href=\"http://baike.baidu.com/item/%E5%A5%87%E5%BC%82%E5%8D%9A%E5%A3%AB/2492942\" target=\"_blank\" rel=\"external\">奇异博士（2016年）</a></h3><ul>\n<li>性格高傲的神经外科手术专家史蒂芬·斯特兰奇（本尼迪克特·康伯巴奇饰）事业有成，在遭遇一次车祸悲剧后，双手再也无法握住手术刀，不能继续他的医生职业，为了治疗他的伤，他远赴尼泊尔费尽千辛万苦见到了古一法师（蒂尔达·斯文顿饰），斯蒂芬-斯特兰奇把自己曾经的自负都抛在了一边，开始接触和学习鲜为人知的玄学、以及多维空间世界的学问。在纽约的格林威治村，变身奇异博士的斯特兰奇，现实世界和多维空间的中间人，他利用超自然能力和神器来保护着世界，更要与力量强大党羽众多的卡西利亚斯（麦斯·米科尔森饰）一决高下，来拯救即将崩塌的多维世界。</li>\n</ul>\n<h2 id=\"黑豹（2018年）\"><a href=\"#黑豹（2018年）\" class=\"headerlink\" title=\"黑豹（2018年）\"></a><a href=\"http://baike.baidu.com/link?url=WoGaI2zJBvkzAyoe1erev4GgpJ1ppcDLRC5A8hnpw01NEd8BmBXXeXrzJ9fzPZnaaYs7K54IpPGM4O2sJogoaK\" target=\"_blank\" rel=\"external\">黑豹（2018年）</a></h2><ul>\n<li>黑豹（Black Panther）是美国漫威漫画旗下超级英雄，初次登场于《神奇四侠》第52期（1966年7月），由编辑斯坦·李以及漫画家杰克·科比共同创造，是第一位在主流美国漫画公司登场的非讽刺黑人超级英雄。本名特查拉（T’Challa），是非洲国家瓦坎达（Wakanda）的国王。为了使自己的国家变得更加富强，少年时的特查拉王子便前往英国留学，后毕业于牛津大学，在其父——前任黑豹特查卡（T’Chaka）死后，接任瓦坎达的国王。同时，黑豹也是一名杰出的科学家，还是复仇者联盟的成员之一，此外他的前妻则是X战警成员暴风女。</li>\n</ul>\n<h2 id=\"惊奇队长（2019年）\"><a href=\"#惊奇队长（2019年）\" class=\"headerlink\" title=\"惊奇队长（2019年）\"></a><a href=\"http://baike.baidu.com/link?url=mvlhWgQSU41HaERjKeJHg1_KKdF7yEoMNajUDqsGAVmzXRFDSeFxNHw81bvDpe_K2t-jdzphJ8UAZmgR7ZdkyBvpjaeixRqB31pAMsrzuTWqSU8KoUS2ECKkkwbGk3i8\" target=\"_blank\" rel=\"external\">惊奇队长（2019年）</a></h2><ul>\n<li>黑寡妇的独立电影遥遥无期，《惊奇队长》则成为漫威旗下第一部以<br>女性为主角的超级英雄电影。漫威漫画中有男版和女版两位惊奇队长，而现任惊奇队长则是一名名为Carol Danvers的女士。凯文·费奇也在昨日的发布会表示这是一部以女惊奇队长为主角的电影。目前主演人选尚未确定。惊奇女士是复仇者联盟成员之一，因与外星人的接触而获得超乎于常人的力量和对痛苦的忍耐力，令人敬畏的物理伤害抵御能力，飞行能力和预知能力。</li>\n</ul>\n<h2 id=\"蜘蛛侠\"><a href=\"#蜘蛛侠\" class=\"headerlink\" title=\"蜘蛛侠\"></a>蜘蛛侠</h2><h3 id=\"蜘蛛侠-1\"><a href=\"#蜘蛛侠-1\" class=\"headerlink\" title=\"蜘蛛侠\"></a>蜘蛛侠</h3><h4 id=\"蜘蛛侠（2002年）\"><a href=\"#蜘蛛侠（2002年）\" class=\"headerlink\" title=\"蜘蛛侠（2002年）\"></a><a href=\"http://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E4%BE%A0/7671442?fromtitle=%E8%9C%98%E8%9B%9B%E4%BE%A01&amp;fromid=6416692&amp;type=syn\" target=\"_blank\" rel=\"external\">蜘蛛侠（2002年）</a></h4><ul>\n<li>影片主要讲述彼特天性开朗，腼腆中仍包藏着一份单纯。拯救他的是一只哥伦比亚大学实验室的特殊蜘蛛，咬了他一口后，他眼镜消失了、脸蛋英俊了、肌肉发达了。遵循优良品种嫁接的原理，彼特当然也自动具有了撒网、织网、弹跳、飞跃、倒贴天花板的本事。彼特有了特异功能，叔父对他谆谆教诲：“能力越大，责任也越大。”</li>\n</ul>\n<h4 id=\"蜘蛛侠2（2004年）\"><a href=\"#蜘蛛侠2（2004年）\" class=\"headerlink\" title=\"蜘蛛侠2（2004年）\"></a><a href=\"http://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E4%BE%A02\" target=\"_blank\" rel=\"external\">蜘蛛侠2（2004年）</a></h4><ul>\n<li>《蜘蛛侠2》的故事发生在第1集结束2年后，彼得·帕克继续过着自己的双重生活，平时是性情温和的大学生，晚上则化身为拥有超能力的英雄蜘蛛侠，可是这两者之间的微妙平衡却越来越难以维系，爱人、朋友和慈爱的阿姨都开始怀疑他的真实身份；同时他还多了个更可怕的敌人——章鱼博士，彼得·帕克必须用尽全力对付这位邪恶魔头的疯狂计划。</li>\n</ul>\n<h4 id=\"蜘蛛侠3（2007年）\"><a href=\"#蜘蛛侠3（2007年）\" class=\"headerlink\" title=\" 蜘蛛侠3（2007年）\"></a><a href=\"http://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E4%BE%A03/2721\" target=\"_blank\" rel=\"external\"> 蜘蛛侠3（2007年）</a></h4><ul>\n<li>影片讲述在经历了重重考验之后，代表正义的蜘蛛侠成为了人人敬仰的正义英雄，抱得美人归。但是，被“毒液”共生体寄生下的帕克开始变得目中无人，邪恶开始在他的心中反客为主。蜘蛛侠的道德准则越来越模糊。</li>\n</ul>\n<h3 id=\"超凡蜘蛛侠\"><a href=\"#超凡蜘蛛侠\" class=\"headerlink\" title=\"超凡蜘蛛侠\"></a>超凡蜘蛛侠</h3><h4 id=\"超凡蜘蛛俠（2012年）\"><a href=\"#超凡蜘蛛俠（2012年）\" class=\"headerlink\" title=\"超凡蜘蛛俠（2012年）\"></a><a href=\"http://baike.baidu.com/item/%E8%B6%85%E5%87%A1%E8%9C%98%E8%9B%9B%E4%BE%A0/10926252\" target=\"_blank\" rel=\"external\">超凡蜘蛛俠（2012年）</a></h4><ul>\n<li>作为这个世界上最具有吸引力、最受追捧的超级英雄之一，与“蜘蛛侠”有关的文化传奇终于展开了一个全新的故事篇章，这一次重点强调的则是彼得·帕克（安德鲁·加菲尔德饰）不为人知的另一面。作为一个总是没办法融入到周遭环境的高中生，彼得很小的时候就被父母遗弃了，由他的叔叔本（马丁·辛饰）和婶子梅（莎莉·菲尔德饰）抚养长大。与大多数他这个年纪的少年一样，在当今这样一个大环境下，彼得也在尝试着寻找到那个真实的自我，他想知道自己到底是谁，来自于何处；与此同时，他还一直在摸索当中，不知道应该如何与自己的初恋格温·斯泰西（艾玛·斯通饰）坦然的相处，他们一起在爱、承诺与秘密中奋力的挣扎着。 随着彼得在无意之中发现了一个神秘的公文包，显然是属于他的亲生父亲的，也迫使着他展开了一场探寻真相的揭秘之旅，他要弄明白他的父母失踪的真正原因。遵循着自己所能收集到的蛛丝马迹，彼得径直来到了他爸爸曾经的搭档科特·康纳斯博士（瑞斯·伊凡斯饰）的实验室……然后，意外发生了，彼得化身成为了“蜘蛛侠”，与科特的另外一个身份——“蜥蜴人”展开了激烈的碰撞与对决，他需要做出的是足以改变一生的决定和选择，那就是利用超能力重新塑造属于他的命运，然后成为一个真正意义上的英雄。</li>\n</ul>\n<h4 id=\"超凡蜘蛛俠2（2014年）\"><a href=\"#超凡蜘蛛俠2（2014年）\" class=\"headerlink\" title=\" 超凡蜘蛛俠2（2014年）\"></a><a href=\"http://baike.baidu.com/item/%E8%B6%85%E5%87%A1%E8%9C%98%E8%9B%9B%E4%BE%A02\" target=\"_blank\" rel=\"external\"> 超凡蜘蛛俠2（2014年）</a></h4><ul>\n<li>彼得·帕克（安德鲁·加菲尔德饰）依然很忙，因为他一边要作为正常人谈恋爱，一边要变身蜘蛛侠打坏人。而格温（艾玛·斯通饰）高中还没毕业，彼得·帕克给格温父亲承诺过要以远离她的方式保护她，但他显然做不到。当一个新的大反派“电光人”（杰米·福克斯饰）出现后，彼得·帕克的生活更加不得安宁。一个老朋友哈利·奥斯本（戴恩·德哈恩饰）回归，帕克发现了关于他自己身世的新线索。</li>\n</ul>\n<h3 id=\"漫威电影宇宙-2\"><a href=\"#漫威电影宇宙-2\" class=\"headerlink\" title=\"漫威电影宇宙\"></a>漫威电影宇宙</h3><h4 id=\"蜘蛛侠：返校日（2017年）\"><a href=\"#蜘蛛侠：返校日（2017年）\" class=\"headerlink\" title=\"蜘蛛侠：返校日（2017年）\"></a><a href=\"http://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E4%BE%A0%EF%BC%9A%E8%BF%94%E6%A0%A1%E6%97%A5\" target=\"_blank\" rel=\"external\">蜘蛛侠：返校日（2017年）</a></h4><ul>\n<li>正在拍摄中的《蜘蛛侠：返校节》近日传出片场照，确认了一个新反派：除迈克尔·基顿饰演的秃鹫，反派团体“邪恶六人组”另外一位成员惊悚（Shocker）也会在电影中出现，由Bokeem Woodbine饰演。之前就有些传言称惊悚会现身，如今看来他的造型比起漫画，更像《超凡蜘蛛侠2》游戏中的样子。</li>\n</ul>\n<h2 id=\"刀锋战士\"><a href=\"#刀锋战士\" class=\"headerlink\" title=\"刀锋战士\"></a>刀锋战士</h2><h3 id=\"刀锋战士（1998年）\"><a href=\"#刀锋战士（1998年）\" class=\"headerlink\" title=\"刀锋战士（1998年）\"></a><a href=\"http://baike.baidu.com/item/%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB/10033222?fromtitle=%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB1&amp;fromid=1755275&amp;type=syn\" target=\"_blank\" rel=\"external\">刀锋战士（1998年）</a></h3><ul>\n<li><p>刀锋（韦斯利·斯奈普斯饰）自小就被专门打造新式武器的吸血鬼猎人亚伯拉罕·惠斯勒（克里斯·克里斯托佛森饰）收养，专门出入有吸血鬼出没的场所，拯救即将被消灭吞噬的人类，凭着他驾骑着机车，手持无敌火力的巨型火焰枪，以及无敌旋风刀和身后背负着的那把长剑，不死的无敌战神刀锋战士所向披靡，只要他一出现，躲藏在人群当中的吸血鬼将无所遁形。</p>\n</li>\n<li><p>于是，在这个未来的世界中，刀锋战士成了人类和吸血鬼双方争夺生存空间下最勇猛的正义战士，也因此，吸血鬼领袖狄肯·费斯（斯蒂芬·多尔夫饰）处心积虑要除去这心头大患，以完成他一统天下的大梦，他先利用刀锋战士的心理弱点给他致命的攻击，原来，刀锋出身时被吸血鬼血液浸满子宫，也成了半个吸血鬼，必须随时克制着自己对血的渴望。</p>\n</li>\n<li><p>狄肯·费斯先是邀请刀锋战士加入邪恶势力的一方，只要他们两方联手，相信没有人可以逃过他们的力量，然而刀锋战士作为献祭品以请出血王，增强自己的力量。在正邪双方的互斗之下，究竟谁才能获得最后的胜利。</p>\n</li>\n</ul>\n<h3 id=\"刀锋战士2（2002年）\"><a href=\"#刀锋战士2（2002年）\" class=\"headerlink\" title=\"刀锋战士2（2002年）\"></a><a href=\"http://baike.baidu.com/item/%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB%E2%85%A1?fromtitle=%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB2&amp;fromid=316562&amp;type=syn\" target=\"_blank\" rel=\"external\">刀锋战士2（2002年）</a></h3><ul>\n<li><p>刀锋（韦斯利·斯奈普斯饰）的朋友惠斯勒（克里斯·克里斯托佛森饰）被一群吸血鬼捉去，被放进一个储藏罐里保鲜，供他们随时解渴。刀锋一路杀来救出了威斯勒，然后给他注入了抗病毒的药物，使他恢复了人的常态。但他们还没来得及叙旧，吸血鬼王国竟派信使来求援，他们请刀锋帮助打击一种威胁所有吸血鬼和人类的突变的吸血怪物，他们说这股吸血鬼新势力名为“收割机”。就这样，一种可以轻易使人变成怪物的名叫“收割机”的家伙使刀锋战士和本来势不两立的“采血包”吸血鬼暂时结为同盟。</p>\n</li>\n<li><p>“收割机”嗜血如命，但它们不是用嘴吸血，实际上，在它们的手掌中央有些细密的针管，就是说，只要它们把手放在你的身上就可以饱餐一顿。吸血鬼王国的内阁派出一直接受严格训练，本来是准备用来暗杀刀锋的突击队去和刀锋合作。为表示诚意，他们还特地派来美丽的妮莎（莱昂·维埃拉饰）协助刀锋战士。带着新机械师斯克斯和美女，刀锋战士准备向这些突变的吸血鬼恶棍开战了。</p>\n</li>\n</ul>\n<h3 id=\"刀锋战士3（2004年）\"><a href=\"#刀锋战士3（2004年）\" class=\"headerlink\" title=\"刀锋战士3（2004年）\"></a><a href=\"http://baike.baidu.com/item/%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB3%EF%BC%9A%E4%B8%89%E4%BD%8D%E4%B8%80%E4%BD%93?fromtitle=%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB3&amp;fromid=317818&amp;type=syn\" target=\"_blank\" rel=\"external\">刀锋战士3（2004年）</a></h3><ul>\n<li><p>在遥远的沙漠深处，一些吸血鬼正在试图让能产下更多吸血鬼的恐<br>怖怪物复活，他就是德雷克（多米尼克·珀塞尔饰），这个可怕的吸血鬼拥有一种特殊的力量可以使自己在白天还能自由行动。如此以来，刀锋战士所面临的形式便更为严峻。此时，吸血鬼的领袖还对刀锋战士实施了一项恶毒的诽谤计划，他们把刀锋战士定义为了一个杀人怪物，制作了种种伪证并将它们送给了FBI，致使刀锋战士成为了FBI抓捕的对象。在刀锋战士和他的导师惠斯勒（克里斯·克里斯多佛森饰）与FBI探员坎伯兰得（詹姆斯·瑞马尔饰）以及他的手下进行了一次火药味十足的摊牌以后，刀锋战士极不情愿地与一群由人类组成的猎捕吸血鬼的小队结成了同盟，这个小队的头儿正是惠斯勒的漂亮女儿阿尔贝特（杰西卡·贝尔饰）和俏皮话满天飞的汉尼拔·金（瑞安·雷诺兹饰）。</p>\n</li>\n<li><p>当科学家萨姆菲尔德(娜塔莎·雷昂饰)一直在潜心研究以便可以制造出对付吸血鬼的终极溶液时，阿比盖尔带领的小队正与由强大的吸血鬼丹尼卡·塔罗斯(帕克·波西饰)所领导的一帮不死吸血鬼以及她那带有毒牙的随从们进行着一系列无情的厮杀。最终，刀锋战士发现他自己正在慢慢变成一个最为强大的吸血鬼，他的命运以及整个人类的命运都安危未定。</p>\n</li>\n</ul>\n<h2 id=\"夜魔侠-艾丽卡\"><a href=\"#夜魔侠-艾丽卡\" class=\"headerlink\" title=\"夜魔侠/艾丽卡\"></a>夜魔侠/艾丽卡</h2><h3 id=\"夜魔侠（2003年）\"><a href=\"#夜魔侠（2003年）\" class=\"headerlink\" title=\"夜魔侠（2003年）\"></a><a href=\"http://baike.baidu.com/link?url=MFTYGfFu0zXx672TUTfhl58iK_SihFjrIH-jm0-L1evuCuM75aE1ZT5sdeyYMu-TGIKhHr5r8PQhzGS39N0euHkRtl2LgZEH5H6dj-R1n3mE98oOai5mroazTW0aSt9-\" target=\"_blank\" rel=\"external\">夜魔侠（2003年）</a></h3><ul>\n<li>又名超胆侠。影片主要讲述马特·默多克幼时意外双目失明，却也意外增强其余感官能力，在父亲遭歹徒袭击横死街头后，马特誓言为无辜受害者报复。白天是律师的他，晚上就化身超胆侠，将法律无法伸张的恶徒就地正法。</li>\n</ul>\n<h3 id=\"艾丽卡（2005年）\"><a href=\"#艾丽卡（2005年）\" class=\"headerlink\" title=\"艾丽卡（2005年）\"></a><a href=\"http://baike.baidu.com/item/%E8%89%BE%E4%B8%BD%E5%8D%A1/6465388\" target=\"_blank\" rel=\"external\">艾丽卡（2005年）</a></h3><ul>\n<li>影片围绕一个雇佣杀手Elektra Natchios，她是一个杀手组织Hand训练、培养出来的一个杀手中的精英。Elektra接受了最新的刺杀任务，而目标包括一个13岁的小女孩Abby，Elektra不忍下手，后来更和Abby成为朋友。</li>\n</ul>\n<h2 id=\"惩罚者\"><a href=\"#惩罚者\" class=\"headerlink\" title=\"惩罚者\"></a>惩罚者</h2><h3 id=\"惩罚者（2004年）\"><a href=\"#惩罚者（2004年）\" class=\"headerlink\" title=\"惩罚者（2004年）\"></a><a href=\"http://baike.baidu.com/item/%E6%83%A9%E7%BD%9A%E8%80%85/35747\" target=\"_blank\" rel=\"external\"><font color=\"red\">惩罚者（2004年）</font></a></h3><ul>\n<li><p>弗兰克·卡斯特（Frank Castle）是原美国海军陆战队出身的军人，在越战退伍后担任部队训练教官，在与妻儿某日在公园聚餐时因目睹黑道私刑事件而一家三口当场惨遭黑道开枪灭口，侥幸伤重未死的弗兰克在出院后，运用自己的情报系统找出杀害妻儿的凶手并诉诸法律，但黑道却以各种管道和法律漏洞逃过制裁，对司法彻底感到绝望的弗兰克为了替妻儿报仇，决定以自己的方式诉诸武力来替妻儿讨回公道，并且对于任何罪犯都采取杀无赦的制裁手段。</p>\n</li>\n<li><p>他的做法太过于残暴，以至于很多的英雄都看不惯他的做法。</p>\n</li>\n<li><p>在大事件“内战”中，救了从钢铁侠那逃出来的蜘蛛侠，并送到了美国队长的据点。他还请求加入美国队长的队伍中，遭到了一些英雄的反对。途中，有两名罪犯也想加入美国队长的队伍中，惩罚者不由分说的杀了他们，这激怒了队长，队长打了他一顿，叫人把他送走了。</p>\n</li>\n<li><p>“黑暗王朝”时期，惩罚者被黑暗金刚狼戴肯所杀，但得到血石的力量暂时成为科学怪人，并与戴肯大战一场。目前，惩罚者已经恢复原来人体，继续自己的惩罚事业。</p>\n</li>\n</ul>\n<h3 id=\"惩罚者2：战争特区（2009年）\"><a href=\"#惩罚者2：战争特区（2009年）\" class=\"headerlink\" title=\"惩罚者2：战争特区（2009年）\"></a><a href=\"http://baike.baidu.com/item/%E6%83%A9%E7%BD%9A%E8%80%852%EF%BC%9A%E6%88%98%E4%BA%89%E7%89%B9%E5%8C%BA?fromtitle=%E6%83%A9%E7%BD%9A%E8%80%852&amp;fromid=4370596&amp;type=syn\" target=\"_blank\" rel=\"external\"><font color=\"red\">惩罚者2：战争特区（2009年）</font></a></h3><ul>\n<li><p>本想归隐田园，与家人共度天伦的FBI探员弗兰克·卡斯特，无奈的在黑帮杀掉妻儿之后走向了黑暗复仇的不归路。弗兰克·卡斯特大难不死，在悲痛过后开始成为这个城市里隐秘的“惩罚者”，在黑暗中打击那些猖狂的犯罪分子的头号先锋。在处决了城内走私行当的龙头老大之后，惩罚者的名声鹊起，因此也令城内不少罪犯闻风丧胆，而他也就继续穿着代表惩罚者的骷髅制服，穿梭在这个充满罪恶的都市中。</p>\n</li>\n<li><p>可偏偏就有不信邪的人出现，一名新崛起的黑帮份子比利开始向惩罚者叫嚣，并且还要统领城内各大帮派，大有和惩罚者正面对决的气势。一番激斗之后，比利最终还是败在惩罚者的枪下。</p>\n</li>\n<li><p>不过出乎所有人意料的是，比利并没有成为弗兰克的枪下游魂。他竟然幸存了下来。但他的脸已经严重损毁，看上去好似一副混乱至极的拼图。在复仇烈焰的灼烧下，比利正式埋葬了自己，化名为“拼图”重出江湖。这时又一个奇怪而恐怖的人物出现了，从某种程度上来说他与弗兰克很相似，不论是当初坚定的复仇意志，还是绝不留情干净利落的冷血手法，但“拼图”的野心可不仅仅限于此，他还要将城内的黑帮一一吞并，自然这些帮派的头目也成了他砧板之肉。虽然这在一定程度上等于协助了弗兰克的工作，但敌人就是敌人。而在弗兰克逐步调查“拼图”的过程中，他惊讶地发现，事实的真相远非一般人能够承担。不过对于惩罚者来说，回应暴力的只有更加强大的暴力。</p>\n</li>\n</ul>\n<h2 id=\"恶灵骑士\"><a href=\"#恶灵骑士\" class=\"headerlink\" title=\"恶灵骑士\"></a>恶灵骑士</h2><h3 id=\"恶灵骑士（2007年）\"><a href=\"#恶灵骑士（2007年）\" class=\"headerlink\" title=\"恶灵骑士（2007年）\"></a><a href=\"http://baike.baidu.com/item/%E6%81%B6%E7%81%B5%E9%AA%91%E5%A3%AB/270996\" target=\"_blank\" rel=\"external\">恶灵骑士（2007年）</a></h3><ul>\n<li>初代恶灵骑士本名乔纳森·布雷泽（Jonathan Blaze），简称强尼·布雷泽（Johnny Blaze），原是一名摩托车特技车手，为了拯救患癌养父便和魔鬼墨菲斯托做了交易而被邪灵扎坦诺斯附身，随后得到了控制地狱火的力量和可以让罪恶感受到痛苦的审判之眼。强尼成为了追求复仇的恶灵骑士。</li>\n</ul>\n<h3 id=\"灵魂战车2：复仇时刻（2012年）\"><a href=\"#灵魂战车2：复仇时刻（2012年）\" class=\"headerlink\" title=\"灵魂战车2：复仇时刻（2012年）\"></a><a href=\"http://baike.baidu.com/item/%E7%81%B5%E9%AD%82%E6%88%98%E8%BD%A62%EF%BC%9A%E5%A4%8D%E4%BB%87%E6%97%B6%E5%88%BB\" target=\"_blank\" rel=\"external\">灵魂战车2：复仇时刻（2012年）</a></h3><ul>\n<li>该片讲述了强尼·布雷兹为救病重父亲和魔鬼做了交易，把灵魂卖给了魔鬼，布雷兹被一个古代恶魔附身，他化身为幽灵骑士。神父莫洛来到布雷兹的住处请布雷兹帮他找一个男孩，并答应作为回报，帮助布雷兹解除诅咒的故事。</li>\n</ul>\n<h2 id=\"X战警\"><a href=\"#X战警\" class=\"headerlink\" title=\"X战警\"></a>X战警</h2><h3 id=\"X战警-1\"><a href=\"#X战警-1\" class=\"headerlink\" title=\"X战警\"></a>X战警</h3><h4 id=\"X战警（2000年）\"><a href=\"#X战警（2000年）\" class=\"headerlink\" title=\"X战警（2000年）\"></a><a href=\"http://baike.baidu.com/link?url=Nr-y06z6BhoAEVeu4JJnuJdmIrngGQP9714oiZ486xmpIlOeTzmxD78jgi9XFRXW5v9JrTU0lMIxHWixe9mKB3PH41FhFFkljH2bWVwgDQa\" target=\"_blank\" rel=\"external\">X战警（2000年）</a></h4><ul>\n<li><p>镭射眼（X战警的队长，可由两眼射出致命雷射光）、琴葛蕾（有心电感应、隔空取物，及瞬间移动的能力）、暴风女（X战警的副队长，拥有控制气候的能力）是X战警的核心人物。</p>\n</li>\n<li><p>而X战警队伍来了一位危险人物——金刚狼（拥有超强的回复能力，两腕上有超合金的金钢爪）是个脾气暴躁，几乎不受控制的变种人，使X战警内部危机四伏。X战警让它训练新兵，并想吸收它加入自己的行列。但无人知道它的来历，不久又发现它的大部分思维受外人操纵。更糟的是，又一种突变生物“万磁王”出现了，它能控制磁力和地球引力。它曾被人类当作怪物巡回展出，饱受屈辱。它憎恨人类，认为突变生物比人类更优秀，应该主宰人类。它和“金钢狼”携手为实现这一目标而不择手段。</p>\n</li>\n<li><p>而誓死保卫人类的X战警，将会发现他们在尽力保卫人类之时，人类也对他们也产生了极大的恐惧，双方关系渐渐紧绷。再加上X战警得面对金钢狼一触即发的脾气，与万磁王的到处杀戮，X战警陷入了进退两难的重重危机中[2]  。</p>\n</li>\n</ul>\n<h4 id=\"X战警2（2003年）\"><a href=\"#X战警2（2003年）\" class=\"headerlink\" title=\"X战警2（2003年）\"></a><a href=\"http://baike.baidu.com/item/X%E6%88%98%E8%AD%A62/68321\" target=\"_blank\" rel=\"external\">X战警2（2003年）</a></h4><ul>\n<li>故事开场紧接着第一集的结尾，“金刚狼”罗根为了找回自己过去的记忆离开了X教授的学校，隐姓埋名前往艾卡里湖（AkaliLake）工业中心；另一边，人类议会正忙于重建在变种人大战中受到重创的自由女神像；万磁王则继续在X教授精心打造的塑料监狱中服刑。从表面上看这个世界似乎渐渐回复了正常，但是X战警们没有察觉到，在这个世界的黑暗深处，新的阴谋正在悄悄临近，包括富有正义感的X战警在内的变种人。在普通人眼中代表着社会新物种对旧人类的挑战与威胁，因此他们必须在充满歧视和敌意的环境里挣扎求存。金刚狼的身世也将在本集中进一步揭开。</li>\n</ul>\n<h4 id=\"战警3：最后之战（2006年）\"><a href=\"#战警3：最后之战（2006年）\" class=\"headerlink\" title=\"战警3：最后之战（2006年）\"></a><a href=\"http://baike.baidu.com/item/X%E6%88%98%E8%AD%A6%EF%BC%9A%E8%83%8C%E6%B0%B4%E4%B8%80%E6%88%98?fromtitle=X%E6%88%98%E8%AD%A63&amp;fromid=6078384&amp;type=syn\" target=\"_blank\" rel=\"external\">战警3：最后之战（2006年）</a></h4><ul>\n<li><p>又称背水一战。在《X战警2》中，由于军方科学家的离间，人类对变种人的愤恨与压制彻底越过了底线，X教授与其带领的身怀绝技的X特警们面对着和解的难题与反抗的抉择，而一心企图令变种人称霸世界的万磁王摆脱囚禁后变得更为强大而狡猾。</p>\n</li>\n<li><p>三方都吸收了更庞大的新鲜力量，一场前所未有的人种之战剑拔弩张。与此同时，金刚狼和独眼龙还没能从痛失我爱中自拔，珍葛蕾却如凤凰涅磐般奇迹地回到战友中间。众人欣喜之外，却发觉她的性格变得狂乱分裂，甚至有倒戈相向的倾向，让X教授等对水坝一役后她死里逃生的经历不禁生疑。而在黑凤凰缺席的时间里，风暴女和金刚狼通力合作，日渐生情。沿着上集的线索，逐渐觉醒的金刚狼也破译了自己的基因密码。四人再聚首，感情的纠葛与身世的秘密和变种人的未来一样愈发扑朔迷离。人类已经按捺不住对自身势力受胁迫的恐惧，向变种人正式宣战。X教授虽坚持和平发展论，但在生死存亡之际，不得不与万磁王再次联手，为变种人的生存权利作最后一搏。而变种人内部关系也因为对仇恨的不同解读而势成水火，一位重要角色将因此牺牲。X战警必须自保并防止万磁王的野心在变种人中蔓延。</p>\n</li>\n</ul>\n<h4 id=\"X战警：第一战（2011年）\"><a href=\"#X战警：第一战（2011年）\" class=\"headerlink\" title=\"X战警：第一战（2011年）\"></a><a href=\"http://baike.baidu.com/link?url=Qz1ZOROJhGKrmEf8wf36-2Ya6TObvxyeMuqnYmdT0hVXUni6mTTnwulcwQcFL77uY5bEU59X-nsQHjV0BTeCJB7Ztw-fCVdbyBHutDojwn1Mr71DcOXel2q6B4O3QlD4DBVA4Lp7DTbw1-MoAK-h3K\" target=\"_blank\" rel=\"external\">X战警：第一战（2011年）</a></h4><ul>\n<li>影片将背景设在60年代古巴导弹危机发生时，讲述在变种人未被世人所知的时候，Charles Xavier和Erik Lensherr还没有被人称作“X教授”和“万磁王”。他们只是变种人中最早发现自己超能力的两个年轻人。他们那时也不是对手，而是非常亲密的朋友。两人以及其他几个变种人在一起工作，试图阻止“末日”的到来。但在这个过程中，两人之间出现了裂缝，最终，在万磁王的兄弟会与X教授率领的X战警之间，一场永恒之战开始了。</li>\n</ul>\n<h4 id=\"X战警：逆转未来（2014年）\"><a href=\"#X战警：逆转未来（2014年）\" class=\"headerlink\" title=\"X战警：逆转未来（2014年）\"></a><a href=\"http://baike.baidu.com/item/X%E6%88%98%E8%AD%A6%EF%BC%9A%E9%80%86%E8%BD%AC%E6%9C%AA%E6%9D%A5?fromtitle=x%E6%88%98%E8%AD%A64&amp;type=syn\" target=\"_blank\" rel=\"external\">X战警：逆转未来（2014年）</a></h4><ul>\n<li><p>故事发生在并不遥远的未来，X战警遭遇了史上最大的生存危机，他们必须回到过去拯救自己的命运。X战警也许在我们这个时代，是有着最先进基因的生物，但在不久的未来，他们都被“特拉斯克工业”创始人玻利瓦尔·特拉斯克所制造并指挥的新型特种战斗机器人“哨兵”所猎杀，并有着被灭绝的危险。</p>\n</li>\n<li><p>哨兵机器人可以检测出任何形式的变种类型，而他们的基因则能够让他们瞬间变换和改造自身，从而击败X战警。这使得X战警的唯一希望，便是回到过去，在特拉斯克的研究最终导致他们的灭绝之前，改变历史。</p>\n</li>\n<li><p>利用幻影猫凯蒂的能力，金刚狼罗根穿越时空开始了这个艰辛的旅程。这一次，他必须联合年轻的变种人领袖X教授，以及他一生的对手万磁王，去找到魔形女，并阻止特拉斯克。时间已经迫在眉睫，在过去，亦在未来，X战警同哨兵机器人的大决战即将展开。</p>\n</li>\n</ul>\n<h4 id=\"X戰警：天啟（2016年）\"><a href=\"#X戰警：天啟（2016年）\" class=\"headerlink\" title=\"X戰警：天啟（2016年）\"></a><a href=\"http://baike.baidu.com/item/X%E6%88%98%E8%AD%A6%EF%BC%9A%E5%A4%A9%E5%90%AF\" target=\"_blank\" rel=\"external\">X戰警：天啟（2016年）</a></h4><ul>\n<li><p>天启出生于埃及第一王朝，是地球上最古老、最强大的变种人沙巴泊，曾拥有无数信众，但后来遭人背叛，被人活埋。几千年后，强大无匹而且永生不朽的天启从数千年的深埋中获释，愤怒的他发现同类不再被视为神祇，他对人类世界充满厌恶，决定摧毁它重造一个新世界。为了实现自己的野心，天启四处游走，开始搜集他的s仆人——天启四骑士。因为天启的力量，暴风女、灵碟、天使、万磁王的超能力得到巨幅提升，同时他也计划将他的意识移入X教授体内，从而组建一支变种人的军队。</p>\n</li>\n<li><p>天启的阴谋遭到正义的X战警们的顽强抵抗，X教授、魔形女、琴·格雷、镭射眼、夜行者、野兽、快银等变种人联起手来，与这个看似无法阻挡的敌人进行一场史诗对决。</p>\n</li>\n</ul>\n<h3 id=\"金刚狼\"><a href=\"#金刚狼\" class=\"headerlink\" title=\"金刚狼\"></a>金刚狼</h3><h4 id=\"X战警前传：金刚狼（2009年）\"><a href=\"#X战警前传：金刚狼（2009年）\" class=\"headerlink\" title=\"X战警前传：金刚狼（2009年）\"></a><a href=\"http://baike.baidu.com/subview/275163/13580586.htm#viewPageContent\" target=\"_blank\" rel=\"external\">X战警前传：金刚狼（2009年）</a></h4><ul>\n<li><p>《X战警前传》是由加文·胡德执导的科幻片，休·杰克曼、李佛·薛伯等主演。《X战警前传》包括2009 《X战警前传：金刚狼》（X-Men Origins: Wolverine）、2011《X战警：第一战》（X-Men: First Class）、2014 《X战警：逆转未来》（X-Men: Days of Future Past）三部影片。</p>\n</li>\n<li><p>金刚狼的原名是詹姆斯·霍莱特，出生于19世纪末加拿大的一个富裕家庭，他天生体弱但是骨骼清奇，而且他的家庭并不和睦，所以小詹姆斯性格内向而且孤僻。他一直就这样平静而枯燥地生活着，直到有一天晚上，园丁罗根杀死了父亲，丧父之痛让小詹姆斯激发了体内的奇特能力，他从身体里长出了由骨骼形成的“骨爪”，小詹姆斯用“骨爪”杀死了罗根。然而没想到的是，其实罗根才是小詹姆斯的生父，生父在临死前告诉了金刚狼他的身世。</p>\n</li>\n<li><p>于是小詹姆斯和哥哥维克多两人出逃。之后，两人参加了多次的战争，从一战一直打到越南战役。后来兄弟二人被史崔克将军招募，从事特种工作，厌倦了杀人的金刚狼后来脱离组织，才到了加拿大的林场当伐木工，改名为罗根。在逃亡中的罗根一直对自己天生的异能感到既恐惧又厌恶，于是自暴自弃。直到有一次，他在森林中偶遇并且爱上一名印第安血统女子“银狐”凯娅。凯娅后来被金刚狼的哥哥维克多（剑齿虎）所杀，愤怒的金刚狼决定接受史崔克将军的条件，同意进行变种人的改造实验。\n　</p>\n</li>\n<li>罗根给自己起名为“金刚狼”，并且本身骨骼被改造成不可摧毁，天生的骨爪变成了金刚爪。被改造的金刚狼还被“X武器”组织洗脑，金刚狼苏醒后杀死了“X武器”组织的人之后逃跑，谁知道剑齿虎此时前来追杀，于是金刚狼与剑齿虎大战一场，金刚狼险胜之后离开。之后遇到了X教授，被得到了收留，开始了自己的X战警生涯，戎马一生。</li>\n</ul>\n<h4 id=\"金刚狼（2013年）\"><a href=\"#金刚狼（2013年）\" class=\"headerlink\" title=\"金刚狼（2013年）\"></a><a href=\"http://baike.baidu.com/item/%E9%87%91%E5%88%9A%E7%8B%BC2\" target=\"_blank\" rel=\"external\">金刚狼（2013年）</a></h4><ul>\n<li>位于加拿大的深山老林，背负着永生之苦的金刚狼罗根（休·杰克曼饰）隐居于此，但每日恶梦不断。在一次与猎人的冲突中，他得到东瀛女子雪绪（福岛莉拉饰）的帮助，雪绪是罗根二战期间的旧相识矢志田市朗派来的下属，似乎不久于人世的老友渴望死去之间再见罗根一面。跨越重洋的罗根终于见到了虚弱的矢志田市朗，对方希望他能够保护自己的孙女真理子（冈本多绪饰）。随着老人谢世，葬礼上突然战火点燃。罗根在雪绪的帮助下拼死救出真理子，两人一起逃亡，并因此互生情愫。而矢志田市朗的儿子矢志田信玄（真田广之饰）似乎另有所图。在逃亡途中，罗根意外发现他丧失了自愈的能力，金刚狼最大的危机降临。</li>\n</ul>\n<h4 id=\"金刚狼3-罗根（2017年）\"><a href=\"#金刚狼3-罗根（2017年）\" class=\"headerlink\" title=\"金刚狼3:罗根（2017年）\"></a><a href=\"http://baike.baidu.com/link?url=3OcdDcDZUUrYfE_61LF7Vs6A5HYknZyrpgJiNTNLVmXNw5kfSZtp-M8P_yE48Q2l2AcPRkMDjG2HClGPqK2xTSzfimkMGPpY3ZrBOMq1bAj255485JMHg_eUVMWpeDEQ\" target=\"_blank\" rel=\"external\">金刚狼3:罗根（2017年）</a></h4><ul>\n<li><p>影片讲述了《X战警：逆转未来》未来逆转的一年后。也就是新2024年的故事</p>\n</li>\n<li><p>许多年过去了，变种人渐渐消失。金刚狼罗根迟暮，带着老年X教授独自生活。一天，一个小女孩出现在罗根的生活中，X教授告诉罗根她很像他，并请罗根保护她。随着小女孩的出现，一个阴谋浮出水面，原来她竟是金刚狼的复制体：X-23。与此同时，一个右手为机械手的生化人唐纳德·皮尔斯追踪到了X-23，同时也发现了罗根和教授的踪迹。为了保护自己最后的同伴兼家人，罗根与唐纳德·皮尔斯，以及幕后黑手，展开了他人生中，也是最后一次，殊死之战……</p>\n</li>\n</ul>\n<h3 id=\"死侍\"><a href=\"#死侍\" class=\"headerlink\" title=\"死侍\"></a>死侍</h3><h4 id=\"死侍（2016年）\"><a href=\"#死侍（2016年）\" class=\"headerlink\" title=\"死侍（2016年）\"></a><a href=\"\">死侍（2016年）</a></h4><h3 id=\"牌王\"><a href=\"#牌王\" class=\"headerlink\" title=\"牌王\"></a>牌王</h3><h1 id=\"漫威漫画改编电影列表\"><a href=\"#漫威漫画改编电影列表\" class=\"headerlink\" title=\"漫威漫画改编电影列表\"></a>漫威漫画改编电影列表</h1><blockquote>\n<p>先停止更新，复制了很长时间，累了.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%BC%AB%E5%A8%81%E6%BC%AB%E7%94%BB%E6%94%B9%E7%BC%96%E7%94%B5%E5%BD%B1%E5%88%97%E8%A1%A8\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/%E6%BC%AB%E5%A8%81%E6%BC%AB%E7%94%BB%E6%94%B9%E7%BC%96%E7%94%B5%E5%BD%B1%E5%88%97%E8%A1%A8</a></li>\n</ul>\n<h1 id=\"站外链接\"><a href=\"#站外链接\" class=\"headerlink\" title=\"站外链接\"></a>站外链接</h1><ul>\n<li><a href=\"http://mt.sohu.com/20160506/n448061336.shtml\" target=\"_blank\" rel=\"external\">【当贝市场】漫威系列电影、电视剧系列的正确顺序</a></li>\n<li><a href=\"http://www.gamersky.com/wenku/201606/759888_14.shtml\" target=\"_blank\" rel=\"external\">灭霸前十都进不去？漫威电影宇宙反派人气排行榜</a></li>\n<li><a href=\"http://entertainment.anhuinews.com/system/2016/12/14/007526824_09.shtml\" target=\"_blank\" rel=\"external\">冯小刚给周星驰演戏 这片场照绝版了(走错片场了)</a></li>\n</ul>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><blockquote>\n<p>记得看的第一部印象深刻的漫威电影的是《绿巨人》，当时觉得看的很振奋，纯属打斗场景，后来有机会接触了这系列的电影，知道是漫威宇宙，于是找到了这系列的全部电影，并一一全部看了。自己感到共鸣的并不是打斗的多么精彩，而是每个英雄为拯救人类的那种精神。</p>\n<p>听见有人说美国英雄系列电影的一些套路就是：主角刚开始是个毫不起眼的角色，然后经历了一场灾难，获得了某种特殊能力，最初并不想用这种能力来帮助人类，经历很多事情的催化之后，明白自己应该承担起这份责任，保护人类，保护地球。（大概就是介么个意思）</p>\n<p>开始认真看漫威系列电影的时候，看的是《钢铁侠》三部曲，然后是美国队长，刚开始每看完一部就写完这部的故事情节，最后因为看的太多了，一天可能看完好几部，就没有坚持下去，但觉得是个遗憾，因为不写下来，之后有一些主要情节可能都忘记了，跟别人谈论时，明明当时看的很认真，但是不知道从哪说起，花几分钟时间记录很重要，可以回顾故事情节的同时，也好日后好跟别人吹牛掰。哈哈</p>\n<p>所以，这里记下电影的主要故事情节，有些是自己写的，有些则是网上摘录的。</p>\n</blockquote>\n","categories":["life"],"tags":["life"]},{"title":"Android 关于WebView全方面的使用（项目应用篇）","url":"http://jinbeen.com/2016/12/04/Android 关于WebView全方面的使用（项目应用篇）/","content":"<ul>\n<li><strong>与JS交互</strong></li>\n<li>拨打电话、发送短信、发送邮件</li>\n<li>上传图片(版本兼容)</li>\n<li>进度条设置</li>\n<li>字体大小设置</li>\n<li>返回网页上一层、显示网页标题</li>\n<li>全屏播放网络视频</li>\n</ul>\n<a id=\"more\"></a>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-c47f48be7ab5ecec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440\" alt=\"首页\"></p>\n<h2 id=\"文章说明\"><a href=\"#文章说明\" class=\"headerlink\" title=\"文章说明\"></a>文章说明</h2><p>WebView的使用已经是老生常谈了，看到很多文章说了用法，但我很少看到全的或者是项目中可以直接使用的，都是看了很多后，自己把功能都集合在一起。这里是一份比较全面的WebView项目应用篇，其中已经解决了应用时出现的很多bug，希望能对大家有帮助。</p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><strong><a href=\"https://github.com/youlookwhat/WebViewStudy\" target=\"_blank\" rel=\"external\">WebViewStudy</a></strong></p>\n<h2 id=\"内容详细介绍\"><a href=\"#内容详细介绍\" class=\"headerlink\" title=\"内容详细介绍\"></a>内容详细介绍</h2><h3 id=\"电话短信邮件\"><a href=\"#电话短信邮件\" class=\"headerlink\" title=\"电话短信邮件\"></a>电话短信邮件</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-8c5b14fbf8fbdea8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440\" alt=\"电话短信邮件&amp;与JS交互测试.png\"></p>\n<p>给WebView设置WebViewClient：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> MyWebViewClient(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure>\n<p>其中<code>MyWebViewClient</code>内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\">* 监听网页链接:</div><div class=\"line\">* - 优酷视频直接跳到自带浏览器 </div><div class=\"line\">* - 根据标识:打电话、发短信、发邮件 </div><div class=\"line\">* - 进度条的显示 </div><div class=\"line\">* - 加载完成后，添加javascript监听 </div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> IWebPageView iWebPageView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WebViewActivity activity;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyWebViewClient</span><span class=\"params\">(IWebPageView iWebPageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.iWebPageView = iWebPageView;</div><div class=\"line\">        activity = (WebViewActivity) iWebPageView;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"deprecation\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 优酷视频跳转浏览器播放</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (url.startsWith(<span class=\"string\">\"http://v.youku.com/\"</span>)) &#123;</div><div class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">            intent.setAction(<span class=\"string\">\"android.intent.action.VIEW\"</span>);</div><div class=\"line\">            intent.addCategory(<span class=\"string\">\"android.intent.category.DEFAULT\"</span>);</div><div class=\"line\">            intent.addCategory(<span class=\"string\">\"android.intent.category.BROWSABLE\"</span>);</div><div class=\"line\">            Uri content_url = Uri.parse(url);</div><div class=\"line\">            intent.setData(content_url);</div><div class=\"line\">            activity.startActivity(intent);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 电话、短信、邮箱</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url.startsWith(WebView.SCHEME_TEL) || url.startsWith(<span class=\"string\">\"sms:\"</span>) || url.startsWith(WebView.SCHEME_MAILTO)) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">                intent.setData(Uri.parse(url));</div><div class=\"line\">                activity.startActivity(intent);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException ignored) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        iWebPageView.startProgress();</div><div class=\"line\">        view.loadUrl(url);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (activity.progress90) &#123;</div><div class=\"line\">            iWebPageView.hindProgressBar();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            activity.pageFinish = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!CheckNetwork.isNetworkConnected(activity)) &#123;</div><div class=\"line\">            iWebPageView.hindProgressBar();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// html加载完成之后，添加监听图片的点击js函数</span></div><div class=\"line\">        iWebPageView.addImageClickListener();</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 视频全屏播放按返回页面被放大的问题</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScaleChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">float</span> oldScale, <span class=\"keyword\">float</span> newScale)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onScaleChanged(view, oldScale, newScale);</div><div class=\"line\">        <span class=\"keyword\">if</span>(newScale - oldScale &gt; <span class=\"number\">7</span>) &#123;</div><div class=\"line\">            view.setInitialScale((<span class=\"keyword\">int</span>)(oldScale / newScale * <span class=\"number\">100</span>)); <span class=\"comment\">//异常放大，缩回去。</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为有很多配置，这里把各个功能模块通过接口<code>IWebPageView</code>分离了出来，这样逻辑更清晰。</p>\n<h3 id=\"与JS交互\"><a href=\"#与JS交互\" class=\"headerlink\" title=\"与JS交互\"></a>与JS交互</h3><p>相信大家已经看到了上面”—-点击了图片”的Toast，这里需要先给WebView设置JavascriptInterface：<br><code>webView.addJavascriptInterface(new ImageClickInterface(this), &quot;injectedObject&quot;);</code></p>\n<p>其中<code>ImageClickInterface</code>相关代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageClickInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageClickInterface</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">imageClick</span><span class=\"params\">(String imgUrl, String hasLink)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(context, <span class=\"string\">\"----点击了图片\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        <span class=\"comment\">// 查看大图</span></div><div class=\"line\"><span class=\"comment\">//        Intent intent = new Intent(context, ViewBigImageActivity.class);</span></div><div class=\"line\"><span class=\"comment\">//        intent.putStringArrayListExtra(\"imgUrl\",imgUrl);</span></div><div class=\"line\"><span class=\"comment\">//        context.startActivity(intent);</span></div><div class=\"line\"><span class=\"comment\">//        Log.e(\"----点击了图片 url: \", \"\" + imgUrl);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>加入监听：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addImageClickListener</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 这段js函数的功能就是，遍历所有的img节点，</span></div><div class=\"line\">       <span class=\"comment\">// 并添加onclick函数，函数的功能是在图片点击的时候调用本地java接口并传递对应src和has_link里的值过去</span></div><div class=\"line\">        webView.loadUrl(<span class=\"string\">\"javascript:(function()&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"var objs = document.getElementsByTagName(\\\"img\\\");\"</span> +</div><div class=\"line\">                <span class=\"string\">\"for(var i=0;i&lt;objs.length;i++)\"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#123;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"objs[i].onclick=function()&#123;window.injectedObject.imageClick(this.getAttribute(\\\"src\\\"),this.getAttribute(\\\"has_link\\\"));&#125;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#125;\"</span> +</div><div class=\"line\">                <span class=\"string\">\"&#125;)()\"</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>我们来看一下网页对应的源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"[./callsms_files/753b877c-c098-43e9-85cc-6df5bbdaaafe](./callsms_files/753b877c-c098-43e9-85cc-6df5bbdaaafe)\"</span> style=<span class=\"string\">\"width: 100%\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>大家可能觉得有点怪异..因为这是保存的本地网页，如是线上的话，是这样：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">'[http://7xk154.com1.z0.glb.clouddn.com/article/753b877c-c098-43e9-85cc-6df5bbdaaafe](http://7xk154.com1.z0.glb.clouddn.com/article/753b877c-c098-43e9-85cc-6df5bbdaaafe)'</span> style=<span class=\"string\">'width: 100%'</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>这里传递过去的是一个图片<code>url</code>的值，没有的属性传过去的则是null。这样我们就可以对其进行具体的操作了。</p>\n<h3 id=\"字体大小设置\"><a href=\"#字体大小设置\" class=\"headerlink\" title=\"字体大小设置\"></a>字体大小设置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** 设置字体默认缩放大小(改变网页字体大小,setTextSize  api14被弃用)*/</span></div><div class=\"line\">ws.setTextZoom(<span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>100</code>为默认缩放比，通过设置缩放比来控制字体大小。</p>\n</blockquote>\n<h3 id=\"上传图片-版本兼容-amp-全屏播放网络视频-amp-显示网页标题\"><a href=\"#上传图片-版本兼容-amp-全屏播放网络视频-amp-显示网页标题\" class=\"headerlink\" title=\"上传图片(版本兼容) &amp; 全屏播放网络视频 &amp; 显示网页标题\"></a>上传图片(版本兼容) &amp; 全屏播放网络视频 &amp; 显示网页标题</h3><p>这里因为篇幅原因，里面的代码很多，就不贴出来了，大家可以点击<a href=\"https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebChromeClient.java\" target=\"_blank\" rel=\"external\">MyWebChromeClient.java</a>，查看具体代码。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-59c17e13bb486d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440\" alt=\"上传图片.png\"></p>\n<h3 id=\"返回网页上一层\"><a href=\"#返回网页上一层\" class=\"headerlink\" title=\"返回网页上一层\"></a>返回网页上一层</h3><p>返回网页上一层及退出全屏等操作：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Overridepublic</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;    </div><div class=\"line\">  <span class=\"keyword\">if</span> (keyCode == KeyEvent.KEYCODE_BACK) &#123;        </div><div class=\"line\">      <span class=\"comment\">//全屏播放退出全屏        </span></div><div class=\"line\">      <span class=\"keyword\">if</span> (webChromeClient.inCustomView()) &#123;            </div><div class=\"line\">              hideCustomView();            </div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;            </div><div class=\"line\">        <span class=\"comment\">//返回网页上一页        </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (webView.canGoBack()) &#123;            </div><div class=\"line\">              webView.goBack();            </div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;            </div><div class=\"line\">         <span class=\"comment\">//退出网页        </span></div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;            </div><div class=\"line\">              webView.loadUrl(<span class=\"string\">\"about:blank\"</span>);            </div><div class=\"line\">              finish();        </div><div class=\"line\">        &#125;    </div><div class=\"line\">     &#125;    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"进度条设置\"><a href=\"#进度条设置\" class=\"headerlink\" title=\"进度条设置\"></a>进度条设置</h3><p>这里用的是先加载到90%再加载到100%, 具体为什么相信大家都懂吧…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 进度条 假装加载到90%</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startProgress90</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">900</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> progress = i + <span class=\"number\">1</span>;</div><div class=\"line\">            mProgressBar.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    mProgressBar.setProgress(progress);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (progress == <span class=\"number\">900</span>) &#123;</div><div class=\"line\">                        progress90 = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (pageFinish) &#123;</div><div class=\"line\">                            startProgress90to100();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;, (i + <span class=\"number\">1</span>) * <span class=\"number\">2</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>再加载到100%:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 加载到90%后再加载到100%</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">progressChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (progress90) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> progress = newProgress * <span class=\"number\">100</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (progress &gt; <span class=\"number\">900</span>) &#123;</div><div class=\"line\">                mProgressBar.setProgress(progress);</div><div class=\"line\">                <span class=\"keyword\">if</span> (progress == <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">                    mProgressBar.setVisibility(View.GONE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><blockquote>\n<p>如很多细节不知缘由的查看这里</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/webkit/WebSettings.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/webkit/WebSettings.html</a></li>\n<li><a href=\"http://www.jianshu.com/p/32d48ca7d0e0\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/32d48ca7d0e0</a></li>\n<li><a href=\"http://www.apkfuns.com/android-webview%E4%B8%8Ejavascript%E4%BA%A4%E4%BA%92.html\" target=\"_blank\" rel=\"external\">http://www.apkfuns.com/android-webview%E4%B8%8Ejavascript%E4%BA%A4%E4%BA%92.html</a></li>\n</ul>\n<h2 id=\"所遇问题\"><a href=\"#所遇问题\" class=\"headerlink\" title=\"所遇问题\"></a>所遇问题</h2><ul>\n<li><a href=\"http://blog.csdn.net/u013320868/article/details/52837671\" target=\"_blank\" rel=\"external\">WebView加载网页不显示图片解决办法</a></li>\n<li><a href=\"http://blog.csdn.net/guozhiganggang/article/details/52097975\" target=\"_blank\" rel=\"external\">webview: 视频全屏播放按返回页面被放大的问题</a></li>\n<li><a href=\"https://chromium.googlesource.com/chromium/src/+/dc26192a317d9511ce983fd4b26b1130fe25761a\" target=\"_blank\" rel=\"external\">Failed to init browser shader disk cache.</a></li>\n<li><a href=\"http://forum.xda-developers.com/showthread.php?t=2212632\" target=\"_blank\" rel=\"external\">EGL_BAD_DISPLAY</a></li>\n<li><a href=\"https://chromium.googlesource.com/chromium/src.git/+/46.0.2478.0/content/browser/android/java/gin_java_bridge_message_filter.cc\" target=\"_blank\" rel=\"external\">Unknown frame routing id: 3</a></li>\n<li>找不到assets目录下资源：注意assets在哪层文件夹下！与AndroidManifest.xml同级</li>\n<li>视频播放宽度比webview设置的宽度大，超过屏幕：设置ws.setLoadWithOverviewMode(false);</li>\n<li>onDestroy时的清除资源操作</li>\n</ul>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>最后再附一遍项目地址😆：<strong><a href=\"https://github.com/youlookwhat/WebViewStudy\" target=\"_blank\" rel=\"external\">WebViewStudy</a></strong></p>\n","categories":[],"tags":[]},{"title":"Android 关于Glide的拓展使用(高斯模糊、加载监听、圆角图片)","url":"http://jinbeen.com/2016/11/29/Android 关于Glide的使用(高斯模糊、加载监听、圆角图片)/","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-c373098272fca1e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1040\" alt=\"stackblur_default.png\"></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>引入的库应为如下，将官方的额外扩展了，使其可以支持高斯模糊。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'jp.wasabeef:glide-transformations:2.0.1'</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"加载图片\"><a href=\"#加载图片\" class=\"headerlink\" title=\"加载图片\"></a>加载图片</h2><h3 id=\"基本加载\"><a href=\"#基本加载\" class=\"headerlink\" title=\"基本加载\"></a>基本加载</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(url)</div><div class=\"line\">\t.into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"设置加载中和加载失败的情况\"><a href=\"#设置加载中和加载失败的情况\" class=\"headerlink\" title=\"设置加载中和加载失败的情况\"></a>设置加载中和加载失败的情况</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(url)</div><div class=\"line\">\t.placeholder(R.drawable.loading) <span class=\"comment\">//占位符 也就是加载中的图片，可放个gif</span></div><div class=\"line\">\t.error(R.drawable.failed) <span class=\"comment\">//失败图片</span></div><div class=\"line\">\t.into(view);</div></pre></td></tr></table></figure>\n<h3 id=\"只加载动画\"><a href=\"#只加载动画\" class=\"headerlink\" title=\"只加载动画\"></a>只加载动画</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(url)</div><div class=\"line\">\t.asGif() <span class=\"comment\">// 只能加载gif文件</span></div><div class=\"line\">\t.into(imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"添加图片淡入加载的效果\"><a href=\"#添加图片淡入加载的效果\" class=\"headerlink\" title=\"添加图片淡入加载的效果\"></a>添加图片淡入加载的效果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(url)</div><div class=\"line\">\t.placeholder(R.drawable.loading)</div><div class=\"line\">\t.error(R.drawable.failed) </div><div class=\"line\">\t.crossFade(<span class=\"number\">1000</span>) <span class=\"comment\">// 可设置时长，默认“300ms”</span></div><div class=\"line\">\t.into(view);</div></pre></td></tr></table></figure>\n<h3 id=\"加载高斯模糊图\"><a href=\"#加载高斯模糊图\" class=\"headerlink\" title=\"加载高斯模糊图\"></a>加载高斯模糊图</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(url)</div><div class=\"line\">\t.placeholder(R.drawable.loading)</div><div class=\"line\">\t.error(R.drawable.failed) </div><div class=\"line\">\t.crossFade(<span class=\"number\">1000</span>)</div><div class=\"line\">\t.bitmapTransform(<span class=\"keyword\">new</span> BlurTransformation(context,<span class=\"number\">23</span>,<span class=\"number\">4</span>))  <span class=\"comment\">// “23”：设置模糊度(在0.0到25.0之间)，默认”25\";\"4\":图片缩放比例,默认“1”。</span></div><div class=\"line\">\t.into(view);</div></pre></td></tr></table></figure>\n<h3 id=\"加载监听器RequestListener\"><a href=\"#加载监听器RequestListener\" class=\"headerlink\" title=\"加载监听器RequestListener\"></a>加载监听器RequestListener</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(<span class=\"keyword\">this</span>).load(internetUrl).listener(<span class=\"keyword\">new</span> RequestListener&lt;String, GlideDrawable&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onException</span><span class=\"params\">(Exception e, String model, Target&lt;GlideDrawable&gt; target, <span class=\"keyword\">boolean</span> isFirstResource)</span> </span>&#123;</div><div class=\"line\">                Toast.makeText(getApplicationContext(),<span class=\"string\">\"资源加载异常\"</span>,Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//这个用于监听图片是否加载完成</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, <span class=\"keyword\">boolean</span> isFromMemoryCache, <span class=\"keyword\">boolean</span> isFirstResource)</span> </span>&#123;</div><div class=\"line\">                Toast.makeText(getApplicationContext(),<span class=\"string\">\"图片加载完成\"</span>,Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).into(imageView);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果需要加载完成后设置图片透明度为0，则不能设置<code>.placeholder(R.drawable.url)</code>，否则达不到你想要的效果。</p>\n</blockquote>\n<h3 id=\"图片缓存机制\"><a href=\"#图片缓存机制\" class=\"headerlink\" title=\"图片缓存机制\"></a>图片缓存机制</h3><p>Glide缓存策略</p>\n<p>Glide默认开启磁盘缓存和内存缓存，当然也可以对单张图片进行设置特定的缓存策略。<br>设置图片不加入到内存缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with( context )</div><div class=\"line\">\t.load( eatFoodyImages[<span class=\"number\">0</span>] )</div><div class=\"line\">\t.skipMemoryCache( <span class=\"keyword\">true</span> )</div><div class=\"line\">\t.into( imageViewInternet );</div></pre></td></tr></table></figure>\n<p>设置图片不加入到磁盘缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with( context )</div><div class=\"line\">\t.load( eatFoodyImages[<span class=\"number\">0</span>] )</div><div class=\"line\">\t.diskCacheStrategy( DiskCacheStrategy.NONE )</div><div class=\"line\">\t.into( imageViewInternet );</div></pre></td></tr></table></figure>\n<p>Glide支持多种磁盘缓存策略：</p>\n<p>DiskCacheStrategy.NONE :不缓存图片<br>DiskCacheStrategy.SOURCE :缓存图片源文件<br>DiskCacheStrategy.RESULT:缓存修改过的图片<br>DiskCacheStrategy.ALL:缓存所有的图片，默认</p>\n<h3 id=\"加载圆角图片\"><a href=\"#加载圆角图片\" class=\"headerlink\" title=\"加载圆角图片\"></a>加载圆角图片</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideCircleTransform</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapTransformation</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GlideCircleTransform</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(BitmapPool pool, Bitmap toTransform, <span class=\"keyword\">int</span> outWidth, <span class=\"keyword\">int</span> outHeight)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> circleCrop(pool, toTransform);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">circleCrop</span><span class=\"params\">(BitmapPool pool, Bitmap source)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (source == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> size = Math.min(source.getWidth(), source.getHeight());</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (source.getWidth() - size) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (source.getHeight() - size) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"comment\">// TODO this could be acquired from the pool too</span></div><div class=\"line\">        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);</div><div class=\"line\">        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);</div><div class=\"line\">        <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Canvas canvas = <span class=\"keyword\">new</span> Canvas(result);</div><div class=\"line\">        Paint paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">        paint.setShader(<span class=\"keyword\">new</span> BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</div><div class=\"line\">        paint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">float</span> r = size / <span class=\"number\">2f</span>;</div><div class=\"line\">        canvas.drawCircle(r, r, r, paint);</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getClass().getName();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(mContext)</div><div class=\"line\">    .load(imageUrl)</div><div class=\"line\">    .transform(<span class=\"keyword\">new</span> GlideCircleTransform(mContext))</div><div class=\"line\">    .into(holder.imageView);</div></pre></td></tr></table></figure>\n<h3 id=\"获得图片缓存路径\"><a href=\"#获得图片缓存路径\" class=\"headerlink\" title=\"获得图片缓存路径\"></a>获得图片缓存路径</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getImagePath</span><span class=\"params\">(String imgUrl)</span> </span>&#123;    </div><div class=\"line\">      String path = <span class=\"keyword\">null</span>;    </div><div class=\"line\">      FutureTarget&lt;File&gt; future = Glide.with(ViewBigImageActivity.<span class=\"keyword\">this</span>)</div><div class=\"line\">             .load(imgUrl)</div><div class=\"line\">             .downloadOnly(<span class=\"number\">500</span>, <span class=\"number\">500</span>);    </div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;        </div><div class=\"line\">            File cacheFile = future.get();        </div><div class=\"line\">            path = cacheFile.getAbsolutePath();    </div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (InterruptedException | ExecutionException e) &#123; </div><div class=\"line\">            e.printStackTrace();    </div><div class=\"line\">     &#125;    </div><div class=\"line\">     <span class=\"keyword\">return</span> path;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：应在子线程中执行。</p>\n</blockquote>\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 子线程获得图片路径</span></div><div class=\"line\">        <span class=\"keyword\">final</span> String imagePath = getImagePath(imageUrl);</div><div class=\"line\">        <span class=\"comment\">// 主线程更新</span></div><div class=\"line\">        MainActivity.<span class=\"keyword\">this</span>.runOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 操作代码</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;).start();</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/zhihui_520/article/details/51822336\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zhihui_520/article/details/51822336</a></li>\n<li><a href=\"http://blog.csdn.net/u010694658/article/details/52689317\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u010694658/article/details/52689317</a></li>\n</ul>\n","categories":["Android"],"tags":["Android","开源库使用"]},{"title":"收集“新奇的网站”","url":"http://jinbeen.com/2016/11/23/收集“新奇的网站”/","content":"<h3 id=\"产品原型制作\"><a href=\"#产品原型制作\" class=\"headerlink\" title=\"产品原型制作\"></a>产品原型制作</h3><ul>\n<li><a href=\"https://www.sketchapp.com/\" target=\"_blank\" rel=\"external\">Sketch，最佳原型制作工具</a></li>\n<li><a href=\"https://dribbble.com/designers\" target=\"_blank\" rel=\"external\">Dribbble，养成一双发现并懂得美的眼睛(美图)</a></li>\n<li><a href=\"http://www.calltoidea.com/\" target=\"_blank\" rel=\"external\">新奇-Get quickly inspiration!（页面）</a></li>\n<li><a href=\"https://pixabay.com/\" target=\"_blank\" rel=\"external\">免费的高清图片</a></li>\n<li><a href=\"https://dribbble.com/\" target=\"_blank\" rel=\"external\">dribbble 全球最优质的设计作品聚集地</a></li>\n</ul>\n<h3 id=\"UI设计师推荐\"><a href=\"#UI设计师推荐\" class=\"headerlink\" title=\"UI设计师推荐\"></a>UI设计师推荐</h3><ul>\n<li><a href=\"http://www.zcool.com.cn/\" target=\"_blank\" rel=\"external\">站酷(ZCOOL)-设计师互动平台</a></li>\n<li><a href=\"http://www.woofeng.cn/\" target=\"_blank\" rel=\"external\">黄蜂网</a></li>\n<li><a href=\"http://www.ui.cn/\" target=\"_blank\" rel=\"external\">UI中国-专业界面交互平台</a></li>\n<li><a href=\"https://www.behance.net/\" target=\"_blank\" rel=\"external\">behance 展示和发现创意作品</a></li>\n<li><a href=\"http://www.xueui.cn/\" target=\"_blank\" rel=\"external\">学UI网</a><a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"颜色搭配及icon制作\"><a href=\"#颜色搭配及icon制作\" class=\"headerlink\" title=\"颜色搭配及icon制作\"></a>颜色搭配及icon制作</h3><ul>\n<li><a href=\"http://www.colorhunt.co/\" target=\"_blank\" rel=\"external\">ColorHunt-色彩搭配</a></li>\n<li><a href=\"https://romannurik.github.io/AndroidAssetStudio/icons-launcher.html\" target=\"_blank\" rel=\"external\">icon在线制作</a></li>\n<li><a href=\"http://www.iconfont.cn/plus\" target=\"_blank\" rel=\"external\">icon图标库</a></li>\n<li><a href=\"https://android-material-icon-generator.bitdroid.de/\" target=\"_blank\" rel=\"external\">MD的icon制作网站</a></li>\n<li><a href=\"http://www.sioe.cn/yingyong/yanse-rgb-16/\" target=\"_blank\" rel=\"external\">RGB颜色值转换成十六进制颜色码</a></li>\n</ul>\n<h3 id=\"GitHub美化\"><a href=\"#GitHub美化\" class=\"headerlink\" title=\"GitHub美化\"></a>GitHub美化</h3><ul>\n<li><a href=\"http://shields.io/\" target=\"_blank\" rel=\"external\">README的标签</a></li>\n<li><a href=\"https://github.com/fehmicansaglam/progressed.io\" target=\"_blank\" rel=\"external\">README的进度tag</a></li>\n<li><a href=\"http://ezgif.com/\" target=\"_blank\" rel=\"external\">mp4转gif</a></li>\n<li><a href=\"http://sspai.com/27937\" target=\"_blank\" rel=\"external\">带壳截图</a></li>\n</ul>\n<h3 id=\"移动应用分发\"><a href=\"#移动应用分发\" class=\"headerlink\" title=\"移动应用分发\"></a>移动应用分发</h3><ul>\n<li><a href=\"http://fir.im/\" target=\"_blank\" rel=\"external\">Fir.im</a></li>\n<li><a href=\"http://developer.wandoujia.com/\" target=\"_blank\" rel=\"external\">豌豆荚</a></li>\n<li><a href=\"http://developer.android.com/distribute/tools/launch-checklist.html\" target=\"_blank\" rel=\"external\">play store</a></li>\n</ul>\n","categories":["工具"],"tags":["工具","创意灵感"]},{"title":"可能是讲解Android事件分发最好的文章","url":"http://jinbeen.com/2016/11/22/可能是讲解Android事件分发最好的文章/","content":"<p>这是在简书上看到的一篇文章，感觉非常好，就转了过来，这是老外写的，这个作者翻译过来的。 综合之前在CSDN写过的一篇类似的文章[<a href=\"http://blog.csdn.net/jingbin_/article/details/52818301\" target=\"_blank\" rel=\"external\">Android 简述事件分发机制</a>]，差不多这个知识点就清晰了。</p>\n<blockquote>\n<p>我几乎看过国内讲解Android事件分发的所有文章，但遗憾的是都没有这篇讲的好，原因有二：它阐明了具体的事件分发机制的设计意图，让人既知其然，又知其所以然；它没有贴源码，吓唬本宝宝。所以我决定将它翻译出来，造福广大Android开发者。原文请点击<a href=\"http://balpha.de/2013/07/android-development-what-i-wish-i-had-known-earlier/\" target=\"_blank\" rel=\"external\">这里</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>有时，你必须要自己处理触摸事件（touch events）而不能依赖于有可用的onSomethingListener。我就遇到过这样的时候，当时我很想有一篇文章能简单地解释触摸事件是怎样在视图层次（view hierarchy）中传播的，从而可以将之作为进一步深入学习的起点。这篇博客是我的一次尝试，它看起来有点长，但这是因为我是按照触摸事件的传播过程一步一步来写的。</p>\n<h2 id=\"一些假设\"><a href=\"#一些假设\" class=\"headerlink\" title=\"一些假设\"></a>一些假设</h2><p>我们只考虑最重要的四个触摸事件，即：<strong>DOWN,MOVE,UP和CANCEL</strong>。<strong>一个手势（gesture）</strong>是一个事件列，以一个DOWN事件开始（当用户触摸屏幕时产生），后跟0个或多个MOVE事件（当用户四处移动手指时产生），最后跟一个单独的UP或CANCEL事件（当用户手指离开屏幕或者系统告诉你手势（gesture）由于其他原因结束时产生）。当我们说到“<strong>手势剩余部分</strong>”时指的是手势后续的MOVE事件和最后的UP或CANCEL事件。</p>\n<p>在这里我也不考虑多点触摸手势（我们只假设用一个手指）并且忽略多个MOVE事件可以被归为一组这一实际情况。最后，我们假设文中的view都没有注册onTouchListener。</p>\n<p>我们将要讨论的视图层次是这样的：最外层是一个ViewGroup A，包含一个或多个子view（children），其中一个子view是ViewGroup B，ViewGroupB中又包含一个或多个子view，其中一个子view是 View C,C不是一个ViewGroup。这里我们忽略同层级view之间可能的交叉叠加。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1371984-8cbcd729711f25ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"android-touch.png\"></p>\n<p>假设用户首先触摸到的屏幕上的点是C上的某个点，该点被标记为触摸点（touch point），DOWN事件就在该点产生。然后用户移动手指并最后离开屏幕，此过程中手指是否离开C的区域无关紧要，关键是手势（gesture）是从哪里开始的。</p>\n<h2 id=\"默认情况\"><a href=\"#默认情况\" class=\"headerlink\" title=\"默认情况\"></a>默认情况</h2><p>假设上面的A,B,C都没有覆写默认的事件传播行为，那么下面就是事件传播的过程：</p>\n<ul>\n<li>DOWN事件被传到C的onTouchEvent方法中，该方法返回false，表示“我不关心这个手势（gesture）”。</li>\n<li>因此，DOWN事件被传到B的onTouchEvent方法中，该方法同样返回false，表示B也不关心这个手势。</li>\n<li>同样，因为B不关心这个手势，DOWN事件被传到A的onTouchEvent方法中，该方法也返回false。</li>\n</ul>\n<p>由于没有view关心这个手势（gesture），它们将不再会从“手势剩余部分”中接收任何事件。</p>\n<h2 id=\"处理事件\"><a href=\"#处理事件\" class=\"headerlink\" title=\"处理事件\"></a>处理事件</h2><p>现在，让我们假设C实际上是关心这个手势（gesture）的，原因可能是C被设置成可点击的（clickable）或者你覆写了C的onTouchEvent方法。</p>\n<ul>\n<li>DOWN事件被传递给C的onTouchEvent方法，该方法可以做任何它想做的事情，最后返回true。</li>\n<li>因为C说它正在处理这个手势（gesture），则DOWN事件将不再被传递给B和A的onTouchEvent方法。</li>\n<li>因为C说它正在处理这个手势（gesture），所以“手势剩余部分”的事件也将传递给C的onTouchEvent方法，此时该方法返回true或false都无关紧要了，但是为保持一致最好还是返回true。</li>\n</ul>\n<p><strong>个人理解</strong>：从这里可以看出，各个View的onTouchEvent方法对DOWN事件的处理，代表了该View对以此DOWN开始的整个手势（gesture）的处理意愿，返回true代表愿意处理该gesture，返回false代表不愿意处理该gesture。</p>\n<h2 id=\"onInterceptTouchEvent\"><a href=\"#onInterceptTouchEvent\" class=\"headerlink\" title=\"onInterceptTouchEvent\"></a>onInterceptTouchEvent</h2><p>现在我们将讨论一个新的方法：onInterceptTouchEvent，它只存在于ViewGroup中，普通的View中没有这个方法。在任何一个view的onTouchEvent被调用之前，它的父辈们（ancestors）将先获得拦截这个事件的一次机会，换句话说，它们可以窃取该事件。在刚才的“处理事件”部分中，我们遗漏了这一过程，现在，让我们把它加上：</p>\n<ul>\n<li>DOWN事件被传给A的onInterceptTouchEvent，该方法返回false，表示它不想拦截。</li>\n<li>DOWN又被传递给B的onInterceptTouchEvent，它也不想拦截，因此该方法也返回false。</li>\n<li>现在，DOWN事件被传递到C的onTouchEvent方法，该方法返回true，因为它想处理以该事件为首的手势（gesture）。</li>\n<li>现在，该手势的下一个事件MOVE到来了。这个MOVE事件再一次被传递给A的onInterceptTouchEvent方法，该方法再一次返回false，B也同样如此。</li>\n<li>然后，MOVE事件被传递给C的onTouchEvent，就像在前一部分中一样。</li>\n<li>“手势剩余部分”中其他事件的处理过程和上面一样，假如A和B的onInterceptTouchEvent方法继续返回false的话。</li>\n</ul>\n<p>这里有两点需要注意：</p>\n<ul>\n<li>虽然ViewGroup A和B的onInterceptTouchEvent方法对DOWN事件返回了false，后续的事件依然会传递给它们的onInterceptTouchEvent方法，这一点与onTouchEvent的行为是不一样的。</li>\n<li>假如DOWN事件传给C的onTouchEvent方法时，它返回了false，DOWN事件会继续向上传递给B和A的onTouchEvent，即使它们在onInterceptTouchEvent方法中说它们不想拦截这个DOWN事件，但没办法，没有子View愿意处理该事件。</li>\n</ul>\n<p><strong>个人理解</strong>：感谢@编程世界的孩子 的提醒，由此可见，DOWN事件的处理实际上经历了一下一上两个过程，下是指A-&gt;B的onInterceptTouchEvent，上是指C-&gt;B-&gt;A的onTouchEvent，当然，任意一步的方法中返回true,都能阻止它继续传播。</p>\n<h2 id=\"拦截事件\"><a href=\"#拦截事件\" class=\"headerlink\" title=\"拦截事件\"></a>拦截事件</h2><p>现在，让我们更进一步，假设B没有拦截DOWN事件，但它拦截了接下来的MOVE事件。原因可能是B是一个scrolling view。当用户仅仅在它的区域内点击（tap）时，被点击到的元素应当能处理该点击事件。但是当用户手指移动了一定的距离后，就不能再视该手势（gesture）为点击了——很明显，用户是想scroll。这就是为什么B要接管该手势（gesture）。</p>\n<p>下面是事件被处理的顺序：</p>\n<ul>\n<li>DOWN事件被依次传到A和B的onInterceptTouchEvent方法中，它们都返回的false，因为它们目前还不想拦截。</li>\n<li>DOWN事件传递到C的onTouchEvent方法，返回了true。</li>\n<li>在后续到来MOVE事件时，A的onInterceptTouchEvent方法仍然返回false。</li>\n<li>B的onInterceptTouchEvent方法收到了该MOVE事件，此时B注意到用户手指移动距离已经超过了一定的threshold（或者称为slop）。因此，B的onInterceptTouchEvent方法决定返回true，从而接管该手势（gesture）后续的处理。</li>\n<li>然后，这个MOVE事件将会被系统变成一个CANCEL事件，这个CANCEL事件将会传递给C的onTouchEvent方法。</li>\n<li>现在，又来了一个MOVE事件，它被传递给A的onInterceptTouchEvent方法，A还是不关心该事件，因此onInterceptTouchEvent方法继续返回false。</li>\n<li>此时，该MOVE事件将不会再传递给B的onInterceptTouchEvent方法，该方法一旦返回一次true，就再也不会被调用了。事实上，该MOVE以及“手势剩余部分”都将传递给B的onTouchEvent方法（除非A决定拦截“手势剩余部分”）。</li>\n<li><p>C再也不会收到该手势（gesture）产生的任何事件了。</p>\n<p>下面的一些小事情可能会令你感到吃惊：</p>\n</li>\n<li><p>如果一个ViewGroup拦截了最初的DOWN事件，该事件仍然会传递到该ViewGroup的onTouchEvent方法中。</p>\n</li>\n<li>另一方面，如果ViewGroup拦截了一个半路的事件（比如，MOVE），这个事件将会被系统变成一个CANCEL事件，并传递给之前处理该手势（gesture）的子View，而且不会再传递（无论是被拦截的MOVE还是系统生成的CANCEL）给ViewGroup的onTouchEvent方法。只有再到来的事件才会传递到ViewGroup的onTouchEvent方法中。</li>\n</ul>\n<p>从此开始，你可以更进一步。比如对mouthful-method （实在不知道该怎么翻译啦！）requestDisallowInterceptTouchEvent,C可以用该方法阻止B窃取事件。如果你想更加疯狂一点，你可以在你自己的ViewGroup中直接覆写dispatchTouchEvent方法，并对传递进来的事件做任何你想做的处理。但这样的话你可能会破坏一些约定，所以应当小心。</p>\n<p>文／milter（简书作者)<br>原文链接：<a href=\"http://www.jianshu.com/p/2be492c1df96\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/2be492c1df96</a></p>\n","categories":["Android"],"tags":["Android","Android基础知识点"]},{"title":"Mac搭建Hexo博客流程记录，排雷完成","url":"http://jinbeen.com/2016/11/19/Mac搭建Hexo博客流程记录，排雷完成/","content":"<p>经过一天的辛苦作战，总算基础的东西出来了。踩了太多的坑，综合我踩坑的经过，明白到，选好一篇引导文很重要！有些步骤不要先做了，不然后面会把你坑的很惨..</p>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>很多博客都已经详细讲述了Hexo博客框架的好处和怎么做，下面的<a href=\"#jump\">推荐文章</a>里会给出链接。但有些过于复杂，让初次配置的人有点雨里雾里；有些又太简单，出了问题就会不知道怎么回事。下面是自己的搭建记录，及<a href=\"#ask\">所遇问题的解决</a>。</p>\n<p>在此感谢<a href=\"https://madongqiang2201.github.io/\" target=\"_blank\" rel=\"external\">小马哥Mark</a>和 <a href=\"http://wingjay.com/\" target=\"_blank\" rel=\"external\">wingjay</a>先前分享的教程，有些段落是从你们里搬运过来的，希望博主见谅，如有侵权，请联系我删除。</p>\n<p>Ok，现在开始：</p>\n<a id=\"more\"></a>\n<h2 id=\"GitHub-Pages\"><a href=\"#GitHub-Pages\" class=\"headerlink\" title=\"GitHub Pages\"></a>GitHub Pages</h2><p>在不购买服务器的前提下，我们的网站需要挂在GitHub Pages上。GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，可用于搭建个人博客。</p>\n<ul>\n<li>首先你需要拥有一个<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>账号。</li>\n<li>然后进入<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">GitHub Pages</a>，一步步做，完成后就能在浏览器打开<code>http://username.github.io</code>了。</li>\n</ul>\n<p>至此，我们已经利用GitHub Pages搭建好了个人博客雏形了。下面要做的，就是个性化了。</p>\n<blockquote>\n<p>注意：如果你<code>http://username.github.io</code>首页就要是博客首页的话，建议初次配置选择首页，就是<a href=\"http://jinbeen.com\">这样</a>。完成后可以把<code>index.html</code>给删了，因为到最后你发现那是没用的，它将会给你造成干扰。</p>\n</blockquote>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>参考<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">中文文档</a>或<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">英文文档</a>。完成该步后，你的电脑便拥有了Git、Node.js和Hexo。</p>\n<h3 id=\"测试安装状态\"><a href=\"#测试安装状态\" class=\"headerlink\" title=\"测试安装状态\"></a>测试安装状态</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v</div><div class=\"line\"> v4.2.4</div><div class=\"line\"></div><div class=\"line\">$ npm -v</div><div class=\"line\"><span class=\"number\">2.14</span>.12</div><div class=\"line\"></div><div class=\"line\">$ hexo -v</div></pre></td></tr></table></figure>\n<h2 id=\"正式开始\"><a href=\"#正式开始\" class=\"headerlink\" title=\"正式开始\"></a>正式开始</h2><p>确定拥有了Git、Node.js和Hexo后，进行下一步：</p>\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<p> 新建完成后，指定文件夹的目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure>\n<p>这样Hexo会在该文件夹创建本地博客所需的一切资源。这样本地博客就搭建好了，输入以下命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s --debug <span class=\"comment\">// 启动本地hexo 服务器，默认localhost:4000可以访问，可以看到调试信息</span></div></pre></td></tr></table></figure>\n<p>这样就开启了一个本地博客服务器，打开浏览器，在地址栏输入<code>localhost:4000</code>，就可以查看本地博客了，hexo默认生成了一片hello world博客。出现问题可以看terminal终端错误信息。按<code>control + c</code>关闭调试。</p>\n<blockquote>\n<p>注意：以上hexo开头的命令，执行目录必须是你创建的博客文件夹目录。使用hexo s 也可以，只是没有了调试信息。</p>\n</blockquote>\n<h3 id=\"同步Hexo博客到Github\"><a href=\"#同步Hexo博客到Github\" class=\"headerlink\" title=\"同步Hexo博客到Github\"></a>同步Hexo博客到Github</h3><p>现在你已经可以在本机查看你的博客了，但是要想让别人通过网络可以查看你的博客，还需要一步，那就是将你的博客发布到github仓库。在terminal终端，将当前目录切换到你的本地博客目录，执行以下命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>安装完成之后，打开本地博客目录的<code>_config.yml</code>文件，编辑其中的<code>deploy</code>节点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https:<span class=\"comment\">//github.com/youlookwhat/youlookwhat.github.io.git</span></div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：字段前需加空格，hexo有严格的格式规范。</p>\n</blockquote>\n<p>保存配置之后，你可以不着急传到仓库，先刷新本地博客，看是否还是原样，如有问题可以看到terminal终端上的错误信息，然后检查没问题为止。</p>\n<p>确认无误之后，在本地博客目录执行以下命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\">// clean本地项目，防止缓存</span></div><div class=\"line\">hexo g <span class=\"comment\">// 全拼是：hexo generate，可以简写成 hexo g; 根据你编辑的md格式的博客，生成静态网页</span></div><div class=\"line\">hexo d  <span class=\"comment\">// 全拼是：hexo deploy，可以简写成 hexo d; 将本地博客发布到github</span></div></pre></td></tr></table></figure>\n<p>然后，在浏览器地址栏输入<code>username.github.io</code>就可以访问你的博客了，别人也可以通过这个地址访问你的博客。如果错误请重复看以前流程，或参考其他文章，也可以<a href=\"#here\">联系我</a>.</p>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><ul>\n<li><a href=\"http://theme-next.iissnan.com/getting-started.html#validate-next-theme\" target=\"_blank\" rel=\"external\">Next主题</a></li>\n</ul>\n<p>Hexo主题非常多，可以参考<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">丰富多彩的Hexo主题</a>，本文选Next为主题，NexT主题是一套简约的主题，设置完成之后，就像我的博客现在的样子，里面有详细的配置说明，这里就不重述了。</p>\n<p>配置后调试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s --debug</div></pre></td></tr></table></figure>\n<p>确认无误后上传：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：因为hexo有严格的格式规范，所以建议配置时及时调试页面。</p>\n</blockquote>\n<h2 id=\"优化环节\"><a href=\"#优化环节\" class=\"headerlink\" title=\"优化环节\"></a>优化环节</h2><ul>\n<li>域名设置</li>\n<li><a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">fork me on github</a></li>\n<li>配置SSH key</li>\n<li>给博文添加tag和分类(<a href=\"http://theme-next.iissnan.com/theme-settings.html#author-sites\" target=\"_blank\" rel=\"external\">主题</a>)</li>\n<li>手动实现某条博文置顶</li>\n</ul>\n<h3 id=\"域名设置\"><a href=\"#域名设置\" class=\"headerlink\" title=\"域名设置\"></a>域名设置</h3><p>大家可以看：<a href=\"http://wingjay.com/2015/12/07/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%A4%A9%E4%B9%8B%E5%86%85%E6%90%AD%E5%BB%BA%E4%BB%A5%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%90%8D%E5%AD%97%E4%B8%BA%E5%9F%9F%E5%90%8D%E7%9A%84%E5%BE%88cool%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"external\">替换自己的域名</a> ,里面讲述的详细。</p>\n<blockquote>\n<p>注意：在<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"external\">万网</a>买了域名以后直接在里面配置，<a href=\"http://www.sudu.cn/service/detail/1/0/0/3/10036.html\" target=\"_blank\" rel=\"external\">这里</a>只是参考用的。</p>\n</blockquote>\n<h3 id=\"其它四条\"><a href=\"#其它四条\" class=\"headerlink\" title=\"其它四条\"></a>其它四条</h3><p>大家可以看：<a href=\"https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"external\">其他遗漏的点</a> </p>\n<blockquote>\n<p>注意：配置后进入调试模式测试一下，这样错了就可以马上更正。</p>\n</blockquote>\n<h3 id=\"实现https访问\"><a href=\"#实现https访问\" class=\"headerlink\" title=\"实现https访问\"></a>实现https访问</h3><blockquote>\n<p>2018年3月16日补</p>\n</blockquote>\n<p><a href=\"https://www.cloudflare.com/a/dns/jinbeen.com\" target=\"_blank\" rel=\"external\">CloudFlare</a>是一家CDN提供商，它提供了免费的https服务(但不是应用SSL证书)。<br>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.itswincer.com/posts/444a2b9d/\" target=\"_blank\" rel=\"external\">自定义域名的 GitHub Pages 添加 SSL 的方案</a></li>\n<li><a href=\"https://wanghaodi.top/2018/02/25/Github-pages%E6%88%96%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%BF%E9%97%AE/\" target=\"_blank\" rel=\"external\">Github-pages或个人域名实现https访问</a></li>\n<li><a href=\"https://www.jianshu.com/p/92b6d4a6ecd5\" target=\"_blank\" rel=\"external\">为自定义域名的GitHub Pages添加SSL 完整方案</a></li>\n</ul>\n<blockquote>\n<p>注意:1.需要在<a href=\"https://netcn.console.aliyun.com/core/domain/list?spm=a2c1d.8251892.0.0.720252f29AF3kq\" target=\"_blank\" rel=\"external\">阿里云服务器</a>里更改NDS服务器地址，原来地址为<code>dns15.hichina.com ; dns16.hichina.com</code></p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1354448-d8df7bc3e5a1e130.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"NDS修改\"></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p> cd 到仓库所在文件夹目录下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init       <span class=\"comment\">//在指定目录执行该命令，会将当前目录初始化为hexo站点，生成hexo站点所需的一切文件</span></div><div class=\"line\">hexo <span class=\"keyword\">new</span> “my <span class=\"keyword\">new</span> blog title”   <span class=\"comment\">//新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span></div><div class=\"line\">hexo s --debug    <span class=\"comment\">// 启动本地hexo 服务器，默认localhost:4000可以访问</span></div><div class=\"line\">hexo clean      <span class=\"comment\">// 清除缓存，如果对本地文件做了修改，同步到远程验证修改的效果之前，先clean，清除缓存</span></div><div class=\"line\">hexo generate   <span class=\"comment\">// 可以简写成hexo g 根据markdown文件生成静态文件</span></div><div class=\"line\">hexo deploy     <span class=\"comment\">// 或者简写成hexo d 将本地修改，部署到远端</span></div><div class=\"line\">hexo version    <span class=\"comment\">// 显示hexo版本</span></div></pre></td></tr></table></figure>\n<h2 id=\"推荐文章\"><a href=\"#推荐文章\" class=\"headerlink\" title=\"推荐文章\"></a><span id=\"jump\">推荐文章</span></h2><ul>\n<li><a href=\"https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"external\">Mac搭建Hexo博客及NexT主题配置优化</a></li>\n<li><a href=\"http://wingjay.com/2015/12/07/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%A4%A9%E4%B9%8B%E5%86%85%E6%90%AD%E5%BB%BA%E4%BB%A5%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%90%8D%E5%AD%97%E4%B8%BA%E5%9F%9F%E5%90%8D%E7%9A%84%E5%BE%88cool%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"external\">如何在一天之内搭建以你自己名字为域名又具备cool属性的个人博客</a></li>\n<li><a href=\"http://www.jianshu.com/p/1cd86fac2585\" target=\"_blank\" rel=\"external\">使用GitHub和Hexo搭建免费静态Blog</a></li>\n<li><a href=\"http://www.arao.me/2015/hexo-next-theme-optimize-base/#为你的hexo网站NexT主题增加留言页\" target=\"_blank\" rel=\"external\">动动手指，NexT主题与Hexo更搭哦（基础篇）</a></li>\n</ul>\n<h2 id=\"所遇问题\"><a href=\"#所遇问题\" class=\"headerlink\" title=\"所遇问题\"></a><span id=\"ask\">所遇问题</span></h2><ul>\n<li>按照步骤来，及时调试，确认无误后再执行下一步。有一句话说的好，步子跨大了容易扯着蛋。</li>\n<li>建议将基础的先搭建出来，主题细节可以之后再慢慢配置。</li>\n<li>编辑站点<code>_config.yml</code>文件其中的<code>deploy</code>节点时，注意<code>repo</code>的值。</li>\n<li>替换域名时：<ul>\n<li>直接在万维网设置解析方式；</li>\n<li>在仓库Setting的要设置跳转链接；</li>\n<li>CNAME会被覆盖，安装CNAME工具<a href=\"https://github.com/leecrossley/hexo-generator-cname\" target=\"_blank\" rel=\"external\">hexo-generator-cname</a></li>\n</ul>\n</li>\n<li>为博客文章添加阅读量统计功能，参照<a href=\"http://www.tuicool.com/articles/EbquI3B\" target=\"_blank\" rel=\"external\">这里</a>，注意顺序，我在其中被坑过。</li>\n<li>设置网站图标时，就是上传“.ico”文件时，确认成功后浏览器会有缓存，显示不出来，关掉浏览器清除缓存就好了（可放在最后）。</li>\n<li>设置代码高亮主题测试时没事，上传后会有延迟，等等就好了（本人这样）。</li>\n<li>设置搜索栏，进入<a href=\"https://swiftype.com/users/sign_up\" target=\"_blank\" rel=\"external\">swiftype官网</a>，注册不上，应该收费了- -.</li>\n<li>设置侧边栏社交链接时，<code>social:</code><strong>下面字段前要有两个空格，切记</strong>。</li>\n</ul>\n<h2 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h2><p><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">NexT</a>、<a href=\"http://youlookwhat.duoshuo.com/admin/\" target=\"_blank\" rel=\"external\">多说</a>、<a href=\"http://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"external\">百度统计</a>、<a href=\"https://leancloud.cn/app.html#/general\" target=\"_blank\" rel=\"external\">leancloud</a>、<a href=\"https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fhome.console.aliyun.com%2Fnew#/\" target=\"_blank\" rel=\"external\">阿里云</a>、<a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">fork me</a>、<a href=\"http://www.ico.la/\" target=\"_blank\" rel=\"external\">ico制作</a>、<a href=\"https://www.cloudflare.com/a/dns/jinbeen.com\" target=\"_blank\" rel=\"external\">Cloudflare</a></p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a><span id=\"here\">联系我</span></h2><ul>\n<li><a href=\"http://www.jianshu.com/users/e43c6e979831/latest_articles\" target=\"_blank\" rel=\"external\">我的简书</a></li>\n<li><a href=\"http://blog.csdn.net/jingbin_\" target=\"_blank\" rel=\"external\">我的CSDN</a></li>\n<li><a href=\"https://github.com/youlookwhat\" target=\"_blank\" rel=\"external\">我的个人博客</a></li>\n</ul>\n","categories":["hexo"],"tags":["hexo"]},{"title":"java 常用十种设计模式示例归纳 | 已打包请带走","url":"http://jinbeen.com/2016/11/14/java-常用十种设计模式示例归纳-已打包请带走/","content":"<blockquote>\n<p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p>\n</blockquote>\n<h2 id=\"GitHub地址\"><a href=\"#GitHub地址\" class=\"headerlink\" title=\"GitHub地址\"></a>GitHub地址</h2><p><strong><a href=\"https://github.com/youlookwhat/DesignPattern\" target=\"_blank\" rel=\"external\">DesignPattern</a></strong></p>\n<a id=\"more\"></a>\n<h2 id=\"文章说明\"><a href=\"#文章说明\" class=\"headerlink\" title=\"文章说明\"></a>文章说明</h2><p>一个Demo，集合常用的十种设计模式，每个模式使用易被人们接受的案例讲述，按模式分包，使用设计模式前后对比，界面显示定义讲解，让你更深刻的了解每种设计模式。<br>大部分案例来自张鸿洋的博客。如有错误欢迎指正，如有侵权，请联系我删除。</p>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-75e0400e5030b406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340\" alt=\"包结构.png\"></p>\n<h2 id=\"设计模式分为三种类型，共23种：\"><a href=\"#设计模式分为三种类型，共23种：\" class=\"headerlink\" title=\"设计模式分为三种类型，共23种：\"></a>设计模式分为三种类型，共23种：</h2><ul>\n<li><strong>创建型模式</strong>：<a href=\"https://github.com/youlookwhat/DesignPattern#3-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">单例模式</a>、抽象工厂模式、建造者模式、<a href=\"https://github.com/youlookwhat/DesignPattern#2-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">工厂模式</a>、原型模式。</li>\n<li><strong>结构型模式</strong>：<a href=\"https://github.com/youlookwhat/DesignPattern#5-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">适配器模式</a>、桥接模式、<a href=\"https://github.com/youlookwhat/DesignPattern#7-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">装饰模式</a>、组合模式、<a href=\"https://github.com/youlookwhat/DesignPattern#8-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">外观模式</a>、享元模式、代理模式。</li>\n<li><strong>行为型模式</strong>：<a href=\"https://github.com/youlookwhat/DesignPattern#9-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">模版方法模式</a>、<a href=\"https://github.com/youlookwhat/DesignPattern#6-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">命令模式</a>、迭代器模式、<a href=\"https://github.com/youlookwhat/DesignPattern#1-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">观察者模式</a>、中介者模式、备忘录模式、解释器模式、<a href=\"https://github.com/youlookwhat/DesignPattern#10-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">状态模式</a>、<a href=\"https://github.com/youlookwhat/DesignPattern#4-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"external\">策略模式</a>、职责链模式(责任链模式)、访问者模式。</li>\n</ul>\n<blockquote>\n<p>上面链接点击直接跳转到GitHub对应模式解析内</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-e24cff0135c9deaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"MainActivity.png\"></p>\n<h2 id=\"博客目录\"><a href=\"#博客目录\" class=\"headerlink\" title=\"博客目录\"></a>博客目录</h2><ul>\n<li>1 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/24179699\" target=\"_blank\" rel=\"external\">设计模式 观察者模式(Observer Pattern) 以微信公众服务为例</a></li>\n<li>2 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/24460585\" target=\"_blank\" rel=\"external\">设计模式 工厂模式(Factory Pattern) 从卖肉夹馍说起</a></li>\n<li>3 . <a href=\"http://blog.csdn.net/dmk877/article/details/50311791\" target=\"_blank\" rel=\"external\">设计模式 单例设计模式(Singleton Pattern) 完全解析</a></li>\n<li>4 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/24116745\" target=\"_blank\" rel=\"external\">设计模式 策略模式(Strategy Pattern) 以角色游戏为背景</a></li>\n<li>5 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/25833393\" target=\"_blank\" rel=\"external\">设计模式 适配器模式(Adapter Pattern) 以手机充电器为例</a></li>\n<li>6 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/24602057\" target=\"_blank\" rel=\"external\">设计模式 命令模式(Command Pattern) 管理智能家电</a></li>\n<li>7 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/24269409\" target=\"_blank\" rel=\"external\">设计模式 装饰者模式(Decorator Pattern) 带你重回传奇世界</a></li>\n<li>8 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/25837275\" target=\"_blank\" rel=\"external\">设计模式 外观模式(Facade Pattern) 一键电影模式</a></li>\n<li>9 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/26276093\" target=\"_blank\" rel=\"external\">设计模式 模版方法模式(TemplateMethod Pattern) 展现程序员的一天</a></li>\n<li>10 . <a href=\"http://blog.csdn.net/lmj623565791/article/details/26350617\" target=\"_blank\" rel=\"external\">设计模式 状态模式(State Pattern) 以自动售货机为例</a></li>\n</ul>\n<h2 id=\"对应模式所在的包\"><a href=\"#对应模式所在的包\" class=\"headerlink\" title=\"对应模式所在的包\"></a>对应模式所在的包</h2><blockquote>\n<ul>\n<li>1 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/observer\" target=\"_blank\" rel=\"external\">Observer</a></li>\n<li>2 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/factory\" target=\"_blank\" rel=\"external\">Factory</a></li>\n<li>3 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/singleton\" target=\"_blank\" rel=\"external\">Singleton</a></li>\n<li>4 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/strategy\" target=\"_blank\" rel=\"external\">Strategy</a></li>\n<li>5 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/adapter\" target=\"_blank\" rel=\"external\">Adapter</a></li>\n<li>6 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/command\" target=\"_blank\" rel=\"external\">Command</a></li>\n<li>7 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/decorator\" target=\"_blank\" rel=\"external\">Decorator</a></li>\n<li>8 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/facade\" target=\"_blank\" rel=\"external\">Facade</a></li>\n<li>9 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/templatemethod\" target=\"_blank\" rel=\"external\">Template Method</a></li>\n<li>10 . <a href=\"https://github.com/youlookwhat/DesignPattern/tree/master/app/src/main/java/com/example/jingbin/designpattern/state\" target=\"_blank\" rel=\"external\">State</a></li>\n</ul>\n</blockquote>\n<h2 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h2><h3 id=\"1-观察者模式\"><a href=\"#1-观察者模式\" class=\"headerlink\" title=\"1. 观察者模式\"></a>1. 观察者模式</h3><blockquote>\n<p>定义了对象之间的一对多的依赖，这样一来，当一个对象改变时，它的所有的依赖者都会收到通知并自动更新。</p>\n</blockquote>\n<ul>\n<li><p>对于JDK或者Andorid中都有很多地方实现了观察者模式，比如XXXView.addXXXListenter ， 当然了 XXXView.setOnXXXListener不一定是观察者模式，因为观察者模式是一种一对多的关系，对于setXXXListener是1对1的关系，应该叫回调。</p>\n</li>\n<li><p>专题接口：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/observer/interfaces/Subject.java\" target=\"_blank\" rel=\"external\">Subject.java</a> ;  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 注册一个观察者</div><div class=\"line\">  */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer observer)</span></span>;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 移除一个观察者</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer observer)</span></span>;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通知所有观察者</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>3D服务号的实现类：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/observer/classs/ObjectFor3D.java\" target=\"_blank\" rel=\"external\">ObjectFor3D.java</a></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer observer)</span> </span>&#123;</div><div class=\"line\">      observers.add(observer);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer observer)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> index = observers.indexOf(observer);</div><div class=\"line\">      <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          observers.remove(index);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</div><div class=\"line\">          observer.update(msg);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 主题更新信息</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">      notifyObservers();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>所有观察者需要实现此接口:<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/observer/interfaces/Observer.java\" target=\"_blank\" rel=\"external\">Observer.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ObserverUser1</span><span class=\"params\">(Subject subject)</span> </span>&#123;</div><div class=\"line\">       subject.registerObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String msg)</span> </span>&#123;</div><div class=\"line\">       Log.e(<span class=\"string\">\"-----ObserverUser1 \"</span>, <span class=\"string\">\"得到 3D 号码:\"</span> + msg + <span class=\"string\">\", 我要记下来。 \"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>最后测试：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/observer/ObserverActivity.java\" target=\"_blank\" rel=\"external\">ObserverActivity.java</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建服务号</span></div><div class=\"line\">   objectFor3D = <span class=\"keyword\">new</span> ObjectFor3D();</div><div class=\"line\">   <span class=\"comment\">// 创建两个订阅者</span></div><div class=\"line\">   observerUser1 = <span class=\"keyword\">new</span> ObserverUser1(objectFor3D);</div><div class=\"line\">   observerUser2 = <span class=\"keyword\">new</span> ObserverUser2(objectFor3D);</div><div class=\"line\">   <span class=\"comment\">// 两个观察者,发送两条信息</span></div><div class=\"line\">   objectFor3D.setMsg(<span class=\"string\">\"201610121 的3D号为:127\"</span>);</div><div class=\"line\">   objectFor3D.setMsg(<span class=\"string\">\"20161022 的3D号为:000\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h3><p>简单列一下这个模式的家族：</p>\n<ul>\n<li><p><strong>1、静态工厂模式</strong></p>\n<ul>\n<li>这个最常见了，项目中的辅助类，TextUtil.isEmpty等，类+静态方法。</li>\n</ul>\n</li>\n<li><p><strong>2、简单工厂模式（店里买肉夹馍）</strong></p>\n<ul>\n<li>定义：通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</li>\n<li><p>根据类型直接创建肉夹馍：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/factory/jdgc/SimpleRoujiaMoFactory.java\" target=\"_blank\" rel=\"external\">SimpleRoujiaMoFactory.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RoujiaMo <span class=\"title\">creatRoujiaMo</span><span class=\"params\">(String type)</span> </span>&#123;</div><div class=\"line\">       RoujiaMo roujiaMo = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">\"Suan\"</span>:</div><div class=\"line\">               roujiaMo = <span class=\"keyword\">new</span> ZSuanRoujiaMo();</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">\"La\"</span>:</div><div class=\"line\">               roujiaMo = <span class=\"keyword\">new</span> ZLaRoujiaMo();</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">\"Tian\"</span>:</div><div class=\"line\">               roujiaMo = <span class=\"keyword\">new</span> ZTianRoujiaMo();</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">default</span>:<span class=\"comment\">// 默认为酸肉夹馍</span></div><div class=\"line\">               roujiaMo = <span class=\"keyword\">new</span> ZSuanRoujiaMo();</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> roujiaMo;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>3、工厂方法模式（开分店）</strong></p>\n<ul>\n<li>定义：定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法模式把类实例化的过程推迟到子类。</li>\n<li><p>对比定义：</p>\n<ul>\n<li>1、定义了创建对象的一个接口：public abstract RouJiaMo sellRoujiaMo(String type);</li>\n<li>2、由子类决定实例化的类，可以看到我们的馍是子类生成的。</li>\n<li>提供创建肉夹馍店抽象方法：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/factory/gcff/RoujiaMoStore.java\" target=\"_blank\" rel=\"external\">RoujiaMoStore.java</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> RoujiaMo <span class=\"title\">sellRoujiaMo</span><span class=\"params\">(String type)</span></span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>具体实现抽象方法：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/factory/gcff/XianRoujiaMoStore.java\" target=\"_blank\" rel=\"external\">XianRoujiaMoStore.java</a></li>\n<li>分店依旧使用简单工厂模式：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/factory/gcff/XianSimpleRoujiaMoFactory.java\" target=\"_blank\" rel=\"external\">XianSimpleRoujiaMoFactory.java</a></li>\n</ul>\n<ul>\n<li><p><strong>4、抽象工厂模式（使用官方提供的原料）</strong></p>\n<ul>\n<li>定义：提供一个接口，用于创建相关的或依赖对象的家族，而不需要明确指定具体类。</li>\n<li>对比定义：<ul>\n<li>1、提供一个接口：public interface RouJiaMoYLFactroy</li>\n<li>2、用于创建相关的或依赖对象的家族 public Meat createMeat();public YuanLiao createYuanliao();我们接口用于创建一系列的原材料。</li>\n</ul>\n</li>\n<li>创建用于提供原料的接口工厂：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/factory/cxgc/RoujiaMoYLFactory.java\" target=\"_blank\" rel=\"external\">RoujiaMoYLFactory.java</a></li>\n<li>各自分店实现接口，完成原料提供：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/factory/cxgc/XianRoujiaMoYLFoctory.java\" target=\"_blank\" rel=\"external\">XianRoujiaMoYLFoctory.java</a></li>\n<li><p>准备时，使用官方的原料：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/factory/cxgc/RoujiaMo.java\" target=\"_blank\" rel=\"external\">RoujiaMo.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">      * 准备工作</div><div class=\"line\">      */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(RoujiaMoYLFactory roujiaMoYLFactory)</span> </span>&#123;</div><div class=\"line\">      \tMeet meet = roujiaMoYLFactory.creatMeet();</div><div class=\"line\">      \tYuanLiao yuanLiao = roujiaMoYLFactory.creatYuanLiao();</div><div class=\"line\">      \tLog.e(<span class=\"string\">\"---RoujiaMo:\"</span>, <span class=\"string\">\"使用官方的原料 ---\"</span> + name + <span class=\"string\">\": 揉面-剁肉-完成准备工作 yuanLiao:\"</span>+meet+<span class=\"string\">\"yuanLiao:\"</span>+yuanLiao);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-单例设计模式\"><a href=\"#3-单例设计模式\" class=\"headerlink\" title=\"3. 单例设计模式\"></a>3. 单例设计模式</h3><blockquote>\n<p> 单例模式主要是为了避免因为创建了多个实例造成资源的浪费，且多个实例由于多次调用容易导致结果出现错误，而<strong>使用单例模式能够保证整个应用中有且只有一个实例</strong>。</p>\n</blockquote>\n<ul>\n<li>定义：只需要三步就可以保证对象的唯一性<ul>\n<li>(1) 不允许其他程序用new对象</li>\n<li>(2) 在该类中创建对象</li>\n<li>(3) 对外提供一个可以让其他程序获取该对象的方法</li>\n</ul>\n</li>\n<li>对比定义：<ul>\n<li>(1) 私有化该类的构造函数</li>\n<li>(2) 通过new在本类中创建一个本类对象</li>\n<li>(3) 定义一个公有的方法，将在该类中所创建的对象返回</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>饿汉式[可用]：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/singleton/ehan/SingletonEHan.java\" target=\"_blank\" rel=\"external\">SingletonEHan.java</a></li>\n<li><p>含懒汉式[双重校验锁 推荐用]：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/singleton/lanhan/SingletonLanHan.java\" target=\"_blank\" rel=\"external\">SingletonLanHan.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLanHan</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonLanHan singletonLanHanFour;</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonLanHan <span class=\"title\">getSingletonLanHanFour</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (singletonLanHanFour == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t        <span class=\"keyword\">synchronized</span> (SingletonLanHan.class) &#123;</div><div class=\"line\">\t            <span class=\"keyword\">if</span> (singletonLanHanFour == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t                singletonLanHanFour = <span class=\"keyword\">new</span> SingletonLanHan();</div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> singletonLanHanFour;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>内部类[推荐用]：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/singleton/inclass/SingletonIn.java\" target=\"_blank\" rel=\"external\">SingletonIn.java</a></li>\n<li>枚举[推荐用]：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/singleton/enums/SingletonEnum.java\" target=\"_blank\" rel=\"external\">SingletonEnum.java</a></li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-756908a3ca147593.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"单例设计模式.png\"></p>\n<h3 id=\"4-策略模式\"><a href=\"#4-策略模式\" class=\"headerlink\" title=\"4. 策略模式\"></a>4. 策略模式</h3><blockquote>\n<p>策略模式：定义了算法族，分别封装起来，让它们之间可相互替换，此模式让算法的变化独立于使用算法的客户。</p>\n</blockquote>\n<ul>\n<li>以创建游戏角色为例子：<ul>\n<li>最初的游戏角色的父类：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/strategy/old/Role.java\" target=\"_blank\" rel=\"external\">Role.java</a></li>\n<li>发现有重复代码后，重构后的父类：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/strategy/better/Role.java\" target=\"_blank\" rel=\"external\">Role.java</a></li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>1、封装变化（把可能变化的代码封装起来）</li>\n<li>2、多用组合，少用继承（我们使用组合的方式，为客户设置了算法）</li>\n<li>3、针对接口编程，不针对实现（对于Role类的设计完全的针对角色，和技能的实现没有关系）</li>\n</ul>\n</li>\n<li><p>最后测试：创建角色：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">RoleA roleA = <span class=\"keyword\">new</span> RoleA(<span class=\"string\">\"---A\"</span>);</div><div class=\"line\">roleA.setiDisplayBehavior(<span class=\"keyword\">new</span> DisplayYZ())</div><div class=\"line\">      .setiAttackBehavior(<span class=\"keyword\">new</span> AttackXL())</div><div class=\"line\">      .setiDefendBehavior(<span class=\"keyword\">new</span> DefendTMS())</div><div class=\"line\">      .setiRunBehavior(<span class=\"keyword\">new</span> RunJCTQ());</div><div class=\"line\">roleA.display();<span class=\"comment\">// 样子</span></div><div class=\"line\">roleA.attack();<span class=\"comment\">// 攻击</span></div><div class=\"line\">roleA.run();<span class=\"comment\">// 逃跑</span></div><div class=\"line\">roleA.defend();<span class=\"comment\">// 防御</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-适配器模式\"><a href=\"#5-适配器模式\" class=\"headerlink\" title=\"5. 适配器模式\"></a>5. 适配器模式</h3><blockquote>\n<p>定义：将一个类的接口转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以相互合作。这个定义还好，说适配器的功能就是把一个接口转成另一个接口。</p>\n</blockquote>\n<ul>\n<li>以充电器为实例: 手机充电器一般都是5V左右吧，咱天朝的家用交流电压220V，所以手机充电需要一个适配器（降压器）</li>\n<li>一部手机: <a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/adapter/Mobile.java\" target=\"_blank\" rel=\"external\">Mobile.java</a></li>\n<li>手机依赖一个提供5V电压的接口: <a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/adapter/V5Power.java\" target=\"_blank\" rel=\"external\">V5Power.java</a></li>\n<li>我们拥有的是220V家用交流电: <a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/adapter/V200Power.java\" target=\"_blank\" rel=\"external\">V220Power.java</a></li>\n<li><strong>适配器，完成220V转5V的作用</strong>：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/adapter/V5PowerAdapter.java\" target=\"_blank\" rel=\"external\">V5PowerAdapter.java</a></li>\n<li><p>最后测试：给手机冲个电：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mobile mobile = <span class=\"keyword\">new</span> Mobile();</div><div class=\"line\"> V5Power v5Power = <span class=\"keyword\">new</span> V5PowerAdapter(<span class=\"keyword\">new</span> V200Power());</div><div class=\"line\"> mobile.inputPower(v5Power);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"6-命令模式\"><a href=\"#6-命令模式\" class=\"headerlink\" title=\"6. 命令模式\"></a>6. 命令模式</h3><blockquote>\n<p>定义：将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。(简化: 将请求封装成对象，将动作请求者和动作执行者解耦。)</p>\n</blockquote>\n<ul>\n<li>需求：最近智能家电很火热，假设现在有电视、电脑、电灯等家电，现在需要你做个遥控器控制所有家电的开关，要求做到每个按钮对应的功能供用户个性化，对于新买入家电要有非常强的扩展性。</li>\n<li>1、家电的API：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/command/Door.java\" target=\"_blank\" rel=\"external\">Door.java</a></li>\n<li>2、把命令封装成类： <ul>\n<li>统一的命令接口：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/command/Command.java\" target=\"_blank\" rel=\"external\">Command.java</a></li>\n<li>家电实现该接口：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/command/DoorOpenCommand.java\" target=\"_blank\" rel=\"external\">DoorOpenCommand.java</a></li>\n</ul>\n</li>\n<li>3、遥控器：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/command/ControlPanel.java\" target=\"_blank\" rel=\"external\">ControlPanel.java</a></li>\n<li><p>4、定义一个命令，可以干一系列的事情：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/command/QuickCommand.java\" target=\"_blank\" rel=\"external\">QuickCommand.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">QuickCommand quickCloseCommand = <span class=\"keyword\">new</span> QuickCommand(<span class=\"keyword\">new</span> Command[]&#123;<span class=\"keyword\">new</span> LightOffCommand(light), <span class=\"keyword\">new</span> ComputerOffCommand(computer), <span class=\"keyword\">new</span> DoorCloseCommand(door)&#125;);</div><div class=\"line\">controlPanel.setCommands(<span class=\"number\">6</span>, quickOpenCommand);</div><div class=\"line\">controlPanel.keyPressed(<span class=\"number\">6</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>5、遥控器面板执行：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/command/CommandActivity.java\" target=\"_blank\" rel=\"external\">CommandActivity.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">controlPanel.setCommands(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> DoorOpenCommand(door));<span class=\"comment\">// 开门</span></div><div class=\"line\">controlPanel.keyPressed(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1354448-3e5bac8177b40d8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"命令模式\"></p>\n<h3 id=\"7-装饰者模式\"><a href=\"#7-装饰者模式\" class=\"headerlink\" title=\"7. 装饰者模式\"></a>7. 装饰者模式</h3><blockquote>\n<p>装饰者模式：若要扩展功能，装饰者提供了比集成更有弹性的替代方案，动态地将责任附加到对象上。</p>\n</blockquote>\n<ul>\n<li><p>先简单描述下装饰者模式发挥作用的地方，当我们设计好了一个类，我们需要给这个类添加一些辅助的功能，并且不希望改变这个类的代码，这时候就是装饰者模式大展雄威的时候了。这里还体现了一个<strong>原则：类应该对扩展开放，对修改关闭。</strong></p>\n</li>\n<li><p>需求：设计游戏的装备系统，基本要求，要可以计算出每种装备在镶嵌了各种宝石后的攻击力和描述：</p>\n</li>\n<li>1、装备的超类：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/decorator/IEquip.java\" target=\"_blank\" rel=\"external\">IEquip.java</a></li>\n<li>2、各个装备的实现类：<ul>\n<li>eg：<strong>武器</strong>的实现类: <a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/decorator/equip/ArmEquip.java\" target=\"_blank\" rel=\"external\">ArmEquip.java</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>3、装饰品的超类（装饰品也属于装备）：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/decorator/gem/IEuipDecotator.java\" target=\"_blank\" rel=\"external\">IEquipDecorator.java</a></li>\n<li><p>4、装饰品的实现类：</p>\n<ul>\n<li>eg：<strong>蓝宝石</strong>的实现类(可累加): <a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/decorator/gem/BlueGemDecotator.java\" target=\"_blank\" rel=\"external\">BlueGemDecorator.java</a> </li>\n</ul>\n</li>\n<li><p>5、最后测试：计算攻击力和查看描述：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Log.e(<span class=\"string\">\"---\"</span>, <span class=\"string\">\"一个镶嵌2颗红宝石,1颗蓝宝石的靴子: \"</span>);</div><div class=\"line\">   IEquip iEquip = <span class=\"keyword\">new</span> RedGemDecotator(<span class=\"keyword\">new</span> RedGemDecotator(<span class=\"keyword\">new</span> BlueGemDecotator(<span class=\"keyword\">new</span> ShoeEquip())));</div><div class=\"line\">   Log.e(<span class=\"string\">\"---\"</span>, <span class=\"string\">\"攻击力:\"</span> + iEquip.caculateAttack());</div><div class=\"line\">   Log.e(<span class=\"string\">\"---\"</span>, <span class=\"string\">\"描述语:\"</span> + iEquip.description());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"8-外观模式\"><a href=\"#8-外观模式\" class=\"headerlink\" title=\"8. 外观模式\"></a>8. 外观模式</h3><blockquote>\n<p>定义：提供一个统一的接口，用来访问子系统中的一群接口，外观定义了一个高层的接口，让子系统更容易使用。<strong>其实就是为了方便客户的使用，把一群操作，封装成一个方法。</strong></p>\n</blockquote>\n<ul>\n<li>需求：我比较喜欢看电影，于是买了投影仪、电脑、音响、设计了房间的灯光、买了爆米花机，然后我想看电影的时候，我需要一键观影和一键关闭。</li>\n<li>每个设备类的开关等操作：<ul>\n<li>eg: 爆米花机：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/facade/device/PopcornPopper.java\" target=\"_blank\" rel=\"external\">PopcornPopper.java</a></li>\n</ul>\n</li>\n<li><p>电影院类：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/facade/theater/HomeTheaterFacade.java\" target=\"_blank\" rel=\"external\">HomeTheaterFacade.java</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"> \t<span class=\"comment\">/**</span></div><div class=\"line\">     * 一键观影</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">watchMovie</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        computer.on();</div><div class=\"line\">        light.down();</div><div class=\"line\">        popcornPopper.on();</div><div class=\"line\">        popcornPopper.makePopcorn();</div><div class=\"line\">        projector.on();</div><div class=\"line\">        projector.open();</div><div class=\"line\">        player.on();</div><div class=\"line\">        player.make3DListener();</div><div class=\"line\">    &#125;</div><div class=\"line\">\t``` </div><div class=\"line\">- 最后测试：一键观影：</div><div class=\"line\">\t</div><div class=\"line\">\t```<span class=\"function\">java</span></div><div class=\"line\">\tnew <span class=\"title\">HomeTheaterFacade</span><span class=\"params\">(computer, light, player, popcornPopper, projector)</span>.<span class=\"title\">watchMovie</span><span class=\"params\">()</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"9-模板方法模式\"><a href=\"#9-模板方法模式\" class=\"headerlink\" title=\"9. 模板方法模式\"></a>9. 模板方法模式</h3><blockquote>\n<p>定义：定义了一个算法的骨架，而将一些步骤延迟到子类中，模版方法使得子类可以在不改变算法结构的情况下，重新定义算法的步骤。</p>\n</blockquote>\n<ul>\n<li>需求：简单描述一下：本公司有程序猿、测试、HR、项目经理等人，下面使用模版方法模式，记录下所有人员的上班情况</li>\n<li>模板方法模式中的三类角色<ul>\n<li>1、具体方法(Concrete Method)</li>\n<li>2、抽象方法(Abstract Method)</li>\n<li>3、钩子方法(Hook Method)</li>\n</ul>\n</li>\n<li><p>工人的超类：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/templatemethod/Worker.java\" target=\"_blank\" rel=\"external\">Worker.java</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 具体方法</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">workOneDay</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       Log.e(<span class=\"string\">\"workOneDay\"</span>, <span class=\"string\">\"-----------------work start----------------\"</span>);</div><div class=\"line\">       enterCompany();</div><div class=\"line\">       work();</div><div class=\"line\">       exitCompany();</div><div class=\"line\">       Log.e(<span class=\"string\">\"workOneDay\"</span>, <span class=\"string\">\"-----------------work end----------------\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">// 工作  抽象方法</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span>;</div><div class=\"line\">   <span class=\"comment\">// 钩子方法</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNeedPrintDate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exitCompany</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (isNeedPrintDate()) &#123;</div><div class=\"line\">           Log.e(<span class=\"string\">\"exitCompany\"</span>, <span class=\"string\">\"---\"</span> + <span class=\"keyword\">new</span> Date().toLocaleString() + <span class=\"string\">\"---&gt;\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       Log.e(<span class=\"string\">\"exitCompany\"</span>, name + <span class=\"string\">\"---离开公司\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>程序员实现类（可得知时间）：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/templatemethod/worker/ITWorker.java\" target=\"_blank\" rel=\"external\">ITWorker.java</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 重写父类的此方法,使可以查看离开公司时间</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNeedPrintDate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后测试：</p>\n<ul>\n<li><p>查看所有人员的工作情况：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">QAWorker qaWorker = <span class=\"keyword\">new</span> QAWorker(<span class=\"string\">\"测试人员\"</span>);</div><div class=\"line\">   qaWorker();</div><div class=\"line\">   HRWorker hrWorker = <span class=\"keyword\">new</span> HRWorker(<span class=\"string\">\"莉莉姐\"</span>);</div><div class=\"line\">   hrWorker.workOneDay();</div><div class=\"line\">   ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看程序猿离开公司的时间:</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ITWorker itWorker = <span class=\"keyword\">new</span> ITWorker(<span class=\"string\">\"jingbin\"</span>);</div><div class=\"line\">     itWorker.workOneDay();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-状态模式\"><a href=\"#10-状态模式\" class=\"headerlink\" title=\"10. 状态模式\"></a>10. 状态模式</h3><blockquote>\n<p>定义：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。</p>\n</blockquote>\n<ul>\n<li><p>定义又开始模糊了，理一下，当对象的内部状态改变时，它的行为跟随状态的改变而改变了，看起来好像重新初始化了一个类似的。</p>\n</li>\n<li><p>需求：已自动售货机为例（有已投币、未投币等状态和投币、投币等方法）</p>\n</li>\n<li>最初实现待改进的售货机：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/state/old/VendingMachine.java\" target=\"_blank\" rel=\"external\">VendingMachine.java</a></li>\n<li><p>改进后的售货机（更具有延展性）:<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/state/better/VendingMachineBetter.java\" target=\"_blank\" rel=\"external\">VendingMachineBetter.java</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 放钱</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      currentState.insertMoney();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 退钱</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">backMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      currentState.backMoney();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 转动曲柄</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnCrank</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      currentState.turnCrank();</div><div class=\"line\">      <span class=\"keyword\">if</span> (currentState == soldState || currentState == winnerState) &#123;</div><div class=\"line\">          currentState.dispense();<span class=\"comment\">//两种情况会出货</span></div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 出商品</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispense</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"VendingMachineBetter\"</span>, <span class=\"string\">\"---发出一件商品\"</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          count--;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 设置对应状态</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(State state)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.currentState = state;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>状态的接口：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/state/better/State.java\" target=\"_blank\" rel=\"external\">State.java</a></li>\n<li>对应状态的接口实现类：<ul>\n<li>eg: 中奖状态：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/state/better/WinnerState.java\" target=\"_blank\" rel=\"external\">WinnerState.java</a></li>\n<li>eg: 售卖状态：<a href=\"https://github.com/youlookwhat/DesignPattern/blob/master/app/src/main/java/com/example/jingbin/designpattern/state/better/SoldState.java\" target=\"_blank\" rel=\"external\">SoldState.java</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>改进后的售货机测试：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 初始化售货机,且里面有3个商品</span></div><div class=\"line\">  VendingMachineBetter machineBetter = <span class=\"keyword\">new</span> VendingMachineBetter(<span class=\"number\">3</span>);</div><div class=\"line\">  machineBetter.insertMoney();</div><div class=\"line\">  machineBetter.turnCrank();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://blog.csdn.net/lmj623565791/article/category/2206597\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lmj623565791/article/category/2206597</a></li>\n</ul>\n<h2 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h2><ul>\n<li><a href=\"http://blog.csdn.net/lmj623565791\" target=\"_blank\" rel=\"external\">CSDN：张鸿洋</a></li>\n<li><a href=\"http://blog.csdn.net/dmk877/article/details/50311791\" target=\"_blank\" rel=\"external\">CSDN：dmk877</a></li>\n</ul>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>感兴趣的小伙伴可以Star哦~</p>\n<p>GitHub：<strong><a href=\"https://github.com/youlookwhat/DesignPattern\" target=\"_blank\" rel=\"external\">DesignPattern</a></strong></p>\n","categories":["开源项目"],"tags":["开源项目"]},{"title":"MarkDown readme图片尺寸固定且居中","url":"http://jinbeen.com/2016/10/28/MarkDown-readme图片尺寸固定且居中/","content":"<blockquote>\n<p>GitHub地址：<a href=\"https://github.com/youlookwhat\" target=\"_blank\" rel=\"external\">https://github.com/youlookwhat</a><br>CSDN博客：<a href=\"http://blog.csdn.net/jingbin_\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jingbin_</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"首先看一下显示效果：\"><a href=\"#首先看一下显示效果：\" class=\"headerlink\" title=\"首先看一下显示效果：\"></a>首先看一下显示效果：</h3><p><img src=\"http://img.blog.csdn.net/20161028225556876\" alt=\"居中显示\"></p>\n<p>有时候为达到美好的排版方式，我们会有多种显示图片的需求，现在我们来依次试试</p>\n<hr>\n<h3 id=\"显示图片的方式有这样几种：\"><a href=\"#显示图片的方式有这样几种：\" class=\"headerlink\" title=\"显示图片的方式有这样几种：\"></a>显示图片的方式有这样几种：</h3><h4 id=\"1-引入HTML-格式如下：\"><a href=\"#1-引入HTML-格式如下：\" class=\"headerlink\" title=\"1.引入HTML,格式如下：\"></a>1.引入HTML,格式如下：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![](img_url)</div></pre></td></tr></table></figure>\n<p>“[]”里放的是图片描述文字。这样图片就会靠在左侧，大小也不由自己决定,例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片描述文字](http:<span class=\"comment\">//img.blog.csdn.net/20161028230559575)</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20161028230559575\" alt=\"图片描述文字\"></p>\n<h4 id=\"2-固定图片显示大小：\"><a href=\"#2-固定图片显示大小：\" class=\"headerlink\" title=\"2.固定图片显示大小：\"></a>2.固定图片显示大小：</h4><p>你是不是觉得以上的图片不是你想要的尺寸呢，没关系，你可以自定义尺寸：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img width=<span class=\"string\">\"150\"</span> height=<span class=\"string\">\"150\"</span> src=<span class=\"string\">\"http://img.blog.csdn.net/20161028230559575\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<p>分别在“width”和“height”设置你想要的宽高就好了，就成这样：<br><img width=\"150\" height=\"150\" src=\"http://img.blog.csdn.net/20161028230559575\"><br>你也可以加上描述文字就是这样：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"http://img.blog.csdn.net/20161028230559575\"</span> width=<span class=\"string\">\"150\"</span> height=<span class=\"string\">\"200\"</span> alt=<span class=\"string\">\"图片描述文字\"</span>/&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-固定图片显示大小且居中：\"><a href=\"#3-固定图片显示大小且居中：\" class=\"headerlink\" title=\"3.固定图片显示大小且居中：\"></a>3.固定图片显示大小且居中：</h4><p>这时候想到也许居中会更好，于是我们试试居中<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div align=center&gt;&lt;img width=\"150\" height=\"150\" src=\"http://img.blog.csdn.net/20161028230559575\"/&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>只要在外面包围div标签就好了，就是这样显示了：</p>\n<div align=\"center\"><img width=\"150\" height=\"150\" src=\"http://img.blog.csdn.net/20161028230559575\"></div>\n\n","categories":["markdown"],"tags":["markdown"]},{"title":"Mac Android开发环境变量的配置(java、sdk、ndk、gradle)","url":"http://jinbeen.com/2016/10/13/Mac-Android开发环境变量的配置-java、sdk、ndk、gradle/","content":"<p>很多文章说了mac下怎样配置环境变量的问题，但大都很杂，在此总结一下，目的是使Android开发者看一篇博客就可以配置好AndroidStudio开发下的环境变量。<br><a id=\"more\"></a></p>\n<p>楼主的<strong>JDK</strong>版本是：1.8.0_40；   <strong>AndroidStudio</strong>版本：2.2；  <strong>ndk</strong>版本：android-ndk-r10e</p>\n<p>1.打开terminal<br>2.然后输入</p>\n<blockquote>\n<p>vi .bash_profile      后按“e”进入编辑模式</p>\n</blockquote>\n<p>3.输入想要配置的环境变量(java、sdk、ndk、gradle)：</p>\n<blockquote>\n<p><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home</code><br><code>export PATH=$JAVA_HOME/bin:$PATH</code><br><code>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</code></p>\n<p><code>export ANDROID_HOME=/Users/jingbin/Documents/AndroidStudio/sdk</code><br><code>export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</code></p>\n<p><code>export PATH=$PATH:/Users/jingbin/Documents/AndroidStudio/ndk/android-ndk-r10e</code><br><code>export A_NDK_ROOT=/Users/jingbin/Documents/AndroidStudio/ndk/android-ndk-r10e</code></p>\n<p><code>export GRADLE_HOME=/Applications/Android\\ Studio\\ 2.app/Contents/gradle/gradle-2.14.1</code><br><code>export PATH=$PATH:$GRADLE_HOME/bin</code></p>\n</blockquote>\n<p>4.在vi编辑器使用</p>\n<blockquote>\n<p>esc<br>:wq<br>保存并退出(注意有“:”号)</p>\n</blockquote>\n<p>5.更新设置</p>\n<blockquote>\n<p>source .bash_profile</p>\n</blockquote>\n<p>6.检查对应配置是否成功</p>\n<blockquote>\n<p>echo $PATH（查看路径）<br>java -version<br>adb<br>ndk-build<br>gradle -version</p>\n</blockquote>\n","categories":["Android"],"tags":["Android Studio","Macbook Pro"]},{"title":"Linux与几种电脑系统的区别","url":"http://jinbeen.com/2016/04/16/Linux与几种电脑系统的区别/","content":"<blockquote>\n<p>Linux之父：”我之所以能够看得更远，是因为我站在巨人肩膀上的缘故。”如有不当，还请指正。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Unix\"><a href=\"#Unix\" class=\"headerlink\" title=\"Unix\"></a><a href=\"https://zh.wikipedia.org/wiki/UNIX\" target=\"_blank\" rel=\"external\">Unix</a></h2><blockquote>\n<p>创始人为肯·汤普逊、丹尼斯·里奇等。肯·汤普逊设计出了C语言，他的Unix的设计思想甚为宝贵。</p>\n</blockquote>\n<ul>\n<li>Unix的前身为Multics，贝尔实验室参与了这个操作系统的研发，但因为开发速度太慢，贝尔实验室决定放弃这个计划。贝尔实验室的工程师，汤普逊和里奇，在此时自行开发了Unix。</li>\n<li>Multics是由麻省理工学院，AT&amp;T贝尔实验室和通用电气合作进行的操作系统项目，被设计运行在GE-645大型主机上，但是由于整个目标过于庞大，糅合了太多的特性，Multics虽然发布了一些产品，但是性能都很低，AT&amp;T最终撤出了投入Multics项目的资源，中止这项合作计划。</li>\n</ul>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a><a href=\"https://zh.wikipedia.org/zh/Linux\" target=\"_blank\" rel=\"external\">Linux</a></h2><blockquote>\n<p>当时芬兰大学林纳斯·托瓦兹学生创造。在移动设备上广泛使用的<strong>Android操作系统</strong>就是创建在Linux内核之上。</p>\n</blockquote>\n<ul>\n<li>2005年，为了管理Linux内核的源代码，开发了<strong>Git</strong>。林纳斯·托瓦兹自嘲地取了这个名字“git”，该词源自英国俚语，意思大约是“混账”。</li>\n</ul>\n<h2 id=\"Linux与Unix的区别\"><a href=\"#Linux与Unix的区别\" class=\"headerlink\" title=\"Linux与Unix的区别\"></a>Linux与Unix的区别</h2><blockquote>\n<p>Linux是Unix的养子。</p>\n</blockquote>\n<ul>\n<li><p>硬件范围：</p>\n<ul>\n<li>Linux支持的硬件范围和商业Unix不一样。一般来说，商业Unix支持的硬件多一些，可是Linux支持的硬件也在不断扩大。突出的是，Linux至少和商用Unix一样稳定。</li>\n</ul>\n</li>\n<li><p>价格</p>\n<ul>\n<li>Linux是免费软件，用户可以从Internet网上下载。</li>\n<li>商业Unix的价值不应被贬低。除了软件本身的价格外，用户还需支付文档、售后支持和质保费。对于较大的机构，这些都很重要，但是PC机用户也许从中得不到什么好处。</li>\n</ul>\n</li>\n</ul>\n<p>-<strong>正是这样，这两种产品存在着严重的概念上和设计上的差别：Linux的目标是从头开始开发一个完整的Unix系统；386BSD的目标则是对现有的BSD做些修改，以适合80386系统。 </strong></p>\n<h2 id=\"Linux和Windows的区别\"><a href=\"#Linux和Windows的区别\" class=\"headerlink\" title=\"Linux和Windows的区别\"></a>Linux和Windows的区别</h2><blockquote>\n<p>和Linux一样，Windows系列是完全的多任务操作系统。(MS-DOS是单任务的操作系统)它们支持同样的用户接口、网络和安全性。</p>\n</blockquote>\n<ul>\n<li><p>Linux事实上是Unix的一种版本，而且来自Unix的贡献非常巨大。</p>\n</li>\n<li><p>是什么使得Unix如此重要？</p>\n<ul>\n<li>不仅在于对多用户机器来说，Unix是最流行的操作系统，而且在于它是免费软件的基础。在Internet上，大量免费软件都是针对Unix系统编写的。由于有众多的Unix厂商，所以Unix也有许多实现方法。没有一个单独的组织负责Unix的分发。现在，存在一股巨大的力量推动Unix社团以开放系统的形式走向标准化。另一方面Windows系列是专用系统，由开发操作系统的公司控制接口和设计。在这个意义上这种公司利润很高，因为它对程序设计和用户接口设计建立了严格的标准，和那些开放系统社团完全不一样。一些组织正在试图完成标准化Unix程序设计接口的任务。特别要指出的是，Linux完全兼容POSIX.1标准。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux-和-OS-X-的区别\"><a href=\"#Linux-和-OS-X-的区别\" class=\"headerlink\" title=\"Linux 和 OS X 的区别\"></a>Linux 和 OS X 的区别</h2><blockquote>\n<p>2001年新推出的OS X，结合BSD Unix、OpenStep和Mac OS 9的元素。它的最底层建基于Unix基础，其核心代码被称为Darwin，实行的是部分开放源代码。</p>\n</blockquote>\n<ul>\n<li>都是基于类Unix的，不过Mac OS X属于Unix的直接衍生产品，OSX的内核是基于FreeBSD的内核。</li>\n<li>都有开源部分，Linux自然不必说了，Mac OS X的底层——Darwin也是基于BSD协议开源的。</li>\n<li>Linux就是这样一个东西，除了内核的稳定版本，所有的东西都可以任意更改和编写，并组成不同口味的发行包，只要源码公开，谁都可以从中获益，甚至包括收费发行。</li>\n<li>二者的差别在系统架构上实际不大，都是类UNIX内核和GUI，但一个封闭一个开放。注意MACOSX也由开放版本，符合GNU。</li>\n</ul>\n<h2 id=\"Linux与其他操作系统的区别\"><a href=\"#Linux与其他操作系统的区别\" class=\"headerlink\" title=\"Linux与其他操作系统的区别\"></a>Linux与其他操作系统的区别</h2><ul>\n<li>Linux可以与MS-DOS、OS/2、Windows等其他操作系统共存于同一台机器上。它们均为操作系统，具有一些共性，但是互相之间各有特色，有所区别。</li>\n<li>目前运行在PC机上的操作系统主要有Microsoft的MS-DOS、Windows、Windows NT、IBM的OS/2等。</li>\n<li>早期的PC机用户普遍使用MS-DOS，因为这种操作系统对机器的硬件配置要求不高，而随着计算机硬件技术的飞速发展，硬件设备价格越来越低，人们可以相对容易地提高计算机的硬件配置，于是现在开始使用Windows、Windows NT等具有图形界面的操作系统。</li>\n</ul>\n<h3 id=\"a-Linux与MS－DOS之间\"><a href=\"#a-Linux与MS－DOS之间\" class=\"headerlink\" title=\"a.Linux与MS－DOS之间:\"></a>a.Linux与MS－DOS之间:</h3><ul>\n<li>Linux可以直接访问计算机内的所有可用内存，提供完整的Unix接口。而MS-DOS只支持部分Unix的接口。</li>\n<li>就使用<strong>费用</strong>而言，Linux和MS-DOS是两种完全不同的实体。与其他商业操作系统相比，MS-DOS价格比较便宜，而且在PC机用户中有很大的占有率。Linux是免费的，用户可以从internet上或者其他途径获得它的版本，而且可以任意使用，不用考虑费用问题。</li>\n<li>就<strong>操作系统</strong>的功能来说，MS-DOS是单任务的操作系统，一旦用户运行了一个MS-DOS的应用程序，它就独占了系统的资源，用户不可能再同时运行其他应用程序。而Linux是多任务的操作系统，用户可以同时运行多个应用程序。 </li>\n</ul>\n<h3 id=\"b-Linux与OS-2、Windows、Windows-NT之间的区别\"><a href=\"#b-Linux与OS-2、Windows、Windows-NT之间的区别\" class=\"headerlink\" title=\"b.Linux与OS/2、Windows、Windows NT之间的区别\"></a>b.Linux与OS/2、Windows、Windows NT之间的区别</h3><ul>\n<li>从<strong>发展的背景</strong>看，Linux与其他操作系统的区别是，Linux是从一个比较成熟的操作系统发展而来的，而其他操作系统，如Windows NT等，都是自成体系，无对应的相依托的操作系统。Linux做为Unix的一个克隆，同样会得到相应的支持和帮助，直接拥有Unix在用户中建立的牢固的地位。</li>\n<li>从<strong>使用费用</strong>上看，Linux与其他操作系统的区别在于Linux是一种开放、免费的操作系统，而其他操作系统都是封闭的系统，需要有偿使用。OS/2和Windows NT等操作系统是具有版权的产品，其接口和设计均由某一公司控制，而且只有这些公司才有权实现其设计，它们是在封闭的环境下发展的。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p>[1]:  <a href=\"http://zhidao.baidu.com/question/12547678.html\" target=\"_blank\">LINUX与UNIX区别在哪</a></p>\n</li>\n<li><p>[2]:  <a href=\"http://bbs.feng.com/read-htm-tid-6209622.html \" target=\"_blank\">Unix 起源及详细历程</a></p>\n</li>\n<li><p>[3]: <a href=\"https://www.zhihu.com/question/19653283 \" target=\"_blank\">Linux 和 OS X 的具体差异有哪些？</a></p>\n</li>\n</ul>\n","categories":["系统"],"tags":["系统"]},{"title":"","url":"http://jinbeen.com/music.html","content":"<!DOCTYPE html>  \n <html> \n  <head>  \n   <meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\">  \n    </head>  \n    <title>2</title>\n     <body>   \n        <div>  \n            <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"100%\" height=\"460\" src=\"https://music.163.com/outchain/player?type=0&id=108250019&auto=10&height=430\"></iframe></div> \n          \n        <hr>  \n     </body>  \n      </html> ","categories":[],"tags":[]},{"title":"","url":"http://jinbeen.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://jinbeen.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"About me","url":"http://jinbeen.com/about/index.html","content":"<!-- ![image.png](https://upload-images.jianshu.io/upload_images/1354448-8058fb326cd0a7d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) -->\n<!--<object height=\"100\" width=\"100%\" data=\"https://www.android.com/swf/conveyor.swf\" type=\"application/x-shockwave-flash\">\n<param name=\"data\" value=\"https://www.android.com/swf/conveyor.swf\">\n<param name=\"src\" value=\"https://www.android.com/swf/conveyor.swf\">\n</object>-->\n<!--<div>  \n   <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"340\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=66272&auto=1&width=320&height=66\"></iframe>\n\n   <object width=\"340\" height=\"86\" data=\"https://music.163.com/style/swf/widget.swf?sid= 66272&type=2&auto=0&width=320&height=66\" type=\"application/x-shockwave-flash\"></object>\n</div>-->\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>　　我叫景彬<br>　　湖北人，现居湖北武汉<br>　　Android资深开发工程师，持续学习中；<br>　　书籍｜电影｜健身｜技术｜开源｜写作</p>\n<hr>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p>　　QQ：770413277<br>　　微信：jingbin_</p>\n<hr>\n<p>　　</p>\n","categories":[],"tags":[]},{"title":"search","url":"http://jinbeen.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://jinbeen.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://jinbeen.com/tags/index.html","content":"","categories":[],"tags":[]}]